== TEST (2019-04-10 22:37:58) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if ( preco>pagamento):
	mensagem="falta x"
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:39:03) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if ( preco>pagamento):
	mensagem="falta x"
else:
	mensagem="troco de y"
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:39:31) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if ( preco>pagamento):
	mensagem="falta x"
else:
	mensagem="troco de y"
print( mensagem)
-- OUTPUT:
falta x
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 22:39:38) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if ( preco>pagamento):
	mensagem="falta x"
else:
	mensagem="troco de y"
print( mensagem)
-- EXECUTION TIME:
0.139698
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta x
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
troco de y
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
troco de y
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:41:04) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if ( preco>pagamento):
	mensagem="falta x"
else:
	mensagem="troco de y"
print( mensagem)
-- OUTPUT:
falta x
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 00:01:12) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if ( preco>pagamento):
	mensagem="valta o valor"
else:
	mensagem="troco de y"
print( mensagem)
-- EXECUTION TIME:
0.141645
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
valta o valor
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
troco de y
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
troco de y
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 00:02:59) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if ( preco>pagamento):
	mensagem="valta o valor"
else:
	mensagem="troco de y"
print( mensagem)
-- OUTPUT:
valta o valor
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 00:03:56) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if ( preco>pagamento):
	mensagem="falta o valor"
else:
	mensagem="troco de 40"
print( mensagem)
-- OUTPUT:
falta o valor
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 00:04:07) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if ( preco>pagamento):
	mensagem="falta o valor"
else:
	mensagem="troco de 40"
print( mensagem)
-- EXECUTION TIME:
0.203714
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta o valor
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
troco de 40
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
troco de 40
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 10:16:56) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if ( preco>pagamento):
	x= pagamento - preco
	round()
else:
	mensagem="troco de y"
print( mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    round()
TypeError: Required argument 'number' (pos 1) not found
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 10:17:08) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if ( preco>pagamento):
	x= pagamento - preco
	round()
else:
	mensagem="troco de y"
print( mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    round()
TypeError: Required argument 'number' (pos 1) not found
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 10:18:01) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if ( preco>pagamento):
	x= pagamento - preco
	round(preco, 2)
	
else:
	mensagem="troco de y"
print( mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print( mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 10:18:36) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if ( preco>pagamento):
	x= pagamento - preco
	round(preco, 2)
	print(x)
else:
	mensagem="troco de y"
print( mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print( mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 10:19:06) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if ( preco>pagamento):
	x= pagamento - preco

else:

-- ERROR:
File "XXXX", line 8
    
         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 10:19:16) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if ( preco>pagamento):
	x= pagamento - preco

else:
-- ERROR:
File "XXXX", line 8
    
         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 10:19:23) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if ( preco>pagamento):
	x= pagamento - preco

-- ERROR:
File "XXXX", line 8
    
         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:32:57) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=preco-pagamento
y=pagamento-preco
if ( preco>pagamento):
	mensagem="falta x"
	print(round(mensagem,2))
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round(mensagem,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:33:27) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=preco-pagamento
y=pagamento-preco
if ( preco>pagamento):
	mensagem="falta x"
print(round(mensagem,2))
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round(mensagem,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:34:42) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=preco-pagamento
y=pagamento-preco
if ( preco>pagamento):
	mensagem="falta x"
else:
	mensagem="falta y"
print(round(mensagem,2))
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(mensagem,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:43:06) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if (x>=0):
	preco-pagamento=x
	print(round(x, 2))
	
	
	
	


-- ERROR:
File "XXXX", line 5
    preco-pagamento=x
    ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:43:42) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if (x>=0):
	x=pagamento-preco
	print(round(x, 2))
	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if (x>=0):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:46:20) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco

if (x>=0):
	mensagem="falta x"
	print(round(x, 2))
	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if (x>=0):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:46:56) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco

if (x>=0):
	mensagem="falta x"
	print(round(x, 2))
else:
	mensagem="falta y"
	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if (x>=0):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 18:47:11) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco

if (x>=0):
	mensagem="falta x"
	print(round(x, 2))
else:
	mensagem="falta y"
	
	
	
	


-- EXECUTION TIME:
0.143648
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:

-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:47:15) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco

if (x>=0):
	mensagem="falta x"
	print(round(x, 2))
else:
	mensagem="falta y"
	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if (x>=0):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:48:05) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco
y=
if (x>=0):
	mensagem="falta x"
	print(round(x, 2))
else:
	mensagem="falta y"
print(round(mensagem, 2))

	
	
	
	


-- ERROR:
File "XXXX", line 4
    y=
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:48:11) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco
if (x>=0):
	mensagem="falta x"
	print(round(x, 2))
else:
	mensagem="falta y"
print(round(mensagem, 2))

	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:48:56) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco
if (x>=0):
	mensagem="falta x"

else:
	mensagem="falta y"
print(round(mensagem, 2))

	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:50:21) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
troco=pagamento-preco
if (troco>=0):
	mensagem="falta x"
	

	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:50:55) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
troco=pagamento-preco
if (troco>=0):
	mensagem="falta x"
	print(mensagem)
	

	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:51:43) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
troco=pagamento-preco
if (troco>=0):
	mensagem="falta x"
	print(mensagem)
else:
	mensagem:"falta y"
	

	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:52:01) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
troco=pagamento-preco
if (troco>=0):
	mensagem="falta x"
	print(mensagem)
else:
	mensagem="falta y"
	print(mensagem)
	

	
	
	
	


-- OUTPUT:
falta y
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 18:52:14) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
troco=pagamento-preco
if (troco>=0):
	mensagem="falta x"
	print(mensagem)
else:
	mensagem="falta y"
	print(mensagem)
	

	
	
	
	


-- EXECUTION TIME:
0.123544
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta y
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
falta x
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
falta x
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:52:52) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
troco=pagamento-preco
if (troco>=0):
	mensagem="falta x"
	print(input(round(mensagem)))
else:
	mensagem="falta y"
	print(mensagem)
	

	
	
	
	


-- OUTPUT:
falta y
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:55:31) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if(x>=0):
	x=preco-pagamento
	print(x)
	

	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(x>=0):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:56:01) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if(preco>=0):
	x=preco-pagamento
	print(x)
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:57:04) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))

if(preco>=0):
	x=preco-pagamento
	
else:
	x=pagamento-preco
print(x)	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:01:33) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=preco-pagamento
y=pagamento-preco
if(preco>pagamento):
	
	
else:
	x=pagamento-preco
print(x)	
	

	
	
	
	


-- ERROR:
File "XXXX", line 8
    else:
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:01:35) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=preco-pagamento
y=pagamento-preco
if(preco>pagamento):
	
	
else:
	x=pagamento-preco
print(x)	
	

	
	
	
	


-- ERROR:
File "XXXX", line 8
    else:
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:02:21) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=preco-pagamento
y=pagamento-preco
if(preco>pagamento):
	mensagem=x
	
else:
	mensagem=y
print(x)	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:02:37) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=preco-pagamento
y=pagamento-preco
if(preco>pagamento):
	mensagem=x
	
else:
	mensagem=y
print(x)	
	

	
	
	
	


-- EXECUTION TIME:
0.12126
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
-28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:03:09) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco
y=preco-pagamento
if(preco>pagamento):
	mensagem=x
	
else:
	mensagem=y
print(x)	
	

	
	
	
	


-- OUTPUT:
-26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:03:16) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco
y=preco-pagamento
if(preco>pagamento):
	mensagem=x
	
else:
	mensagem=y
print(x)	
	

	
	
	
	


-- EXECUTION TIME:
0.176134
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
-26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:03:49) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco
y=preco-pagamento
if(preco>pagamento):
	mensagem=x
	
else:
	mensagem=y
print(round(x,y,2))	
	

	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(round(x,y,2))	
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:04:32) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco
y=preco-pagamento
if(preco>pagamento):
	mensagem=x
	
else:
	mensagem=y
print(round(x,2))	
	

	
	
	
	


-- OUTPUT:
-26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:04:42) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
x=pagamento-preco
y=preco-pagamento
if(preco>pagamento):
	mensagem=x
	
else:
	mensagem=y
print(round(x,2))	
	

	
	
	
	


-- EXECUTION TIME:
0.240894
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
-26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:07:30) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	
	
	

	
	
	
	


-- OUTPUT:
-26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:07:57) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	print(x)
	
	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:08:11) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	print(x,2)
	
	
	

	
	
	
	


-- OUTPUT:
26.0 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:09:07) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
	
	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:10:32) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
else:
	x=pagamento-preco
	round(x, 2)
	
	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:11:10) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
else:
	x=pagamento-preco
	round(x, 2)
	print(round(x, 2))
	
	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:11:35) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
else:
	x=pagamento-preco
	round(x, 2)
	print(round(x, 2))
	
	
	

	
	
	
	


-- EXECUTION TIME:
0.179926
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:12:26) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
else:
	x=pagamento-preco
	round(x, 2)
	print(round(x, 2))
print(x)
	
	
	

	
	
	
	


-- OUTPUT:
26.0
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:12:59) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
else:
	y=pagamento-preco
	round(x, 2)
	print(round(x, 2))

	
	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:13:13) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
else:
	y=pagamento-preco
	round(y, 2)
	print(round(x, 2))

	
	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:13:31) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
else:
	y=pagamento-preco
	round(y, 2)
	print(round(y, 2))

	
	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:13:44) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
else:
	y=pagamento-preco
	round(y, 2)
	print(round(y, 2))

	
	
	

	
	
	
	


-- EXECUTION TIME:
0.19826
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:14:41) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
else:
	y=pagamento-preco
	round(y, 2)
	print(round(y, 2))
print(x,y, 2)

	
	
	

	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(x,y, 2)
NameError: name 'y' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:14:59) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
else:
	y=pagamento-preco
	round(y, 2)
	print(round(y, 2))
print(round(x,y, 2))

	
	
	

	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(x,y, 2))
NameError: name 'y' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:16:37) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	mensagem="leia x"
	round(x, 2)
	print(round(x, 2))
else:
	y=pagamento-preco
	mensagem="troco y"
	round(mensagem, 2)
	print(round(y, 2))

	
	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:17:06) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	mensagem="leia x"
	round(mensagem, 2)
	print(round(mensagem, 2))
else:
	y=pagamento-preco
	mensagem="troco y"
	round(mensagem, 2)
	print(round(mensagem, 2))

	
	
	

	
	
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    round(mensagem, 2)
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:19:32) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print(round(x, 2))
else:
	y=pagamento-preco
	round(y, 2)
	print(round(y, 2))

	
	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:20:23) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print((x, 2))
else:
	y=pagamento-preco
	round(y, 2)
	print((y, 2))

	
	
	

	
	
	
	


-- OUTPUT:
(26.0, 2)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:20:40) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print((x, 2))
else:
	y=pagamento-preco
	round(y, 2)
	print(y, 2)

	
	
	

	
	
	
	


-- OUTPUT:
(26.0, 2)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:20:55) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	round(x, 2)
	print((x, 2))
else:
	y=pagamento-preco
	round(y, 2)
	print(y, 2)

	
	
	

	
	
	
	


-- EXECUTION TIME:
0.132512
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
(26.0, 2)
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
28.0 2
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
0.0 2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:21:36) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	print(round(x, 2))
else:
	y=pagamento-preco
	print(round(y, 2))

	
	
	

	
	
	
	


-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:21:56) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	print(round(x, 2))
else:
	y=pagamento-preco
	print(round(y, 2))

	
	
	

	
	
	
	


-- EXECUTION TIME:
0.136431
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:22:11) 
-- CODE:
preco=int(input("leia o preco:"))
pagamento=int(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	print(round(x, 2))
else:
	y=pagamento-preco
	print(round(y, 2))

	
	
	

	
	
	
	


-- EXECUTION TIME:
0.164152
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1643/2447/main.py", line 1, in <module>
    preco=int(input())
ValueError: invalid literal for int() with base 10: '38.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:29:18) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	x1=round(x,2)
	print("falta", x1)
else:
	y=pagamento-preco
	y1=round(y, 2)
	print("troco de",y1)

	
	
	

	
	
	
	


-- OUTPUT:
falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:29:25) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	x1=round(x,2)
	print("falta", x1)
else:
	y=pagamento-preco
	y1=round(y, 2)
	print("troco de",y1)

	
	
	

	
	
	
	


-- EXECUTION TIME:
0.151293
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
troco de 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:30:45) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	x1=round(x,2)
	print("falta", x1)
else:
	y=pagamento-preco
	y1=round(y,2)
	print("troco de",y1)

	
	
	

	
	
	
	


-- OUTPUT:
falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:31:02) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	x1=round(x,2)
	print("falta", x1)
else:
	y=pagamento-preco
	y1=round(y,2)
	print("troco de",y1)

	
	
	

	
	
	
	


-- EXECUTION TIME:
0.133412
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
troco de 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:31:10) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if(preco>pagamento):
	x=preco-pagamento
	x1=round(x,2)
	print("falta", x1)
else:
	y=pagamento-preco
	y1=round(y,2)
	print("troco de",y1)

	
	
	

	
	
	
	


-- OUTPUT:
falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:33:47) 
-- CODE:
preco=float(input("leia o preco:"))
pagamento=float(input("leia o pagamento:"))
if (preco>pagamento):
	x=preco-pagamento
	x1=round(x,2)
	print("Falta", x1)
else:
	y=pagamento-preco
	y1=round(y,2)
	print("Troco de",y1)

	
	
	

	
	
	
	


-- EXECUTION TIME:
0.174335
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de 0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
