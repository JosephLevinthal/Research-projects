== TEST (2019-03-28 13:42:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("numeros em ordem aleatoria q quero em ordem crescentes: "))
y= int(input("numeros aleatorios que quero em ordem decrescente: "))
z= int(input(""))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 13:42:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("numeros em ordem aleatoria q quero em ordem crescentes: "))
y= int(input("numeros aleatorios que quero em ordem decrescente: "))
z= int(input(""))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 13:42:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("numeros em ordem aleatoria q quero em ordem crescentes: "))
y= int(input("numeros aleatorios que quero em ordem decrescente: "))
z= int(input(""))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 13:42:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("numeros em ordem aleatoria q quero em ordem crescentes: "))
y= int(input("numeros aleatorios que quero em ordem decrescente: "))
print(x)
print(y)
-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 13:42:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("numeros em ordem aleatoria q quero em ordem crescentes: "))
y= int(input("numeros aleatorios que quero em ordem decrescente: "))
print(x)
print(y)
-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 13:51:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("numeros em ordem aleatoria q quero em ordem crescentes: 3, 458, 412"))
y= int(input("numeros aleatorios que quero em ordem decrescente: 3, 458, 412 "))
print(min(x))
print(min(y))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(min(x))
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 13:56:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input(2,3,6))
y= int(input(2,3,6))
print(min(x))
print(min(y))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x= int(input(2,3,6))
TypeError: input expected at most 1 arguments, got 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 13:58:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input(2))
y= int(input(5))
z- int(input(7))
print(min(x,y,z))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    z- int(input(7))
NameError: name 'z' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 14:00:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input(2))
y= int(input(5))
z- int(input(7))
print(min(x,y,z))
print(max(x,y,z))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    z- int(input(7))
NameError: name 'z' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 14:11:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input())
y= int(input())
z- int(input())
print(min())
print(max())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    z- int(input())
NameError: name 'z' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 14:15:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("2,4,6"))
y= int(input("2,4,6"))
z= int(input(2+4+6))
print(min(x))
print(max(y))
print(2+4+6-min(x)-max(y))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(min(x))
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 14:22:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("numeros aleatorios: "))
print(min(x))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(min(x))
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 14:24:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("numeros aleatorios: "))
print(min(x))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(min(x))
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:19:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("numero aleatorio 1: "))
y= int(input("numero aleatorio 2: "))
z= int(input("numero aleatorio 3: "))
print(min(x,y,z))
print(x+y+z-min(x,y,z)-max(x,y,z))
print(max(x,y,z))
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:19:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("numero aleatorio 1: "))
y= int(input("numero aleatorio 2: "))
z= int(input("numero aleatorio 3: "))
print(min(x,y,z))
print(x+y+z-min(x,y,z)-max(x,y,z))
print(max(x,y,z))
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 16:20:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input("numero aleatorio 1: "))
y= int(input("numero aleatorio 2: "))
z= int(input("numero aleatorio 3: "))
print(min(x,y,z))
print(x+y+z-min(x,y,z)-max(x,y,z))
print(max(x,y,z))
-- EXECUTION TIME:
0.215137
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
