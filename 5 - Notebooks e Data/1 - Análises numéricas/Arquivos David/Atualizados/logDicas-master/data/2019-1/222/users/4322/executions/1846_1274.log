== TEST (2019-06-24 18:42:04) 
-- CODE:
from numpy import*
from numpy.linalg import*
N = int(input("dimensao da matriz: ")
m = zeros(N,N), dtype=int
for i in range(N):
	for j in range(N):
		  if(i < j):
		  	m[i,j] = i + 1
		  else:
		  	m[i,j] = j + 1
print(m)
-- ERROR:
File "XXXX", line 4
    m = zeros(N,N), dtype=int
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-24 18:42:11) 
-- CODE:
from numpy import*
from numpy.linalg import*
N = int(input("dimensao da matriz: ")
m = zeros(N,N), dtype
for i in range(N):
	for j in range(N):
		  if(i < j):
		  	m[i,j] = i + 1
		  else:
		  	m[i,j] = j + 1
print(m)
-- ERROR:
File "XXXX", line 4
    m = zeros(N,N), dtype
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-24 18:42:31) 
-- CODE:
from numpy import*
from numpy.linalg import*
N = int(input("dimensao da matriz: ")
m = zeros(N), dtype
for i in range(N):
	for j in range(N):
		  if(i < j):
		  	m[i,j] = i + 1
		  else:
		  	m[i,j] = j + 1
print(m)
-- ERROR:
File "XXXX", line 4
    m = zeros(N), dtype
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-24 18:42:36) 
-- CODE:
from numpy import*
from numpy.linalg import*
N = int(input("dimensao da matriz: ")
m = zeros(n.n), dtype
for i in range(N):
	for j in range(N):
		  if(i < j):
		  	m[i,j] = i + 1
		  else:
		  	m[i,j] = j + 1
print(m)
-- ERROR:
File "XXXX", line 4
    m = zeros(n.n), dtype
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-24 18:43:27) 
-- CODE:
from numpy import*
from numpy.linalg import*
N = int(input("dimensao da matriz: ")
m = (zeros(N,N), dtype=int)
for i in range(N):
	for j in range(N):
		  if(i < j):
		  	m[i,j] = i + 1
		  else:
		  	m[i,j] = j + 1
print(m)
-- ERROR:
File "XXXX", line 4
    m = (zeros(N,N), dtype=int)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-24 18:45:01) 
-- CODE:
from numpy import*
from numpy.linalg import*
N = int(input("dimensao da matriz: ")
m = zeros((N,N), dtype=int)
for i in range(N):
	for j in range(N):
		  if(i < j):
		  	m[i,j] = i + 1
		  else:
		  	m[i,j] = j + 1
print(m)
-- ERROR:
File "XXXX", line 4
    m = zeros((N,N), dtype=int)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-24 18:46:31) 
-- CODE:
from numpy import*
from numpy.linalg import*
N = int(input("dimensao da matriz: ")
m = zeros((N,N), dtype=int)
for i in range(N):
	for j in range(N):
		if(i < j):
			m[i,j] = i + 1
		else:
			m[i,j] = j + 1
print(m)
-- ERROR:
File "XXXX", line 4
    m = zeros((N,N), dtype=int)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-24 18:47:02) 
-- CODE:
from numpy import*
from numpy.linalg import*
N = int(input("dimensao da matriz: ")
m = zeros((N, N), dtype=int)
for i in range(N):
	for j in range(N):
		if(i < j):
			m[i,j] = i + 1
		else:
			m[i,j] = j + 1
print(m)
-- ERROR:
File "XXXX", line 4
    m = zeros((N, N), dtype=int)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-24 18:53:57) 
-- CODE:
from numpy import*
from numpy.linalg import*
N = int(input("dimensao da matriz: ")
m = zeros((N, N), dtype=int)
for i in range(N):
	for j in range(N):
		if(i < j):
			m[i,j] = i + 1
		else:
			m[i,j] = j + 1
print(m)
-- ERROR:
File "XXXX", line 4
    m = zeros((N, N), dtype=int)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-26 12:44:08) 
-- CODE:
from numpy import *
from numpy.linalg import *
n=int(input("numeros: "))

m=zeros((n,n), dtype=int)
for i in range(n):
	for j in range(n):
		if (i<j):
			m[i,j]=i+1
		else:
			m[i,j]=j+1
print(m)
	
-- EXECUTION TIME:
1.03653
-- TEST CASE 1:
---- input:
3
---- correct output:
[[1 1 1]
 [1 2 2]
 [1 2 3]]
---- user output:
[[1 1 1]
 [1 2 2]
 [1 2 3]]
-- TEST CASE 2:
---- input:
8
---- correct output:
[[1 1 1 1 1 1 1 1]
 [1 2 2 2 2 2 2 2]
 [1 2 3 3 3 3 3 3]
 [1 2 3 4 4 4 4 4]
 [1 2 3 4 5 5 5 5]
 [1 2 3 4 5 6 6 6]
 [1 2 3 4 5 6 7 7]
 [1 2 3 4 5 6 7 8]]
---- user output:
[[1 1 1 1 1 1 1 1]
 [1 2 2 2 2 2 2 2]
 [1 2 3 3 3 3 3 3]
 [1 2 3 4 4 4 4 4]
 [1 2 3 4 5 5 5 5]
 [1 2 3 4 5 6 6 6]
 [1 2 3 4 5 6 7 7]
 [1 2 3 4 5 6 7 8]]
-- TEST CASE 3:
---- input:
1
---- correct output:
[[1]]
---- user output:
[[1]]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
