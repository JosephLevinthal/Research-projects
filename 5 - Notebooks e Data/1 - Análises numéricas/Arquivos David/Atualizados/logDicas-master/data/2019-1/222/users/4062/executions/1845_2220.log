== SUBMITION (2019-06-26 14:51:59) 
-- CODE:
from numpy import *

matriz = array(eval(input("Pagamentos: ")))
linhas = shape(matriz)[0]
colunas = shape(matriz)[1]

for i in range(linhas):
	print(max(matriz[i, :]))
-- EXECUTION TIME:
1.23143
-- TEST CASE 1:
---- input:
[[34.5,67.8,89.7,56.4,65.7,78.9,81.2],[99.9,67.8,87.6,45.4,12.3,45.5,23.7],[27.5,93.1,45.9,47.3,19.2,76.5,49.3]]
---- correct output:
89.7
99.9
93.1
---- user output:
89.7
99.9
93.1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-26 14:52:39) 
-- CODE:
from numpy import *

m= array(eval(input("Pagamentos: ")))
l = shape(m)[0]
c = shape(ma)[1]

for i in range(l):
	print(max(mz[i, :]))
-- EXECUTION TIME:
0.913893
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1845/2220/main.py", line 5, in <module>
    c = shape(ma)[1]
TypeError: 'function' object is not subscriptable

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-26 14:52:43) 
-- CODE:
from numpy import *

m= array(eval(input("Pagamentos: ")))
l = shape(m)[0]
c = shape(ma)[1]

for i in range(l):
	print(max(m[i, :]))
-- EXECUTION TIME:
1.11564
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1845/2220/main.py", line 5, in <module>
    c = shape(ma)[1]
TypeError: 'function' object is not subscriptable

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-26 14:52:50) 
-- CODE:
from numpy import *

m= array(eval(input("Pagamentos: ")))
l = shape(m)[0]
c = shape(ma)[1]

for i in range(l):
	print(max(m[i, :]))
-- EXECUTION TIME:
0.992614
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1845/2220/main.py", line 5, in <module>
    c = shape(ma)[1]
TypeError: 'function' object is not subscriptable

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-26 14:52:57) 
-- CODE:
from numpy import *

m= array(eval(input("Pagamentos: ")))
l = shape(m)[0]
c = shape(m)[1]

for i in range(l):
	print(max(m[i, :]))
-- EXECUTION TIME:
1.20426
-- TEST CASE 1:
---- input:
[[34.5,67.8,89.7,56.4,65.7,78.9,81.2],[99.9,67.8,87.6,45.4,12.3,45.5,23.7],[27.5,93.1,45.9,47.3,19.2,76.5,49.3]]
---- correct output:
89.7
99.9
93.1
---- user output:
89.7
99.9
93.1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
