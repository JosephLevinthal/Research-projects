== TEST (2019-03-21 12:34:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(1,2,3))

print(max(x))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input(1,2,3))
TypeError: input expected at most 1 arguments, got 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:34:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(1,2,3))

print(max(x))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input(1,2,3))
TypeError: input expected at most 1 arguments, got 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:35:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(na:))
y = int(input(nb:))
z = int(input(nc:))

print(max(x))
-- ERROR:
File "XXXX", line 5
    x = int(input(na:))
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:35:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input(nb:))
z = int(input(nc:))

print(max(x))
-- ERROR:
File "XXXX", line 6
    y = int(input(nb:))
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:35:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(max(x))
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:36:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:36:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:37:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:39:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-2-6)
-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:39:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-2-6)
-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:40:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-x-y)
-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:41:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))

-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:41:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))

-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:53:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

max(x,y,z)
min(x,y,z)

-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:53:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
min(x,y,z)

-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:53:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))

-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:55:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
print(x+y+z)

-- OUTPUT:
10
-2
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:55:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
print(x+y+z)

-- OUTPUT:
10
-2
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:57:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
print(x+y+z)-z-x

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(x+y+z)-z-x
TypeError: unsupported operand type(s) for -: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:57:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-z-x)

-- OUTPUT:
10
-2
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 12:58:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-z-x)

-- EXECUTION TIME:
0.208704
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:58:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-z-x)

-- OUTPUT:
10
-2
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 13:02:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-z-x)

-- OUTPUT:
10
-2
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 13:03:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(min(x,y,z))
print(max(x,y,z))
print(x+y+z-z-x)

-- OUTPUT:
-2
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 13:04:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(min(x,y,z))
print(max(x,y,z))
print(x+y+z-y-x)

-- OUTPUT:
-2
10
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 13:05:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(min(x,y,z))
print(x+y+z-y-x)
print(max(x,y,z))
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 13:05:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(min(x,y,z))
print(x+y+z-y-x)
print(max(x,y,z))
-- EXECUTION TIME:
0.195286
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 13:11:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(min(x,y,z))
print(x+y+z-y-x)
print(max(x,y,z))
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 13:12:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(min(x,y,z))
print(x+y+z-y-x)
print(max(x,y,z))
-- EXECUTION TIME:
0.175202
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 23:20:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(min(x,y,z))
print(x+y+z-y-x)
print(max(x,y,z))
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 23:20:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("na:"))
y = int(input("nb:"))
z = int(input("nc:"))

print(min(x,y,z))
print(x+y+z-y-x)
print(max(x,y,z))
-- EXECUTION TIME:
0.196641
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
