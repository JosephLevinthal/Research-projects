== TEST (2019-04-22 18:58:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
if((x != y) and (y != z) and (z != x)):
print("escaleno")
else:
if((x != y) or(y != z)):
print("isosceles")  
else:
print("equilatero")
else:
print("Nao eh triangulo")
-- ERROR:
File "XXXX", line 7
    if((x != y) and (y != z) and (z != x)):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 18:58:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
if((x != y) and (y != z) and (z != x)):
print("escaleno")
else:
if((x != y) or(y != z)):
print("isosceles")  
else:
print("equilatero")
else:
print("Nao eh triangulo")
-- EXECUTION TIME:
0.195954
-- ERROR:
  File "/home/codebench/codes/1684/1099/main.py", line 7
    if((x != y) and (y != z) and (z != x)):
     ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:58:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
if((x != y) and (y != z) and (z != x)):
print("escaleno")
else:
if((x != y) or(y != z)):
print("isosceles")  
else:
print("equilatero")
else:
print("Nao eh triangulo")
-- ERROR:
File "XXXX", line 7
    if((x != y) and (y != z) and (z != x)):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 19:01:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.131137
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 19:01:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 19:01:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.128288
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 19:01:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.123953
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 19:01:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 19:01:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.150228
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Lado x: Lado y: Lado z: Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 19:01:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 19:01:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 19:01:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 19:01:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 19:01:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 19:01:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 19:01:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.161235
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 19:01:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.195322
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 19:01:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.318187
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 19:01:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.392463
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 19:01:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.506612
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Nao eh triangulo
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 19:01:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and (y < x + z) and (z < y + x)):
	if((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.217913
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 09:01:16) 
-- CODE:
a=float(input())
b=float(input())
c=float(input())

print("Entradas:", a ,"," , b ,"," , c)

if(a==b and b==c) :
		  print("Tipo de triangulo: equilatero")
elif (a==b or b==c or c==a ) :
		  print("Tipo de triangulo: isosceles")
elif((a>=b+c or b>=c+a or c>=a+b) or (a<=0 or b<=0 or c<=0)):
		  print("Tipo de triangulo: invalido")
else:
		  print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.17247
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
