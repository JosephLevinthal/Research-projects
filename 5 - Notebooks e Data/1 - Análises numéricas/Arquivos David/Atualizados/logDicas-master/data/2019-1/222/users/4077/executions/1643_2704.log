== TEST (2019-04-10 02:40:30) 
-- CODE:
nota = float(input("nota:"))
if (nota >= 5)
    nota = nota * 0.1
	
-- ERROR:
File "XXXX", line 2
    if (nota >= 5)
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:40:42) 
-- CODE:
nota = float(input("nota:"))
if (nota >= 5):
    nota = nota * 0.1
	
-- ERROR:
File "XXXX", line 2
    if (nota >= 5)
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:41:08) 
-- CODE:
nota = float(input("nota:"))
if (nota >= 5):
    nota = nota * 0.1
	print("S")
	
	
-- ERROR:
File "XXXX", line 4
    print("S")
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:41:32) 
-- CODE:
nota = float(input("nota:"))
if (nota >= 5):
    nota = nota * 0.1
	 print("S")
	
	
-- ERROR:
File "XXXX", line 4
    print("S")
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:41:44) 
-- CODE:
nota = float(input("nota:"))
if (nota >= 5):
    nota = nota * 0.1
	print("S")
	
	
-- ERROR:
File "XXXX", line 4
    print("S")
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:42:16) 
-- CODE:
nota = float(input("nota:"))
if (nota >= 5):
    nota = nota * 0.1
	 print("S")
	
	
	
-- ERROR:
File "XXXX", line 4
    print("S")
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:42:30) 
-- CODE:
nota = float(input("nota:"))

if (nota >= 5):
    nota = nota * 0.1
	 print("S")
	
	
	
-- ERROR:
File "XXXX", line 5
    print("S")
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:43:05) 
-- CODE:
nota = float(input("nota:"))

if (nota >= 5):
	nota = nota * 0.1
	print("S")
	
	
	
-- OUTPUT:
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:43:36) 
-- CODE:
nota = float(input("nota:"))

if (nota >= 5):
	nota = nota * 0.1
	print("S")
else :
	print("N")
	
	
-- OUTPUT:
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 02:43:43) 
-- CODE:
nota = float(input("nota:"))

if (nota >= 5):
	nota = nota * 0.1
	print("S")
else :
	print("N")
	
	
-- EXECUTION TIME:
0.228418
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
S
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
S
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
N
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:43:51) 
-- CODE:
nota = float(input("nota:"))

if (nota >= 5):
	nota = nota * 0.10
	print("S")
else :
	print("N")
	
	
-- OUTPUT:
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 02:43:58) 
-- CODE:
nota = float(input("nota:"))

if (nota >= 5):
	nota = nota * 0.10
	print("S")
else :
	print("N")
	
	
-- EXECUTION TIME:
0.136958
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
S
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
S
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
N
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:44:54) 
-- CODE:
nota = float(input("nota:"))

if (nota >= 5):
	nota = nota * 0.95
	print("nota", "S")
else :
	print("N")
	
	
-- OUTPUT:
nota S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 02:45:08) 
-- CODE:
nota = float(input("nota:"))

if (nota >= 5):
	nota = nota * 0.95
	print("nota", "S")
else :
	print("N")
	
	
-- EXECUTION TIME:
0.111291
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
nota S
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
nota S
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
N
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:45:11) 
-- CODE:
nota = float(input("nota:"))

if (nota >= 5):
	nota = nota * 0.95
	print("nota", "S")
else :
	print("N")
	
	
-- OUTPUT:
nota S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 03:35:49) 
-- CODE:
nota do aluno = float(input("nota 0 a 10"))

	
	
-- ERROR:
File "XXXX", line 1
    nota do aluno = float(input())
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 03:36:15) 
-- CODE:
nota do aluno = float(input("nota: "))

-- ERROR:
File "XXXX", line 1
    nota do aluno = float(input())
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 03:36:33) 
-- CODE:
nota aluno = float(input("nota: "))

-- ERROR:
File "XXXX", line 1
    nota aluno = float(input())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 03:37:12) 
-- CODE:
nota = float(input("nota: "))


-- ERROR:
File "XXXX", line 1
    nota aluno = float(input())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 03:37:57) 
-- CODE:
nota = float(input("nota: "))
bonificacao = input("S ou N")


-- ERROR:
File "XXXX", line 1
    nota aluno = float(input())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 03:40:21) 
-- CODE:
nota = float(input("nota: "))
bonificacao = input("S ou N")
nota final =  nota * 0,10
if(S):
	print("nota final")
	
	


-- ERROR:
File "XXXX", line 3
    nota final =  nota * 0,10
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 03:41:04) 
-- CODE:
nota = float(input("nota: "))
bonificacao = input("S ou N")
nota final =  nota * bonificacao
if(S):
	print("nota final")
	
	


-- ERROR:
File "XXXX", line 3
    nota final =  nota * bonificacao
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 03:41:14) 
-- CODE:
nota = float(input("nota: "))
bonificacao = input("S ou N")

if(S):
	print("nota final")
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(S):
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 03:41:46) 
-- CODE:
nota = float(input("nota: "))
bonificacao = input("S ou N: ")

if(S):
	print("nota final")
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(S):
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 03:41:54) 
-- CODE:
nota = float(input("nota: "))
bonificacao = input("S ou N: ")

if(S):
	print("nota final")
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(S):
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 03:43:01) 
-- CODE:
nota = float(input("nota: "))
bonificacao = input("S ou N: ")

if(nota >= 5):
	print(S)
	
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(S)
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
