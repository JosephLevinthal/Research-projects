== SUBMITION (2019-04-15 15:45:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = float(radians(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 > d or r - 0.1 < d or r == d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.136873
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1643/1055/main.py", line 6, in <module>
    a = float(radians(input()))
TypeError: a float is required

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 15:45:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = float(radians(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 > d or r - 0.1 < d or r == d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = float(radians(input()))
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 15:47:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 > d or r - 0.1 < d or r == d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = float(radians(input()))
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 15:47:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 > d or r - 0.1 < d or r == d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.206761
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 15:47:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 > d or r - 0.1 < d or r == d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = float(radians(input()))
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:48:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 > d and r - 0.1 < d and r == d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.14639
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:48:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 > d and r - 0.1 < d and r == d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.155984
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:49:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 > d and r - 0.1 < d or r == d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.225256
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:49:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 > d and r - 0.1 < d or r == d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.179402
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:49:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 >= d and r - 0.1 < d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.125017
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:49:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 >= d and r - 0.1 < d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.119534
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:49:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 >= d and r - 0.1 < d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.202047
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:50:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 >= d and r - 0.1 <= d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.181405
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:50:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 >= d and r - 0.1 <= d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = float(radians(input()))
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:50:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 >= d and r - 0.1 <= d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.134443
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:50:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if r + 0.1 >= d and r - 0.1 <= d:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.178004
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:50:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.130348
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:51:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 <= r and d - 0.1 >= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.144771
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.173568
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.173312
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.201913
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.25969
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.440444
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.616715
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.664836
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.476495
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.319234
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1643/1055/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.356021
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1643/1055/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.519686
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.43653
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.60391
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.482046
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.533825
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.457242
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.370491
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.36378
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.444501
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.425029
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:54:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = float(radians(input()))
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.549072
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.564891
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1643/1055/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.645523
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.608008
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.426565
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.348083
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1643/1055/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.230175
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1643/1055/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:54:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = float(radians(input()))
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- EXECUTION TIME:
0.137974
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:54:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = float(radians(input()))
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:56:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
d  = float(input("distancia: "))
g = 9.8
r = (v0**2 * sin(2*a))/g
if d + 0.1 >= r and d - 0.1 <= r:
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)	
-- EXECUTION TIME:
0.157383
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
