== TEST (2019-04-28 22:43:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado A:"))
C = float(input("lado A:"))

print("Entradas:", A, "," , B, "," , C) 

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:53:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if  (A < B + C or B < C + A or C < A + B):
     if  (A == B and B == C):
          print("Tipo de triagulo: equilatero ")
      else:
			 if  (A == B or B == C or C == A):
					print("Tipo de triagulo: isosceles ")
			   else:
					 print("Tipo de triagulo: escaleno ")
else:
	 print("invalido")
-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:55:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if(A < B + C or B < C + A or C < A + B):
     if(A == B and B == C):
          print("Tipo de triagulo: equilatero ")
      else:
			 if(A == B or B == C or C == A):
					print("Tipo de triagulo: isosceles ")
			   else:
					 print("Tipo de triagulo: escaleno ")
else:
	 print("invalido")
-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:56:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if(A < B + C or B < C + A or C < A + B):
     if(A == B and B == C):
          print("Tipo de triagulo: equilatero ")
      else:
         if(A == B or B == C or C == A):
					print("Tipo de triagulo: isosceles ")
         else:
					 print("Tipo de triagulo: escaleno ")
else:
	 print("invalido")
-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:56:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if(A < B + C or B < C + A or C < A + B):
   if(A == B and B == C):
          print("Tipo de triagulo: equilatero ")
   else:
       if(A == B or B == C or C == A):
					print("Tipo de triagulo: isosceles ")
         else:
					 print("Tipo de triagulo: escaleno ")
else:
	 print("invalido")
-- ERROR:
File "XXXX", line 14
    print("Tipo de triagulo: isosceles ")
                                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:57:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if(A < B + C or B < C + A or C < A + B):
   if(A == B and B == C):
          print("Tipo de triagulo: equilatero ")
   else:
       if(A == B or B == C or C == A):
         print("Tipo de triagulo: isosceles ")
         else:
             print("Tipo de triagulo: escaleno ")
else:
	 print("invalido")
-- ERROR:
File "XXXX", line 15
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:57:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if(A < B + C or B < C + A or C < A + B):
   if(A == B and B == C):
          print("Tipo de triagulo: equilatero ")
   else:
       if(A == B or B == C or C == A):
         print("Tipo de triagulo: isosceles ")
      else:
          print("Tipo de triagulo: escaleno ")
else:
	 print("invalido")
-- ERROR:
File "XXXX", line 15
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:58:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if(A < B + C or B < C + A or C < A + B):
   if(A == B and B == C):
          print("Tipo de triagulo: equilatero ")
   else:
      if(A == B or B == C or C == A):
         print("Tipo de triagulo: isosceles ")
      else:
          print("Tipo de triagulo: escaleno ")
else:
	 print("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triagulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:59:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if(A < B + C and B < C + A and C < A + B):
   if(A == B and B == C):
          print("Tipo de triagulo: equilatero ")
   else:
      if(A == B or B == C or C == A):
         print("Tipo de triagulo: isosceles ")
      else:
          print("Tipo de triagulo: escaleno ")
else:
	 print("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triagulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 22:59:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if(A < B + C and B < C + A and C < A + B):
   if(A == B and B == C):
          print("Tipo de triagulo: equilatero ")
   else:
      if(A == B or B == C or C == A):
         print("Tipo de triagulo: isosceles ")
      else:
          print("Tipo de triagulo: escaleno ")
else:
	 print("invalido")
-- EXECUTION TIME:
0.293675
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triagulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triagulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 23:00:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if(A < B + C and B < C + A and C < A + B):
   if(A == B and B == C):
          print("Tipo de triagulo: equilatero ")
   else:
      if(A == B or B == C or C == A):
         print("Tipo de triagulo: isosceles ")
      else:
          print("Tipo de triagulo: escaleno ")
else:
	 print("Tipo de triagulo: invalido ")
-- EXECUTION TIME:
0.129877
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triagulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triagulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triagulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:00:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if(A < B + C and B < C + A and C < A + B):
   if(A == B and B == C):
          print("Tipo de triagulo: equilatero ")
   else:
      if(A == B or B == C or C == A):
         print("Tipo de triagulo: isosceles ")
      else:
          print("Tipo de triagulo: escaleno ")
else:
	 print("Tipo de triagulo: invalido ")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triagulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 23:01:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))

print("Entradas:", A, "," , B, "," , C) 

if(A < B + C and B < C + A and C < A + B):
   if(A == B and B == C):
          print("Tipo de triangulo: equilatero ")
   else:
      if(A == B or B == C or C == A):
         print("Tipo de triangulo: isosceles ")
      else:
          print("Tipo de triangulo: escaleno ")
else:
	 print("Tipo de triangulo: invalido ")
-- EXECUTION TIME:
0.193038
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
