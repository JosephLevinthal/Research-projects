== TEST (2019-03-26 12:58:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(200.0*100, 2))
-- OUTPUT:
20000.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 12:58:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(200.0/100, 2))
-- OUTPUT:
2.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 12:58:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(200.0//100, 2))
-- OUTPUT:
2.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 12:58:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(200.0//100, 2))
-- EXECUTION TIME:
0.130913
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
2.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 12:58:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(200.0//100, 2))
-- OUTPUT:
2.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 12:59:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(200.0//100)*(200.0), 2)
-- OUTPUT:
400.0 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 12:59:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(200.0//100)*(200.0),)
-- EXECUTION TIME:
0.136658
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
400.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 13:05:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(200.0//100)*200.0)
-- OUTPUT:
400.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 13:06:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(200.0//100)*200)
-- OUTPUT:
400
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 13:06:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(200.0//100)*200, 2)
-- OUTPUT:
400 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:24:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(200.0//100)*200, 2)
-- OUTPUT:
400 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:49:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(input("total de vendas: "))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:50:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:50:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (X+1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:50:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (X+1)
print(total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:52:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (X * 30)
print(total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:52:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (X * 30)
print(round(total, 2)
-- ERROR:
File "XXXX", line 7
    
                         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:52:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (X * 30)
print(round(total, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:53:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (X * 30)
print(float(round(total, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:53:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (X * (30//100))
print(float(round(total, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:54:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (30/100)*10
print(float(round(total, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 00:55:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (30/100)*10
print(float(round(total, 2)))
-- EXECUTION TIME:
0.206499
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:56:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (30/100)*10
print(float(round(total, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:56:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (30/100*10)
print(float(round(total, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:56:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (100*10)
print(float(round(total, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:57:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = X*10
print(float(round(total, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 00:58:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = X*10
print(round(total, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:01:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (X)*(30/100)
print(round(total, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:01:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = int(input("total de vendas: "))
total = (X)*(30/100)
print(round(total, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 01:02:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("total de vendas: "))
total = (X)*(30/100)
print(round(vendas, 2))
-- EXECUTION TIME:
0.122649
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:03:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("total de vendas: "))
total = (X)*(30/100)
print(round(vendas, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:04:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("total de vendas: "))
total = (vendas)*(30/100)
print(round(vendas, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:04:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("total de vendas: "))
total = (vendas*(30/100)
print(round(vendas, 2))
-- ERROR:
File "XXXX", line 6
    print(round(vendas, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:05:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("total de vendas: "))
total = (vendas*(30/100)
print(round(total, 2))
-- ERROR:
File "XXXX", line 6
    print(round(total, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:06:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("total de vendas: "))
total = (vendas*(30/100)
print(round(total, 2))
-- ERROR:
File "XXXX", line 6
    print(round(total, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:06:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("total de vendas: "))
x = (vendas*(30/100)
print(round(x, 2))
-- ERROR:
File "XXXX", line 6
    print(round(x, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:06:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("total de vendas: "))
x = (vendas*(30/100)
print(round(x, 2)
-- ERROR:
File "XXXX", line 6
    print(round(x, 2)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 01:07:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("total de vendas: "))
x = ("vendas"*(30/100)
print(round(x, 2)
-- EXECUTION TIME:
0.189491
-- ERROR:
  File "/home/codebench/codes/1602/1014/main.py", line 6
    print(round(x, 2)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:07:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("total de vendas: "))
x = ("vendas"*(30/100)
print(round(x, 2)
-- ERROR:
File "XXXX", line 6
    print(round(x, 2)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:12:14) 
-- CODE:
X = int(input("qual a quantidade de vendas ? "))
Y = float(input("qual o lucro ?"))
total = X*Y
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:13:03) 
-- CODE:
X = int(input("qual a quantidade de vendas ? "))
Y = 30/100
total = X*Y
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:13:16) 
-- CODE:
X = int(input("qual a quantidade de vendas ? "))
Y = 30/100
total = X*Y
print(total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:13:48) 
-- CODE:
X = int(input("qual a quantidade de vendas ? "))
Y = 30/100
total = X*Y
print(round(total, 2)
-- ERROR:
File "XXXX", line 5
    
                         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:14:03) 
-- CODE:
X = int(input("qual a quantidade de vendas ? "))
Y = 30/100
total = X*Y
print(round(total), 2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 01:14:32) 
-- CODE:
X = int(input("qual a quantidade de vendas ? "))
Y = 30/100
total = X*Y
print(round(total, 2)
-- EXECUTION TIME:
0.202535
-- ERROR:
  File "/home/codebench/codes/1602/1014/main.py", line 5
    
                         ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:14:35) 
-- CODE:
X = int(input("qual a quantidade de vendas ? "))
Y = 30/100
total = X*Y
print(round(total, 2)
-- ERROR:
File "XXXX", line 5
    
                         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:19:38) 
-- CODE:
X = int(input("qual a quantidade de vendas ? "))
Y = 30/100
total = X*Y
print(round(total, 2)
-- ERROR:
File "XXXX", line 5
    
                         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:24:16) 
-- CODE:
X = int(input("qual a quantidade de vendas ? "))
Y = 30/100
total = X*Y
print(round(total, 2)
-- ERROR:
File "XXXX", line 5
    
                         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:24:54) 
-- CODE:
X = int(input("qual a quantidade de vendas ? "))
Y = 30/100
total = X*Y
print(round(total, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 01:25:11) 
-- CODE:
X = int(input("qual a quantidade de vendas ? "))
Y = 30/100
total = X*Y
print(round(total, 2))
-- EXECUTION TIME:
0.182406
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 1, in <module>
    X = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:25:48) 
-- CODE:
vendas = int(input("qual a quantidade de vendas ? "))
lucro = 30/100
total = lucro*vendas
print(round(total, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:26:37) 
-- CODE:
vendas = int(input("qual a quantidade de vendas ? "))
lucro = 30/100
total = lucro*vendas
print(float(round(total, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 01:26:44) 
-- CODE:
vendas = int(input("qual a quantidade de vendas ? "))
lucro = 30/100
total = lucro*vendas
print(float(round(total, 2)))
-- EXECUTION TIME:
0.121672
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 1, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:00:12) 
-- CODE:
vendas = int(input("qual a quantidade de vendas ? "))
lucro = 30/100
total = lucro*vendas
print(float(round(total, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 13:00:53) 
-- CODE:
vendas = int(input("qual a quantidade de vendas ? "))
lucro = 30/100
total = lucro*vendas
print(float(round(total, 2)))
-- EXECUTION TIME:
0.153659
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 1, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:01:45) 
-- CODE:
vendas = int(input("qual a quantidade de vendas ? "))
lucro = 0,3
print(lucro)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:04:04) 
-- CODE:
vendas = int(input("qual a quantidade de vendas ? "))
lucro = 30/100
total = vendas * lucro
print(float(round(total, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:04:29) 
-- CODE:
vendas = (input("qual a quantidade de vendas ? "))
lucro = 30/100
total = vendas * lucro
print(float(round(total, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    total = vendas * lucro
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:09:52) 
-- CODE:
vendas = float(input("qual a quantidade de vendas ? "))
lucro = 30/100
total = vendas * lucro
print(float(round(total, 2)))
-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 13:10:06) 
-- CODE:
vendas = float(input("qual a quantidade de vendas ? "))
lucro = 30/100
total = vendas * lucro
print(float(round(total, 2)))
-- EXECUTION TIME:
0.196725
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.15
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:15:05) 
-- CODE:
vendas = float(input("qual a quantidade de vendas ? "))
lucro = 30/100
total = vendas * lucro
print(float(round(total, 2)))
-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 13:15:20) 
-- CODE:
vendas = float(input("qual a quantidade de vendas ? "))
lucro = 30/100
total = vendas * lucro
print(float(round(total, 2)))
-- EXECUTION TIME:
0.135592
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.15
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
