== TEST (2019-04-22 22:12:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print(tp)
-- OUTPUT:
tipo de triangulo:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 22:13:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print(tp, 2)
-- OUTPUT:
tipo de triangulo: 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:05:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("entradas:" a","b ","c")
	if(a==b)and(b==c)and(c==a):
print(tp,"equilatero")
	else:
print("eu")

-- ERROR:
File "XXXX", line 7
    print("entradas:" a","b ","c")
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:05:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("entradas:" a "," b "," c)
	if(a==b)and(b==c)and(c==a):
print(tp,"equilatero")
	else:
print("eu")

-- ERROR:
File "XXXX", line 7
    print("entradas:" a "," b "," c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:06:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("entradas:" a"," b"," c)
	if(a==b)and(b==c)and(c==a):
print(tp,"equilatero")
	else:
print("eu")

-- ERROR:
File "XXXX", line 7
    print("entradas:" a"," b"," c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:07:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("entradas:", a",", b ",", c)
	if(a==b)and(b==c)and(c==a):
print(tp,"equilatero")
	else:
print("eu")

-- ERROR:
File "XXXX", line 7
    print("entradas:", a",", b ",", c)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:08:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("entradas:", a,",", b,",", c)
	if(a==b)and(b==c)and(c==a):
print(tp,"equilatero")
	else:
print("eu")

-- ERROR:
File "XXXX", line 8
    if(a==b)and(b==c)and(c==a):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:09:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
	print("Entradas:", a,",", b,",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
print("eu")

-- ERROR:
File "XXXX", line 7
    print("Entradas:", a,",", b,",", c)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:10:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
	print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
print("eu")

-- ERROR:
File "XXXX", line 7
    print("Entradas:", a, ",", b, ",", c)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:10:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
print("eu")

-- ERROR:
File "XXXX", line 11
    print("eu")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:11:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
	print("eu")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
eu
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:31:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if(a=!b)or(b=!c)or(c=!a)
					print(tp,"escalendo")
				else:
					if(a<0)or(b<0)or(c<0)or(a<b+c)or(b<a+b)or(c<a+b):
						print(tp, "invalido")
					else:
						print("valido")
					
-- ERROR:
File "XXXX", line 14
    if(a=!b)or(b=!c)or(c=!a)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:31:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if(a=!b)or(b=!c)or(c=!a):
					print(tp,"escalendo")
				else:
					if(a<0)or(b<0)or(c<0)or(a<b+c)or(b<a+b)or(c<a+b):
						print(tp, "invalido")
					else:
						print("valido")
					
-- ERROR:
File "XXXX", line 14
    if(a=!b)or(b=!c)or(c=!a):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:32:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a=!b)or(b=!c)or(c=!a)):
					print(tp,"escalendo")
				else:
					if(a<0)or(b<0)or(c<0)or(a<b+c)or(b<a+b)or(c<a+b):
						print(tp, "invalido")
					else:
						print("valido")
					
-- ERROR:
File "XXXX", line 14
    if((a=!b)or(b=!c)or(c=!a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:36:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)or(b!=c)or(c!=a)):
					print(tp,"escalendo")
				else:
					if(a<0)or(b<0)or(c<0)or(a<b+c)or(b<a+b)or(c<a+b):
						print(tp, "invalido")
					else:
						print("valido")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:37:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)and(c!=a)):
					print(tp,"escalendo")
				else:
					if(a<0)or(b<0)or(c<0)or(a<b+c)or(b<a+b)or(c<a+b):
						print(tp, "invalido")
					else:
						print("valido")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 12:37:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)and(c!=a)):
					print(tp,"escalendo")
				else:
					if(a<0)or(b<0)or(c<0)or(a<b+c)or(b<a+b)or(c<a+b):
						print(tp, "invalido")
					else:
						print("valido")
					
-- EXECUTION TIME:
0.119177
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escalendo
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: escalendo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:40:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
				else:
					if(a<0)or(b<0)or(c<0)or(a<b+c)or(b<a+b)or(c<a+b):
						print(tp, "invalido")
					else:
						print("valido")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:41:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
				else:
					if(a<0)or(b<0)or(c<0)or(a<b+c)or(b<a+b)or(c<a+b):
						print(tp, "invalido")
					else:
						print("valido")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:41:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
else:
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
				else:
					if(a<0)or(b<0)or(c<0)or(a<b+c)or(b<a+b)or(c<a+b):
						print(tp, "invalido")
					else:
						print("valido")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:47:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
else:
	print("invalido")
					
-- ERROR:
File "XXXX", line 10
    print(tp,"equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:47:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	if(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
else:
	print("invalido")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:47:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	if(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
else:
	print("invalido")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 18:40:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp,"invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
else:
	print("invalido")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 18:41:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp,"invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
else:
	print("invalido")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 18:41:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp,"invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
else:
	print("invalido")
					
-- EXECUTION TIME:
0.188785
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 18:41:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp,"invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
else:
	print("invalido")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 18:41:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp,"invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
else:
	print("invalido")
					
-- EXECUTION TIME:
0.192415
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 18:51:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp,"invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 18:51:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp,"invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
					
-- EXECUTION TIME:
0.204684
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 18:51:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp," invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp,"escalendo")
					
-- EXECUTION TIME:
0.197346
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 18:51:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp," invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp," equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp," isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp," escalendo")
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 18:52:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp," invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp," equilatero")
		if(a==b)or(b==c)or(c==a):
			print(tp," isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp," escalendo")
					
-- EXECUTION TIME:
0.13112
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 19:52:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp," invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp," equilatero")
		if(a==b)or(b==c):
			print(tp," isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp," escalendo")
					
-- EXECUTION TIME:
0.205209
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 19:57:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp," invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp," equilatero")
		if(a==b)or(b==c):
			print(tp," isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp," escalendo")
else:
	print(a)
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 19:58:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)or(b>0)or(c>0)or(a<b+c)or(b<a+b)or(c<a+b):
	print(tp," invalido")
	if(a==b)and(b==c)and(c==a):
		print(tp," equilatero")
		if(a==b)or(b==c):
			print(tp," isosceles")
		else:
				if((a!=b)and(b!=c)):
					print(tp," escalendo")
else:
	print(a)
					
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:27:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:28:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:33:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")
elif(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b)
	print(tp,"invalido")

-- ERROR:
File "XXXX", line 14
    elif(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b)
                                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:34:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")
elif(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp,"invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 20:34:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")
elif(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp,"invalido")

-- EXECUTION TIME:
0.214234
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escalendo
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escalendo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:34:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")
else:(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b)
	print(tp,"invalido")

-- ERROR:
File "XXXX", line 15
    print(tp,"invalido")
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:35:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")
else:(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b)
	print(tp,"invalido")

-- ERROR:
File "XXXX", line 15
    print(tp,"invalido")
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:35:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")
elif:(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b)
	print(tp,"invalido")

-- ERROR:
File "XXXX", line 14
    elif:(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:35:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")
elif:(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp,"invalido")

-- ERROR:
File "XXXX", line 14
    elif:(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:36:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")
elif(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp,"invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:36:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")
elif(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp,"invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:43:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
elif(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")
else:
	print(tp,"invalido")

-- ERROR:
File "XXXX", line 9
    elif(a==b)and(b==c)and(c==a):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 20:44:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
	print("valido")
elif(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")
else:
	print(tp,"invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
valido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:27:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
elif(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")


-- ERROR:
File "XXXX", line 11
    elif(a==b)and(b==c)and(c==a):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:30:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	elif(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
	elif(a==b)or(b==c)or(c==a):
		print(tp,"isosceles")
	elif(a!=b)or(b!=a)or(c!=a):
		print(tp,"escalendo")


-- ERROR:
File "XXXX", line 11
    elif(a==b)and(b==c)and(c==a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:31:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	elif(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
	elif(a==b)or(b==c)or(c==a):
		print(tp,"isosceles")
	elif(a!=b)or(b!=a)or(c!=a):
		print(tp,"escalendo")


-- ERROR:
File "XXXX", line 11
    elif(a==b)and(b==c)and(c==a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:32:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	elif(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
	elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
	elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")


-- ERROR:
File "XXXX", line 11
    elif(a==b)and(b==c)and(c==a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:35:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if:(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
	elif(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
	elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
	elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")


-- ERROR:
File "XXXX", line 11
    if:(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:35:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
	elif(a==b)and(b==c)and(c==a):
	print(tp,"equilatero")
	elif(a==b)or(b==c)or(c==a):
	print(tp,"isosceles")
	elif(a!=b)or(b!=a)or(c!=a):
	print(tp,"escalendo")


-- ERROR:
File "XXXX", line 12
    elif(a==b)and(b==c)and(c==a):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:36:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
	elif(a==b)and(b==c)and(c==a):
		print(tp,"equilatero")
	elif(a==b)or(b==c)or(c==a):
		print(tp,"isosceles")
	elif(a!=b)or(b!=a)or(c!=a):
		print(tp,"escalendo")


-- ERROR:
File "XXXX", line 12
    elif(a==b)and(b==c)and(c==a):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:37:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
		elif(a==b)and(b==c)and(c==a):
			print(tp,"equilatero")
		elif(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		elif(a!=b)or(b!=a)or(c!=a):
			print(tp,"escalendo")


-- ERROR:
File "XXXX", line 12
    elif(a==b)and(b==c)and(c==a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:38:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
		elif((a==b)and((b==c)and(c==a)):
			print(tp,"equilatero")
		elif(a==b)or(b==c)or(c==a):
			print(tp,"isosceles")
		elif(a!=b)or(b!=a)or(c!=a):
			print(tp,"escalendo")


-- ERROR:
File "XXXX", line 12
    elif((a==b)and((b==c)and(c==a)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:44:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
		elif((a==b)and((b==c)and(c==a)):
			print(tp, "equilatero")
		elif(a==b)or(b==c)or(c==a):
			print(tp, "isosceles")
		elif(a!=b)or(b!=a)or(c!=a):
			print(tp,"escalendo")


-- ERROR:
File "XXXX", line 12
    elif((a==b)and((b==c)and(c==a)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 15:44:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
		elif((a==b)and((b==c)and(c==a)):
			print(tp, "equilatero")
		elif(a==b)or(b==c)or(c==a):
			print(tp, "isosceles")
		elif(a!=b)or(b!=a)or(c!=a):
			print(tp,"escalendo")


-- EXECUTION TIME:
0.134297
-- ERROR:
  File "/home/codebench/codes/1684/1099/main.py", line 12
    elif((a==b)and((b==c)and(c==a)):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:44:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
		elif(a==b)and(b==c)and(c==a):
			print(tp, "equilatero")
		elif(a==b)or(b==c)or(c==a):
			print(tp, "isosceles")
		elif(a!=b)or(b!=a)or(c!=a):
			print(tp,"escalendo")


-- ERROR:
File "XXXX", line 12
    elif(a==b)and(b==c)and(c==a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:44:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))
tp= ("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
		elif(a == b)and(b == c)and(c == a):
			print(tp, "equilatero")
		elif(a==b)or(b==c)or(c==a):
			print(tp, "isosceles")
		elif(a!=b)or(b!=a)or(c!=a):
			print(tp,"escalendo")


-- ERROR:
File "XXXX", line 12
    elif(a == b)and(b == c)and(c == a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:45:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
tp=("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
		elif(a == b)and(b == c)and(c == a):
			print(tp, "equilatero")
		elif(a==b)or(b==c)or(c==a):
			print(tp, "isosceles")
		elif(a!=b)or(b!=a)or(c!=a):
			print(tp,"escalendo")


-- ERROR:
File "XXXX", line 12
    elif(a == b)and(b == c)and(c == a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:45:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
tp=("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
		elif(a==n)and(b==c):
			print(tp, "equilatero")
		elif(a==b)or(b==c)or(c==a):
			print(tp, "isosceles")
		elif(a!=b)or(b!=a)or(c!=a):
			print(tp,"escalendo")


-- ERROR:
File "XXXX", line 12
    elif(a==n)and(b==c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:46:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
tp=("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
		elif(a==b)and(b==c):
			print(tp, "equilatero")
		elif(a==b)or(b==c)or(c==a):
			print(tp, "isosceles")
		elif(a!=b)or(b!=a)or(c!=a):
			print(tp,"escalendo")


-- ERROR:
File "XXXX", line 12
    elif(a==b)and(b==c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:50:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
tp=("Tipo de triangulo:")
print("Entradas:", a, ",", b, ",", c)
if(a<0)or(b<0)or(c<0)or(a>b+c)or(b>a+c)or(c>a+b):
	print(tp, "invalido")
else:
	if(a>0)and(b>0)and(c>0)and(a<b+c)and(b<a+c)and(c<a+b):
	elif(a==b)and(b==c):
		print(tp, "equilatero")
	elif(a==b)or(b==c)or(c==a):
		print(tp, "isosceles")
	elif(a!=b)or(b!=a)or(c!=a):
		print(tp,"escalendo")


-- ERROR:
File "XXXX", line 12
    elif(a==b)and(b==c):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 16:20:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((x != y) or (y != z)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.212558
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
