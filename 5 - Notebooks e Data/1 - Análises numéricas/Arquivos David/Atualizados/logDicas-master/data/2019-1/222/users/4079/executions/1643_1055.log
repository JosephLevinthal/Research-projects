== TEST (2019-04-15 14:03:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p=d-r
if(abs(p)< 0.1):
	print("sim")
else:
	print("não")
	
-- OUTPUT:
não
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:04:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p=d-r
if(abs(p)< 0.1):
	print("sim")
else:
	print("não")
	
-- OUTPUT:
não
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:20:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p=d-r
if(abs(p)< 0.1):
	print("sim")
else:
	print("não")
	
-- OUTPUT:
não
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:20:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p=d-r
if(abs(p)< 0.1):
	print("sim")
else:
	print("não")
	
-- OUTPUT:
não
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:24:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p=d-r
if(abs(p)< 0.1):
	print("sim")
else:
	print("não")
	
-- OUTPUT:
não
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:26:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p= d - r
if(abs(p)< 0.1):
	print("sim")
else:
	print("não")
	
-- OUTPUT:
não
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:27:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p= d - r
if(abs(p)< 0.1):
	print("sim")
else:
	print("nao")
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 17:27:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p= d - r
if(abs(p)< 0.1):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.184424
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:27:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p= d - r
if(abs(p)< 0.1):
	print("sim")
else:
	print("nao")
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 17:28:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p= d - r
if(abs(p)< 0.1):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.151119
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:28:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p= d - r
if(abs(p)< 0.1):
	print("sim")
else:
	print("nao")
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 17:28:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p= d - r
if(abs(p)< 0.1):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.151602
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:29:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p= d - R
if(abs(p)< 0.1):
	print("sim")
else:
	print("nao")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    p= d - R
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:29:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p= d - r
if(abs(p< 0.1)):
	print("sim")
else:
	print("nao")
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 17:30:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v*2)*sin(2*a))/9.8
p= d - r
if(abs(p< 0.1)):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.164756
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:30:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v**2)*sin(2*a))/9.8
p= d - r
if(abs(p < 0.1)):
	print("sim")
else:
	print("nao")
	
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 17:30:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial:"))
a=radians(float(input("angulo de tiro:")))
d=float(input("valor da distancia:"))
r=((v**2)*sin(2*a))/9.8
p= d - r
if(abs(p < 0.1)):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.150426
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
