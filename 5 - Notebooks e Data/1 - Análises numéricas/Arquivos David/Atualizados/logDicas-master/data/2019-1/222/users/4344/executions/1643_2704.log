== TEST (2019-04-14 18:40:37) 
-- CODE:
nota_ini = float(input("nota do aluno"))
bonus = input("aluno receberá a bonificação? S(sim) ou N(não)")
if bonus == 'S':
	nota_final = nota_ini*1.1
	else if bonus == 'N':
		nota_final = nota_ini
		else:
			break
print(nota_final)

-- ERROR:
File "XXXX", line 5
    else if bonus == 'N':
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:41:28) 
-- CODE:
nota_ini = float(input("nota do aluno"))
bonus = input("aluno receberá a bonificação? S(sim) ou N(não)")
if bonus == 'S':
	nota_final = nota_ini*1.1
	elif bonus == 'N':
		nota_final = nota_ini
		else:
			break
print(nota_final)

-- ERROR:
File "XXXX", line 5
    elif bonus == 'N':
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:43:06) 
-- CODE:
nota_ini = float(input("nota do aluno"))
bonus = input("aluno receberá a bonificação? S(sim) ou N(não)")
if bonus == 'S':
	nota_final = nota_ini*1.1
elif bonus == 'N':
	nota_final = nota_ini
else:
	break
print(nota_final)

-- ERROR:
File "XXXX", line 8
    break
    ^
SyntaxError: 'break' outside loop
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:43:16) 
-- CODE:
nota_ini = float(input("nota do aluno"))
bonus = input("aluno receberá a bonificação? S(sim) ou N(não)")
if bonus == 'S':
	nota_final = nota_ini*1.1
elif bonus == 'N':
	nota_final = nota_ini
print(nota_final)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:44:10) 
-- CODE:
nota_ini = float(input("nota do aluno:"))
bonus = input("aluno receberá a bonificação? S(sim) ou N(não)")
if bonus == 'S':
	nota_final = nota_ini*1.1
else if bonus == 'N':
	nota_final = nota_ini
print(nota_final)

-- ERROR:
File "XXXX", line 5
    else if bonus == 'N':
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:44:26) 
-- CODE:
nota_ini = float(input("nota do aluno:"))
bonus = input("aluno receberá a bonificação? S(sim) ou N(não)")
if bonus == 'S':
	nota_final = nota_ini*1.1
elif bonus == 'N':
	nota_final = nota_ini
print(nota_final)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:46:00) 
-- CODE:
nota_ini = float(input("nota do aluno:"))
bonus = input("aluno receberá a bonificação?")
if bonus == 'S':
	nota_final = nota_ini*1.1
elif bonus == 'N':
	nota_final = nota_ini
print(nota_final)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:47:08) 
-- CODE:
nota_ini = float(input("nota do aluno:"))
bonus = input("aluno receberá a bonificação?")
if str(bonus) == 'S':
	nota_final = nota_ini*1.1
elif str(bonus) == 'N':
	nota_final = nota_ini
print(nota_final)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:51:04) 
-- CODE:
nota_ini = float(input("nota do aluno:"))
bonus = input("aluno recebera a bonificação?")

if bonus == 'S':
	nota_final = nota_ini*1.1
elif bonus == 'N':
	nota_final = nota_ini
	
print(nota_final)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:51:13) 
-- CODE:
nota_ini = float(input("nota do aluno:"))
bonus = input("aluno recebera a bonificacao?")

if bonus == 'S':
	nota_final = nota_ini*1.1
elif bonus == 'N':
	nota_final = nota_ini
	
print(nota_final)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:52:05) 
-- CODE:
nota_ini = float(input("nota do aluno:"))
bonus = input("aluno recebera a bonificacao?")

if bonus == 'S':
	nota_final = nota_ini*1.1
elif bonus == 'N':
	nota_final = nota_ini
	
print(round(nota_final, 1))

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 18:52:18) 
-- CODE:
nota_ini = float(input("nota do aluno:"))
bonus = input("aluno recebera a bonificacao?")

if bonus == 'S':
	nota_final = nota_ini*1.1
elif bonus == 'N':
	nota_final = nota_ini
	
print(round(nota_final, 1))

-- EXECUTION TIME:
0.177805
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
