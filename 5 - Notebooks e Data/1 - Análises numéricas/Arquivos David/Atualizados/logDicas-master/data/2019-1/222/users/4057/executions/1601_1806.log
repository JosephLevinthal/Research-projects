== TEST (2019-03-22 17:27:35) 
-- CODE:
from math import
n = int(input("Qual o numero de pessoas? "))
p = factorial(365/(365-n)*(1/565))
print(round(p, 2))
-- ERROR:
File "XXXX", line 1
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:27:51) 
-- CODE:
from math import *
n = int(input("Qual o numero de pessoas? "))
p = factorial(365/(365-n)*(1/565))
print(round(p, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    p = factorial(365/(365-n)*(1/565))
ValueError: factorial() only accepts integral values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:29:18) 
-- CODE:
from math import *
n = int(input("Qual o numero de pessoas? "))
p = factorial(365/365-n*1/565)
print(round(p, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    p = factorial(365/365-n*1/565)
ValueError: factorial() only accepts integral values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:29:56) 
-- CODE:
from math import *
n = int(input("Qual o numero de pessoas? "))
p = factorial(365/365-n*1/365)
print(round(p, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    p = factorial(365/365-n*1/365)
ValueError: factorial() only accepts integral values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:31:26) 
-- CODE:
from math import *
n = int(input("Qual o numero de pessoas? "))
a = factorial(365)
b = factorial(365 - n)
p = (a/b)*(1/a)
print(round(p, 2))
-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:34:11) 
-- CODE:
from math import *
n = int(input("Qual o numero de pessoas? "))
a = factorial(365)
b = factorial(365 - n)
c = 365**n
p = (a/b)*(1/c)
print(round(p, 2))
-- OUTPUT:
0.83
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:34:20) 
-- CODE:
from math import *
n = int(input("Qual o numero de pessoas? "))
a = factorial(365)
b = factorial(365 - n)
c = 365**n
p = (a/b)*(1/c)
print(round(p, 2))
-- OUTPUT:
0.83
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:35:21) 
-- CODE:
from math import *
n = int(input("Qual o numero de pessoas? "))
a = factorial(365)
b = factorial(365 - n)
c = 365**n
p = (a/b)*(1/c)
pp = p * 100
print(round(pp, 2))
-- OUTPUT:
83.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:36:47) 
-- CODE:
from math import *
n = int(input("Qual o numero de pessoas? "))
a = factorial(365)
s = 365 - n
b = factorial(s)
c = 365**n
p = (a/b)*(1/c)
pp = p * 100
print(round(pp, 2))
-- OUTPUT:
83.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:37:07) 
-- CODE:
from math import *
n = int(input("Qual o numero de pessoas? "))
a = factorial(365)
s = 365 - n
b = factorial(s)
c = 365**n
p = (a/b)*(1/c)
pp = p * 100
print(round(pp, 2))
-- EXECUTION TIME:
0.189022
-- TEST CASE 1:
---- input:
12
---- correct output:
16.7
---- user output:
83.3
-- TEST CASE 2:
---- input:
24
---- correct output:
53.83
---- user output:
46.17
-- TEST CASE 3:
---- input:
99
---- correct output:
100.0
---- user output:
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:39:26) 
-- CODE:
from math import *
n = int(input("Qual o numero de pessoas? "))
a = factorial(365)
b = factorial(365 - n)
c = 365**n
p = 1-(a/b)*(1/c)
pp = p * 100
print(round(pp, 2))
-- OUTPUT:
16.7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:39:40) 
-- CODE:
from math import *
n = int(input("Qual o numero de pessoas? "))
a = factorial(365)
b = factorial(365 - n)
c = 365**n
p = 1-(a/b)*(1/c)
pp = p * 100
print(round(pp, 2))
-- EXECUTION TIME:
0.213223
-- TEST CASE 1:
---- input:
12
---- correct output:
16.7
---- user output:
16.7
-- TEST CASE 2:
---- input:
24
---- correct output:
53.83
---- user output:
53.83
-- TEST CASE 3:
---- input:
99
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
