== TEST (2019-03-28 21:36:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:43:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degress(float(input("Latitude de P1: ")))
t2 = degress(float(input("Latitude de P2: ")))
g1 = degress(float(input("Longitude de P1: ")))
g2 = degress(float(input("Longitude de P2: ")))
R = 6371,01 
d = R * acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degress(around(d, 2)))

-- ERROR:
File "XXXX", line 9
    R = 6371,01 
              ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:44:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degress(float(input("Latitude de P1: ")))
t2 = degress(float(input("Latitude de P2: ")))
g1 = degress(float(input("Longitude de P1: ")))
g2 = degress(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degress(around(d, 2)))

-- ERROR:
File "XXXX", line 10
    d = R * acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
                                                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:45:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degress(float(input("Latitude de P1: ")))
t2 = degress(float(input("Latitude de P2: ")))
g1 = degress(float(input("Longitude de P1: ")))
g2 = degress(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2)))
print(degress(around(d, 2)))

-- ERROR:
File "XXXX", line 10
    d = R * (acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2)))
                                                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:45:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degress(float(input("Latitude de P1: ")))
t2 = degress(float(input("Latitude de P2: ")))
g1 = degress(float(input("Longitude de P1: ")))
g2 = degress(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degress(around(d, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    t1 = degress(float(input()))
NameError: name 'degress' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:46:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 21:47:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- EXECUTION TIME:
0.157484
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1017/main.py", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:47:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:47:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:47:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:47:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 21:52:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- EXECUTION TIME:
0.126772
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1017/main.py", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:53:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1)) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 21:54:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- EXECUTION TIME:
0.198214
-- ERROR:
  File "/home/codebench/codes/1602/1017/main.py", line 11
    print(degrees(around(d, 2)))
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:54:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * (acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
File "XXXX", line 11
    print(degrees(around(d, 2)))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:55:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 21:55:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- EXECUTION TIME:
0.253261
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1017/main.py", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:55:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:55:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float(input("6371,01")) 
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float(input()) 
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:56:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = 6371,01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
File "XXXX", line 9
    R = 6371,01
              ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:57:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 21:57:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(degrees(around(d, 2)))

-- EXECUTION TIME:
0.149898
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1017/main.py", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:08:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 22:08:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- EXECUTION TIME:
0.288841
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1017/main.py", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:12:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 22:12:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- EXECUTION TIME:
0.189903
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1017/main.py", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:12:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:14:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371,01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- ERROR:
File "XXXX", line 9
    R = 6371,01
              ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:14:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float(6371,01)
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- ERROR:
File "XXXX", line 9
    R = float(6371,01)
                    ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:17:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 22:17:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- EXECUTION TIME:
0.197319
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1017/main.py", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:17:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:17:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:17:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:18:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371.01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(around(d, 2))
NameError: name 'around' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 22:18:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371.01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(around(d, 2))

-- EXECUTION TIME:
0.154565
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1017/main.py", line 11, in <module>
    print(around(d, 2))
NameError: name 'around' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:18:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371.01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- OUTPUT:
7925.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 22:18:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371.01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.145614
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
7925.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 22:19:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.200061
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1017/main.py", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:19:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:20:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float("6371,01")
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = float("6371,01")
ValueError: could not convert string to float: '6371,01'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:20:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float(6371,01)
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = float(6371,01)
                    ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:21:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371,01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = 6371,01
              ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 16:21:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float(6371,01)
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = float(6371,01)
                    ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 16:50:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371,01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = 6371,01
              ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 16:51:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float(input(6371,01))
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = float(input(6371,01))
                          ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:44:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float(6371,01)
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = float(6371,01)
                    ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:44:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = int(6371,01)
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = int(6371,01)
                  ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:45:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371,01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = 6371,01
              ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:46:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = 6371,01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = 6371,01
              ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:48:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = input(6371,01)
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = input(6371,01)
                    ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:48:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = input(6371,01)
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.125263
-- ERROR:
  File "/home/codebench/codes/1602/1017/main.py", line 9
    R = input(6371,01)
                    ^
SyntaxError: invalid token

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:52:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371,01 "km"
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = 6371,01 "km"
              ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:53:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = int(6371,01)
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 9
    R = int(6371,01)
                  ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:54:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = int(6371,01)
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.138059
-- ERROR:
  File "/home/codebench/codes/1602/1017/main.py", line 9
    R = int(6371,01)
                  ^
SyntaxError: invalid token

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:54:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float(6371.01)
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- OUTPUT:
7925.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:55:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = float(6371.01)
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.141408
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
7925.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:55:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- OUTPUT:
7925.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:55:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.143932
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
7925.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:58:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- OUTPUT:
7925.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:58:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.112269
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
7925.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:02:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = (R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- ERROR:
File "XXXX", line 11
    print(round(d, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:03:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- OUTPUT:
7925.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:03:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.182272
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
7925.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:04:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- OUTPUT:
7925.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:04:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.17394
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
7925.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:06:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- OUTPUT:
8449.19
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:06:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = degrees(float(input("Latitude de P1: ")))
t2 = degrees(float(input("Latitude de P2: ")))
g1 = degrees(float(input("Longitude de P1: ")))
g2 = degrees(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.137994
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
8449.19
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:10:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- OUTPUT:
7925.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:10:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.128167
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
7925.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:11:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * (acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2)))
print(round(d, 2))

-- EXECUTION TIME:
0.141216
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
7925.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:11:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * (acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2)))
print(round(d, 2))

-- OUTPUT:
7925.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:26:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * (acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2)))
print(round(d, 2))

-- EXECUTION TIME:
0.172631
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
7925.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:38:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g1 = radians(float(input("Longitude de P1: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01
d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))

-- EXECUTION TIME:
0.167418
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
7925.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
