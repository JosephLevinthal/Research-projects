== TEST (2019-03-20 19:34:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo: "))
y = int(input("divisor: "))


-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:07:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo: "))
y = int(input("divisor: "))
z = "x/y"

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:08:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo: "))
y = int(input("divisor: "))
z = "x/y"

print(z)

-- OUTPUT:
x/y
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:09:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo: "))
y = int(input("divisor: "))
z = x/y

print(z)

-- OUTPUT:
1.6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:12:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = int(input("dividendo: "))
divisor = int(input("divisor: "))
resultado = x/y
resto = dividendo/divisor


print(dividendo,divisor,resultado,resto)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    resultado = x/y
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:12:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = int(input("dividendo: "))
divisor = int(input("divisor: "))
resultado = dividendo/divisor
resto = dividendo/divisor


print(dividendo,divisor,resultado,resto)

-- OUTPUT:
8 5 1.6 1.6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 12:13:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = int(input("dividendo: "))
divisor = int(input("divisor: "))
resultado = dividendo/divisor
resto = dividendo/divisor


print(dividendo,divisor,resultado,resto)

-- EXECUTION TIME:
0.140765
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1.6 1.6
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7.0 7.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173.5 173.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:13:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = int(input("dividendo: "))
divisor = int(input("divisor: "))
resultado = dividendo//divisor
resto = dividendo//divisor


print(dividendo,divisor,resultado,resto)

-- OUTPUT:
8 5 1 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 12:13:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = int(input("dividendo: "))
divisor = int(input("divisor: "))
resultado = dividendo//divisor
resto = dividendo//divisor


print(dividendo,divisor,resultado,resto)

-- EXECUTION TIME:
0.170684
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 7
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 173
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:14:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = int(input("dividendo: "))
divisor = int(input("divisor: "))
resultado = dividendo//divisor
resto = dividendo//divisor


print(dividendo,divisor,resultado,resto)

-- OUTPUT:
8 5 1 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:14:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = int(input("dividendo: "))
divisor = int(input("divisor: "))
resultado = dividendo//divisor
resto = dividendo % divisor


print(dividendo,divisor,resultado,resto)

-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 12:14:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = int(input("dividendo: "))
divisor = int(input("divisor: "))
resultado = dividendo//divisor
resto = dividendo % divisor


print(dividendo,divisor,resultado,resto)

-- EXECUTION TIME:
0.175189
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 23:18:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = int(input("dividendo: "))
divisor = int(input("divisor: "))
resultado = dividendo//divisor
resto = dividendo % divisor


print(dividendo,divisor,resultado,resto)

-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 23:18:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = int(input("dividendo: "))
divisor = int(input("divisor: "))
resultado = dividendo//divisor
resto = dividendo % divisor


print(dividendo,divisor,resultado,resto)

-- EXECUTION TIME:
0.196757
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
