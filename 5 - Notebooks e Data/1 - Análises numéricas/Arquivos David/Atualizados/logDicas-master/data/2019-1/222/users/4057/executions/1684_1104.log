== TEST (2019-04-18 22:32:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d) or (b == c) or (a == d) or (a == c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", a, ",", b)
		print("Ha intersecao")
	elif (b != d) and (b != c) and (a != d) and (a != c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", a, ",", b)
		print("Ha intersecao")
else 
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", a, ",", b)
	print("Entradas invalidas")
 
-- ERROR:
File "XXXX", line 18
    else 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 22:32:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d) or (b == c) or (a == d) or (a == c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", a, ",", b)
		print("Ha intersecao")
	elif (b != d) and (b != c) and (a != d) and (a != c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", a, ",", b)
		print("Ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", a, ",", b)
	print("Entradas invalidas")
 
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  1.0 , 2.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 22:33:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d) or (b == c) or (a == d) or (a == c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (b != d) and (b != c) and (a != d) and (a != c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
 
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 22:34:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d) or (b == c) or (a == d) or (a == c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (b != d) and (b != c) and (a != d) and (a != c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
 
-- EXECUTION TIME:
0.169718
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 , 5.0
Intervalo 2:  2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 , -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 22:34:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d) or (b == c) or (a == d) or (a == c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (b != d) and (b != c) and (a != d) and (a != c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
 
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 22:38:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d) or (b == c) or (a == d) or (a == c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (b != d) and (b != c) and (a != d) and (a != c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
 
-- EXECUTION TIME:
0.12378
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 , 5.0
Intervalo 2:  2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 , -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 10:56:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (b != d) and (b != c) and (a != d) and (a != c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 10:58:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (b != d) :
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 10:58:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (b != d) :
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.121006
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 , 5.0
Intervalo 2:  2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 , -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 10:58:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (b != d) :
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 10:59:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (b != d) :
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 10:59:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (b == d):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (b != d) :
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 11:05:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (a == b) or (d == c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (a != b) and (d != c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 11:07:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (a == b) or (d == c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (a != b) and (d != c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.149793
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 , 5.0
Intervalo 2:  2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 , -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 09:45:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (a == b) or (d == c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (a != b) and (d != c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 09:46:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

if (b > a) and (d > c):
	if (a == b) or (d == c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Ha intersecao")
	elif (a != b) and (d != c):
		print("Intervalo 1: ", a, ",", b)
		print("Intervalo 2: ", c, ",", d)
		print("Nao ha intersecao")
else :
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 22:00:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print("Intervalo 1: {} , {}".format(a,b))
print("Intervalo 2: {} , {}".format(c,d))

if (b > a) and (d > c):
	print("Entradas invalidas")
	
elif ((c > a) and (c < b))or ((d < b) and (d > a)):
	print("Ha intersecao")
elif (c > b or d < a):
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 22:01:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print("Intervalo 1: {} , {}".format(a,b))
print("Intervalo 2: {} , {}".format(c,d))

if (b > a) and (d > c):
	print("Entradas invalidas")
	
elif ((c > a) and (c < b))or ((d < b) and (d > a)):
	print("Ha intersecao")
elif (c > b or d < a):
	print("Nao ha intersecao")
-- EXECUTION TIME:
0.182373
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Entradas invalidas
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Entradas invalidas
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Nao ha intersecao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 22:02:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print("Intervalo 1: {} , {}".format(a,b))
print("Intervalo 2: {} , {}".format(c,d))

if not(b > a) and (d > c):
	print("Entradas invalidas")
	
elif ((c > a) and (c < b))or ((d < b) and (d > a)):
	print("Ha intersecao")
elif (c > b or d < a):
	print("Nao ha intersecao")
-- EXECUTION TIME:
0.131101
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
