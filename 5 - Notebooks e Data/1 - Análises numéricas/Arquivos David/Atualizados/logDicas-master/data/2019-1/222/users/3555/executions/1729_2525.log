== SUBMITION (2019-05-13 18:36:26) 
-- CODE:
i=int(input())
j=1
while(j!= i):
	d = i/j
	if(i%j == 0):
		print(d)
   j=j+1
print(j,"divisores")
-- EXECUTION TIME:
0.18749
-- ERROR:
  File "/home/codebench/codes/1729/2525/main.py", line 7
    j=j+1
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 18:36:28) 
-- CODE:
i=int(input())
j=1
while(j!= i):
	d = i/j
	if(i%j == 0):
		print(d)
   j=j+1
print(j,"divisores")
-- EXECUTION TIME:
0.138951
-- ERROR:
  File "/home/codebench/codes/1729/2525/main.py", line 7
    j=j+1
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 18:36:29) 
-- CODE:
i=int(input())
j=1
while(j!= i):
	d = i/j
	if(i%j == 0):
		print(d)
   j=j+1
print(j,"divisores")
-- EXECUTION TIME:
0.173909
-- ERROR:
  File "/home/codebench/codes/1729/2525/main.py", line 7
    j=j+1
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:36:30) 
-- CODE:
i=int(input())
j=1
while(j!= i):
	d = i/j
	if(i%j == 0):
		print(d)
   j=j+1
print(j,"divisores")
-- ERROR:
File "XXXX", line 7
    j=j+1
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:36:52) 
-- CODE:
i=int(input())
j=1
while(j!= i):
	d = i/j
	if(i%j == 0):
		print(d)
   j = j+1
print(j,"divisores")
-- ERROR:
File "XXXX", line 7
    j = j+1
          ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:37:05) 
-- CODE:
i=int(input())
j=1
while(j!= i):
	d = i/j
	if(i%j == 0):
		print(d)
   j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 7
    j = j + 1
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:37:57) 
-- CODE:
i=int(input())
j=1
while(j!= i):
d = i/j
	if(i%j == 0):
		print(d)
j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 4
    d = i/j
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:38:26) 
-- CODE:
i=int(input())
j=1
while(j != i):
 d = i/j
	if(i%j == 0):
		print(d)
 j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if(i%j == 0):
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:38:32) 
-- CODE:
i=int(input())
j=1
while(j != i):
 d = i/j
	 if(i%j == 0):
		 print(d)
 j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if(i%j == 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:38:41) 
-- CODE:
i=int(input())
j=1
while(j != i):
 d = i/j
	if(i%j == 0):
	  print(d)
 j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if(i%j == 0):
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 18:38:49) 
-- CODE:
i=int(input())
j=1
while(j != i):
 d = i/j
	if(i%j == 0):
	  print(d)
 j = j + 1
print(j,"divisores")
-- EXECUTION TIME:
0.156497
-- ERROR:
  File "/home/codebench/codes/1729/2525/main.py", line 5
    if(i%j == 0):
                ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:38:50) 
-- CODE:
i=int(input())
j=1
while(j != i):
 d = i/j
	if(i%j == 0):
	  print(d)
 j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if(i%j == 0):
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:39:00) 
-- CODE:
i=int(input())
j=1
while(j != i):
 d = i/j
	 if(i%j == 0):
	   print(d)
 j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if(i%j == 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:39:09) 
-- CODE:
i=int(input())
j=1
while(j != i):
 d = i/j
	 if(i%j == 0):
	   print(d)
 j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if(i%j == 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:41:14) 
-- CODE:
i=int(input())
j=1
while(j != i):
 d = i/j
	 if( i%j == 0):
	   print(d)
 j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if( i%j == 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:41:21) 
-- CODE:
i=int(input())
j=1
while(j != i):
 d = i/j
		 if( i%j == 0):
	   	print(d)
 j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if( i%j == 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:41:26) 
-- CODE:
i=int(input())
j=1
while(j != i):
	 d = i/j
		 if( i%j == 0):
	   	print(d)
 	j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if( i%j == 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:41:32) 
-- CODE:
i=int(input())
j=1
while(j != i):
	 d = i/j
		 if( i%j == 0):
	   		print(d)
 	j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if( i%j == 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:41:39) 
-- CODE:
i=int(input())
j=1
while(j != i):
	 d = i/j
	if( i%j == 0):
	   		print(d)
 	j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if( i%j == 0):
                 ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:50:40) 
-- CODE:
i=int(input())
j=1
while(j != i):
	 d = i/j
	if( i%j == 0):
	   		print(d)
 	j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if( i%j == 0):
                 ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:50:47) 
-- CODE:
i=int(input())
j=1
while(j != i):
	 d = i/j
	if( (i%j) == 0):
	   		print(d)
 	j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if( (i%j) == 0):
                   ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:51:01) 
-- CODE:
i=int(input())
j=1
while(j != i):
	 d = i/j
	 if( (i%j) == 0):
	   print(d)
 	j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 7
    j = j + 1
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:51:11) 
-- CODE:
i=int(input())
j=1
while(j != i):
 d = i/j
	 if( (i%j) == 0):
	   print(d)
 j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if( (i%j) == 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:51:25) 
-- CODE:
i=int(input())
j=1
while(j != i):
   d = i/j
	 if( (i%j) == 0):
				   print(d)
   j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if( (i%j) == 0):
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:52:52) 
-- CODE:
i=int(input())
j=1
while(j != (i+1)):
   d = i/j
	 if( (i%j) == 0):
				   print(d)
   j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if( (i%j) == 0):
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:53:52) 
-- CODE:
i=int(input())
j=1
while(j != (i+1)):
 d = i/j
	 if( (i%j) == 0):
		 print(d)
  j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 5
    if( (i%j) == 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 18:53:57) 
-- CODE:
i=int(input())
j=1
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
  j = j + 1
print(j,"divisores")
-- EXECUTION TIME:
0.186883
-- ERROR:
  File "/home/codebench/codes/1729/2525/main.py", line 7
    j = j + 1
            ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:53:58) 
-- CODE:
i=int(input())
j=1
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
  j = j + 1
print(j,"divisores")
-- ERROR:
File "XXXX", line 7
    j = j + 1
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:54:04) 
-- CODE:
i=int(input())
j=1
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
 j = j + 1
print(j,"divisores")
-- OUTPUT:
12.0
6.0
4.0
3.0
2.0
1.0
13 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 18:54:20) 
-- CODE:
i=int(input())
j=1
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
 j = j + 1
print(j-1,"divisores")
-- EXECUTION TIME:
0.177699
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
12.0
6.0
4.0
3.0
2.0
1.0
12 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
49.0
7.0
1.0
49 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
30.0
15.0
10.0
6.0
5.0
3.0
2.0
1.0
30 divisores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:54:23) 
-- CODE:
i=int(input())
j=1
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
 j = j + 1
print(j-1,"divisores")
-- OUTPUT:
12.0
6.0
4.0
3.0
2.0
1.0
12 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:54:30) 
-- CODE:
i=int(input())
j=1
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
 j = j + 1
print(j-1,"divisores")
-- OUTPUT:
12.0
6.0
4.0
3.0
2.0
1.0
12 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:55:08) 
-- CODE:
i=int(input())
j=1
dd = 0
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
		 dd = dd+1
 j = j + 1
print(,"divisores")
-- ERROR:
File "XXXX", line 10
    print(,"divisores")
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:55:23) 
-- CODE:
i=int(input())
j=1
dd = 0
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
		  dd = dd+1
 j = j + 1
print(d,"divisores")
-- ERROR:
File "XXXX", line 8
    dd = dd+1
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:55:27) 
-- CODE:
i=int(input())
j=1
dd = 0
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
		 dd = dd+1
 j = j + 1
print(d,"divisores")
-- OUTPUT:
12.0
6.0
4.0
3.0
2.0
1.0
1.0 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:55:39) 
-- CODE:
i=int(input())
j=1
dd = 0
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
		 dd = dd + 1
 j = j + 1
print(d,"divisores")
-- OUTPUT:
12.0
6.0
4.0
3.0
2.0
1.0
1.0 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 18:56:06) 
-- CODE:
i=int(input())
j=1
dd = 0
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
		 dd = dd + 1
 j = j + 1
print(dd,"divisores")
-- EXECUTION TIME:
0.152399
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
12.0
6.0
4.0
3.0
2.0
1.0
6 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
49.0
7.0
1.0
3 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
30.0
15.0
10.0
6.0
5.0
3.0
2.0
1.0
8 divisores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:56:08) 
-- CODE:
i=int(input())
j=1
dd = 0
while(j != (i+1)):
 d = i/j
 if( (i%j) == 0):
		 print(d)
		 dd = dd + 1
 j = j + 1
print(dd,"divisores")
-- OUTPUT:
12.0
6.0
4.0
3.0
2.0
1.0
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:56:44) 
-- CODE:
i=int(input())
j=1
dd = 0
while(j != (i+1)):
 d = int(i/j)
 if( (i%j) == 0):
		 print(d)
		 dd = dd + 1
 j = j + 1
print(dd,"divisores")
-- OUTPUT:
12
6
4
3
2
1
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 18:56:54) 
-- CODE:
i=int(input())
j=1
dd = 0
while(j != (i+1)):
 d = int(i/j)
 if( (i%j) == 0):
		 print(d)
		 dd = dd + 1
 j = j + 1
print(dd,"divisores")
-- EXECUTION TIME:
0.160538
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
12
6
4
3
2
1
6 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
49
7
1
3 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
30
15
10
6
5
3
2
1
8 divisores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:58:18) 
-- CODE:
i=int(input())
j=1
dd = 0
while(j != (i+1)):
 d = int(i/j)
 if( (i%j) == 0):
		 print(d)
		 dd = dd + 1
 j = j + 1
print(dd,"divisores")
-- OUTPUT:
12
6
4
3
2
1
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 18:58:55) 
-- CODE:
i=int(input())
j=i
dd = 0
while(j != 0):
 d = int(i/j)
 if( (i%j) == 0):
		 print(d)
		 dd = dd + 1
 j = j - 1
print(dd,"divisores")
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 18:59:04) 
-- CODE:
i=int(input())
j=i
dd = 0
while(j != 0):
 d = int(i/j)
 if( (i%j) == 0):
		 print(d)
		 dd = dd + 1
 j = j - 1
print(dd,"divisores")
-- EXECUTION TIME:
0.163027
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
1
2
3
4
6
12
6 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
1
7
49
3 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
1
2
3
5
6
10
15
30
8 divisores
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
