== TEST (2019-04-15 16:51:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo: ")))
distancia = float(input("valor das entradas: "))

R = ((velocidade_inicial)**2 * sin*(2*angulo)) / 9.8

p = distancia - R

if(abs(p < 0,1)):
	print("sim")
else:
	print("nao")



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = ((velocidade_inicial)**2 * sin*(2*angulo)) / 9.8
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:51:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo: ")))
distancia = float(input("valor das entradas: "))

R = ((velocidade_inicial)**2 * sin*(2*angulo)) / 9.8

p = distancia - R

if(abs(p < 0,1)):
	print("sim")
else:
	print("nao")



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = ((velocidade_inicial)**2 * sin*(2*angulo)) / 9.8
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:52:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo: ")))
distancia = float(input("valor das entradas: "))

R = ((velocidade_inicial**2) * sin*(2*angulo)) / 9.8

p = distancia - R

if(abs(p < 0,1)):
	print("sim")
else:
	print("nao")



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = ((velocidade_inicial**2) * sin*(2*angulo)) / 9.8
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:53:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo: ")))
distancia = float(input("valor das entradas: "))

R = ((velocidade_inicial**2) * sin(2*angulo)) / 9.8

p = distancia - R

if(abs(p < 0,1)):
	print("sim")
else:
	print("nao")



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    if(abs(p < 0,1)):
TypeError: abs() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:54:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo: ")))
distancia = float(input("valor das entradas: "))

R = ((velocidade_inicial**2) * sin(2*angulo)) / 9.8

p = distancia - R

if(abs(p < 0.1)):
	print("sim")
else:
	print("nao")



-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:54:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo: ")))
distancia = float(input("valor das entradas: "))

R = ((velocidade_inicial**2) * sin(2*angulo)) / 9.8

p = distancia - R

if(abs(p < 0.1)):
	print("sim")
else:
	print("nao")



-- EXECUTION TIME:
0.22606
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
