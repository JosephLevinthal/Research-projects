== TEST (2019-04-28 21:50:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = int(input("digite A: "))
B = int(input("digite B: "))
C = int(input("digite C: "))
if((A >= B+c) or (B >= A+C) or (C >= A+B)):
	mensagem = invalido
	else:
		if((A==B) and (B==C)):
			mensagem = equilatero
			else:
				if((A==B) or (B==c) or (c==A))
				mensagem = isosceles
				else:
				mensagem =  escaleno
				
print(mensagem)

-- ERROR:
File "XXXX", line 8
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:51:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = int(input("digite A: "))
B = int(input("digite B: "))
C = int(input("digite C: "))
if((A >= B+c) or (B >= A+C) or (C >= A+B)):
	mensagem = invalido
else:
	if((A==B) and (B==C)):
		mensagem = equilatero
		else:
			if((A==B) or (B==c) or (c==A))
				mensagem = isosceles
			else:
				mensagem =  escaleno
				
print(mensagem)

-- ERROR:
File "XXXX", line 11
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:51:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = int(input("digite A: "))
B = int(input("digite B: "))
C = int(input("digite C: "))
if((A >= B+c) or (B >= A+C) or (C >= A+B)):
	mensagem = invalido
else:
	if((A==B) and (B==C)):
		mensagem = equilatero
	else:
		if((A==B) or (B==c) or (c==A))
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print(mensagem)

-- ERROR:
File "XXXX", line 12
    if((A==B) or (B==c) or (c==A))
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:51:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = int(input("digite A: "))
B = int(input("digite B: "))
C = int(input("digite C: "))
if((A >= B+c) or (B >= A+C) or (C >= A+B)):
	mensagem = invalido
else:
	if((A==B) and (B==C)):
		mensagem = equilatero
	else:
		if((A==B) or (B==c) or (c==A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if((A >= B+c) or (B >= A+C) or (C >= A+B)):
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:52:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))
if((A >= B+c) or (B >= A+C) or (C >= A+B)):
	mensagem = invalido
else:
	if((A==B) and (B==C)):
		mensagem = equilatero
	else:
		if((A==B) or (B==c) or (c==A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if((A >= B+c) or (B >= A+C) or (C >= A+B)):
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:52:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if((A >= B+c) or (B >= A+C) or (C >= A+B)):
	mensagem = invalido
else:
	if((A==B) and (B==C)):
		mensagem = equilatero
	else:
		if((A==B) or (B==c) or (c==A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if((A >= B+c) or (B >= A+C) or (C >= A+B)):
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:01:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A >= B+c) or (B >= A+C) or (C >= A+B)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if((A >= B+c) or (B >= A+C) or (C >= A+B)):
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:02:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A = B+c) and (B = A+C) and (C = A+B)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print(mensagem)

-- ERROR:
File "XXXX", line 9
    if((A = B+c) and (B = A+C) and (C = A+B)):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:02:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A = B+c) or (B = A+C) or (C = A+B)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print(mensagem)

-- ERROR:
File "XXXX", line 9
    if((A = B+c) or (B = A+C) or (C = A+B)):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:05:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A = B+C) or (B = A+C) or (C = B+A)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print(mensagem)

-- ERROR:
File "XXXX", line 9
    if((A = B+C) or (B = A+C) or (C = B+A)):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:06:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A >= B+C) or (B >= A+C) or (C >= B+A)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    mensagem =  escaleno
NameError: name 'escaleno' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:07:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    mensagem = invalido
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:08:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print("Tipo de triangulo": mensagem)

-- ERROR:
File "XXXX", line 20
    print("Tipo de triangulo": mensagem)
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:09:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print(input("Tipo de triangulo"): mensagem)

-- ERROR:
File "XXXX", line 20
    print(input(): mensagem)
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:09:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print("Tipo de triangulo": ,mensagem, )

-- ERROR:
File "XXXX", line 20
    print("Tipo de triangulo": ,mensagem, )
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:10:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    mensagem = invalido
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:11:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A <= B+C) or (B <= A+C) or (C <= B+A)):
	
	mensagem = invalido

else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    mensagem = invalido
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:12:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    mensagem = invalido
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:14:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = invalido

else:
	
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    mensagem = invalido
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:15:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = invalido
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    mensagem = invalido
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:16:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = escaleno
else:
	if((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  invalido
				
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    mensagem = escaleno
NameError: name 'escaleno' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:17:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = invalido
else:
	if ((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if ((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    mensagem = invalido
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:18:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A <= B+C) or (B <= A+C) or (C <= B+A)):
	
else:
	if ((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if ((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
File "XXXX", line 11
    else:
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:19:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = invalido
else:
	if ((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if ((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    mensagem = invalido
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 21:29:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = invalido
else:
	if ((A==B) and (B==C) and (C==A)):
		mensagem = equilatero
	else:
		if ((A==B) and (B==A) and (c!=A)):
			mensagem = isosceles
		else:
			mensagem =  escaleno
				
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    mensagem = invalido
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 21:30:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = "invalido"
else:
	if ((A==B) and (B==C) and (C==A)):
		mensagem = "equilatero"
	else:
		if ((A==B) and (B==A) and (c!=A)):
			mensagem = "isosceles"
		else:
			mensagem =  "escaleno"
				
print("Tipo de triangulo: " ,mensagem, )

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 21:30:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = "invalido"
else:
	if ((A==B) and (B==C) and (C==A)):
		mensagem = "equilatero"
	else:
		if ((A==B) and (B==A) and (c!=A)):
			mensagem = "isosceles"
		else:
			mensagem =  "escaleno"
				
print("Tipo de triangulo: " ,mensagem, )

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 21:30:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A <= B+C) or (B <= A+C) or (C <= B+A)):
	mensagem = "invalido"
else:
	if ((A==B) and (B==C) and (C==A)):
		mensagem = "equilatero"
	else:
		if ((A==B) and (B==A) and (c!=A)):
			mensagem = "isosceles"
		else:
			mensagem =  "escaleno"
				
print("Tipo de triangulo: " ,mensagem, )

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:13:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != A) and (c!= A)):
	mensagem = "escaleno"else:
		mensagem =  "invalidos"
				
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
File "XXXX", line 14
    mensagem = "escaleno"else:
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:13:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != A) and (c!= A)):
	mensagem = "escaleno"
else:
	mensagem =  "invalidos"
	
print("Tipo de triangulo: " ,mensagem, )

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    elif ((A != B) and (B != A) and (c!= A)):
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:15:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C!= A)):
	mensagem = "escaleno"
else:
	mensagem =  "invalidos"
	
print("Tipo de triangulo: " ,mensagem, )

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 00:19:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
else:
	mensagem =  "invalidos"
	
print("Tipo de triangulo: " ,mensagem)

-- EXECUTION TIME:
0.119259
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalidos
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:19:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
else:
	mensagem =  "invalidos"
	
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:20:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if (A<=0 or B <=0 or C<=0):
	mensagem =  "invalidos"
elif ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
	
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:21:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"
elif ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
	
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:21:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"
elif ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
	
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:21:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"
elif ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
	
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 00:21:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"
elif ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
	
print("Tipo de triangulo: " ,mensagem)

-- EXECUTION TIME:
0.20835
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1684/1099/main.py", line 18, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:21:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if (A<=0 or B <=0 or C<=0):
	mensagem =  "escaleno"
elif ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "invalido"
	
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 00:21:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if (A<=0 or B <=0 or C<=0):
	mensagem =  "escaleno"
elif ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "invalido"
	
print("Tipo de triangulo: " ,mensagem)

-- EXECUTION TIME:
0.131586
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1684/1099/main.py", line 18, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:22:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "invalido"
else (A<=0 or B <=0 or C<=0):
	mensagem =  "escaleno"
	
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
File "XXXX", line 15
    else (A<=0 or B <=0 or C<=0):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:23:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "invalido"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "escaleno"
	
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 00:23:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "invalido"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "escaleno"
	
print("Tipo de triangulo: " ,mensagem)

-- EXECUTION TIME:
0.149666
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1684/1099/main.py", line 18, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:23:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"
	
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 00:23:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

print("Entradas:", A, ",", B, ",", C)

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"
	
print("Tipo de triangulo: " ,mensagem)

-- EXECUTION TIME:
0.143141
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1684/1099/main.py", line 18, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:24:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 00:24:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- EXECUTION TIME:
0.161479
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1684/1099/main.py", line 17, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:24:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:24:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B) and (B == C) and (C != A)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Tipo de triangulo: " ,mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:30:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:30:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:30:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 00:31:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- EXECUTION TIME:
0.129283
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 ,  4.4 ,  5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 ,  2.0 ,  7.0
Tipo de triangulo:  escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:31:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "escaleno"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "invalido"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:31:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "invalido"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 00:31:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((A == B) and (B == C) and (C == A)):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif ((A != B) and (B != C) and (C != A)):
	mensagem = "invalido"
elif (A<=0 or B <=0 or C<=0):
	mensagem =  "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- EXECUTION TIME:
0.117337
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 ,  4.4 ,  5.5
Tipo de triangulo:  invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 ,  2.0 ,  7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:37:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if (((A < B + C) or (B < A + C) or (C < B + A)) or ( A <= 0 or B <= 0 or C <= 0)):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 00:38:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if (((A < B + C) or (B < A + C) or (C < B + A)) or ( A <= 0 or B <= 0 or C <= 0)):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- EXECUTION TIME:
0.185598
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 ,  4.4 ,  5.5
Tipo de triangulo:  invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 ,  2.0 ,  7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:38:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if (((A < B + C) or (B < A + C) or (C < B + A)) or ( A <= 0 or B <= 0 or C <= 0)):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:43:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if (((B - C) < A < (B + C)) or ((A - C) < B < (A + C)) or ((A - B) < C < (A + B))) or ( A <= 0 or B <= 0 or C <= 0)):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- ERROR:
File "XXXX", line 7
    if (((B - C) < A < (B + C)) or ((A - C) < B < (A + C)) or ((A - B) < C < (A + B))) or ( A <= 0 or B <= 0 or C <= 0)):
                                                                                                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:43:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((((B - C) < A < (B + C)) or ((A - C) < B < (A + C)) or ((A - B) < C < (A + B))) or ( A <= 0 or B <= 0 or C <= 0)):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 00:43:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((((B - C) < A < (B + C)) or ((A - C) < B < (A + C)) or ((A - B) < C < (A + B))) or ( A <= 0 or B <= 0 or C <= 0)):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- EXECUTION TIME:
0.187147
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 ,  4.4 ,  5.5
Tipo de triangulo:  invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 ,  2.0 ,  7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:43:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((((B - C) < A < (B + C)) or ((A - C) < B < (A + C)) or ((A - B) < C < (A + B)))):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 00:43:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((((B - C) < A < (B + C)) or ((A - C) < B < (A + C)) or ((A - B) < C < (A + B)))):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- EXECUTION TIME:
0.193105
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 ,  4.4 ,  5.5
Tipo de triangulo:  invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 ,  2.0 ,  7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:45:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((((B - C) < A < (B + C)) or ((A - C) < B < (A + C)) or ((A - B) < C < (A + B)))):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:48:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if ((((B - C) < A and A < (B + C)) or ((A - C) < B and B < (A + C)) or ((A - B) < C and C < (A + B)))):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 00:49:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if (B - C < A and A < B + C) or (A - C < B and B < A + C) or (A - B < C and C < A + B):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 14:56:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if (B - C < A and A < B + C) or (A - C < B and B < A + C) or (A - B < C and C < A + B):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 14:56:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if (B - C < A and A < B + C) or (A - C < B and B < A + C) or (A - B < C and C < A + B):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 14:57:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if (B - C < A and A < B + C) or (A - C < B and B < A + C) or (A - B < C and C < A + B):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 14:57:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if (B - C < A and A < B + C) or (A - C < B and B < A + C) or (A - B < C and C < A + B):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 14:57:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if (B - C < A and A < B + C) or (A - C < B and B < A + C) or (A - B < C and C < A + B):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 14:57:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite A: "))
B = float(input("digite B: "))
C = float(input("digite C: "))

if (B - C < A and A < B + C) or (A - C < B and B < A + C) or (A - B < C and C < A + B):
	mensagem = "invalido"
elif (A == B and B == C and C == A):
	mensagem = "equilatero"
elif((A == B and A != C and B != C) or (B == C and B != A and C != A) or (C == A and C != B and A != B)):
	mensagem = "isosceles"
elif (A != B and B != C and C != A):
	mensagem = "escaleno"

print("Entradas: ", A, ", ", B, ", ", C)
print("Tipo de triangulo: " ,mensagem)

-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:05:50) 
-- CODE:
print("*** Digite os lados do triângulo ***")
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

-- OUTPUT:
*** Digite os lados do triângulo ***
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:06:10) 
-- CODE:
print("Digite os lados do triângulo")
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

-- OUTPUT:
Digite os lados do triângulo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:07:50) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:17:12) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if (ladoA == ladoB and ladoB == ladoC):
	print("Tipo de triangulo: equilatero")
elif((ladoA == laboB and ladoA != ladoC) or (ladoC == laboA and ladoC != ladoB) or (ladoC == laboB and ladoB != ladoA)):
	print("Tipo de triangulo: isosceles")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    elif((ladoA == laboB and ladoA != ladoC) or (ladoC == laboA and ladoC != ladoB) or (ladoC == laboB and ladoB != ladoA)):
NameError: name 'laboB' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:17:22) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if (ladoA == ladoB and ladoB == ladoC):
	print("Tipo de triangulo: equilatero")
elif((ladoA == laboB and ladoA != ladoC) or (ladoC == laboA and ladoC != ladoB) or (ladoC == laboB and ladoB != ladoA)):
	print("Tipo de triangulo: isosceles")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    elif((ladoA == laboB and ladoA != ladoC) or (ladoC == laboA and ladoC != ladoB) or (ladoC == laboB and ladoB != ladoA)):
NameError: name 'laboB' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:18:17) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if (ladoA == ladoB and ladoB == ladoC):
	print("Tipo de triangulo: equilatero")
elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
	print("Tipo de triangulo: isosceles")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:18:24) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if (ladoA == ladoB and ladoB == ladoC):
	print("Tipo de triangulo: equilatero")
elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
	print("Tipo de triangulo: isosceles")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:18:30) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if (ladoA == ladoB and ladoB == ladoC):
	print("Tipo de triangulo: equilatero")
elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
	print("Tipo de triangulo: isosceles")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:20:33) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if (ladoA == ladoB and ladoB == ladoC):
	print("Tipo de triangulo: equilatero")
elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
	print("Tipo de triangulo: isosceles")
elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC)
	print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 11
    elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC)
                                                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:21:11) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if (ladoA == ladoB and ladoB == ladoC):
	print("Tipo de triangulo: equilatero")
elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
	print("Tipo de triangulo: isosceles")
elif((ladoA != ladoB) and (ladoA != ladoC) and (ladoB != ladoC))
	print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 11
    elif((ladoA != ladoB) and (ladoA != ladoC) and (ladoB != ladoC))
                                                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:21:57) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if (ladoA == ladoB and ladoB == ladoC):
	print("Tipo de triangulo: equilatero")
elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
	print("Tipo de triangulo: isosceles")
elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:22:12) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if (ladoA == ladoB and ladoB == ladoC):
	print("Tipo de triangulo: equilatero")
elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
	print("Tipo de triangulo: isosceles")
elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:29:54) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if ((ladoB - ladoC) < ladoA < (ladoB + ladoC) or (ladoA - ladoC) < ladoB < (ladoA + ladoC) or (ladoA - ladoB) < ladoC < (ladoA + ladoB))
	if (ladoA == ladoB and ladoB == ladoC):
		print("Tipo de triangulo: equilatero")
	elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
		print("Tipo de triangulo: isosceles")
	elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 7
    if ((ladoB - ladoC) < ladoA < (ladoB + ladoC) or (ladoA - ladoC) < ladoB < (ladoA + ladoC) or (ladoA - ladoB) < ladoC < (ladoA + ladoB))
                                                                                                                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:30:08) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if ((ladoB - ladoC) < ladoA < (ladoB + ladoC) or (ladoA - ladoC) < ladoB < (ladoA + ladoC) or (ladoA - ladoB) < ladoC < (ladoA + ladoB)):
	if (ladoA == ladoB and ladoB == ladoC):
		print("Tipo de triangulo: equilatero")
	elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
		print("Tipo de triangulo: isosceles")
	elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:31:22) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if ((ladoB - ladoC) < ladoA < (ladoB + ladoC) or (ladoA - ladoC) < ladoB < (ladoA + ladoC) or (ladoA - ladoB) < ladoC < (ladoA + ladoB)):
	if (ladoA == ladoB and ladoB == ladoC):
		print("Tipo de triangulo: equilatero")
	elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
		print("Tipo de triangulo: isosceles")
	elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:31:30) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if ((ladoB - ladoC) < ladoA < (ladoB + ladoC) or (ladoA - ladoC) < ladoB < (ladoA + ladoC) or (ladoA - ladoB) < ladoC < (ladoA + ladoB)):
	if (ladoA == ladoB and ladoB == ladoC):
		print("Tipo de triangulo: equilatero")
	elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
		print("Tipo de triangulo: isosceles")
	elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:31:39) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if ((ladoB - ladoC) < ladoA < (ladoB + ladoC) or (ladoA - ladoC) < ladoB < (ladoA + ladoC) or (ladoA - ladoB) < ladoC < (ladoA + ladoB)):
	if (ladoA == ladoB and ladoB == ladoC):
		print("Tipo de triangulo: equilatero")
	elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
		print("Tipo de triangulo: isosceles")
	elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:33:22) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if ((ladoB - ladoC) < ladoA and ladoA < (ladoB + ladoC) or (ladoA - ladoC) < ladoB and ladoB < (ladoA + ladoC) or (ladoA - ladoB) < ladoC and ladoC < (ladoA + ladoB)):
	if (ladoA == ladoB and ladoB == ladoC):
		print("Tipo de triangulo: equilatero")
	elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
		print("Tipo de triangulo: isosceles")
	elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:33:47) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if ((ladoB - ladoC) < ladoA and ladoA < (ladoB + ladoC) and (ladoA - ladoC) < ladoB and ladoB < (ladoA + ladoC) and (ladoA - ladoB) < ladoC and ladoC < (ladoA + ladoB)):
	if (ladoA == ladoB and ladoB == ladoC):
		print("Tipo de triangulo: equilatero")
	elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
		print("Tipo de triangulo: isosceles")
	elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:33:57) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if ((ladoB - ladoC) < ladoA and ladoA < (ladoB + ladoC) and (ladoA - ladoC) < ladoB and ladoB < (ladoA + ladoC) and (ladoA - ladoB) < ladoC and ladoC < (ladoA + ladoB)):
	if (ladoA == ladoB and ladoB == ladoC):
		print("Tipo de triangulo: equilatero")
	elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
		print("Tipo de triangulo: isosceles")
	elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:34:09) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if ((ladoB - ladoC) < ladoA and ladoA < (ladoB + ladoC) and (ladoA - ladoC) < ladoB and ladoB < (ladoA + ladoC) and (ladoA - ladoB) < ladoC and ladoC < (ladoA + ladoB)):
	if (ladoA == ladoB and ladoB == ladoC):
		print("Tipo de triangulo: equilatero")
	elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
		print("Tipo de triangulo: isosceles")
	elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-18 15:34:18) 
-- CODE:
ladoA = float(input("digite o lado A: "))
ladoB = float(input("digite o lado B: "))
ladoC = float(input("digite o lado C: "))

print("Entradas: ", ladoA, ",", ladoB, ",", ladoC)

if ((ladoB - ladoC) < ladoA and ladoA < (ladoB + ladoC) and (ladoA - ladoC) < ladoB and ladoB < (ladoA + ladoC) and (ladoA - ladoB) < ladoC and ladoC < (ladoA + ladoB)):
	if (ladoA == ladoB and ladoB == ladoC):
		print("Tipo de triangulo: equilatero")
	elif((ladoA == ladoB and ladoA != ladoC) or (ladoC == ladoA and ladoC != ladoB) or (ladoC == ladoB and ladoB != ladoA)):
		print("Tipo de triangulo: isosceles")
	elif(ladoA != ladoB and ladoA != ladoC and ladoB != ladoC):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- EXECUTION TIME:
0.139236
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
