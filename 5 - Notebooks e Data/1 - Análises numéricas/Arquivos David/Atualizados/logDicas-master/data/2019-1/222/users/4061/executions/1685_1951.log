== TEST (2019-05-02 23:46:09) 
-- CODE:
x0 = float(input("digite x0: "))
y0 = float(input("digite y0: "))
x1 = float(input("digite x1: "))
y1 = float(input("digite y1: "))
x2 = float(input("digite x2: "))
y2 = float(input("digite y2: "))

C = (((x1 - x0)*(y2 - y0))-((x2 - x0)*(y1 - y0)))

if(C < 0):
	mensagem = "A direita da reta"
elif(C > 0):
	mensagem = "A esquerda da reta"
elif(C == 0):
	mensagem = "Sobre a reta"
	
print(mensagem)
-- OUTPUT:
A esquerda da reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 23:46:36) 
-- CODE:
x0 = float(input("digite x0: "))
y0 = float(input("digite y0: "))
x1 = float(input("digite x1: "))
y1 = float(input("digite y1: "))
x2 = float(input("digite x2: "))
y2 = float(input("digite y2: "))

C = (((x1 - x0)*(y2 - y0))-((x2 - x0)*(y1 - y0)))

if(C < 0):
	mensagem = "A direita da reta"
elif(C > 0):
	mensagem = "A esquerda da reta"
elif(C == 0):
	mensagem = "Sobre a reta"
	
print(mensagem)
-- OUTPUT:
A esquerda da reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 23:47:28) 
-- CODE:
x0 = float(input("digite x0: "))
y0 = float(input("digite y0: "))
x1 = float(input("digite x1: "))
y1 = float(input("digite y1: "))
x2 = float(input("digite x2: "))
y2 = float(input("digite y2: "))

C = (((x1 - x0)*(y2 - y0))-((x2 - x0)*(y1 - y0)))

if(C < 0):
	mensagem = "A direita da reta"
elif(C > 0):
	mensagem = "A esquerda da reta"
elif(C == 0):
	mensagem = "Sobre a reta"
	
print(mensagem)
-- OUTPUT:
A esquerda da reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 23:47:59) 
-- CODE:
x0 = float(input("digite x0: "))
y0 = float(input("digite y0: "))
x1 = float(input("digite x1: "))
y1 = float(input("digite y1: "))
x2 = float(input("digite x2: "))
y2 = float(input("digite y2: "))

C = (((x1 - x0)*(y2 - y0))-((x2 - x0)*(y1 - y0)))

if(C < 0):
	mensagem = "A direita da reta"
elif(C > 0):
	mensagem = "A esquerda da reta"
elif(C == 0):
	mensagem = "Sobre a reta"
	
print(mensagem)
-- EXECUTION TIME:
0.146882
-- TEST CASE 1:
---- input:
1
4
3
5
9
9
---- correct output:
A esquerda da reta
---- user output:
A esquerda da reta
-- TEST CASE 2:
---- input:
9
8
6
5
2
1
---- correct output:
Sobre a reta
---- user output:
Sobre a reta
-- TEST CASE 3:
---- input:
0
0
0
1
1
1
---- correct output:
A direita da reta
---- user output:
A direita da reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
