== TEST (2019-04-01 19:02:50) 
-- CODE:
from math import*
h = float(input("H: "))
g = 9,81
v = sqrt(2*g*h)
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = sqrt(2*g*h)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:03:28) 
-- CODE:
from math import*
h = float(input("H: "))
g = 9,81
v = sqrt(2*g*h)
print(float(v))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = sqrt(2*g*h)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:03:50) 
-- CODE:
from math import*
h = float(input("H: "))
g = 9,81
v = sqrt(float(2*g*h))
print(float(v))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = sqrt(float(2*g*h))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:04:27) 
-- CODE:
from math import*
h = float(input("H: "))
g = 9,81
v = float(sqrt(2*g*h))
print(float(v))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = float(sqrt(2*g*h))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:05:50) 
-- CODE:
from math import*
h = float(input("H: "))
g =9,81
v = sqrt(2*g*h)
v1 = float(v)
print(v1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = sqrt(2*g*h)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:06:57) 
-- CODE:
from math import*
g = 9,81
h = float(input("H: "))
v = sqrt(float(2*g*h))
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = sqrt(float(2*g*h))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:29:12) 
-- CODE:
from math import*
g = 9,81
h = float(input("H: "))
v = float(sqrt(2*g*h))
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = float(sqrt(2*g*h))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:29:34) 
-- CODE:
from math import*
g = 9,81
h = float(input("H: "))
v = sqrt(2*g*h)
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = sqrt(2*g*h)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:34:00) 
-- CODE:
h = float(input())
g = 9,81
from math import*
v = sqrt(2*g*h)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = sqrt(2*g*h)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:34:47) 
-- CODE:
h = float(input())
g = float(9,81)
from math import*
v = sqrt(2*g*h)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    g = float(9,81)
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:35:09) 
-- CODE:
h = float(input())
g = 9.81
from math import*
v = sqrt(2*g*h)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    g = float(9,81)
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:35:27) 
-- CODE:
h = float(input())
g = 9.81
from math import*
v = sqrt(2*g*h)
print(v)
-- OUTPUT:
54.753410852658305
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:35:36) 
-- CODE:
h = float(input())
g = 9.81
from math import*
v = sqrt(2*g*h)
print(v)
-- EXECUTION TIME:
0.142586
-- TEST CASE 1:
---- input:
152.8
---- correct output:
54.753410852658305
---- user output:
54.753410852658305
-- TEST CASE 2:
---- input:
325.3
---- correct output:
79.8898366502273
---- user output:
79.8898366502273
-- TEST CASE 3:
---- input:
12.7
---- correct output:
15.785246276190943
---- user output:
15.785246276190943
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
