== TEST (2019-04-24 19:03:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas" a "," b "," c ",")

-- ERROR:
File "XXXX", line 6
    print("Entradas" a "," b "," c ",")
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:03:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas" a "," b "," c )

-- ERROR:
File "XXXX", line 6
    print("Entradas" a "," b "," c )
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:04:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:04:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:09:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<=b+c)or(b<=c+a)or(c<=a+b)):
	print("ok")
else:
	print("invalido")

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:10:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<=b+c)and(b<=c+a)and(c<=a+b)):
	print("ok")
else:
	print("invalido")

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:10:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<=b+c)and(b<=c+a)and(c<=a+b)):
	print("ok")
else:
	print("invalido")

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:11:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	print("ok")
else:
	print("invalido")

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:12:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	print("ok")
else:
	print("invalido")

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:18:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:18:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:19:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:19:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b=c)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b=c)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:19:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if(a=b=c):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if(a=b=c):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:20:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a=b)and(b=c)and(c=a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 8
    if((a=b)and(b=c)and(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:22:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	if((a!=b)and(b!=c)or(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 10
    if((a!=b)and(b!=c)or(c!=a))
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:22:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	if((a!=b)and(b!=c)and(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 10
    if((a!=b)and(b!=c)and(c!=a))
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:22:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	if((a!==b)and(b!==c)and(c!==a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 10
    if((a!==b)and(b!==c)and(c!==a))
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:23:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	   if((a!=b)and(b!=c)and(c!=a))
		print("escaleno")
	   else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 10
    if((a!=b)and(b!=c)and(c!=a))
                               ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:24:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
		if((a!=b)and(b!=c)and(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 10
    if((a!=b)and(b!=c)and(c!=a))
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:24:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
		else((a!=b)and(b!=c)and(c!=a))
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 10
    else((a!=b)and(b!=c)and(c!=a))
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:28:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		print("escaleno")
	else:
		print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 12
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:30:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a))
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 11
    if((a!=b)and(b!=c)and(c!=a))
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:30:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a))
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 11
    if((a!=b)and(b!=c)and(c!=a))
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:31:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a))
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("invalido")

-- ERROR:
File "XXXX", line 11
    if((a!=b)and(b!=c)and(c!=a))
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:31:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("invalido")

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:32:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("invalido")

-- EXECUTION TIME:
0.138489
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:32:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.174119
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:32:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.227722
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas 2.0 , 4.0 , 4.0
isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:32:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.133148
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:32:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.316145
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:32:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.296522
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:32:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.314861
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:32:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.175296
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:32:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:33:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:33:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:33:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:34:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada a: "))
b=float(input("entrada b: "))
c=float(input("entrada c: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.141468
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:35:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada A: "))
b=float(input("entrada B: "))
c=float(input("entrada C: "))		  
print("Entradas", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.146593
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:36:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada A: "))
b=float(input("entrada B: "))
c=float(input("entrada C: "))		  
print("Entradas:" a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.16692
-- ERROR:
  File "/home/codebench/codes/1684/1099/main.py", line 6
    print("Entradas:" a, ",", b, ",", c )
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:36:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada A: "))
b=float(input("entrada B: "))
c=float(input("entrada C: "))		  
print("Entradas:" a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.156358
-- ERROR:
  File "/home/codebench/codes/1684/1099/main.py", line 6
    print("Entradas:" a, ",", b, ",", c )
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:36:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada A: "))
b=float(input("entrada B: "))
c=float(input("entrada C: "))		  
print("Entradas:" a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" a, ",", b, ",", c )
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:37:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada A: "))
b=float(input("entrada B: "))
c=float(input("entrada C: "))		  
print("Entradas:", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("escaleno")
		else:
			print("isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:39:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("entrada A: "))
b=float(input("entrada B: "))
c=float(input("entrada C: "))		  
print("Entradas:", a, ",", b, ",", c )
if((a<b+c)and(b<c+a)and(c<a+b)):
	if((a==b)and(b==c)and(c==a)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a!=b)and(b!=c)and(c!=a)):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: isosceles")
		
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.140743
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
