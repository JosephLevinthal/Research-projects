== TEST (2019-03-25 19:24:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=(ni/ni)+(ni(n//2))+

-- ERROR:
File "XXXX", line 5
    np=(ni/ni)+(ni(n//2))+
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:25:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=((ni//ni)+(ni(n//2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    np=((ni//ni)+(ni(n//2)))
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:30:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=((ni//ni)+(ni(n//2))+(ni%1231))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    np=((ni//ni)+(ni(n//2))+(ni%1231))
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:30:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=((ni//ni)+(ni(n//2))+(ni%1231))+(ni%4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    np=((ni//ni)+(ni(n//2))+(ni%1231))+(ni%4)
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:30:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=((ni//ni)+(ni(ni//2))+(ni%1231))+(ni%4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    np=((ni//ni)+(ni(ni//2))+(ni%1231))+(ni%4)
TypeError: 'int' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:31:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=((ni//ni)+(ni(ni//2))+((ni%1231))+(ni%4))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    np=((ni//ni)+(ni(ni//2))+((ni%1231))+(ni%4))
TypeError: 'int' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:32:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=((ni//ni)+(ni//617)+(ni%1231)+(ni%4))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    np=((ni//ni)+(ni(ni//2))+((ni%1231))+(ni%4))
TypeError: 'int' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:33:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=((ni//ni)+(ni//617)+(ni%1231)+(ni%4))
print(np)
-- OUTPUT:
572
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:33:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=((ni//ni)+(ni//617)+(ni%1231)+(ni%4))
print(np)
-- EXECUTION TIME:
0.153804
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
572
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1014
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:34:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=((ni//ni)+(ni//617)+(ni%1231)+(ni%1230))
print(np)
-- EXECUTION TIME:
0.165988
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
1134
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2022
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:34:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=((ni//ni)+(ni//617)+(ni%1231)+(ni%1230))
print(np)
-- OUTPUT:
1134
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:35:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
ni= int(input("ni: "))
np=((ni//ni)+(ni//617)+(ni%1231)+(ni%1230))
print(np)
-- EXECUTION TIME:
0.202682
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
1134
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2022
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:12:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
n=int(input("n:"))
dn=((n%(n-1))+(n%(n-1))+(n//n)+(n//n))
-- OUTPUT:
1134
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:14:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
n=int(input("n:"))
dn=((n%(n-1))+(n%(n-1))+(n//n)+(n//n))
print(dn)
-- OUTPUT:
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:14:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
n=int(input("n:"))
dn=((n%(n-1))+(n%(n-1))+(n//n)+(n//n))
print(dn)
-- EXECUTION TIME:
0.22699
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
4
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:26:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
from math import*
n=int(input("n:"))
while(n>0):
	resto=(n%10)
	n=(n-resto)//10
	soma=(soma+resto)
	print(soma)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    soma=(soma+resto)
NameError: name 'soma' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:27:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
from math import*
n=int(input("n:"))
while(n>0):
	resto=(n%10)
	n=(n-resto)//10
	soma=(n+resto)
	print(soma)

-- OUTPUT:
920
98
10
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:27:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrig
from math import*
n=int(input("n:"))
while(n>0):
	resto=(n%10)
	n=(n-resto)//10
	soma=(n+resto)
	print(n)

-- OUTPUT:
917
91
9
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
