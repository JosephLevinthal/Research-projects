== TEST (2019-03-22 14:17:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input("digite um numero"))
n2 = int(input("digite um numero"))
n3 = int(input("digite um numero"))
min = (n1,n2,n3)
max = (n1,n2,n3)
print(ordem crescente)
-- ERROR:
File "XXXX", line 9
    print(ordem crescente)
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:22:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = n1 = int(input("digite um numero"))
b = n2 = int(input("digite um numero"))
c = n3 = int(input("digite um numero"))
d = min = (n1,n2,n3)
e = max = (n1,n2,n3)
f = (n1+n2+n3)-(n4+n5)
print(n4)
print(n5)
print(n6)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = (n1+n2+n3)-(n4+n5)
NameError: name 'n4' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:24:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = n1 = int(input("digite um numero"))
b = n2 = int(input("digite um numero"))
c = n3 = int(input("digite um numero"))
d = min = (n1,n2,n3)
e = max = (n1,n2,n3)
f = (n1+n2+n3)-(n4+n5)
print(n4)
print(n6)
print(n5)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = (n1+n2+n3)-(n4+n5)
NameError: name 'n4' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:28:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um numero"))
b = int(input("digite um numero"))
c = int(input("digite um numero"))
d = min(a,b,c)
e = max(a,b,c)
f = (a+b+c)-(d+e)
print(d)
print(e)
print(f)
-- OUTPUT:
-2
10
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 14:28:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um numero"))
b = int(input("digite um numero"))
c = int(input("digite um numero"))
d = min(a,b,c)
e = max(a,b,c)
f = (a+b+c)-(d+e)
print(d)
print(e)
print(f)
-- EXECUTION TIME:
0.176714
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:29:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um numero:"))
b = int(input("digite um numero:"))
c = int(input("digite um numero:"))
d = min(a,b,c)
e = max(a,b,c)
f = (a+b+c)-(d+e)
print(d)
print(e)
print(f)
-- OUTPUT:
-2
10
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 14:30:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um numero:"))
b = int(input("digite um numero:"))
c = int(input("digite um numero:"))
d = min(a,b,c)
e = max(a,b,c)
f = (a+b+c)-(d+e)
print(d)
print(e)
print(f)
-- EXECUTION TIME:
0.150701
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:30:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um numero:"))
b = int(input("digite um numero:"))
c = int(input("digite um numero:"))
d = min (a,b,c)
e = max (a,b,c)
f = (a+b+c)-(d+e)
print(d)
print(e)
print(f)
-- OUTPUT:
-2
10
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 14:31:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um numero:"))
b = int(input("digite um numero:"))
c = int(input("digite um numero:"))
d = min (a,b,c)
e = max (a,b,c)
f = (a+b+c)-(d+e)
print(d)
print(e)
print(f)
-- EXECUTION TIME:
0.121067
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:31:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um numero:"))
b = int(input("digite um numero:"))
c = int(input("digite um numero:"))
d = min (a,b,c)
e = max (a,b,c)
f = (a+b+c)-(d+e)
print(d)
print(f)
print(e)
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 14:32:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um numero:"))
b = int(input("digite um numero:"))
c = int(input("digite um numero:"))
d = min (a,b,c)
e = max (a,b,c)
f = (a+b+c)-(d+e)
print(d)
print(f)
print(e)
-- EXECUTION TIME:
0.156319
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
