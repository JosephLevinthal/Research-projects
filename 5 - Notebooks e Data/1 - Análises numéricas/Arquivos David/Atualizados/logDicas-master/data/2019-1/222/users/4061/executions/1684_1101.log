== TEST (2019-05-17 22:14:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo,)

if(R <= 500):
	mensagem = total*0.44
elif(R > 500):
	mensagem = total*0.65
elif(C <= 1000):
	mensagem = total*0.55
elif(C > 1000):
	mensagem = total*0.60
elif(I <= 5000):
	mensagem = total*0.55
else:
	mensagem = total*0.60
	
print("Valor total:"  ,mensagem,)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if(R <= 500):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-17 22:15:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo,)

if(R < 500):
	mensagem = total*0.44
elif(R > 500):
	mensagem = total*0.65
elif(C < 1000):
	mensagem = total*0.55
elif(C > 1000):
	mensagem = total*0.60
elif(I < 5000):
	mensagem = total*0.55
else:
	mensagem = total*0.60
	
print("Valor total:"  ,mensagem,)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if(R < 500):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-17 22:16:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo,)

if("R" < 500):
	mensagem = total*0.44
elif("R" > 500):
	mensagem = total*0.65
elif("C" < 1000):
	mensagem = total*0.55
elif("C" > 1000):
	mensagem = total*0.60
elif("I" < 5000):
	mensagem = total*0.55
else:
	mensagem = total*0.60
	
print("Valor total:"  ,mensagem,)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if("R" < 500):
TypeError: '<' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-17 22:17:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo,)

if(str()"R" < 500):
	mensagem = total*0.44
elif(str()"R" > 500):
	mensagem = total*0.65
elif(str()"C" < 1000):
	mensagem = total*0.55
elif(str()"C" > 1000):
	mensagem = total*0.60
elif(str()"I" < 5000):
	mensagem = total*0.55
else:
	mensagem = total*0.60
	
print("Valor total:"  ,mensagem,)
	
-- ERROR:
File "XXXX", line 9
    if(str()"R" < 500):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-17 22:17:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo,)

if(str()."R" < 500):
	mensagem = total*0.44
elif(str()."R" > 500):
	mensagem = total*0.65
elif(str()."C" < 1000):
	mensagem = total*0.55
elif(str()."C" > 1000):
	mensagem = total*0.60
elif(str()."I" < 5000):
	mensagem = total*0.55
else:
	mensagem = total*0.60
	
print("Valor total:"  ,mensagem,)
	
-- ERROR:
File "XXXX", line 9
    if(str()."R" < 500):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:52:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo)

if(INVALIDO):
	print("Dados invalidos")
elif(tipo == "R")
	if(total < 500):
		print("Valor total:"  ,total-(total*0.44))
	else:
		print("Valor total:"  ,total-(total*0.65))
elif(tipo == "C"):
	if(total < 1000):
		print("Valor total:"  ,total-(total*0.55))
	else:
		print("Valor total:"  ,total-(total*0.60))
elif(tipo == "I")
	if(total < 5000):
		print("Valor total:"  ,total-(total*0.55))
	else:
		print("Valor total:"  ,total*0.60)
	

	
-- ERROR:
File "XXXX", line 11
    elif(tipo == "R")
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:54:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo)

if((tipo != "R" or tipo != "C" or  tipo != "I") and total < 0):
	print("Dados invalidos")
elif(tipo == "R")
	if(total < 500):
		print("Valor total:"  ,total-(total*0.44))
	else:
		print("Valor total:"  ,total-(total*0.65))
elif(tipo == "C"):
	if(total < 1000):
		print("Valor total:"  ,total-(total*0.55))
	else:
		print("Valor total:"  ,total-(total*0.60))
elif(tipo == "I")
	if(total < 5000):
		print("Valor total:"  ,total-(total*0.55))
	else:
		print("Valor total:"  ,total*0.60)
	

	
-- ERROR:
File "XXXX", line 11
    elif(tipo == "R")
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:54:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo)

if((tipo != "R" or tipo != "C" or  tipo != "I") and total < 0):
	print("Dados invalidos")
elif(tipo == "R"):
	if(total < 500):
		print("Valor total:"  ,total-(total*0.44))
	else:
		print("Valor total:"  ,total-(total*0.65))
elif(tipo == "C"):
	if(total < 1000):
		print("Valor total:"  ,total-(total*0.55))
	else:
		print("Valor total:"  ,total-(total*0.60))
elif(tipo == "I"):
	if(total < 5000):
		print("Valor total:"  ,total-(total*0.55))
	else:
		print("Valor total:"  ,total*0.60)
	

	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:57:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo)

if((tipo != "R" or tipo != "C" or  tipo != "I") and total < 0):
	print("Dados invalidos")
elif(tipo == "R"):
	if(total < 500):
		conta = total-(total*0.44)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total-(total*0.65)
		print("Valor total: ",round(conta, 2))
elif(tipo == "C"):
	if(total < 1000):
		conta = total-(total*0.55)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total-(total*0.60
		print("Valor total: ",round(conta, 2))
elif(tipo == "I"):
	if(total < 5000):
		conta = total-(total*0.55)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
	

	
-- ERROR:
File "XXXX", line 24
    print("Valor total: ",round(conta, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:57:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo)

if((tipo != "R" or tipo != "C" or  tipo != "I") and total < 0):
	print("Dados invalidos")
elif(tipo == "R"):
	if(total < 500):
		conta = total-(total*0.44)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total-(total*0.65)
		print("Valor total: ",round(conta, 2))
elif(tipo == "C"):
	if(total < 1000):
		conta = total-(total*0.55)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total-(total*0.60)
		print("Valor total: ",round(conta, 2))
elif(tipo == "I"):
	if(total < 5000):
		conta = total-(total*0.55)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
	

	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:58:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo)

if((tipo != "R" or tipo != "C" or  tipo != "I") and total < 0):
	print("Dados invalidos")
elif(tipo == "R"):
	if(total < 500):
		conta = total+(total*0.44)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total+(total*0.65)
		print("Valor total: ",round(conta, 2))
elif(tipo == "C"):
	if(total < 1000):
		conta = total-(total*0.55)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total+(total*0.60)
		print("Valor total: ",round(conta, 2))
elif(tipo == "I"):
	if(total < 5000):
		conta = total+(total*0.55)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total +(total*0.60)
		print("Valor total: ",round(conta, 2))
	

	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 15:59:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo)

if((tipo != "R" or tipo != "C" or  tipo != "I") and total < 0):
	print("Dados invalidos")
elif(tipo == "R"):
	if(total < 500):
		conta = total+(total*0.44)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total+(total*0.65)
		print("Valor total: ",round(conta, 2))
elif(tipo == "C"):
	if(total < 1000):
		conta = total+(total*0.55)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total+(total*0.60)
		print("Valor total: ",round(conta, 2))
elif(tipo == "I"):
	if(total < 5000):
		conta = total+(total*0.55)
		print("Valor total: ",round(conta, 2))
	else:
		conta = total +(total*0.60)
		print("Valor total: ",round(conta, 2))
	

	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 16:00:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo)

if((tipo != "R" or tipo != "C" or  tipo != "I") and total < 0):
	print("Dados invalidos")
elif(tipo == "R"):
	if(total < 500):
		conta = total*0.44
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.65
		print("Valor total: ",round(conta, 2))
elif(tipo == "C"):
	if(total < 1000):
		conta = total*0.55
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
elif(tipo == "I"):
	if(total < 5000):
		conta = total*0.55
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
	

	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-18 16:00:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo)

if((tipo != "R" or tipo != "C" or  tipo != "I") and total < 0):
	print("Dados invalidos")
elif(tipo == "R"):
	if(total < 500):
		conta = total*0.44
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.65
		print("Valor total: ",round(conta, 2))
elif(tipo == "C"):
	if(total < 1000):
		conta = total*0.55
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
elif(tipo == "I"):
	if(total < 5000):
		conta = total*0.55
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
	

	
-- EXECUTION TIME:
0.185877
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo R
Valor total:  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 16:01:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo)

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
elif(tipo.upper() == "R"):
	if(total < 500):
		conta = total*0.44
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.65
		print("Valor total: ",round(conta, 2))
elif(tipo.upper() == "C"):
	if(total < 1000):
		conta = total*0.55
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
elif(tipo.upper() == "I"):
	if(total < 5000):
		conta = total*0.55
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
	

	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 16:01:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo.upper())

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
elif(tipo.upper() == "R"):
	if(total < 500):
		conta = total*0.44
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.65
		print("Valor total: ",round(conta, 2))
elif(tipo.upper() == "C"):
	if(total < 1000):
		conta = total*0.55
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
elif(tipo.upper() == "I"):
	if(total < 5000):
		conta = total*0.55
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
	

	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 16:02:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo.upper())

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
elif(tipo.upper() == "R"):
	if(total < 500):
		conta = total*0.44
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.65
		print("Valor total: ",round(conta, 2))
elif(tipo.upper() == "C"):
	if(total < 1000):
		conta = total*0.55
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
elif(tipo.upper() == "I"):
	if(total < 5000):
		conta = total*0.55
		print("Valor total: ",round(conta, 2))
	else:
		conta = total*0.60
		print("Valor total: ",round(conta, 2))
	

	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 16:02:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo.upper())

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
elif(tipo.upper() == "R"):
	if(total < 500):
		conta = total*0.44
	else:
		conta = total*0.65
elif(tipo.upper() == "C"):
	if(total < 1000):
		conta = total*0.55
	else:
		conta = total*0.60
elif(tipo.upper() == "I"):
	if(total < 5000):
		conta = total*0.55
	else:
		conta = total*0.60

print("Valor total: ",round(conta, 2))
	

	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 27, in <module>
    print("Valor total: ",round(conta, 2))
NameError: name 'conta' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 16:03:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo.upper())

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
elif(tipo.upper() == "R"):
	if(total <= 500):
		conta = total*0.44
	else:
		conta = total*0.65
elif(tipo.upper() == "C"):
	if(total <= 1000):
		conta = total*0.55
	else:
		conta = total*0.60
elif(tipo.upper() == "I"):
	if(total <= 5000):
		conta = total*0.55
	else:
		conta = total*0.60

print("Valor total: ",round(conta, 2))
	

	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 27, in <module>
    print("Valor total: ",round(conta, 2))
NameError: name 'conta' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 16:03:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo.upper())

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
elif(tipo.upper() == "R"):
	if(total <= 500):
		conta = total*0.44
	else:
		conta = total*0.65
elif(tipo.upper() == "C"):
	if(total <= 1000):
		conta = total*0.55
	else:
		conta = total*0.60
elif(tipo.upper() == "I"):
	if(total <= 5000):
		conta = total*0.55
	else:
		conta = total*0.60

print("Valor total: ",round(conta, 2))
	

	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 27, in <module>
    print("Valor total: ",round(conta, 2))
NameError: name 'conta' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-18 16:03:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo.upper())

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
elif(tipo.upper() == "R"):
	if(total <= 500):
		conta = total*0.44
	else:
		conta = total*0.65
elif(tipo.upper() == "C"):
	if(total <= 1000):
		conta = total*0.55
	else:
		conta = total*0.60
elif(tipo.upper() == "I"):
	if(total <= 5000):
		conta = total*0.55
	else:
		conta = total*0.60

print("Valor total: ",round(conta, 2))
	

	
-- EXECUTION TIME:
0.186527
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1684/1101/main.py", line 27, in <module>
    print("Valor total: ",round(conta, 2))
NameError: name 'conta' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 16:04:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo.upper())

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
elif(tipo.upper() == "R"):
	if(total <= 500):
		conta = total*0.44
	else:
		conta = total*0.65
elif(tipo.upper() == "C"):
	if(total <= 1000):
		conta = total*0.55
	else:
		conta = total*0.60
elif(tipo.upper() == "I"):
	if(total <= 5000):
		conta = total*0.55
	else:
		conta = total*0.60

print("Valor total: ",round(conta, 2))
	

	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 27, in <module>
    print("Valor total: ",round(conta, 2))
NameError: name 'conta' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 16:04:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo.upper())

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
else:
	elif(tipo.upper() == "R"):
		if(total <= 500):
			conta = total*0.44
		else:
			conta = total*0.65
	elif(tipo.upper() == "C"):
		if(total <= 1000):
			conta = total*0.55
		else:
			conta = total*0.60
	elif(tipo.upper() == "I"):
		if(total <= 5000):
			conta = total*0.55
		else:
			conta = total*0.60
	print("Valor total: ",round(conta, 2))
	

	
-- ERROR:
File "XXXX", line 12
    elif(tipo.upper() == "R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 16:05:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo.upper())

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
else:
	if(tipo.upper() == "R"):
		if(total <= 500):
			conta = total*0.44
		else:
			conta = total*0.65
	elif(tipo.upper() == "C"):
		if(total <= 1000):
			conta = total*0.55
		else:
			conta = total*0.60
	elif(tipo.upper() == "I"):
		if(total <= 5000):
			conta = total*0.55
		else:
			conta = total*0.60
	print("Valor total: ",round(conta, 2))
	

	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-18 16:05:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo.upper())

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
else:
	if(tipo.upper() == "R"):
		if(total <= 500):
			conta = total*0.44
		else:
			conta = total*0.65
	elif(tipo.upper() == "C"):
		if(total <= 1000):
			conta = total*0.55
		else:
			conta = total*0.60
	elif(tipo.upper() == "I"):
		if(total <= 5000):
			conta = total*0.55
		else:
			conta = total*0.60
	print("Valor total: ",round(conta, 2))
	

	
-- EXECUTION TIME:
0.131027
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo R
Valor total:  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 16:05:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
total = float(input("digite valor: "))
tipo = input("digite tipo: ")

print("Entradas: " ,total, "kwh e tipo" ,tipo.upper())

if((tipo.upper() != "R" or tipo.upper() != "C" or  tipo.upper() != "I") and total < 0):
	print("Dados invalidos")
else:
	if(tipo.upper() == "R"):
		if(total <= 500):
			conta = total*0.44
		else:
			conta = total*0.65
	elif(tipo.upper() == "C"):
		if(total <= 1000):
			conta = total*0.55
		else:
			conta = total*0.60
	elif(tipo.upper() == "I"):
		if(total <= 5000):
			conta = total*0.55
		else:
			conta = total*0.60
	print("Valor total: ",round(conta, 2))
	

	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
