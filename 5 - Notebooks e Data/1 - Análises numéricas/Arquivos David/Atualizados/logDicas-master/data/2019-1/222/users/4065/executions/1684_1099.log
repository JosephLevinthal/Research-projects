== TEST (2019-04-24 13:41:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x >= y + z) and (y >= x + z) and (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isoceles")
		else:
			print("escaleno")




-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:41:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x >= y + z) and (y >= x + z) and (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isoceles")
		else:
			print("escaleno")




-- EXECUTION TIME:
0.148172
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:42:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x >= y + z) and (y >= x + z) and (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isoceles")
	else:
		print("escaleno")




-- ERROR:
File "XXXX", line 15
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:43:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x >= y + z) and (y >= x + z) and (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isoceles")
		else:
			print("escaleno")




-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:43:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x < y + z) and (y < x + z) and (z < x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isoceles")
		else:
			print("escaleno")




-- OUTPUT:
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:44:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x > y + z) and (y > x + z) and (z > x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isoceles")
		else:
			print("escaleno")




-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:44:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x > y + z) or (y > x + z) or (z > x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isoceles")
		else:
			print("escaleno")




-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:45:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x >= y + z) or (y >= x + z) or (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isoceles")
		else:
			print("escaleno")




-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:45:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x >= y + z) or (y >= x + z) or (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isoceles")
		else:
			print("escaleno")




-- EXECUTION TIME:
0.203742
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:47:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))
if(x < 0 ) or (y < 0) or (z < 0):
	print("invalido")
elif(x >= y + z) or (y >= x + z) or (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isoceles")
		else:
			print("escaleno")




-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:47:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))
if(x < 0 ) or (y < 0) or (z < 0):
	print("invalido")
elif(x >= y + z) or (y >= x + z) or (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isoceles")
		else:
			print("escaleno")




-- EXECUTION TIME:
0.226418
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:47:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x < 0 ) or (y < 0) or (z < 0):
	print("invalido")
elif(x >= y + z) or (y >= x + z) or (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z):
			print("isosceles")
		else:
			print("escaleno")




-- EXECUTION TIME:
0.191852
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:48:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x < 0 ) or (y < 0) or (z < 0):
	print("invalido")
elif(x >= y + z) or (y >= x + z) or (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z) or (y == z):
			print("isosceles")
		else:
			print("escaleno")




-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:48:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x < 0 ) or (y < 0) or (z < 0):
	print("invalido")
elif(x >= y + z) or (y >= x + z) or (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z) or (y == z):
			print("isosceles")
		else:
			print("escaleno")




-- EXECUTION TIME:
0.302714
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:48:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

if(x < 0 ) or (y < 0) or (z < 0):
	print("invalido")
elif(x >= y + z) or (y >= x + z) or (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z) or (y == z):
			print("isosceles")
		else:
			print("escaleno")




-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:50:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))
print("Entradas:",x,",",y,",",z)
if(x < 0 ) or (y < 0) or (z < 0):
	print("invalido")
elif(x >= y + z) or (y >= x + z) or (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z) or (y == z):
			print("isosceles")
		else:
			print("escaleno")




-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:53:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

print("Entradas:",x,",",y,",",z)
if(x < 0 ) or (y < 0) or (z < 0):
	tipo = "invalido"
elif(x >= y + z) or (y >= x + z) or (z >= x + y):
	tipo = "invalido"
else:
	if((x == y) and (y == z)):
		tipo = "equilatero"
	else:
		if(x == y) or (x == z) or (y == z):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:53:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

print("Entradas:",x,",",y,",",z)
if(x < 0 ) or (y < 0) or (z < 0):
	tipo = "invalido"
elif(x >= y + z) or (y >= x + z) or (z >= x + y):
	tipo = "invalido"
else:
	if((x == y) and (y == z)):
		tipo = "equilatero"
	else:
		if(x == y) or (x == z) or (y == z):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)


-- EXECUTION TIME:
0.274075
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:30:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

print("Entradas:",x,",",y,",",z)
if(x < 0 ) or (y < 0) or (z < 0):
			 print("invalido")
elif(x >= y + z) or (y >= x + z) or (z >= x + y):
	print("invalido")
else:
	if((x == y) and (y == z)):
		print("equilatero")
	else:
		if(x == y) or (x == z) or (y == z):
			print("isosceles")
		else:
			 print("escaleno")

print("Tipo de triangulo:",tipo)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print("Tipo de triangulo:",tipo)
NameError: name 'tipo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:31:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1: "))
y = float(input("lado 2: "))
z = float(input("lado 3: "))

print("Entradas:",x,",",y,",",z)
if(x < 0 ) or (y < 0) or (z < 0):
	tipo = "invalido"
elif(x >= y + z) or (y >= x + z) or (z >= x + y):
	tipo = "invalido"
else:
	if((x == y) and (y == z)):
		tipo = "equilatero"
	else:
		if(x == y) or (x == z) or (y == z):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
