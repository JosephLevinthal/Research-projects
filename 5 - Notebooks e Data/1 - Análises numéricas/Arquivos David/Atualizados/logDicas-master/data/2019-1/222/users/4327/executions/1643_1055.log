== TEST (2019-04-14 13:54:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidae=float(input("velocidade inicial: "))
angulo=int(radians(input("angulo de tiro: ")))
distancia=float(input("valor da distancia: "))

if ():
	print("SUFICIENTE")
else:
	print("INSUFICIENTE")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo=int(radians(input()))
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:01:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=int(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade.sin(radians(2*angulo)/9.8))

print(r)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo=int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:02:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=int(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(r)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo=int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:02:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=int(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(r)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo=int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:03:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=int(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(r)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo=int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:04:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(r)

-- OUTPUT:
17.78969310976693
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:04:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(r)

-- OUTPUT:
17.78969310976693
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:04:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(r)

-- OUTPUT:
17.78969310976693
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:06:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(abs(x))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(abs(x))
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:06:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(abs(x))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(abs(x))
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:07:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(abs(x-0.1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(abs(x-0.1))
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:09:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(abs(r-0.1))

-- OUTPUT:
17.689693109766928
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:09:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(abs(r-0.1))

-- OUTPUT:
17.689693109766928
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:10:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(abs(r-0.1))

-- OUTPUT:
17.689693109766928
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:13:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

print(abs(r-0.1))

-- OUTPUT:
17.689693109766928
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:15:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

if(abs(r-0.1)==20):
		print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 14:16:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

if(abs(r-0.1)==20):
		print("sim")
else:
	print("nao")

-- EXECUTION TIME:
9.15062
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:22:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin((2*angulo)/9.8))

if(abs(r-0.1)==20):
		print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:22:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin((2*angulo))/9.8

if(abs(r-0.1)==20):
		print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 11
    if(abs(r-0.1)==20):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:22:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin((2*angulo))/9.8

if(abs(r-0.1)==20):
		print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 11
    if(abs(r-0.1)==20):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:22:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin((2*angulo)/9.8))

if(abs(r-0.1)==20):
		print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:22:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin((2*angulo)/9.8))

if(abs(distancia-r)==20):
		print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 14:23:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin((2*angulo)/9.8))

if(abs(distancia-r)==20):
		print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.168913
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:23:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin((2*angulo)/9.8))

if(abs(distancia-r)==20):
		print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:23:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin((2*angulo)/9.8))

if(abs(distancia-r)==20):
		print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:29:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin((2*angulo)/9.8))

if(abs(distancia-r)==20):
		print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:22:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

if(abs(distancia-r)==distancia):
		print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:25:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

if(abs(distancia-r) > 0.1):
		print("sim")
else:
	  print("nao")

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:26:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

if(abs(distancia-r) < 0.1):
		print("sim")
else:
	  print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 22:27:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

if(abs(distancia-r) < 0.1):
		print("sim")
else:
	  print("nao")

-- EXECUTION TIME:
0.213931
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 22:31:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

if(abs(distancia-r) < distancia):
		print("sim")
else:
	  print("nao")

-- EXECUTION TIME:
0.23565
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:31:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

if(abs(distancia-r) < distancia):
		print("sim")
else:
	  print("nao")

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 22:32:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=(velocidade*velocidade*sin(radians(2*angulo)/9.8))

if(abs(distancia-r) < distancia):
		print("sim")
else:
	  print("nao")

-- EXECUTION TIME:
0.209412
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:09:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=((velocidade*velocidade)*sin(2*(radians(angulo))/9.8))
p=distancia-r
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 23:10:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
velocidade=float(input("velocidade inicial: "))
angulo=float(input("angulo de tiro: "))
distancia=float(input("valor da distancia: "))

r=((velocidade*velocidade)*sin(2*(radians(angulo))/9.8))
p=distancia-r
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- EXECUTION TIME:
0.284505
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 23:12:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("velocidade inicial: "))
a=float(input("angulo de tiro: "))
d=float(input("valor da distancia: "))

r=((v**2)*sin(2*(radians(angulo)))/9.8
p=distancia-r
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- EXECUTION TIME:
0.217795
-- ERROR:
  File "/home/codebench/codes/1643/1055/main.py", line 10
    p=distancia-r
    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:12:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("velocidade inicial: "))
a=float(input("angulo de tiro: "))
d=float(input("valor da distancia: "))

r=((v**2)*sin(2*(radians(angulo)))/9.8
p=distancia-r
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- ERROR:
File "XXXX", line 10
    p=distancia-r
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:12:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("velocidade inicial: "))
a=float(input("angulo de tiro: "))
d=float(input("valor da distancia: "))

r=((v**2)*sin(2*(radians(angulo)))/9.8
p=d-r
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- ERROR:
File "XXXX", line 10
    p=d-r
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:13:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("velocidade inicial: "))
a=float(input("angulo de tiro: "))
d=float(input("valor da distancia: "))

r=((v**2)*sin(2*(radians(v0)))/9.8
p=d-r
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- ERROR:
File "XXXX", line 10
    p=d-r
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:15:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("velocidade inicial: "))
a=float(input("angulo de tiro: "))
d=float(input("valor da distancia: "))

r=(((v**2)*sin(2*(radians(v0)))/9.8)
	
p=d-r
	
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- ERROR:
File "XXXX", line 11
    p=d-r
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:17:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("velocidade inicial: "))
a=float(input("angulo de tiro: "))
d=float(input("valor da distancia: "))

r=(((v**2)*sin(2*(radians(v0)))/9.8)
	
p =  d - r
	
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- ERROR:
File "XXXX", line 11
    p =  d - r
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:20:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("velocidade inicial: "))
a=float(input("angulo de tiro: "))
d=float(input("valor da distancia: "))

r=(((v**2)*sin(2*(radians(a)))/9.8)
	
p =  d - r
	
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- ERROR:
File "XXXX", line 11
    p =  d - r
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:22:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("velocidade inicial: "))
a=radians(float(input("angulo de tiro: ")))
d=float(input("valor da distancia: "))

r=((v**2)*sin(2*a))/9.8
	
p =  d - r
	
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    r=((v**2)*sin(2*a))/9.8
NameError: name 'v' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:23:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("velocidade inicial: "))
a=(float(input("angulo de tiro: ")))
d=float(input("valor da distancia: "))

r=((v**2)*sin(radians(2*a))/9.8
	
p =  d - r
	
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- ERROR:
File "XXXX", line 11
    p =  d - r
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:24:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("velocidade inicial: "))
a=(float(input("angulo de tiro: ")))
d=float(input("valor da distancia: "))

r=((v**2)*sin(2*radians(a))/9.8
	
p =  d - r
	
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- ERROR:
File "XXXX", line 11
    p =  d - r
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:24:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("velocidade inicial: "))
a=(float(input("angulo de tiro: ")))
d=float(input("valor da distancia: "))

r=((v0**2)*sin(2*radians(a))/9.8
	
p =  d - r
	
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- ERROR:
File "XXXX", line 11
    p =  d - r
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:25:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial: "))
a=radians(float(input("angulo de tiro: ")))
d=float(input("valor da distancia: "))

r=((v**2)*sin(2*a))/9.8
	
p =  d - r
	
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 23:26:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial: "))
a=radians(float(input("angulo de tiro: ")))
d=float(input("valor da distancia: "))

r=((v**2)*sin(2*a))/9.8
	
p =  d - r
	
if(abs(p) < 0.1):
		print("sim")
else:
	 	print("nao")

-- EXECUTION TIME:
0.141454
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
