== TEST (2019-03-21 13:46:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 13:46:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print(max(a, b, c))
-- OUTPUT:
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 13:46:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print(max(a, b, c))
-- EXECUTION TIME:
0.200969
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 13:47:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))

-- EXECUTION TIME:
0.170433
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 13:47:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))

-- EXECUTION TIME:
0.138004
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 13:47:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))

-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 13:50:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print((a+b+c)-min(a, b, c))-(max(a, b, c))
print(max(a, b, c))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print((a+b+c)-min(a, b, c))-(max(a, b, c))
TypeError: unsupported operand type(s) for -: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 13:52:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print(a+b+c)
print(max(a, b, c))


-- OUTPUT:
-2
8
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 13:53:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print(a+b+c) - (min(a, b, c) -(max(a, b, c))
print(max(a, b, c))


-- ERROR:
File "XXXX", line 9
    print(max(a, b, c))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 13:53:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print(a+b+c) - (min(a, b, c) -(max(a, b, c))
print(max(a,b,c))


-- ERROR:
File "XXXX", line 9
    print(max(a,b,c))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:19:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print(a+b+c) - (min(a, b, c) -(max(a, b, c))
print(max(a,b,c))


-- ERROR:
File "XXXX", line 9
    print(max(a,b,c))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:20:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print(max(a,b,c))


-- OUTPUT:
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:23:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print((a+b+c) - min(a, b, c)) - ((a+b+c) - max(a, b, c))
print(max(a,b,c))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print((a+b+c) - min(a, b, c)) - ((a+b+c) - max(a, b, c))
TypeError: unsupported operand type(s) for -: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 18:15:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print((a+b+c)-(min(a,b,c)))
print(max(a,b,c))


-- OUTPUT:
-2
10
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 18:17:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print((a+b+c)-(min(a,b,c))-(max(a,b,c)))
print(max(a,b,c))


-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 18:17:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("a: "))
b= int(input("b: "))
c= int(input("c: "))
print(min(a, b, c))
print((a+b+c)-(min(a,b,c))-(max(a,b,c)))
print(max(a,b,c))


-- EXECUTION TIME:
0.192489
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
