== TEST (2019-04-29 17:18:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0) or (c>(a+b) or (b>(c+a) or (a>(b+c))):
	print("Tipo de triangulo: invalido")
elif (a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif (a==b or b==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
		

-- ERROR:
File "XXXX", line 13
    if (a<0 or b<0 or c<0) or (c>(a+b) or (b>(c+a) or (a>(b+c))):
                                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 17:19:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0) or c>(a+b) or (b>(c+a) or (a>(b+c)):
	print("Tipo de triangulo: invalido")
elif (a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif (a==b or b==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
		

-- ERROR:
File "XXXX", line 13
    if (a<0 or b<0 or c<0) or c>(a+b) or (b>(c+a) or (a>(b+c)):
                                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 17:19:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0 or c>(a+b) or (b>(c+a) or (a>(b+c)):
	print("Tipo de triangulo: invalido")
elif (a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif (a==b or b==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
		

-- ERROR:
File "XXXX", line 13
    if (a<0 or b<0 or c<0 or c>(a+b) or (b>(c+a) or (a>(b+c)):
                                                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 17:20:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0 or (c>(a+b)) or (b>(c+a)) or (a>(b+c)):
	print("Tipo de triangulo: invalido")
elif (a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif (a==b or b==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
		

-- ERROR:
File "XXXX", line 13
    if (a<0 or b<0 or c<0 or (c>(a+b)) or (b>(c+a)) or (a>(b+c)):
                                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 17:20:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0 or (c>(a+b)) or (b>(c+a)) or (a>(b+c))):
	print("Tipo de triangulo: invalido")
elif (a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif (a==b or b==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 17:21:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0 or (c>(a+b)) or (b>(c+a)) or (a>(b+c))):
	print("Tipo de triangulo: invalido")
elif (a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif (a==b or b==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
		

-- EXECUTION TIME:
0.205896
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
