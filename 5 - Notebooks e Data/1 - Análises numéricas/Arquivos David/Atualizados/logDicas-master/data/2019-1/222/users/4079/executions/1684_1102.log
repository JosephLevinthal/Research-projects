== TEST (2019-04-30 01:23:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio"))
if(h>0 or H>0 or r>0):
	vol=litros
elif(h<r):
	vol=(1./3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    vol=litros
NameError: name 'litros' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 01:23:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio"))
if(h>0 or H>0 or r>0):
	vol=-1
elif(h<r):
	vol=(1./3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    vol=litros
NameError: name 'litros' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 01:24:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
if(h>0 or H>0 or r>0):
	vol=-1
elif(h<r):
	vol=(1./3)
-- EXECUTION TIME:
0.156184
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:

-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 01:24:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
if(h>0 or H>0 or r>0):
	vol=-1
elif(h<r):
	vol=(1./3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    vol=litros
NameError: name 'litros' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 01:24:46) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
if(h>0 or H>0 or r>0):
	vol=-1
elif(h<r):
	vol=(1./3)
-- EXECUTION TIME:
0.131468
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:

-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 23:19:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))

if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
else:
	vol = -1
	
print(round(vol,3))
-- OUTPUT:
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 23:20:12) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))

if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
else:
	vol = -1
	
print(round(vol,3))
-- EXECUTION TIME:
0.172801
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
81.987
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
-1
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
234.572
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 23:20:46) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))

if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
else:
	vol = -1
	
print(round(vol,3))
-- OUTPUT:
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 23:21:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))

if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
else:
	vol = -1
	
print(round(vol,3))
-- EXECUTION TIME:
0.220538
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
81.987
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
-1
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
234.572
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 23:24:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
else:
	vol = -1
	
print(round(vol,3))
-- OUTPUT:
Entrada: 11.3 , 5.7 , 2.3
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 23:25:18) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
else:
	vol = -1
	
print(round(vol,3))
-- EXECUTION TIME:
0.166116
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entrada: 11.3 , 5.7 , 2.3
81.987
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entrada: 8.5 , 9.5 , 2.2
-1
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entrada: 8.0 , 4.0 , 6.0
234.572
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 23:25:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
else:
	vol = -1
	
print(round(vol,3))
-- OUTPUT:
Entrada: 11.3 , 5.7 , 2.3
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 23:25:42) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
else:
	vol = -1
	
print(round(vol,3))
-- EXECUTION TIME:
0.152847
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entrada: 11.3 , 5.7 , 2.3
81.987
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entrada: 8.5 , 9.5 , 2.2
-1
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entrada: 8.0 , 4.0 , 6.0
234.572
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 23:27:27) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
else:
	print("volume:litros")
	vol = -1
	
print(round(vol,3))
-- OUTPUT:
Entrada: 11.3 , 5.7 , 2.3
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 23:27:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
else:
	print("volume:litros")
	vol = -1
	
print(round(vol,3))
-- EXECUTION TIME:
0.189788
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entrada: 11.3 , 5.7 , 2.3
81.987
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entrada: 8.5 , 9.5 , 2.2
volume:litros
-1
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entrada: 8.0 , 4.0 , 6.0
234.572
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 23:31:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", vol)
   else:
		print("volume:litros")
	   vol = -1
else:
	print("volume: litros")
-- ERROR:
File "XXXX", line 21
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 23:31:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", vol)
else:
	print("volume:litros")
	vol = -1
else:
	print("volume: litros")
-- ERROR:
File "XXXX", line 24
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 23:32:10) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", vol)
else:
	print("volume:litros")
	vol = -1
   else:
		print("volume: litros")
-- ERROR:
File "XXXX", line 24
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 23:32:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", vol)
else:
	print("volume:litros")
	vol = -1
else:
print("volume: litros")
-- ERROR:
File "XXXX", line 24
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 23:32:34) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", vol)
else:
	print("volume:litros")
	vol = -1
print("volume: litros")
-- OUTPUT:
Entrada: 11.3 , 5.7 , 2.3
volume: litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 23:32:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("digite a altura: "))
h=float(input("digite nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(h<0 or H<0 or r<0):
	vol=-1
elif(h<r):
	vol=(1./3)* pi * h**2 * (3*r-h)
elif(h < H - r):
	vol=(2./3)* pi * r**3 + pi * r**2 * (h-r)
elif(h <= H):
	vol=(4./3)* pi * r**3 + pi * r**2 * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", vol)
else:
	print("volume:litros")
	vol = -1
print("volume: litros")
-- EXECUTION TIME:
0.209987
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entrada: 11.3 , 5.7 , 2.3
volume: litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entrada: 8.5 , 9.5 , 2.2
volume:litros
volume: litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entrada: 8.0 , 4.0 , 6.0
volume: litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 19:12:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("altura dp tanque: "))
h=float(input("nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(H>0 and h>0 and r>0 H>h and H>2*r): 
	if(h<r):
		v=(1/3)* pi * (h**2) * (3*r-h)
	elif(h < H - r):
		v=(2/3)* pi * (r**3) + pi * (r**2) * (h-r)
	elif(h <= H):
		v=(4/3)* pi * (r**3) + pi * (r**2) * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", round(1000*v,3),"litros")
else:
	
print("Entradas invalidas")
-- ERROR:
File "XXXX", line 12
    if(H>0 and h>0 and r>0 H>h and H>2*r): 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 19:13:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("altura dp tanque: "))
h=float(input("nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(H>0 and h>0 and r>0 H>h and H >2*r): 
	if(h<r):
		v=(1/3)* pi * (h**2) * (3*r-h)
	elif(h < H - r):
		v=(2/3)* pi * (r**3) + pi * (r**2) * (h-r)
	elif(h <= H):
		v=(4/3)* pi * (r**3) + pi * (r**2) * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", round(1000*v,3),"litros")
else:
	
print("Entradas invalidas")
-- ERROR:
File "XXXX", line 12
    if(H>0 and h>0 and r>0 H>h and H >2*r): 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 19:14:47) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("altura dp tanque: "))
h=float(input("nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(H>0 and h>0 and r>0 H>h and H >2*r): 
	if(h<r):
		v=(1/3)* pi * (h**2) * (3*r-h)
	elif(h < H - r):
		v=(2/3)* pi * (r**3) + pi * (r**2) * (h-r)
	elif(h <= H):
		v=(4/3)* pi * (r**3) + pi * (r**2) * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", round(1000*v,3),"litros")
else:
	
print("Entradas invalidas")
-- ERROR:
File "XXXX", line 12
    if(H>0 and h>0 and r>0 H>h and H >2*r): 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-03 19:14:51) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("altura dp tanque: "))
h=float(input("nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entrada:", H, ",", h, ",", r)
if(H>0 and h>0 and r>0 H>h and H >2*r): 
	if(h<r):
		v=(1/3)* pi * (h**2) * (3*r-h)
	elif(h < H - r):
		v=(2/3)* pi * (r**3) + pi * (r**2) * (h-r)
	elif(h <= H):
		v=(4/3)* pi * (r**3) + pi * (r**2) * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", round(1000*v,3),"litros")
else:
	
print("Entradas invalidas")
-- EXECUTION TIME:
0.626234
-- ERROR:
  File "/home/codebench/codes/1684/1102/main.py", line 12
    if(H>0 and h>0 and r>0 H>h and H >2*r): 
                           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 19:15:08) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("altura dp tanque: "))
h=float(input("nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entradas:", H, ",", h, ",", r)
if(H>0 and h>0 and r>0 H>h and H >2*r): 
	if(h<r):
		v=(1/3)* pi * (h**2) * (3*r-h)
	elif(h < H - r):
		v=(2/3)* pi * (r**3) + pi * (r**2) * (h-r)
	elif(h <= H):
		v=(4/3)* pi * (r**3) + pi * (r**2) * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", round(1000*v,3),"litros")
else:
	
print("Entradas invalidas")
-- ERROR:
File "XXXX", line 12
    if(H>0 and h>0 and r>0 H>h and H >2*r): 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 19:15:48) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("altura dp tanque: "))
h=float(input("nivel de conbustivel:"))
r=float(input("digite o raio:"))
print("Entradas:", H, ",", h, ",", r)
if(H > 0 and h > 0 and r > 0 H > h and H > 2*r): 
	if(h<r):
		v=(1/3)* pi * (h**2) * (3*r-h)
	elif(h < H - r):
		v=(2/3)* pi * (r**3) + pi * (r**2) * (h-r)
	elif(h <= H):
		v=(4/3)* pi * (r**3) + pi * (r**2) * (H-2 *r) -(1/3) * pi * (H-h)**2*(3*r-H+h)	
	print("Volume:", round(1000*v,3),"litros")
else:
	
print("Entradas invalidas")
-- ERROR:
File "XXXX", line 12
    if(H > 0 and h > 0 and r > 0 H > h and H > 2*r): 
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-21 00:53:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("altura do tanque: "))
h=float(input("nivel de conbustivel: "))
r=float(input("digite o raio: "))
print("Entradas:", H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r): 
	if(h<r):
		v=(1/3)* pi * (h**2) * (3*r-h)
	elif(h < H - r):
		v=(2/3)* pi * (r**3) + pi * (r**2) * (h-r)
	elif(h <= H):
		v=(4/3)* pi * (r**3) + pi * (r**2) * (H-2 *r)-(1/3) * pi * ((H-h)**2)*(3*r-H+h)	
	print("Volume:", round(1000*v,3),"litros")
else:
	
print("Entradas invalidas")
-- ERROR:
File "XXXX", line 22
    print("Entradas invalidas")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-21 00:53:59) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("altura do tanque: "))
h=float(input("nivel de conbustivel: "))
r=float(input("digite o raio: "))
print("Entradas:", H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r): 
	if(h<r):
		v=(1/3)* pi * (h**2) * (3*r-h)
	elif(h < H - r):
		v=(2/3)* pi * (r**3) + pi * (r**2) * (h-r)
	elif(h <= H):
		v=(4/3)* pi * (r**3) + pi * (r**2) * (H-2 *r)-(1/3) * pi * ((H-h)**2)*(3*r-H+h)	
	print("Volume:", round(1000*v,3),"litros")
else:
	
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-21 00:54:27) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H=float(input("altura do tanque: "))
h=float(input("nivel de conbustivel: "))
r=float(input("digite o raio: "))
print("Entradas:", H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r): 
	if(h<r):
		v=(1/3)* pi * (h**2) * (3*r-h)
	elif(h < H - r):
		v=(2/3)* pi * (r**3) + pi * (r**2) * (h-r)
	elif(h <= H):
		v=(4/3)* pi * (r**3) + pi * (r**2) * (H-2 *r)-(1/3) * pi * ((H-h)**2)*(3*r-H+h)	
	print("Volume:", round(1000*v,3),"litros")
else:
	
	print("Entradas invalidas")
-- EXECUTION TIME:
0.683916
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
