== TEST (2019-04-25 20:20:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:20:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:20:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
else:
	print("ok")

-- OUTPUT:
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:21:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
else:
	print("ok")

-- OUTPUT:
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:22:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")


-- OUTPUT:
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:24:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
elif((a<=x)and(x<=b)):
	print("x pertence ao intervalo a,b")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    elif((a<=x)and(x<=b)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:26:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
elif((a<=x)and(b>=x)):
	print("x pertence ao intervalo a,b")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    elif((a<=x)and(b>=x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:26:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
elif((a<=x)and(b>=x)):
	print("x pertence ao intervalo a,b")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    elif((a<=x)and(b>=x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:27:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
elif((a<=x)and(x<=b)):
	print("x pertence ao intervalo a,b")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    elif((a<=x)and(b>=x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:29:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
elif((a<=x)and(x<=b)):
	print("x pertence ao intervalo", a ,",",b)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    elif((a<=x)and(b>=x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:30:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
elif((a<=x)and(x<=b)):
	print(x ,"pertence ao intervalo", a ,",",b)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    elif((a<=x)and(b>=x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:33:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
elif((a<=x)and(x<=b)):
	print(x ,"pertence ao intervalo", a ,",",b)
elif((a>=x)or(x>=b)):
	print(x ,"nao pertence ao intervalo", a ,",",b)


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:34:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
elif((a<=x)and(x<=b)):
	print(x ,"pertence ao intervalo", a ,",",b)
elif((a>=x)or(x>=b)):
	print(x ,"nao pertence ao intervalo", a ,",",b)


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:34:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
elif((a<=x)and(x<=b)):
	print(x ,"pertence ao intervalo", a ,",",b)
elif((a>=x)or(x>=b)):
	print(x ,"nao pertence ao intervalo", a ,",",b)


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 20:35:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
elif((a<=x)and(x<=b)):
	print(x ,"pertence ao intervalo", a ,",",b)
elif((a>=x)or(x>=b)):
	print(x ,"nao pertence ao intervalo", a ,",",b)


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 20:36:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas a e b invalidas")
elif((a<=x)and(x<=b)):
	print(x ,"pertence ao intervalo", a ,",",b)
elif((a>=x)or(x>=b)):
	print(x ,"nao pertence ao intervalo", a ,",",b)


-- EXECUTION TIME:
0.118036
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 20:37:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("Valor x: "))
a=float(input("Valor a: "))
b=float(input("Valor b: "))
if(b<=a):
	print("Entradas", a ,"e", b ,"invalidas")
elif((a<=x)and(x<=b)):
	print(x ,"pertence ao intervalo", a ,",",b)
elif((a>=x)or(x>=b)):
	print(x ,"nao pertence ao intervalo", a ,",",b)


-- EXECUTION TIME:
0.198513
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
