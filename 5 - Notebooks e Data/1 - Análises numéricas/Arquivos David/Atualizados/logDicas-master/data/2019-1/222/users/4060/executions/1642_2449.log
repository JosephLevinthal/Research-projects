== TEST (2019-04-15 14:24:12) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
x=(c*e-b*f)/a*e-b*d
y=(a*f-c*d)/a*e-b*d
if(a*e-b*d==0):
	men="Nao tem solucao"
else:
	men=x
	men=y
print(men)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:24:55) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
x=(c*e-b*f)/a*e-b*d
y=(a*f-c*d)/a*e-b*d
if(a*e-b*d==0):
	men="Nao tem solucao"
else:
	men=x
	men=y
print(men)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:25:12) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
x=(c*e-b*f)/a*e-b*d
y=(a*f-c*d)/a*e-b*d
if(a*e-b*d==0):
	men="Nao tem solucao"
else:
	men=x
	men=y
print(men)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:25:12) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
x=(c*e-b*f)/a*e-b*d
y=(a*f-c*d)/a*e-b*d
if(a*e-b*d==0):
	men="Nao tem solucao"
else:
	men=x
	men=y
print(men)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:26:49) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
x=(c*e-b*f)/a*e-b*d
y=(a*f-c*d)/a*e-b*d
if(a*e-b*d==0):
	men="Nao tem solucao"
else:
	men=x
	men=y
print(men)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:29:29) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	x=(c*e-b*f)/a*e-b*d
   y=(a*f-c*d)/a*e-b*d
print(x)
-- ERROR:
File "XXXX", line 12
    y=(a*f-c*d)/a*e-b*d
                      ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:30:04) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	x=(c*e-b*f)/a*e-b*d
   
print(x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:31:18) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/a*e-b*d)
   

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:33:06) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/a*e-b*d)
   

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:33:23) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/a*e-b*d)
   

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:37:38) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
   

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:38:20) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
   print((a*f-c*d)/(a*e-b*d))

-- ERROR:
File "XXXX", line 12
    print((a*f-c*d)/(a*e-b*d))
                             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:39:19) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
   print((a*f-c*d)/(a*e-b*d))

-- ERROR:
File "XXXX", line 12
    print((a*f-c*d)/(a*e-b*d))
                             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:40:16) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	
   print((a*f-c*d)/(a*e-b*d))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:42:42) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
   print((a*f-c*d)/(a*e-b*d))

-- ERROR:
File "XXXX", line 12
    print((a*f-c*d)/(a*e-b*d))
                             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:46:43) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
   
	print((a*f-c*d)/(a*e-b*d))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:47:18) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
   print((a*f-c*d)/(a*e-b*d))

-- ERROR:
File "XXXX", line 12
    print((a*f-c*d)/(a*e-b*d))
                             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:48:21) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
	print((a*f-c*d)/(a*e-b*d))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 14:48:38) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
	print((a*f-c*d)/(a*e-b*d))

-- EXECUTION TIME:
0.165437
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1642/2449/main.py", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 14:50:15) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
	
	print((a*f-c*d)/(a*e-b*d))

-- EXECUTION TIME:
0.152496
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1642/2449/main.py", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:50:20) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
	
	print((a*f-c*d)/(a*e-b*d))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:50:36) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
	print((a*f-c*d)/(a*e-b*d))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:51:00) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
	print((a*f-c*d)/(a*e-b*d))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 14:52:54) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("Nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
	print((a*f-c*d)/(a*e-b*d))

-- EXECUTION TIME:
0.185113
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1642/2449/main.py", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:55:39) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
	print((a*f-c*d)/(a*e-b*d))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 14:55:48) 
-- CODE:
a=int(input("coeficiente a: "))
b=int(input("coeficiente b: "))
c=int(input("coeficiente c: "))
d=int(input("coeficiente d: "))
e=int(input("coeficiente e: "))
f=int(input("coeficiente f: "))
if(a*e-b*d==0):
	print("nao tem solucao")

else:
	print((c*e-b*f)/(a*e-b*d))
	print((a*f-c*d)/(a*e-b*d))

-- EXECUTION TIME:
0.14345
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1642/2449/main.py", line 1, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '10.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
