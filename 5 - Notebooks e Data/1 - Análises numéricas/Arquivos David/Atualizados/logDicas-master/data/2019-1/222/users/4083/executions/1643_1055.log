== TEST (2019-04-10 13:19:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
D = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

R = (((vo)**2)*(sin(2*a1)))/g
R1 = abs(D - R)



if  (R1 < 0.1):
     print("sim")
		
else:
	 print("não")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    R = (((vo)**2)*(sin(2*a1)))/g
NameError: name 'vo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:21:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo)**2)*(sin(2*a1)))/g
r1 = abs(d - r)



if  (r1 < 0.1):
     print("sim")
		
else:
	 print("não")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    r = (((vo)**2)*(sin(2*a1)))/g
NameError: name 'vo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:21:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo)**2)*(sin(2*a1)))/g
r1 = abs(d - r)



if  (r1 < 0.1):
     print("sim")
		
else:
	 print("não")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    r = (((vo)**2)*(sin(2*a1)))/g
NameError: name 'vo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:21:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo)**2)*(sin(2*a1)))/g
r1 = abs(d - r)



if  (r1 < 0.1):
     print("sim")
		
else:
	 print("não")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    r = (((vo)**2)*(sin(2*a1)))/g
NameError: name 'vo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 13:21:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo)**2)*(sin(2*a1)))/g
r1 = abs(d - r)



if  (r1 < 0.1):
     print("sim")
		
else:
	 print("não")
-- EXECUTION TIME:
0.164874
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1643/1055/main.py", line 13, in <module>
    r = (((vo)**2)*(sin(2*a1)))/g
NameError: name 'vo' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:22:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo)**2)*(sin(2*a1)))/g
r1 = abs(d - r)



if  (r1 < 0.1):
     print("sim")
		
else:
	 print("não")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    r = (((vo)**2)*(sin(2*a1)))/g
NameError: name 'vo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:47:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo)**2)*(sin(2*a1)))/g
r1 = abs(d - r)



if  (r1 < 0.1):
     print("sim")
		
else:
	 print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    r = (((vo)**2)*(sin(2*a1)))/g
NameError: name 'vo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:49:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo)**2)*(sin(2*a1)))/g
r1 = abs(d - r)



if  (r1 < 0.1):
     print("sim")
		
else:
	 print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    r = (((vo)**2)*(sin(2*a1)))/g
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:51:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo**2)*(sin(2*a1)))/g
r1 = abs(d - r)



if  (r1 < 0.1):
     print("sim")
		
else:
	 print("nao")
-- ERROR:
File "XXXX", line 14
    r1 = abs(d - r)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:53:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo**2)*(sin(2*a1)))/g
rl = d - r
abs(rl)

if  (r1 < 0.1):
     print("sim")
		
else:
	 print("nao")
-- ERROR:
File "XXXX", line 14
    rl = d - r
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 19:06:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo**2)*(sin(2*a1)))/g

if  (abs(d-r) < 0.1):
     print("sim")
		
else:
	 print("nao")
-- ERROR:
File "XXXX", line 15
    if  (abs(d-r) < 0.1):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 19:18:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo**2)*(sin(2*a1)))/g
diferença = abs( d - r)

if  (diferença < 0.1):
     print("sim")
		
else:
	 print("nao")
-- ERROR:
File "XXXX", line 14
    diferença = abs( d - r)
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 19:19:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("digite a velocidade inicial: "))
a = float(input("digite o angulo: "))
d = float(input("digite a distancia: "))

from math import*

g = 9,5
a1 = radians(a)

r = (((vo**2)*(sin(2*a1)))/g
diferenca = abs( d - r)

if  (diferenca < 0.1):
     print("sim")
		
else:
	 print("nao")
-- ERROR:
File "XXXX", line 14
    diferenca = abs( d - r)
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:42:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))

-- ERROR:
File "XXXX", line 14
    diferenca = abs( d - r)
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:44:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(v0)
print(a)
-- OUTPUT:
0.1832595714594046
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:45:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(v0)
print(a)
-- OUTPUT:
0.1832595714594046
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:45:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(v0)
print(a)
-- OUTPUT:
0.1832595714594046
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:45:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(v0)
print(round(a, 5))
-- OUTPUT:
0.18326
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:46:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(v0)
print(round(a, 5))
-- OUTPUT:
0.18326
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:46:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)
print(round(a, 5))
-- OUTPUT:
0.79412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:48:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9
print(r)
-- OUTPUT:
1.2983470189516713
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:49:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9
print(r)
-- OUTPUT:
1.2983470189516713
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:52:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)

if  (r1 >= 0.1):
     print("sim")
		
else:
	 print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:54:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)

if  (r1 < 0.2):
     print("sim")
		
else:
	 print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 08:54:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)

if  (r1 < 0.2):
     print("sim")
		
else:
	 print("nao")
-- EXECUTION TIME:
0.185307
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:56:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)

if  ( -0.1 =< r1 <= =.1):
     print("sim")
		
else:
	 print("nao")
-- ERROR:
File "XXXX", line 16
    if  ( -0.1 =< r1 <= =.1):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:58:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)

if  ( -0.1 =< r1 <= 0.1):
     print("sim")
		
else:
	 print("nao")
-- ERROR:
File "XXXX", line 16
    if  ( -0.1 =< r1 <= 0.1):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:58:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)

if  ( r1 <= 0.1, r1>= -0.1):
     print("sim")
		
else:
	 print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 08:59:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)
print(r1)
if  ( r1 <= 0.1, r1>= -0.1):
     print("sim")
		
else:
	 print("nao")
-- OUTPUT:
10.001652981048329
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:00:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(r-distancia)
print(r1)
if  ( r1 <= 0.1, r1>= -0.1):
     print("sim")
		
else:
	 print("nao")
-- OUTPUT:
10.001652981048329
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:01:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(r-distancia)
print(r1)
if  ( r1 == distancia):
     print("sim")
		
else:
	 print("nao")
-- EXECUTION TIME:
0.148258
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
10.001652981048329
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
17.16164679616275
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:02:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(r-distancia)
print(r1)
if  ( r1 < 0.1):
     print("sim")
		
else:
	 print("nao")
-- EXECUTION TIME:
0.264745
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
10.001652981048329
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
17.16164679616275
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:02:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)
print(r1)
if  ( r1 < 0.1):
     print("sim")
		
else:
	 print("nao")
-- EXECUTION TIME:
0.137306
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
10.001652981048329
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
17.16164679616275
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:03:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)
print(r1)
if  ( r1 < 0.1):
     print("sim")
		
else:
	 print("nao")
-- OUTPUT:
10.001652981048329
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:04:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)

if  ( r1 < 0.1):
     print("sim")
		
else:
	 print("nao")
-- EXECUTION TIME:
0.156011
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:04:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)

if  ( r1 < 0.1):
     print("sim")
		
else:
	 print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:07:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*angulo))/9

r1 = abs(distancia - r)

if  ( r1 <= 0.1):
     print("sim")
		
else:
	 print("nao")
-- EXECUTION TIME:
0.191002
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 13:33:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*a))/9

r1 = abs(distancia - r)

if  ( r1 <= 0.1):
     print("sim")
		
else:
	 print("nao")
-- EXECUTION TIME:
0.270795
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 13:34:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
angulo = float(input("angulo do vetor: "))
distancia = float(input("distancia: "))
g = 9.8

a = radians(angulo)

r = ((v0**2)*sin(2*a))/9.8

r1 = abs(distancia - r)

if  ( r1 <= 0.1):
     print("sim")
		
else:
	 print("nao")
-- EXECUTION TIME:
0.150193
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
