== TEST (2019-03-25 19:10:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=(3141)
print(soma,9)
-- OUTPUT:
3141 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:10:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=(3141)
print(soma,9)
-- EXECUTION TIME:
0.192893
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3141 9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3141 9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:10:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=(3141//numero)
print(soma,9)
-- OUTPUT:
0 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:11:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=(3141//numero)
print(soma,9)
-- EXECUTION TIME:
0.210813
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
0 9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3 9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:11:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=float(3141//numero)
print(soma,9)
-- OUTPUT:
0.0 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:11:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=float(3141//numero)
print(soma,9)
-- EXECUTION TIME:
0.148503
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
0.0 9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3.0 9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:11:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=float(3+1+4+1)
print(soma,9)
-- OUTPUT:
9.0 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:12:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=(3+1+4+1)
print(soma,9)
-- OUTPUT:
9 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:12:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=(3+1+4+1)
print(soma,9)
-- EXECUTION TIME:
0.103066
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9 9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9 9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:12:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=(3+1+4+1)
print(soma)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:12:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=(3+1+4+1)
print(soma)
-- EXECUTION TIME:
0.168231
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:12:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int(input("numero inteiro de quatro digitos: "))
soma=(3+1+4+1)
print(soma)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:13:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: "))
soma=(3+1+4+1)
print(soma)
-- ERROR:
File "XXXX", line 4
    numero=input())
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:13:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3+1+4+1)
print(soma)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:13:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3+1+4+1)
print(soma)
-- EXECUTION TIME:
0.148375
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:13:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3+1+4+1)
print(soma)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:13:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3+1+4+1)
print(soma)
-- EXECUTION TIME:
0.239932
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:14:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=int("numero inteiro de quatro digitos: ")
soma=(3+1+4+1)
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    numero=int("numero inteiro de quatro digitos: ")
ValueError: invalid literal for int() with base 10: 'numero inteiro de quatro digitos: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:14:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma)
-- OUTPUT:
3141
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:14:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma)
-- EXECUTION TIME:
0.128426
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3141
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3141
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:14:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma)
-- OUTPUT:
3141
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:14:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma)
-- EXECUTION TIME:
0.163487
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3141
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3141
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:15:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma,9)
-- OUTPUT:
3141 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:15:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma,9)
-- EXECUTION TIME:
0.129243
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3141 9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3141 9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:15:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//9)
-- OUTPUT:
349
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:15:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//9)
-- EXECUTION TIME:
0.220309
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
349
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
349
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:15:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%9)
-- OUTPUT:
349
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:15:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%9)
-- EXECUTION TIME:
0.151561
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:15:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%9)
-- OUTPUT:
349
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:16:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%3141)
-- OUTPUT:
349
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:16:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%3+1+4+1)
-- OUTPUT:
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:16:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%3+1+4+1)
-- EXECUTION TIME:
0.162662
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
6
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
6
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:16:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%3+1+4+1)
-- OUTPUT:
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:17:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%3+1+4+1)
-- EXECUTION TIME:
0.205212
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
6
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
6
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:17:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//3+1+4+1)
-- OUTPUT:
1053
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:17:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//3+1+4+1)
-- OUTPUT:
1053
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:17:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//3+1)
-- OUTPUT:
1048
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:18:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//3+1)
-- EXECUTION TIME:
0.136516
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
1048
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1048
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:18:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma/3+1)
-- OUTPUT:
1048.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:18:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%3+1)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:18:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%3)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:18:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%9)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:19:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//9)
-- OUTPUT:
349
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:19:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//349)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:19:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//349)
-- EXECUTION TIME:
0.199716
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:19:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%349)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:19:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%34)
-- OUTPUT:
13
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:19:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%28)
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:20:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%32)
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:20:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%33)
-- OUTPUT:
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:20:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%34)
-- OUTPUT:
13
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:20:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%29)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:20:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma%29)
-- EXECUTION TIME:
0.160061
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:20:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//29)
-- OUTPUT:
108
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:21:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//108)
-- EXECUTION TIME:
0.131814
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
29
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
29
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:21:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(soma//108)
-- OUTPUT:
29
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:56:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero//108)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(numero//108)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:58:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero%108)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(numero%108)
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:58:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero%108)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(numero%108)
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:58:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero%108)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(numero%108)
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:58:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero//9)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(numero//9)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:58:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero//9)
-- EXECUTION TIME:
0.107849
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/842/main.py", line 6, in <module>
    print(numero//9)
TypeError: unsupported operand type(s) for //: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:59:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero,9)
-- OUTPUT:
9173 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:59:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero,9)
-- EXECUTION TIME:
0.167046
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9173 9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1010 9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:59:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero,soma,9)
-- OUTPUT:
9173 3141 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:00:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero,soma,9)
-- EXECUTION TIME:
0.155199
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9173 3141 9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1010 3141 9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:00:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero//soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(numero//soma)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:00:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
soma=(3141)
print(numero%soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(numero%soma)
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:03:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//100
b=100%10
c=300//100
d=400%4
print()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(numero%soma)
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:03:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//100
b=100%10
c=300//100
d=400%4
print()
-- EXECUTION TIME:
0.146868
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:

-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:04:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//100
b=100%10
c=300//100
d=400%4
print(a+b+c+d)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:04:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//100
b=100%10
c=300//100
d=400%4
print(a+b+c+d)
-- EXECUTION TIME:
0.132706
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:04:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//100
b=100%10
c=300//100
d=400%4
print(numeor,a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(numeor,a+b+c+d)
NameError: name 'numeor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:04:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//100
b=100%10
c=300//100
d=400%4
print(numero,a+b+c+d)
-- OUTPUT:
9173 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:05:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(a+b+c+d)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:05:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(a+b+c+d)
-- EXECUTION TIME:
0.19425
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:05:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(numero%a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(numero%a+b+c+d)
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:05:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(numero//a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(numero//a+b+c+d)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:06:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(a+b+c+d,9)
-- OUTPUT:
3 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:06:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(a+b+c+d,9)
-- EXECUTION TIME:
0.192423
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3 9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3 9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:06:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(74%9)
-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:06:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(74%9)
-- EXECUTION TIME:
0.153689
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
2
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:07:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(74//9)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:07:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(74//9)
-- EXECUTION TIME:
0.122356
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
8
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:07:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(76//9)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:07:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(76//9)
-- EXECUTION TIME:
0.116935
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
8
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:07:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(72//9)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:07:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(81//9)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:07:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=10//900
b=100%10
c=300//100
d=400%4
print(81//9)
-- EXECUTION TIME:
0.186809
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:08:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//10
c=81//9
d=81//9
print(81//9)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:08:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//10
c=81//9
d=81//9
print(81//9)
-- EXECUTION TIME:
0.145689
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:09:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//10
c=81//9
d=81//9
print(a+b+c+d)
-- OUTPUT:
35
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:09:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//10
c=81//9
d=81//9
print(a+b+c+d)
-- EXECUTION TIME:
0.141354
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
35
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
35
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:09:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//10
c=81//9
print(a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(a+b+c+d)
NameError: name 'd' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:10:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c)
-- OUTPUT:
27
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:10:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c)
-- EXECUTION TIME:
0.157795
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
27
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
27
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:10:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c%3)
-- OUTPUT:
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:10:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c%3)
-- EXECUTION TIME:
0.126199
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
18
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:10:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c%9)
-- OUTPUT:
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:10:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c%6)
-- OUTPUT:
21
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:10:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c%27)
-- OUTPUT:
27
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:11:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c%81)
-- OUTPUT:
27
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:11:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c%9)
-- OUTPUT:
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:11:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c%3)
-- OUTPUT:
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:11:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c%1)
-- OUTPUT:
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:11:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c//3)
-- OUTPUT:
21
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:12:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c//9)
-- OUTPUT:
19
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:12:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
print(a+b+c//3%3)
-- OUTPUT:
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:12:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(a+b+c//3%3)
-- OUTPUT:
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:13:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(soma,9)
-- OUTPUT:
27 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:13:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(soma//3,9)
-- OUTPUT:
9 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:13:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(soma//3,9)
-- EXECUTION TIME:
0.146258
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9 9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9 9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:13:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(soma//3)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:13:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(soma//3)
-- EXECUTION TIME:
0.204713
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:27:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(soma%3)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:27:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(soma%3)
-- EXECUTION TIME:
0.224708
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:27:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(soma%81)
-- OUTPUT:
27
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:27:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(soma%81)
-- EXECUTION TIME:
0.136285
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
27
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
27
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:27:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(soma%27)
-- OUTPUT:
27
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:27:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=81//9
b=81//9
c=81//9
soma= a+b+c
print(soma%9)
-- OUTPUT:
27
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:38:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=b//1000
b=c//30
c=a//10
soma=int((3141/100)%10)
print()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a=b//1000
NameError: name 'b' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:38:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=c//1000
b=c//30
c=a//10
soma=int((3141/100)%10)
print()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a=c//1000
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:39:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=a//1000
b=c//30
c=a//10
soma=int((3141/100)%10)
print()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a=a//1000
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:39:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=ar//1000
b=c//30
c=a//10
soma=int((3141/100)%10)
print()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a=ar//1000
NameError: name 'ar' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:39:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=numero//1000
b=c//30
c=a//10
soma=int((3141/100)%10)
print()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a=numero//1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:39:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero=input("numero inteiro de quatro digitos: ")
a=n//1000
b=c//30
c=a//10
soma=int((3141/100)%10)
print()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a=n//1000
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:40:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//30
c=n//10
soma=int((3141/100)%10)
print()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a=n//1000
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:41:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//30
c=n//10
soma=int((3141/100)%10)
print()
-- EXECUTION TIME:
0.149171
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:

-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:41:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//30
c=n//10
soma=int(input((3141/100)%10))
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    soma=int(input((3141/100)%10))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:41:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//30
c=n//10
soma=int((3141/100)%10)
print(soma)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:41:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//30
c=n//10
soma=int((3141/100)%10)
print(soma)
-- EXECUTION TIME:
0.266337
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
1
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:42:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//30
c=n//10
soma=int((3141/100)%10)
print(soma)
-- EXECUTION TIME:
0.153963
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
1
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:42:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//30
c=n//10
soma=int((3141/100)%10)
print(soma)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:42:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//30
c=n//10
soma=int((3141/100)%10)
print(soma)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:42:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//30
c=n//10
soma=int((3141/100)%10)
print(soma)
-- EXECUTION TIME:
0.128319
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
1
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:44:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//30
c=n//10
soma=int((3141/100)%10)
print(a)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:44:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//30
c=n//10
soma=int((3141/100)%10)
print(a,b)
-- OUTPUT:
9 305
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:45:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//100
c=n//10
soma=int((3141/100)%10)
print(a,b)
-- OUTPUT:
9 91
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:45:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//100000
c=n//10
soma=int((3141/100)%10)
print(a,b)
-- OUTPUT:
9 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:45:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//10000
c=n//10
soma=int((3141/100)%10)
print(a,b)
-- OUTPUT:
9 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:45:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//10
soma=int((3141/100)%10)
print(a,b)
-- OUTPUT:
9 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:45:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//10
soma=int((3141/100)%10)
print(a,b,c)
-- EXECUTION TIME:
0.134741
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9 9 917
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1 1 101
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:45:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//10
soma=int((3141/100)%10)
print(a,b,c)
-- OUTPUT:
9 9 917
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:45:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//100
soma=int((3141/100)%10)
print(a,b,c)
-- OUTPUT:
9 9 91
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:46:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//1000
soma=int((3141/100)%10)
print(a,b,c)
-- OUTPUT:
9 9 9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:46:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//1000
soma=int((3141/100)%10)
print(a,b,c)
-- EXECUTION TIME:
0.222493
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9 9 9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1 1 1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:47:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
soma=int((3141/100)%10)
-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:47:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
soma=int((3141/100)%10)
-- EXECUTION TIME:
0.136492
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
9
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
1
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:47:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
print=int(soma(3141/100)%10)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print=int(soma(3141/100)%10)
NameError: name 'soma' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:48:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
print=int(soma,(3141/100)%10)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print=int(soma,(3141/100)%10)
NameError: name 'soma' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:49:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
n=int(3+1+4+1)
print=int((3141/100)%10)
-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:49:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
n=int(3+1+4+1)
print=int((3141/100)%10)
-- EXECUTION TIME:
0.179403
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
9
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
1
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:49:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
n=int(3+1+4+1)
print=(3141/100)%10
-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:50:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a= n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
n=int(3+1+4+1)
print=(3141/100)%10
-- EXECUTION TIME:
0.162156
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
9
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
1
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:50:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
n=int(3+1+4+1)
print=(3141/100)%10
-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:53:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
print(soma)
print=(3141/100)%10
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(soma)
NameError: name 'soma' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:53:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
soma=(3141/100)%10
print(soma)
-- OUTPUT:
9
9
9
1.4100000000000001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:54:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
soma=(3141/100)%10
print(soma)
-- EXECUTION TIME:
0.191153
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
9
9
1.4100000000000001
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
1
1
1.4100000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:54:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
soma=int(3141/100)%10
print(soma)
-- OUTPUT:
9
9
9
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:54:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
soma=int(3141/100)%10
print(soma)
-- EXECUTION TIME:
0.113723
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
9
9
1
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
1
1
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:55:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
soma=int(a+b+c+d)
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    soma=int(a+b+c+d)
NameError: name 'd' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:56:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
soma=int(a+b+c)
print(soma)
-- OUTPUT:
9
9
9
27
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:56:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
soma=int(a+b+c)
print(soma)
-- EXECUTION TIME:
0.162395
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
9
9
27
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
1
1
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:56:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
soma=int(round(a+b+c))
print(soma)
-- OUTPUT:
9
9
9
27
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:56:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000
print(a)
print(b)
print(c)
soma=int(round(a+b+c))
print(soma)
-- EXECUTION TIME:
0.173292
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
9
9
27
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
1
1
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:57:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000

soma=int(a+b+c)
print(soma)
-- OUTPUT:
27
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:57:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//1000
c=n//1000

soma=int(a+b+c)
print(soma)
-- EXECUTION TIME:
0.16749
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
27
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:58:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//300
c=n//10
soma=int(a+b+c)
print(soma)
-- OUTPUT:
956
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:58:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de quatro digitos: "))
a=n//1000
b=n//300
c=n//10
soma=int(a+b+c)
print(soma)
-- EXECUTION TIME:
0.18767
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
956
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
105
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:57:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
a=n//1000
b=n%1000
c=b//100
d=b%100
f=d//10
g=d%10
soma=int(((a*5)+(b*4)+(f*3)+(g*2))%11)
print(soma)
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 01:57:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
a=n//1000
b=n%1000
c=b//100
d=b%100
f=d//10
g=d%10
soma=int(((a*5)+(b*4)+(f*3)+(g*2))%11)
print(soma)
-- EXECUTION TIME:
0.132816
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
5
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:57:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
a=n//1000
b=n%1000
c=b//100
d=b%100
f=d//10
g=d%10
soma=int(((a*5)+(b*4)+(f*3)+(g*2))%11)
print(soma)
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 01:58:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
a=n//1000
b=n%1000
c=b//100
d=b%100
f=d//10
g=d%10
soma=int(((a*5)+(b*4)+(f*3)+(g*2))%11)
print(soma)
-- EXECUTION TIME:
0.133091
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
5
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 01:58:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
a=n//1000
b=n%1000
c=b//100
d=b%100
f=d//10
g=d%10
soma=int(((a*5)+(b*4)+(f*3)+(g*2))%11)
print(soma)
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 01:58:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
a=n//1000
b=n%1000
c=b//100
d=b%100
f=d//10
g=d%10
soma=int(((a*5)+(b*4)+(f*3)+(g*2))%11)
print(soma)
-- EXECUTION TIME:
0.131988
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
5
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:02:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
a=n//1000
b=n%1000
c=b//100
d=c%100
f=d//10
g=d%10
soma=int(((a*5)+(b*4)+(f*3)+(g*2))%11)
print(soma)
-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:02:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
a=n//1000
b=n%1000
c=b//100
d=c%100
f=d//10
g=d%10
soma=int(((a*5)+(b*4)+(f*3)+(g*2))%11)
print(soma)
-- EXECUTION TIME:
0.201476
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
2
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:06:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
a=n//1000
b=n%1000
c=b//100
d=b%100
f=d//10
g=f%10
soma=int(((a*5)+(b*4)+(f*3)+(g*2))%11)
print(soma)
-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:06:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
a=n//1000
b=n%1000
c=b//100
d=b%100
f=d//10
g=f%10
soma=int(((a*5)+(b*4)+(f*3)+(g*2))%11)
print(soma)
-- EXECUTION TIME:
0.144175
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
2
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
6
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:07:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
milhar = nro // 1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    milhar = nro // 1000
NameError: name 'nro' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:07:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
milhar =nro // 1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    milhar =nro // 1000
NameError: name 'nro' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:08:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
milhar =n // 1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    resto_milhar = nro % 1000
NameError: name 'nro' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:08:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
milhar =n // 1000
resto_milhar = n % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)

-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:08:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
n=int(input("numero inteiro de 4 digitos: "))
milhar =n // 1000
resto_milhar = n % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)

-- EXECUTION TIME:
0.288744
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
10
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:08:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("numero inteiro de 4 digitos: "))
milhar = nro // 1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:09:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("numero inteiro de 4 digitos: "))
milhar = nro // 1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- EXECUTION TIME:
0.119046
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
10
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:09:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("numero inteiro de 4 digitos: "))
milhar = nro // 1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:09:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("numero inteiro de 4 digitos: "))
milhar = nro // 1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- EXECUTION TIME:
0.289491
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
10
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:09:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=input("numero inteiro de 4 digitos: "))
milhar = nro // 1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- ERROR:
File "XXXX", line 4
    nro=input())
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:09:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=input("numero inteiro de 4 digitos: ")
milhar = nro // 1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    milhar = nro // 1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:10:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=input("numero inteiro de 4 digitos: ")
milhar = nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    milhar = nro//1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:10:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int("numero inteiro de 4 digitos: ")
milhar=nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    nro=int("numero inteiro de 4 digitos: ")
ValueError: invalid literal for int() with base 10: 'numero inteiro de 4 digitos: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:10:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("numero inteiro de 4 digitos: "))
milhar=nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- EXECUTION TIME:
0.20179
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
10
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:14:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("Gigite um numero de 4 digitos: "))
milhar=nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(input(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11))
print(digito)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    digito = int(input(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:14:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("Gigite um numero de 4 digitos: "))
milhar=nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = input(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    digito = input(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:14:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("Gigite um numero de 4 digitos: "))
milhar=nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = input(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- EXECUTION TIME:
0.178799
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/842/main.py", line 11, in <module>
    digito = input(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:15:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("Gigite um numero de 4 digitos: "))
milhar=nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:15:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("Gigite um numero de 4 digitos: "))
milhar=nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- EXECUTION TIME:
0.128931
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
10
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:15:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int("Gigite um numero de 4 digitos: ")
milhar=nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    nro=int("Gigite um numero de 4 digitos: ")
ValueError: invalid literal for int() with base 10: 'Gigite um numero de 4 digitos: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:15:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=input("Gigite um numero de 4 digitos: ")
milhar=nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    milhar=nro//1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:15:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("Gigite um numero de 4 digitos: "))
milhar=nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:16:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
nro=int(input("Gigite um numero de 4 digitos: "))
milhar=nro//1000
resto_milhar = nro % 1000
centena = resto_milhar // 100
resto_centena = resto_milhar % 100
dezena = resto_centena // 10
resto_dezena = resto_centena % 10
digito = int(((milhar * 5)+(centena*4)+(dezena*3)+(resto_dezena*2)) % 11)
print(digito)


-- EXECUTION TIME:
0.13554
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
10
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:31:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero = int(input("Digite um numero de 4 digitos:"))
milhar = numero // 1000
restomilhar = numero % 1000
centena = restomilhar // 100
restocentena = restomilhar % 100
dezena = restocentena // 10
restodezena = restocentena % 10
print(milhar + centena + dezena + restodezena)



-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:31:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero = int(input("Digite um numero de 4 digitos:"))
milhar = numero // 1000
restomilhar = numero % 1000
centena = restomilhar // 100
restocentena = restomilhar % 100
dezena = restocentena // 10
restodezena = restocentena % 10
print(milhar + centena + dezena + restodezena)



-- EXECUTION TIME:
0.143112
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:37:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero = int(input("Digite um numero de 4 digitos:"))
a= numero // 1000
b= numero % 1000
c= b // 100
d = b % 100
e = d // 10
f = d % 10
print(a + c + e + f)



-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:37:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero = int(input("Digite um numero de 4 digitos:"))
a= numero // 1000
b= numero % 1000
c= b // 100
d = b % 100
e = d // 10
f = d % 10
print(a + c + e + f)



-- EXECUTION TIME:
0.177204
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:38:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero = int(input("Digite um numero de 4 digitos:"))
a= numero // 1000
b= numero % 1000
c= b // 100
d = b % 100
e = d // 10
f = d % 10
print(a + c + e + f)



-- EXECUTION TIME:
0.156051
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:38:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero = int(input("Digite um numero de 4 digitos:"))
a= numero // 1000
b= numero % 1000
c= b // 100
d = b % 100
e = d // 10
f = d % 10
print(a + c + e + f)



-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:38:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero = int(input("Digite um numero de 4 digitos:"))
a= numero // 1000
b= numero % 1000
c= b // 100
d = b % 100
e = d // 10
f = d % 10
print(a + c + e + f)



-- EXECUTION TIME:
0.139905
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 02:47:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero = int(input("Digite um numero de 4 digitos:"))
a= numero // 1000
b= numero % 1000
c= b // 100
d = b % 100
e = d // 10
f = d % 10
print(a + c + e + f)



-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 02:47:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu comu
numero = int(input("Digite um numero de 4 digitos:"))
a= numero // 1000
b= numero % 1000
c= b // 100
d = b % 100
e = d // 10
f = d % 10
print(a + c + e + f)



-- EXECUTION TIME:
0.158318
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
