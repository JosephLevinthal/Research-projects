== TEST (2019-03-28 09:28:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
lc= float(input("lucro"))
print(round(var*tdv-lc/100))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:29:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
lc= float(input("lucro: "))
print(round(var*tdv-lc/100))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:30:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
lc= float(input("lucro: "))
print(round(var*tdv-lc/100))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:30:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
lc= float(input("lucro: "))
print(round(var*tdv-lc/100))
-- EXECUTION TIME:
0.191026
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    var= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:31:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
lc= float(input("lucro: "))
print(round(var*tdv-lc//100, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:31:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
lc= float(input("lucro: "))
print(round(var*tdv-lc//100, 2))
-- EXECUTION TIME:
0.153003
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:33:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
lc= float(input("lucro: "))
print(round(var*tdv+(lc//100), 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:35:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round(var*(tdv//100), 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:36:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round(var*(tdv//100), 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:37:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round(var*(tdv//100), 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:37:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round(var//30*tdv//100, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:37:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round(var//30*tdv//100, 2))
-- EXECUTION TIME:
0.132937
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:38:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round(var*tdv/100, 2)
-- ERROR:
File "XXXX", line 7
    
                               ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:38:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round(var*tdv//100, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:39:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round(var*tdv//100, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:39:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round(var*tdv//100, 2))
-- EXECUTION TIME:
0.139433
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:40:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round((var*tdv)//100, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:40:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round((var*tdv)//100, 2))
-- EXECUTION TIME:
0.143991
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:41:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round((var//100*tdv//100)//100, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:42:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round((var//100*tdv//100)//100, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:42:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= float(input("valor de cada item: "))
tdv= int(input("total de vendas: "))
print(round((var//100*tdv//100)//100, 2))
-- EXECUTION TIME:
0.132268
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 5, in <module>
    tdv= int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:44:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
print(round(tdv//100))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:44:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
print(round(tdv//100))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:45:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
print(round(tdv//100))
-- EXECUTION TIME:
0.139555
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:46:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre p tdv: "))
print(round(tdv//100))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:46:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre p tdv: "))
print(round(tdv//100)*lc)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:46:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre p tdv: "))
print(round(tdv//100)*lc)
-- EXECUTION TIME:
0.228427
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:47:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre p tdv: "))
print(round((tdv//100)*lc), 2))
-- ERROR:
File "XXXX", line 6
    print(round((tdv//100)*lc), 2))
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:53:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre p tdv: "))
print(round((tdv//100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:53:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre p tdv: "))
print(round((tdv//100)*lc, 2))
-- EXECUTION TIME:
0.127661
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:54:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
lc= float(input("lucro sobre p tdv: "))
print(round((tdv//100)*lc,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    lc= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:54:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
lc= float(input("lucro sobre p tdv: "))
print(round((tdv//100)*lc,2))
-- EXECUTION TIME:
0.162623
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 5, in <module>
    lc= float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:55:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
lc= float(input("lucro sobre p tdv: "))
print(round((tdv//100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    lc= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:55:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
lc= float(input("lucro sobre p tdv: "))
print(round((tdv//100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    lc= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:55:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
lc= float(input("lucro sobre p tdv: "))
print(round((tdv//100)*lc, 2))
-- EXECUTION TIME:
0.149184
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 5, in <module>
    lc= float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:55:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
lc= int(input("lucro sobre p tdv: "))
print(round((tdv//100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    lc= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:56:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
lc= int(input("lucro sobre p tdv: "))
print(round((tdv//100)*lc, 2))
-- EXECUTION TIME:
0.214708
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 5, in <module>
    lc= int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:56:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
lc= int(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    lc= int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:56:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
lc= int(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- EXECUTION TIME:
0.15929
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 5, in <module>
    lc= int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:57:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:57:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- EXECUTION TIME:
0.1622
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:58:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= int(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:58:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= int(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- EXECUTION TIME:
0.216903
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:58:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:58:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- EXECUTION TIME:
0.138604
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:00:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:00:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- EXECUTION TIME:
0.140444
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:16:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:16:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:16:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:16:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:31:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc, 2))
-- EXECUTION TIME:
0.156724
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:31:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv/100)*lc,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:32:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv//100)*lc,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:32:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round((tdv//100)*lc,2))
-- EXECUTION TIME:
0.13517
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:32:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv//100*lc,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:32:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv//100*lc,2))
-- EXECUTION TIME:
0.184335
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:33:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv//100*lc,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:33:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv//100*lc,2))
-- EXECUTION TIME:
0.167571
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:33:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv//100*lc,2))
-- EXECUTION TIME:
0.129406
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:33:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv//100*lc,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:33:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv//100*lc,2))
-- EXECUTION TIME:
0.203193
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:34:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(lc//100*tvd,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:35:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(lc/100*tvd,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:35:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(lc/100*tvd,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    lc= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:36:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tvd//100*lc//100,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:37:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv//100*lc//100,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:37:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(lc//100tdv,2))
-- ERROR:
File "XXXX", line 6
    print(round(lc//100tdv,2))
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:37:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(lc//100*tdv,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:38:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(lc//100*tdv,2))
-- EXECUTION TIME:
0.220376
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:38:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv//100*lc,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:44:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv//100*lc, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:45:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv//100*lc, 2))
-- EXECUTION TIME:
0.136374
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:46:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv*lc//100, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:46:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv*lc//100, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:46:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv*lc//100, 2))
-- EXECUTION TIME:
0.171594
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 20:54:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= (input("total de vendas: "))
lc= (input("lucro sobre tdv: "))
print(round(tdv*lc//100, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    lc= (input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 20:55:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= (input("total de vendas: "))
lc= (input("lucro sobre tdv: "))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    lc= (input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 20:56:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= (input("total de vendas: "))
lc= (input("lucro sobre tdv: "))
renda= tdv*lc//100
print(round(renda, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    lc= (input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 20:57:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
renda= tdv*lc//100
print(round(renda, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 20:57:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
renda= tdv*lc//100
print(round(renda, 2))
-- EXECUTION TIME:
0.17615
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 21:04:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= int(input("total de vendas: "))
lc= float(input("lucro sobre tdv: "))
print(round(tdv*lc//100, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    tdv= int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:12:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
print(round(tdv*0.3, 2))
-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 16:12:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
tdv= float(input("total de vendas: "))
print(round(tdv*0.3, 2))
-- EXECUTION TIME:
0.13588
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.15
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
