== TEST (2019-05-15 00:41:13) 
-- CODE:
from math import *

x = radians(input("Angulo: "))

k = int(input("Numero de termos: "))

soma = 0

t = 0

while (t < k):
	tg = (((-1)**t)/factorial(2t + 1))*x**(2t+1)
	soma = soma + tg
	t = t + 1

print(round(soma, 10))
-- ERROR:
File "XXXX", line 12
    tg = (((-1)**t)/factorial(2t + 1))*x**(2t+1)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:43:35) 
-- CODE:
from math import *

x = radians(input("Angulo: "))

k = int(input("Numero de termos: "))

soma = 0

t = 0
n = 2t + 1
while (t < k):
	tg = (((-1)**t)/factorial(n))*x**(n)
	soma = soma + tg
	t = t + 1

print(round(soma, 10))
-- ERROR:
File "XXXX", line 10
    n = 2t + 1
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:43:46) 
-- CODE:
from math import *

x = radians(input("Angulo: "))

k = int(input("Numero de termos: "))

soma = 0

t = 0
n = 2*t + 1
while (t < k):
	tg = (((-1)**t)/factorial(n))*x**(n)
	soma = soma + tg
	t = t + 1

print(round(soma, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = radians(input())
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:44:17) 
-- CODE:
from math import *

x = eval(radians(input("Angulo: ")))

k = int(input("Numero de termos: "))

soma = 0

t = 0
n = 2*t + 1
while (t < k):
	tg = (((-1)**t)/factorial(n))*x**(n)
	soma = soma + tg
	t = t + 1

print(round(soma, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = eval(radians(input()))
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:44:36) 
-- CODE:
from math import *

x = eval(input("Angulo: "))

k = int(input("Numero de termos: "))

soma = 0

t = 0
n = 2*t + 1
while (t < k):
	tg = (((-1)**t)/factorial(n))*x**(n)
	soma = soma + tg
	t = t + 1

print(round(soma, 10))
-- OUTPUT:
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:44:42) 
-- CODE:
from math import *

x = eval(input("Angulo: "))

k = int(input("Numero de termos: "))

soma = 0

t = 0
n = 2*t + 1
while (t < k):
	tg = (((-1)**t)/factorial(n))*x**(n)
	soma = soma + tg
	t = t + 1

print(round(soma, 10))
-- OUTPUT:
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:45:26) 
-- CODE:
from math import *

x = eval(input("Angulo: "))

k = int(input("Numero de termos: "))

soma = 0

t = 0
n = 2*t + 1
while (t < k):
	tg = (((-1)**t)/factorial(n))*x**(n)
	soma = soma + tg
	t = t + 1

	print(round(soma, 10))
-- OUTPUT:
1.5707963268
0.0
1.5707963268
0.0
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:46:13) 
-- CODE:
from math import *

x = eval(input("Angulo: "))

k = int(input("Numero de termos: "))

soma = 0

t = 0

while (t < k):
	tg = (((-1)**t)/factorial(2*t +1))*x**(2*t +1)
	soma = soma + tg
	t = t + 1

	print(round(soma, 10))
-- OUTPUT:
1.5707963268
0.9248322293
1.0045248555
0.9998431014
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 00:46:24) 
-- CODE:
from math import *

x = eval(input("Angulo: "))

k = int(input("Numero de termos: "))

soma = 0

t = 0

while (t < k):
	tg = (((-1)**t)/factorial(2*t +1))*x**(2*t +1)
	soma = soma + tg
	t = t + 1

	print(round(soma, 10))
-- EXECUTION TIME:
0.178957
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.5707963268
0.9248322293
1.0045248555
0.9998431014
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-1.5707963268
-0.9248322293
-1.0045248555
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
1.0471975512
0.8558007816
0.8662952838
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 00:46:28) 
-- CODE:
from math import *

x = eval(input("Angulo: "))

k = int(input("Numero de termos: "))

soma = 0

t = 0

while (t < k):
	tg = (((-1)**t)/factorial(2*t +1))*x**(2*t +1)
	soma = soma + tg
	t = t + 1

print(round(soma, 10))
-- EXECUTION TIME:
0.178342
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
