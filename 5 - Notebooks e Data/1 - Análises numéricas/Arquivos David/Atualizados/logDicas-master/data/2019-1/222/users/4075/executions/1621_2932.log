== SUBMITION (2019-04-01 19:05:47) 
-- CODE:
a= r1
b= r2
c= r3

print (a, b,c )
-- EXECUTION TIME:
0.182182
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1621/2932/main.py", line 1, in <module>
    a= r1
NameError: name 'r1' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:07:15) 
-- CODE:
a= r1
b= r2
c= r3

print (a, b,c )

req= (a*b*c/a*b + b*c+ a*c)

print(req)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a= r1
NameError: name 'r1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:07:36) 
-- CODE:
a= r1
b= r2
c= r3

print (a, b,c )

req= (a*b*c/a*b + b*c+ a*c)

print(req)
-- EXECUTION TIME:
0.280583
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1621/2932/main.py", line 1, in <module>
    a= r1
NameError: name 'r1' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:07:50) 
-- CODE:
a= 1
b= 2
c= 3

print (a, b,c )

req= (a*b*c/a*b + b*c+ a*c)

print(req)
-- OUTPUT:
1 2 3
21.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:07:55) 
-- CODE:
a= 1
b= 2
c= 3

print (a, b,c )

req= (a*b*c/a*b + b*c+ a*c)

print(req)
-- EXECUTION TIME:
0.173037
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
1 2 3
21.0
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
1 2 3
21.0
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
1 2 3
21.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:08:13) 
-- CODE:
a= 1
b= 2
c= 3

print (a, b,c )

req= (a*b*c/a*b + b*c+ a*c)

print(req)
-- OUTPUT:
1 2 3
21.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:08:59) 
-- CODE:
a= 1
b= 2
c= 3

print (a, b,c )

req= (a * b *c / a*b + b*c+ a*c)

print(req)
-- OUTPUT:
1 2 3
21.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:09:01) 
-- CODE:
a= 1
b= 2
c= 3

print (a, b,c )

req= (a * b *c / a*b + b*c+ a*c)

print(req)
-- EXECUTION TIME:
0.165442
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
1 2 3
21.0
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
1 2 3
21.0
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
1 2 3
21.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:15:41) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print (a, b,c )

req= (a * b *c / a*b + b*c+ a*c)

print(req)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    req= (a * b *c / a*b + b*c+ a*c)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:15:56) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print (a, b,c )

req= (a * b *c / a*b + b*c+ a*c)

print(req)
-- EXECUTION TIME:
0.20179
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1621/2932/main.py", line 7, in <module>
    req= (a * b *c / a*b + b*c+ a*c)
TypeError: can't multiply sequence by non-int of type 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:16:00) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print (a, b,c )

req= (a * b *c / a*b + b*c+ a*c)

print(req)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    req= (a * b *c / a*b + b*c+ a*c)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:16:12) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print (a, b,c )

req= (a * b *c / a*b + b*c+ a*c)

print("req")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    req= (a * b *c / a*b + b*c+ a*c)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:16:29) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print (" a, b,c ")

req= ("a * b *c / a*b + b*c+ a*c")

print("req")
-- OUTPUT:
a, b,c 
req
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:16:31) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print (" a, b,c ")

req= ("a * b *c / a*b + b*c+ a*c")

print("req")
-- EXECUTION TIME:
0.135553
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
a, b,c 
req
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
a, b,c 
req
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
a, b,c 
req
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:16:47) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print ("a, b,c")

req= ("a * b *c / a*b + b*c+ a*c")

print("req")
-- OUTPUT:
a, b,c
req
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:16:48) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print ("a, b,c")

req= ("a * b *c / a*b + b*c+ a*c")

print("req")
-- EXECUTION TIME:
0.137321
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
a, b,c
req
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
a, b,c
req
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
a, b,c
req
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:17:10) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print ("a, b,c")

req= ("a * b *c / a*b + b*c+ a*c")

print("req")
help()
-- OUTPUT:
a, b,c
req

Welcome to Python 3.6's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at https://docs.python.org/3.6/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> No Python documentation found for '12'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> No Python documentation found for '28'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> No Python documentation found for '10'.
Use help()
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:17:12) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print ("a, b,c")

req= ("a * b *c / a*b + b*c+ a*c")

print("req")
help()
-- EXECUTION TIME:
0.209364
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
a, b,c
req

Welcome to Python 3.4's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at http://docs.python.org/3.4/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> no Python documentation found for '12'

help> no Python documentation found for '28'

help> no Python documentation found for '10'

help> 
You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Execut
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
a, b,c
req

Welcome to Python 3.4's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at http://docs.python.org/3.4/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> no Python documentation found for '5'

help> no Python documentation found for '8'

help> no Python documentation found for '10'

help> 
You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executin
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
a, b,c
req

Welcome to Python 3.4's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at http://docs.python.org/3.4/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> no Python documentation found for '60'

help> no Python documentation found for '88'

help> no Python documentation found for '45'

help> 
You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Execut
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:18:35) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print ("a, b,c")

req= ("a * b *c / (a*b) + (b*c) + (a*c)")

print("req")

-- OUTPUT:
a, b,c
req
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:18:37) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print ("a, b,c")

req= ("a * b *c / (a*b) + (b*c) + (a*c)")

print("req")

-- EXECUTION TIME:
0.196227
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
a, b,c
req
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
a, b,c
req
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
a, b,c
req
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:18:52) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print ("a, b,c")



-- OUTPUT:
a, b,c
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:18:54) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

print ("a, b,c")



-- EXECUTION TIME:
0.295052
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
a, b,c
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
a, b,c
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
a, b,c
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:21:51) 
-- CODE:
a= ("r1")
b= ("r2")
c= ("r3")
print ("a, b,c")
req= ("a*b*c / a*b+ b*c+ a*c")
print("req")




-- OUTPUT:
a, b,c
req
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:21:52) 
-- CODE:
a= ("r1")
b= ("r2")
c= ("r3")
print ("a, b,c")
req= ("a*b*c / a*b+ b*c+ a*c")
print("req")




-- EXECUTION TIME:
0.17084
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
a, b,c
req
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
a, b,c
req
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
a, b,c
req
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:22:20) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("a*b*c / a*b+ b*c+ a*c")
print("req")




-- OUTPUT:
req
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:22:21) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("a*b*c / a*b+ b*c+ a*c")
print("req")




-- EXECUTION TIME:
0.166788
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
req
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
req
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
req
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:26:00) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")
var = ("6")
varl= ("11")
req= ("var / varl")
print("req")




-- OUTPUT:
req
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:26:02) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")
var = ("6")
varl= ("11")
req= ("var / varl")
print("req")




-- EXECUTION TIME:
0.158122
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
req
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
req
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
req
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:26:39) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")
var = ("6")
varl= ("11")
total= ("var / varl")
print("total")




-- OUTPUT:
total
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:26:41) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")
var = ("6")
varl= ("11")
total= ("var / varl")
print("total")




-- EXECUTION TIME:
0.176797
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
total
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
total
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
total
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:42:00) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")




-- OUTPUT:
total
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:42:40) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

total= ("req")

print("total")




-- OUTPUT:
total
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:42:42) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

total= ("req")

print("total")




-- EXECUTION TIME:
0.150905
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
total
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
total
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
total
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:43:16) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

total= ("req")

print("total")




-- OUTPUT:
total
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:43:40) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print("req")




-- OUTPUT:
req
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:43:42) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print("req")




-- EXECUTION TIME:
0.210879
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
req
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
req
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
req
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:44:30) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ a*b+b*c+a*c")

print("req")




-- OUTPUT:
req
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:44:31) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ a*b+b*c+a*c")

print("req")




-- EXECUTION TIME:
0.177694
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
req
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
req
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
req
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:45:06) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- OUTPUT:
(a*b*c)/ (a*b)+(b*c)+(a*c)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:45:10) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- EXECUTION TIME:
0.150474
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:45:11) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- OUTPUT:
(a*b*c)/ (a*b)+(b*c)+(a*c)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:45:17) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- EXECUTION TIME:
0.204166
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:45:30) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ((a*b*c)/ (a*b)+(b*c)+(a*c))

print(req)




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    req= ((a*b*c)/ (a*b)+(b*c)+(a*c))
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:45:34) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ((a*b*c)/ (a*b)+(b*c)+(a*c))

print(req)




-- EXECUTION TIME:
0.132039
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1621/2932/main.py", line 5, in <module>
    req= ((a*b*c)/ (a*b)+(b*c)+(a*c))
TypeError: can't multiply sequence by non-int of type 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:45:35) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ((a*b*c)/ (a*b)+(b*c)+(a*c))

print(req)




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    req= ((a*b*c)/ (a*b)+(b*c)+(a*c))
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:46:12) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- OUTPUT:
(a*b*c)/ (a*b)+(b*c)+(a*c)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:46:21) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- EXECUTION TIME:
0.192729
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:46:52) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= int("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    req= int("(a*b*c)/ (a*b)+(b*c)+(a*c)")
ValueError: invalid literal for int() with base 10: '(a*b*c)/ (a*b)+(b*c)+(a*c)'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:47:00) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= int("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- EXECUTION TIME:
0.165997
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1621/2932/main.py", line 5, in <module>
    req= int("(a*b*c)/ (a*b)+(b*c)+(a*c)")
ValueError: invalid literal for int() with base 10: '(a*b*c)/ (a*b)+(b*c)+(a*c)'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:47:00) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= int("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    req= int("(a*b*c)/ (a*b)+(b*c)+(a*c)")
ValueError: invalid literal for int() with base 10: '(a*b*c)/ (a*b)+(b*c)+(a*c)'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:47:18) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= input("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:47:20) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= input("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- EXECUTION TIME:
0.162637
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
12
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
5
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
60
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:47:36) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))

print(req)




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))
ValueError: invalid literal for int() with base 10: '(a*b*c)/ (a*b)+(b*c)+(a*c)'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:47:38) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))

print(req)




-- EXECUTION TIME:
0.197245
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1621/2932/main.py", line 5, in <module>
    req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))
ValueError: invalid literal for int() with base 10: '(a*b*c)/ (a*b)+(b*c)+(a*c)'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:47:38) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))

print(req)




-- EXECUTION TIME:
0.146556
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1621/2932/main.py", line 5, in <module>
    req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))
ValueError: invalid literal for int() with base 10: '(a*b*c)/ (a*b)+(b*c)+(a*c)'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:47:39) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))

print(req)




-- EXECUTION TIME:
0.12025
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1621/2932/main.py", line 5, in <module>
    req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))
ValueError: invalid literal for int() with base 10: '(a*b*c)/ (a*b)+(b*c)+(a*c)'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:47:39) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))

print(req)




-- EXECUTION TIME:
0.108018
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1621/2932/main.py", line 5, in <module>
    req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))
ValueError: invalid literal for int() with base 10: '(a*b*c)/ (a*b)+(b*c)+(a*c)'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:47:39) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))

print(req)




-- EXECUTION TIME:
0.108469
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1621/2932/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:47:40) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))

print(req)




-- EXECUTION TIME:
0.119866
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1621/2932/main.py", line 5, in <module>
    req= int(("(a*b*c)/ (a*b)+(b*c)+(a*c)"))
ValueError: invalid literal for int() with base 10: '(a*b*c)/ (a*b)+(b*c)+(a*c)'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:48:12) 
-- CODE:
a= ("r1")
b= ("r2")
c= ("r3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- OUTPUT:
(a*b*c)/ (a*b)+(b*c)+(a*c)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:48:13) 
-- CODE:
a= ("r1")
b= ("r2")
c= ("r3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- EXECUTION TIME:
0.162721
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:48:40) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- OUTPUT:
(a*b*c)/ (a*b)+(b*c)+(a*c)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:48:42) 
-- CODE:
a= (1)
b= (2)
c= (3)

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- EXECUTION TIME:
0.142944
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:49:00) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- OUTPUT:
(a*b*c)/ (a*b)+(b*c)+(a*c)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:49:02) 
-- CODE:
a= ("1")
b= ("2")
c= ("3")

req= ("(a*b*c)/ (a*b)+(b*c)+(a*c)")

print(req)




-- EXECUTION TIME:
0.171808
-- TEST CASE 1:
---- input:
12
28
10
---- correct output:
4.565217391304348
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 2:
---- input:
5
8
10
---- correct output:
2.3529411764705883
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- TEST CASE 3:
---- input:
60
88
45
---- correct output:
19.899497487437184
---- user output:
(a*b*c)/ (a*b)+(b*c)+(a*c)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
