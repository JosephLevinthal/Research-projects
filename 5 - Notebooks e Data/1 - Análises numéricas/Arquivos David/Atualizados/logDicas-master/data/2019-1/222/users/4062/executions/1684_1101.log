== TEST (2019-05-08 12:30:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
if(c<=500):
	print("Entradas: " c)
	print("Valor total: "c*0,44)
elif:
	print(1)
-- ERROR:
File "XXXX", line 6
    print("Entradas: " c)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 12:30:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
if(c<=500):
	print("Entradas: " c)
	print("Valor total: "c*0,44)
elif:
	print(1)
-- ERROR:
File "XXXX", line 6
    print("Entradas: " c)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:18:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor e tipo do consumo: "))
if(c<=500):
	print("Entradas: ", c)
	print("Valor total: ", c*0.44)
elif(c>500)and(c<=999):
	print("Etradas: ", c)
	print("Valor total: ", c*0.65)
-- OUTPUT:
Entradas:  -56.0
Valor total:  -24.64
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:20:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: ", kwh))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: ", c)
	print("Valor total: ", c*0.44)
elif(c>500)and(c<=999):
	print("Etradas: ", c)
	print("Valor total: ", c*0.65)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    c= float(input("valor do consumo: ", kwh))
NameError: name 'kwh' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:23:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: " "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: ", c "e",d)
	print("Valor total: ", c*0.44)
elif(c>500)and(c<=999):
	print("Etradas: ", c "e",d)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 7
    print("Entradas: ", c "e",d)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:23:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: " "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: ", c "e" ,d)
	print("Valor total: ", c*0.44)
elif(c>500)and(c<=999):
	print("Etradas: ", c "e",d)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 7
    print("Entradas: ", c "e" ,d)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:23:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: " "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: ", c "e" d)
	print("Valor total: ", c*0.44)
elif(c>500)and(c<=999):
	print("Etradas: ", c "e",d)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 7
    print("Entradas: ", c "e" d)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:23:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: " "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: " c "e" d)
	print("Valor total: ", c*0.44)
elif(c>500)and(c<=999):
	print("Etradas: ", c "e",d)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 7
    print("Entradas: " c "e" d)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:24:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: " "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: " c"e" d)
	print("Valor total: ", c*0.44)
elif(c>500)and(c<=999):
	print("Etradas: ", c "e",d)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 7
    print("Entradas: " c"e" d)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:24:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: " "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: " c "e" d)
	print("Valor total: ", c*0.44)
elif(c>500)and(c<=999):
	print("Etradas: ", c "e",d)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 7
    print("Entradas: " c "e" d)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:24:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: " "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: " c, d)
	print("Valor total: ", c*0.44)
elif(c>500)and(c<=999):
	print("Etradas: ", c, d)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 7
    print("Entradas: " c, d)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:25:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: " "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: ", c d)
	print("Valor total: ", c*0.44)
elif(c>500)and(c<=999):
	print("Etradas: ", c, d)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 7
    print("Entradas: ", c d)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:26:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: " "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: ",c)
	print("Valor total: ", c*0.44)
elif(c>500) and (c<=999):
	print("Etradas: ",c)
	print("Valor total: ", c*0.65)
-- OUTPUT:
valor do consumo: kwhEntradas:  -56.0
Valor total:  -24.64
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:27:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "( ) "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: ",c)
	print("Valor total: ", c*0.44)
elif(c>500) and (c<=999):
	print("Etradas: ",c)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 4
    c= float(input("valor do consumo: "( ) "kwh"))
                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:27:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: ")
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: ",c)
	print("Valor total: ", c*0.44)
elif(c>500) and (c<=999):
	print("Etradas: ",c)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 5
    d= input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:28:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: ")
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: ",c,d)
	print("Valor total: ", c*0.44)
elif(c>500) and (c<=999):
	print("Etradas: ",c,d)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 5
    d= input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:29:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: ")
if(c<=500):
	print("Entradas: ",c)
	print("Valor total: ", c*0.44)
elif(c>500) and (c<=999):
	print("Etradas: ",c)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 5
    if(c<=500):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:30:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: ")
if	(c<=500):
	print("Entradas: ",c)
	print("Valor total: ", c*0.44)
elif	(c>500) and (c<=999):
	print("Etradas: ",c)
	print("Valor total: ", c*0.65)
-- ERROR:
File "XXXX", line 5
    if	(c<=500):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:30:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: " "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: ",c)
	print("Valor total: ", c*0.44)
elif(c>500) and (c<=999):
	print("Etradas: ",c)
	print("Valor total: ", c*0.65)
-- OUTPUT:
valor do consumo: kwhEntradas:  -56.0
Valor total:  -24.64
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:30:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: " "kwh"))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas: ",c)
	print("Valor total: ", c*0.44)
elif(c>500) and (c<=999):
	print("Etradas: ",c)
	print("Valor total: ", c*0.65)
-- OUTPUT:
valor do consumo: kwhEntradas:  -56.0
Valor total:  -24.64
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:31:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas:",c)
	print("Valor total: ", c*0.44)
elif(c>500) and (c<=999):
	print("Etradas: ",c)
	print("Valor total: ", c*0.65)
-- OUTPUT:
Entradas: -56.0
Valor total:  -24.64
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:33:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas:",c)
	print(round("Valor total: ",c*0.44, 2))
elif(c>500) and (c<=999):
	print("Entradas: ",c)
	print(round("Valor total: ", c*0.65, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round("Valor total: ",c*0.44, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:36:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas:",c)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500) and (c<=999):
	print("Entradas: ",c)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 9
    elif(c>500) and (c<=999):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:37:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas:",c)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500) or (c<=999):
	print("Entradas: ",c)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 9
    elif(c>500) or (c<=999):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:38:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas:",c)
	print("Valor total: "(round(c*0.44, 2))
elif((c>500) or (c<=999)):
	print("Entradas: ",c)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 9
    elif((c>500) or (c<=999)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:40:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas:",c)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500) or (c<=999):
	print("Entradas: ",c)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 9
    elif(c>500) or (c<=999):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:40:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas:",c)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)or(c<=999):
	print("Entradas: ",c)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 9
    elif(c>500)or(c<=999):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:42:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas:",c)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)and(c<=999):
	print("Entradas: ",c)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 9
    elif(c>500)and(c<=999):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 15:42:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c<=500):
	print("Entradas:",c)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)and(c=<999):
	print("Entradas: ",c)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 9
    elif(c>500)and(c=<999):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:01:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0)
	print("Entradas:"c, "e tipo", d)
	print("Dados invalidos")
elif(c>0) and (c<=500):
	print("Entradas:"c, "e tipo", d)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)and(c<=999):
	print("Entradas: "c, "e tipo", d)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 6
    if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0)
                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:01:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0):
	print("Entradas:"c, "e tipo", d)
	print("Dados invalidos")
elif(c>0) and (c<=500):
	print("Entradas:"c, "e tipo", d)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)and(c<=999):
	print("Entradas: "c, "e tipo", d)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 7
    print("Entradas:"c, "e tipo", d)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:02:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0):
	print("Entradas:"c),("e tipo", d)
	print("Dados invalidos")
elif(c>0) and (c<=500):
	print("Entradas:"c, "e tipo", d)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)and(c<=999):
	print("Entradas: "c, "e tipo", d)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 7
    print("Entradas:"c),("e tipo", d)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:02:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0):
	print("Entradas:"c "e tipo", d)
	print("Dados invalidos")
elif(c>0) and (c<=500):
	print("Entradas:"c, "e tipo", d)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)and(c<=999):
	print("Entradas: "c, "e tipo", d)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 7
    print("Entradas:"c "e tipo", d)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:03:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0):
	print("Entradas:"c, d)
	print("Dados invalidos")
elif(c>0) and (c<=500):
	print("Entradas:"c, "e tipo", d)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)and(c<=999):
	print("Entradas: "c, "e tipo", d)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 7
    print("Entradas:"c, d)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:03:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0):
	print("Entradas:"c and d)
	print("Dados invalidos")
elif(c>0) and (c<=500):
	print("Entradas:"c, "e tipo", d)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)and(c<=999):
	print("Entradas: "c, "e tipo", d)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 7
    print("Entradas:"c and d)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:03:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0):
	print("Entradas:"c)
	print("Dados invalidos")
elif(c>0) and (c<=500):
	print("Entradas:"c, "e tipo", d)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)and(c<=999):
	print("Entradas: "c, "e tipo", d)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 7
    print("Entradas:"c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:03:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
elif(c>0) and (c<=500):
	print("Entradas:"c, "e tipo", d)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)and(c<=999):
	print("Entradas: "c, "e tipo", d)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 10
    print("Entradas:"c, "e tipo", d)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:04:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
elif(c>0) and (c<=500):
	print("Entradas:", c)
	print("Valor total: "(round(c*0.44, 2))
elif(c>500)and(c<=999):
	print("Entradas: ", c)
	print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 12
    elif(c>500)and(c<=999):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:15:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
else:
	elif(c>0) and (c<=500):
		print("Entradas:", c,d)
		print("Valor total: "(round(c*0.44, 2))
	elif(c>500)and(c<=999):
		print("Entradas: ", c,d)
		print("Valor total: "round(c*0.65, 2))
-- ERROR:
File "XXXX", line 10
    elif(c>0) and (c<=500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:16:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)or(d!=C)or(d!=I)or(c)or(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
else:
	elif(c>0)or(c<=500):
		print("Entradas:", c,d)
		print("Valor total: "c*0.44)
	elif(c>500)and(c<=999):
		print("Entradas: ", c,d)
		print("Valor total: "c*0.65, 2)
-- ERROR:
File "XXXX", line 10
    elif(c>0)or(c<=500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:16:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
else:
	elif(c>0)and(c<=500):
		print("Entradas:", c,d)
		print("Valor total: "c*0.44)
	elif(c>500)and(c<=999):
		print("Entradas: ", c,d)
		print("Valor total: "c*0.65, 2)
-- ERROR:
File "XXXX", line 10
    elif(c>0)and(c<=500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:17:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
else:
	elif(c > 0) and ( c<= 500):
		print("Entradas:", c,d)
		print("Valor total: "c*0.44)
	elif(c>500)and(c<=999):
		print("Entradas: ", c,d)
		print("Valor total: "c*0.65, 2)
-- ERROR:
File "XXXX", line 10
    elif(c > 0) and ( c<= 500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:17:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
else:
	elif(c > 0) and ( c <= 500):
		print("Entradas:", c,d)
		print("Valor total: "c*0.44)
	elif(c>500)and(c<=999):
		print("Entradas: ", c,d)
		print("Valor total: "c*0.65, 2)
-- ERROR:
File "XXXX", line 10
    elif(c > 0) and ( c <= 500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:19:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
else:
	elif(c>=0)and(c<=500)
		print("Entradas:", c,d)
		print("Valor total: "c*0.44)
	elif(c>=501)and(c<=999):
		print("Entradas: ", c,d)
		print("Valor total: "c*0.65, 2)
-- ERROR:
File "XXXX", line 10
    elif(c>=0)and(c<=500)
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:19:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
else:
	elif(c>=0)and(c<=500):
		print("Entradas:", c,d)
		print("Valor total: "c*0.44)
	elif(c>=501)and(c<=999):
		print("Entradas: ", c,d)
		print("Valor total: "c*0.65, 2)
-- ERROR:
File "XXXX", line 10
    elif(c>=0)and(c<=500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:19:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
else:
	elif(c>=0)and(c<=500):
		print("Entradas:", c)
		print("Valor total: "c*0.44)
	elif(c>=501)and(c<=999):
		print("Entradas: ", c)
		print("Valor total: "c*0.65, 2)
-- ERROR:
File "XXXX", line 10
    elif(c>=0)and(c<=500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:21:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c>=0)and(c<=500):
	print("Entradas:", c)
	print("Valor total: "c*0.44)
elif(c>=501)and(c<=999):
	print("Entradas: ", c)
	print("Valor total: "c*0.65, 2)
elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 8
    print("Valor total: "c*0.44)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:21:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c>=0)and(c<=500):
	print("Entradas:", c)
	print("Valor total: ", c*0.44)
elif(c>=501)and(c<=999):
	print("Entradas: ", c)
	print("Valor total: ", c*0.65)
elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:22:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c>=0)and(c<=500):
	print("Entradas:", c)
	print("Valor total: ", c*0.44)
elif(c>=501)and(c<=999):
	print("Entradas: ", c)
	print("Valor total: ", c*0.65)
elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:22:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c>=0)and(c<=500):
	print("Entradas:", c)
	print("Valor total: ", c*0.44)
elif(c>=501)and(c<=999):
	print("Entradas: ", c "kwh")
	print("Valor total: ", c*0.65)
elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 10
    print("Entradas: ", c "kwh")
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:23:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c>=0)and(c<=500):
	print("Entradas:", c)
	print("Valor total: ", c*0.44)
elif(c>=501)and(c<=999):
	print("Entradas: ", c, "kwh")
	print("Valor total: ", c*0.65)
elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:23:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c>=0)and(c<=500):
	print("Entradas:", c)
	print("Valor total: ", c*0.44)
elif(c>=501)and(c<=999):
	print("Entradas: ", c"kwh")
	print("Valor total: ", c*0.65)
elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 10
    print("Entradas: ", c"kwh")
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:24:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
k="kwh"
if(c>=0)and(c<=500):
	print("Entradas:", c)
	print("Valor total: ", c*0.44)
elif(c>=501)and(c<=999):
	print("Entradas: ", c, k)
	print("Valor total: ", c*0.65)
elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:24:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
k="kwh"
if(c>=0)and(c<=500):
	print("Entradas:", c)
	print("Valor total: ", c*0.44)
elif(c>=501)and(c<=999):
	print("Entradas: ", c, k)
	print("Valor total: ", c*0.65)
elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:24:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
k="kwh"
if(c>=0)and(c<=500):
	print("Entradas:", c)
	print("Valor total: ", c*0.44)
elif(c>=501)and(c<=999):
	print("Entradas: ", c, k)
	print("Valor total: ", c*0.65)
elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
	print("Entradas:", c)
	print("Dados invalidos")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    elif(d!=R)and(d!=C)and(d!=I)and(c)and(c<0):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:40:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
print(c, d)

-- OUTPUT:
-56.0 I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:41:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
print(c "kwh")

-- ERROR:
File "XXXX", line 6
    print(c "kwh")
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:41:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
print(c, "kwh")

-- OUTPUT:
-56.0 kwh
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:41:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
print(c, "kwh e tipo", c)

-- OUTPUT:
-56.0 kwh e tipo -56.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:45:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
print(c, "kwh e tipo", d)

-- OUTPUT:
-56.0 kwh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:52:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c>=0)and(c<=500)
	print(C, "kwh e tipo", D)
	print("Valor total:",round(c*0.44, 2))

-- ERROR:
File "XXXX", line 6
    if(c>=0)and(c<=500)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:52:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c= float(input("valor do consumo: "))
d= input("tipo do consumo: ")
if(c>=0)and(c<=500):
	print(C, "kwh e tipo", D)
	print("Valor total:",round(c*0.44, 2))

-- ERROR:
File "XXXX", line 6
    if(c>=0)and(c<=500)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:53:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
C= float(input("valor do consumo: "))
D= input("tipo do consumo: ")
if(c>=0)and(c<=500):
	print(C, "kwh e tipo", D)
	print("Valor total:",round(c*0.44, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(c>=0)and(c<=500):
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:53:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
C= float(input("valor do consumo: "))
D= input("tipo do consumo: ")
if(C>=0)and(C<=500):
	print(C, "kwh e tipo", D)
	print("Valor total:",round(C*0.44, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(c>=0)and(c<=500):
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:54:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
C= float(input("valor do consumo: "))
D= input("tipo do consumo: ")
if(C>=0)and(C<=500):
	print(C, "kwh e tipo", D)
	print("Valor total:",round(C*0.44, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(c>=0)and(c<=500):
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 16:57:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
C= float(input("valor do consumo: "))
D= input("tipo do consumo: ")
if(C>=0)and(C<=500):
	print(C, "kwh e tipo", D)
	print("Valor total:",round(C*0.44, 2))
elif(C>500)and(C<=999):
	print(C, "kwh e tipo", D)
	print("Valor total:",round(C*0.65, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(c>=0)and(c<=500):
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-26 14:41:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("Consumo: "))
tipo = input("Tipo de instalacao: ").upper()

print("Entradas:", consumo, "kWh e tipo", tipo)
if (consumo < 0 or tipo != "R" and tipo != "C" and tipo != "I"):
	print("Dados invalidos")
	
else:
	if (tipo == "R"):
		if (consumo <= 500):
			preco = 0.44

		else:
			preco = 0.65

	elif (tipo == "C"):
		if (consumo <= 1000):
			preco = 0.55

		else:
			preco = 0.60

	elif (tipo == "I"):
		if (consumo <= 5000):
			preco = 0.55

		else:
			preco = 0.60
	valor = consumo*preco
	print("Valor total: R$",round(valor,2))
-- EXECUTION TIME:
0.866668
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
