== TEST (2019-04-29 18:20:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(intup("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo 1: {} , {}".format(a,b))
print("Intervallo2: {}, {}".format(c,d))



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = float(intup("a: "))
NameError: name 'intup' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:20:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(intup("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo 1: {} , {}".format(a,b))
print("Intervallo2: {}, {}".format(c,d))



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = float(intup("a: "))
NameError: name 'intup' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:20:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo 1: {} , {}".format(a,b))
print("Intervallo2: {}, {}".format(c,d))




-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervallo2: 4.0, 5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:27:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo 1: {} , {}".format(a,b))
print("Intervallo2: {}, {}".format(c,d))

if not (b > a and d > c):
	print("Entradas invalidas")

elif ((c > a and c < b)or (d < b and d > a)):
	print("Ha intersecao")
	
elif(c > b or d < a):
	print("Nao ha intersecao")




-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervallo2: 4.0, 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 18:28:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo 1: {} , {}".format(a,b))
print("Intervallo2: {}, {}".format(c,d))

if not (b > a and d > c):
	print("Entradas invalidas")

elif ((c > a and c < b)or (d < b and d > a)):
	print("Ha intersecao")
	
elif(c > b or d < a):
	print("Nao ha intersecao")




-- EXECUTION TIME:
0.16266
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervallo2: 4.0, 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervallo2: 2.5, 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervallo2: 1.0, 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 18:28:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo  1: {} ,{}".format(a,b))
print("Intervallo 2: {}, {}".format(c,d))

if not (b > a and d > c):
	print("Entradas invalidas")

elif ((c > a and c < b)or (d < b and d > a)):
	print("Ha intersecao")
	
elif(c > b or d < a):
	print("Nao ha intersecao")




-- EXECUTION TIME:
0.244983
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo  1: 1.0 ,2.0
Intervallo 2: 4.0, 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo  1: 1.5 ,5.0
Intervallo 2: 2.5, 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo  1: -1.0 ,-3.0
Intervallo 2: 1.0, 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 18:28:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo  1: {} ,{}".format(a,b))
print("Intervallo 2: {}, {}".format(c,d))

if not (b > a and d > c):
	print("Entradas invalidas")

elif ((c > a and c < b)or (d < b and d > a)):
	print("Ha intersecao")
	
elif(c > b or d < a):
	print("Nao ha intersecao")




-- EXECUTION TIME:
0.187099
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo  1: 1.0 ,2.0
Intervallo 2: 4.0, 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo  1: 1.5 ,5.0
Intervallo 2: 2.5, 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo  1: -1.0 ,-3.0
Intervallo 2: 1.0, 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:53:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo  1: {} ,{}".format(a,b))
print("Intervallo 2: {}, {}".format(c,d))

if b > a and d > c:
	if(a <= d <= b)or (a <= c <= b):
	print("Ha intersecao")
	
   else:
	print("Nao ha intersecao")
else:
	print("Entrada invalidas")



-- ERROR:
File "XXXX", line 15
    print("Ha intersecao")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:56:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo  1: ",a  ,",", b)
print("Intervallo 2: ",c ,", ", d))

if b > a and d > c:
	if(a <= d <= b)or (a <= c <= b):
	print("Ha intersecao")
	
   else:
	print("Nao ha intersecao")
else:
	print("Entrada invalidas")



-- ERROR:
File "XXXX", line 11
    print("Intervallo 2: ",c ,", ", d))
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
