== TEST (2019-04-13 23:15:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
r = (((vo)**2)*sen(2*a))/gravidade
if(r):
	mensagem = sim
else:
	mensagem = nao

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    r = (((vo)**2)*sen(2*a))/gravidade
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:16:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
r = (((vo)**2)*sen(2*a))/gravidade
if(r):
	mensagem = sim
else:
	mensagem = nao

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    r = (((vo)**2)*sen(2*a))/gravidade
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:17:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
r = ((vo**2)*sen(2*a))/gravidade
if(r):
	mensagem = sim
else:
	mensagem = nao

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    r = ((vo**2)*sen(2*a))/gravidade
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:19:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians()
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = sim
else:
	mensagem = nao

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    a = radians()
TypeError: radians() takes exactly one argument (0 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:29:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = sim
else:
	mensagem = nao

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    mensagem = nao
NameError: name 'nao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:30:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = (sim)
else:
	mensagem = (nao) 

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    mensagem = (nao) 
NameError: name 'nao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:30:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:33:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- EXECUTION TIME:
0.250564
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:35:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:36:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- EXECUTION TIME:
0.199777
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:36:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(gravidade)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:36:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(gravidade)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- EXECUTION TIME:
0.156652
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:38:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(gravidade-r)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    b = abs(gravidade-r)
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:38:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:39:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- EXECUTION TIME:
0.184114
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:40:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(10.0-0.78)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:40:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(10.0-0.78)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- EXECUTION TIME:
0.205531
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:41:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(gravidade==0)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:41:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(gravidade==0)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- EXECUTION TIME:
0.194912
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:00:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(gravidade==0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:00:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(gravidade==0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- EXECUTION TIME:
0.173701
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:02:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(r==0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    b = abs(r==0.1)
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:02:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(r-0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    b = abs(r-0.1)
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:03:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(r==0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    b = abs(r==0.1)
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:05:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(r<=>0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- ERROR:
File "XXXX", line 9
    b = abs(r<=>0.1)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:05:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(r<>0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- ERROR:
File "XXXX", line 9
    b = abs(r<>0.1)
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:06:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:06:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
gravidade = float(input("digite angulo: "))
a = radians(2*angulo)
b = abs(0.1)
r = ((vo**2)*sin(2*angulo))/gravidade
if(20.1<=r>=19.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)

-- EXECUTION TIME:
0.191634
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:01:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
#a = radians(2*angulo)
R = ((vo**2)*sin(2*angulo))/
b = abs(D-R)
#if(20.1<=r>=19.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 
print(b)
print(R)

-- ERROR:
File "XXXX", line 9
    R = ((vo**2)*sin(2*angulo))/
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:01:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
#a = radians(2*angulo)
R = ((vo**2)*sin(2*angulo))
b = abs(D-R)
#if(20.1<=r>=19.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 
print(b)
print(R)

-- OUTPUT:
0.3851231705650413
11.685123170565042
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:01:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
#a = radians(2*angulo)
R = ((vo**2)*sin(2*angulo))/9.8
b = abs(D-R)
#if(20.1<=r>=19.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 
print(b)
print(R)

-- OUTPUT:
10.107640492799487
1.1923595072005144
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:06:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
#a = radians(2*angulo)
R = sin(2*angulo)/9.8
b = abs(D-R)
#if(20.1<=r>=19.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 
print(b)
print(R)

-- OUTPUT:
11.289184947780495
0.010815052219505801
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:07:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
a = radians(sin(2*angulo))
R = sin(2*angulo)/9.8
b = abs(D-R)
#if(20.1<=r>=19.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 
print(a)
print(b)
print(R)

-- OUTPUT:
0.001849831046053868
11.289184947780495
0.010815052219505801
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:09:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
a = radians(2*angulo)
R = sin(2*angulo)/9.8
b = abs(D-R)
#if(20.1<=r>=19.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 
print(a)
print(b)
print(R)

-- OUTPUT:
1.5882496193148399
11.289184947780495
0.010815052219505801
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:09:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
a = radians(2*angulo)
R = sin(2*angulo)/9.8
b = abs(D-R)
#if(20.1<=r>=19.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 
print(a)
print(b)
print(R)

-- OUTPUT:
1.5882496193148399
11.289184947780495
0.010815052219505801
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:10:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
a = radians(2*angulo)
R = sin(2*angulo)
#/9.8
b = abs(D-R)
#if(20.1<=r>=19.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 
print(a)
print(b)
print(R)

-- OUTPUT:
1.5882496193148399
11.194012488248843
0.10598751175115685
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:11:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
a = radians(2*angulo)
R = a/9.8
b = abs(D-R)
#if(20.1<=r>=19.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 
print(a)
print(b)
print(R)

-- OUTPUT:
1.5882496193148399
11.137933712314814
0.16206628768518774
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:18:17) 
-- CODE:
from math import*

vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))

R = radians(2*angulo)/9.8
b = abs(D-R)

if(b<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 23:18:41) 
-- CODE:
from math import*

vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))

R = radians(2*angulo)/9.8
b = abs(D-R)

if(b<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)
-- EXECUTION TIME:
0.146992
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:20:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8

if(abs(D-R)<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 23:20:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8

if(abs(D-R)<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(mensagem)
-- EXECUTION TIME:
0.18289
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:22:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8

if(abs(D-R)>=0.1 or 0.1>=abs(D-R)):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(mensagem)
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 23:22:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8

if(abs(D-R)>=0.1 or 0.1>=abs(D-R)):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(mensagem)
-- EXECUTION TIME:
0.219171
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:27:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8

#if(abs(D-R)>=0.1 or 0.1>=abs(D-R)):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 
print(R)
print("********")
print(abs(D-R))
-- OUTPUT:
0.16206628768518774
********
11.137933712314814
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:29:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8

if(abs(D-R)<=0.1 or abs(D-R)>=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(mensagem)
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 23:29:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8

if(abs(D-R)<=0.1 or abs(D-R)>=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(mensagem)
-- EXECUTION TIME:
0.225368
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 23:30:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8

if(abs(D-R)<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(mensagem)
-- EXECUTION TIME:
0.13401
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:30:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8

if(abs(D-R)<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 23:30:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8

if(abs(D-R)<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(mensagem)
-- EXECUTION TIME:
0.165878
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:31:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8

if(abs(D-R)<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(abs(D-R))
-- OUTPUT:
11.137933712314814
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:33:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8
verificar = D - abs(D-R)
if(verificar<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 23:33:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8
verificar = D - abs(D-R)
if(verificar<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(mensagem)
-- EXECUTION TIME:
0.124812
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:33:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("digite velocidade: "))
angulo = float(input("digite angulo: "))
D = float(input("digite angulo: "))
R = radians(2*angulo)/9.8
verificar = D - abs(D-R)
if(verificar<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(verificar)
-- OUTPUT:
0.16206628768518705
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 23:59:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = (sin(radians(2*a)))/9.8
verificar = D - abs(D-R)
if(verificar<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(R)
print(D)
print(abs(D-R))
print(verificar)
-- OUTPUT:
0.10202527501595829
11.3
11.197974724984043
0.10202527501595782
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 00:00:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = sin(radians(2*a)
verificar = D - abs(D-R)
if(verificar<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(R)
print(D)
print(abs(D-R))
print(verificar)
-- ERROR:
File "XXXX", line 11
    verificar = D - abs(D-R)
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 00:00:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = sin(radians(2*a))
verificar = D - abs(D-R)
if(verificar<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(R)
print(D)
print(abs(D-R))
print(verificar)
-- OUTPUT:
0.9998476951563913
11.3
10.300152304843609
0.9998476951563919
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 00:04:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = sin(2*a)
D1 = radians(2*a)
verificar = D - abs(D-R)
if(verificar<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 
print(R)
print(D1)
print(abs(D-R))
print(verificar)
-- OUTPUT:
0.10598751175115685
1.5882496193148399
11.194012488248843
0.10598751175115773
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 00:06:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8

if((D - abs(D-R))<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 00:06:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8

if((D - abs(D-R))<=0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 00:17:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8
mensagem = sin(78)
#if((D - abs(D-R))<=0.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
0.5139784559875352
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 00:17:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8
mensagem = sin(80)
#if((D - abs(D-R))<=0.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
-0.9938886539233752
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 00:19:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8
mensagem = sin(75)
#if((D - abs(D-R))<=0.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
-0.38778163540943045
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 00:19:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8
mensagem = sin(75)
#if((D - abs(D-R))<=0.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
-0.38778163540943045
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 00:19:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8
mensagem = sin(0.78)
#if((D - abs(D-R))<=0.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
0.7032794192004101
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:19:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8
mensagem = sin(0.78)
#if((D - abs(D-R))<=0.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
0.7032794192004101
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:21:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8
mensagem = sin(0.78)
#if((D - abs(D-R))<=0.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
0.7032794192004101
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:32:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8
mensagem = sin(0.78)
#if((D - abs(D-R))<=0.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
0.7032794192004101
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:52:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8
mensagem = sin(0.78)
#if((D - abs(D-R))<=0.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
0.7032794192004101
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:53:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8
mensagem = sin(0.78)
#if((D - abs(D-R))<=0.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
0.7032794192004101
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:54:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))

R = radians(2*a)/9.8
mensagem = sin(0.78)
#if((D - abs(D-R))<=0.1):
#	mensagem = ("sim")
#else:
#	mensagem = ("nao") 

print(mensagem)
-- OUTPUT:
0.7032794192004101
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 10:33:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = ((vo**2)*math.radians(2*a))/g
absoluto = abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else(absoluto < 0.1):
	mensagem = ("sim") 

print(mensagem)
-- ERROR:
File "XXXX", line 15
    else(absoluto < 0.1):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 11:37:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = ((vo**2)*math.radians(2*a))/g
absoluto = abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else(absoluto < 0.1):
	mensagem = ("sim") 

print(mensagem)

-- EXECUTION TIME:
0.135315
-- ERROR:
  File "/home/codebench/codes/1643/1055/main.py", line 15
    else(absoluto < 0.1):
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 11:38:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = ((vo**2)*math.radians(2*a))/g
absoluto = abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(mensagem)

-- EXECUTION TIME:
0.147619
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1643/1055/main.py", line 10, in <module>
    R = ((vo**2)*math.radians(2*a))/g
NameError: name 'vo' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:38:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = ((vo**2)*math.radians(2*a))/g
absoluto = abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    R = ((vo**2)*math.radians(2*a))/g
NameError: name 'vo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:38:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = ((vo**2)*radians(2*a))/g
absoluto = abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    R = ((vo**2)*radians(2*a))/g
NameError: name 'vo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:39:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = ((Vo**2)*radians(2*a))/g
absoluto = abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 11:39:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = ((Vo**2)*radians(2*a))/g
absoluto = abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(mensagem)

-- EXECUTION TIME:
0.189239
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:40:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = ((Vo**2)*radians(2*a))/g
absoluto = abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:41:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = ((Vo**2)*radians(2*a))/g
absoluto = abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(absoluto)

-- OUTPUT:
6.567808217291947
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:41:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = radians(2*a)/g
absoluto = abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(absoluto)

-- OUTPUT:
11.137933712314814
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:43:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = radians(2*a)/g
absoluto = D - abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(absoluto)

-- OUTPUT:
0.16206628768518705
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 11:43:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = radians(2*a)/g
absoluto = D - abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(absoluto)

-- EXECUTION TIME:
0.164242
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
0.16206628768518705
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
0.06090842899816806
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 11:43:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = radians(2*a)/g
absoluto = D - abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(mensagem)

-- EXECUTION TIME:
0.143377
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:43:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

Vo = float(input("digite velocidade inicial: "))
a = float(input("digite angulo: "))
D = float(input("digite a distancia: "))
g = 9.8
R = radians(2*a)/g
absoluto = D - abs(D - R)

if(absoluto > 0.1):
	mensagem = ("nao")
else:
	mensagem = ("sim") 

print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:17:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

velocidade = float(input("digite velocidade inicial: "))
angulo = float(input("digite angulo: "))
distancia = float(input("digite a distancia: "))
gravidade = 9.8
r = ((velocidade**2)*(radians(2*angulo)))/gravidade
print(r)

-- OUTPUT:
17.867808217291948
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:18:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

velocidade = float(input("digite velocidade inicial: "))
angulo = float(input("digite angulo: "))
distancia = float(input("digite a distancia: "))
gravidade = 9.8
r = ((radians(2*angulo)))/gravidade
print(r)

-- OUTPUT:
0.16206628768518774
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:18:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

velocidade = float(input("digite velocidade inicial: "))
angulo = float(input("digite angulo: "))
distancia = float(input("digite a distancia: "))
gravidade = 9.8
r = ((radians(2*angulo)))/gravidade
print(r)

-- OUTPUT:
0.16206628768518774
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:19:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

velocidade = float(input("digite velocidade inicial: "))
angulo = float(input("digite angulo: "))
distancia = float(input("digite a distancia: "))
gravidade = 9.8
r = ((radians(2*angulo)))/gravidade
print(sin(angulo))

-- OUTPUT:
0.9985908724117705
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:21:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

velocidade = float(input("digite velocidade inicial: "))
angulo = float(input("digite angulo: "))
distancia = float(input("digite a distancia: "))
gravidade = 9.8
r = ((radians(2*angulo)))/gravidade
absoluto = abs(distancia - r)
print(absoluto)

-- OUTPUT:
11.137933712314814
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:21:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

velocidade = float(input("digite velocidade inicial: "))
angulo = float(input("digite angulo: "))
distancia = float(input("digite a distancia: "))
gravidade = 9.8
r = ((radians(2*angulo)))/gravidade
absoluto = abs(r - distancia)
print(absoluto)

-- OUTPUT:
11.137933712314814
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:26:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

velocidade = float(input("digite velocidade inicial: "))
angulo = float(input("digite angulo: "))
distancia = float(input("digite a distancia: "))
gravidade = 9.8
r = ((radians(2*angulo)))/gravidade
absoluto = distancia - abs(r - distancia)
if (absoluto < 0.1):
	mensagem = ("sim")
else: 
	mensagem = ("nao")
print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:26:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

velocidade = float(input("digite velocidade inicial: "))
angulo = float(input("digite angulo: "))
distancia = float(input("digite a distancia: "))
gravidade = 9.8
r = ((radians(2*angulo)))/gravidade
absoluto = distancia - abs(r - distancia)
if (absoluto > 0.1):
	mensagem = ("sim")
else: 
	mensagem = ("nao")
print(mensagem)

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:26:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

velocidade = float(input("digite velocidade inicial: "))
angulo = float(input("digite angulo: "))
distancia = float(input("digite a distancia: "))
gravidade = 9.8
r = ((radians(2*angulo)))/gravidade
absoluto = distancia - abs(r - distancia)
if (absoluto > 0.1):
	mensagem = ("sim")
else: 
	mensagem = ("nao")
print(mensagem)

-- EXECUTION TIME:
0.201304
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
