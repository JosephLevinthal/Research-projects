== TEST (2019-04-22 18:53:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (c<=(a+b)):
	# Testa se medidas correspondem aas de um triangulo
	if (c<(a+b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Area: 3.873
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:57:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. 
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if (c<=(a+b)):
		if (a==b or b==c or c==a):
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- ERROR:
File "XXXX", line 13
    print("Area:", area)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:58:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. 
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if (c<=(a+b)):
		if ((a==b or b==c) or c==a):
		print("Area:")
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- ERROR:
File "XXXX", line 13
    print("Area:")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:45:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. 

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:45:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. 

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

-- EXECUTION TIME:
0.168998
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
