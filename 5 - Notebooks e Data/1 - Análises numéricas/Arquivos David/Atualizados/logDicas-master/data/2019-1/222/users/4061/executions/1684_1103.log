== TEST (2019-05-18 18:26:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))



if(a <= x and x <= b):
	print(x, "pertence ao intervalo" a, b)
elif(a == b):
	print(x ,"nao pertence ao intevalo" a, b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- ERROR:
File "XXXX", line 11
    print(x, "pertence ao intervalo" a, b)
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 18:27:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(a <= x and x <= b):
	print(x , "pertence ao intervalo" a, b)
elif(a == b):
	print(x ,"nao pertence ao intevalo" a, b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- ERROR:
File "XXXX", line 9
    print(x , "pertence ao intervalo" a, b)
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 18:27:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(a <= x and x <= b):
	print(x , "pertence ao intervalo", a, b)
elif(a == b):
	print(x ,"nao pertence ao intevalo", a, b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- ERROR:
File "XXXX", line 9
    print(x , "pertence ao intervalo" a, b)
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 18:28:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(a <= x and x <= b):
	print(x , "pertence ao intervalo", a,",", b)
elif(a == b):
	print(x ,"nao pertence ao intevalo", a, b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- ERROR:
File "XXXX", line 9
    print(x , "pertence ao intervalo" a, b)
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-18 18:28:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(a <= x and x <= b):
	print(x , "pertence ao intervalo", a,",", b)
elif(a == b):
	print(x ,"nao pertence ao intevalo", a, b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- EXECUTION TIME:
0.147088
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 18:29:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(a <= x and x <= b):
	print(x , "pertence ao intervalo", a,",", b)
elif(a == b):
	print(x ,"nao pertence ao intevalo", a, b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- ERROR:
File "XXXX", line 9
    print(x , "pertence ao intervalo" a, b)
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 18:29:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(a <= x and x <= b):
	print(x , "pertence ao intervalo", a,",", b)
elif(a == b):
	print(x ,"nao pertence ao intevalo", a,"," b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- ERROR:
File "XXXX", line 11
    print(x ,"nao pertence ao intevalo", a,"," b)
                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 18:29:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(a <= x and x <= b):
	print(x , "pertence ao intervalo", a,",", b)
elif(a == b):
	print(x ,"nao pertence ao intevalo", a,",", b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- ERROR:
File "XXXX", line 11
    print(x ,"nao pertence ao intevalo", a,"," b)
                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-18 18:30:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(a <= x and x <= b):
	print(x , "pertence ao intervalo", a,",", b)
elif(a == b):
	print(x ,"nao pertence ao intevalo", a,",", b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- EXECUTION TIME:
0.208423
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 18:31:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(a <= x and x <= b):
	print(x , "pertence ao intervalo", a,",", b)
elif(a == b):
	print(x ,"nao pertence ao intevalo", a,",", b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- ERROR:
File "XXXX", line 11
    print(x ,"nao pertence ao intevalo", a,"," b)
                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 18:33:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(a <= x and x <= b):
	print(x , "pertence ao intervalo", a,",", b)
elif(a == b):
	print(x ,"nao pertence ao intervalo", a,",", b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- ERROR:
File "XXXX", line 11
    print(x ,"nao pertence ao intevalo", a,"," b)
                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-18 18:34:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(a <= x and x <= b):
	print(x , "pertence ao intervalo", a,",", b)
elif(a == b):
	print(x ,"nao pertence ao intervalo", a,",", b)
elif(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")



-- EXECUTION TIME:
0.160908
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-18 18:37:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")
else:
	if(a <= x and x <= b):
		print(x , "pertence ao intervalo", a,",", b)
	else:
		print(x ,"nao pertence ao intervalo", a,",", b)




-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-18 18:37:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite x: "))
a = float(input("digite a: "))
b = float(input("digite b: "))

if(b <= a):
	print("Entradas", a ,"e", b ,"invalidas")
else:
	if(a <= x and x <= b):
		print(x , "pertence ao intervalo", a,",", b)
	else:
		print(x ,"nao pertence ao intervalo", a,",", b)




-- EXECUTION TIME:
0.154627
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
