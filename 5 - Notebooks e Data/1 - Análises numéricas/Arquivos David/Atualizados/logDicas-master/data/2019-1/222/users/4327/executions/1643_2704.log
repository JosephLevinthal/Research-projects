== TEST (2019-04-10 18:33:27) 
-- CODE:
p=float(input("nota"))
b=input("bonificação")
if(p == "s"):
	print( )
else:
	print(p,N)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(p,N)
NameError: name 'N' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:34:19) 
-- CODE:
p=float(input("nota: "))
b=input("bonificação digite S= pra sim ou N para nao")
if(p == "s"):
	print( )
else:
	print(p,N)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(p,N)
NameError: name 'N' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:34:44) 
-- CODE:
p=float(input("nota: "))
"b"=input5("bonificação digite S= pra sim ou N para nao")
if(p == "s"):
	print( )
else:
	print(p,N)
-- ERROR:
File "XXXX", line 2
    "b"=input5("bonificação digite S= pra sim ou N para nao")
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:36:34) 
-- CODE:
p=float(input("nota"))
"b"=input("bonificação")

-- ERROR:
File "XXXX", line 2
    "b"=input()
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:36:52) 
-- CODE:
p = float(input("nota"))
"b" = input("bonificação")

-- ERROR:
File "XXXX", line 2
    "b" = input()
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:39:44) 
-- CODE:
p = float(input("nota"))
b = input("bonificação")
if(p.upper() == "s"):
	print( )
else:
	print( (p + (p*0.12)),S)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(p.upper() == "s"):
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:41:31) 
-- CODE:
p = float(input("nota"))
bonus = input("bonificação?")
if(p.upper() == "s"):
	print( )
else:
	print( (p + (p*0.10)),S)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(p.upper() == "s"):
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:42:38) 
-- CODE:
p = float(input("nota"))
b = input("bonificação?")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(p.upper() == "s"):
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:45:14) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificação? (S/N)")




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(p.upper() == "s"):
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:46:23) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificação? (S/N):")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(p.upper() == "s"):
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:47:07) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(p.upper() == "s"):
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:49:34) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(p.upper() == "s"):
	print(p + (p*0.10)),S )
else:
	print( ()
-- ERROR:
File "XXXX", line 4
    print(p + (p*0.10)),S )
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:49:45) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(p.upper() == "s"):
	print(p + (p*0.10),S )
else:
	print( ()
-- ERROR:
File "XXXX", line 7
    
              ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:49:53) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(p.upper() == "s"):
	print(p + (p*0.10),S )
else:
	print()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(p.upper() == "s"):
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:50:47) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(p.upper() == "s"):
	print(p + (p*0.10),S )
else(p.upper() == "n"):
	print(p, N)
-- ERROR:
File "XXXX", line 5
    else(p.upper() == "n"):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:51:21) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(p.upper() == "s"):
	print(p + (p*0.10),S )
else:
	print(p, N)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(p.upper() == "s"):
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:51:48) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(p== "s"):
	print(p + (p*0.10),S )
else:
	print(p, N)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(p, N)
NameError: name 'N' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:52:08) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(p== "s"):
	print(p + (p*0.10),S )
else:
	print(p, "N")
-- OUTPUT:
5.0 N
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:52:32) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(p== "s"):
	print(p + (p*0.10))
else:
	print(p,)
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:52:52) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(p == "s"):
	print(p + (p*0.10))
else:
	print(p,)
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:54:25) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(p.upper() == "s"):
	print(p+(p*0.10))
else:
	print(p)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(p.upper() == "s"):
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:56:22) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(bn.upper()=="s"):
	print(p+(p*0.10))
else:
	print(p)
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:56:43) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(bn.upper()=="S"):
	print(p+(p*0.10))
else:
	print(p)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:57:00) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(bn.upper()=="S"):
	print(p+(p*0.10))
else:
	print(p)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:57:10) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(bn.upper()=="S"):
	print(p+(p*0.10))
else:
	print(p)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 18:57:14) 
-- CODE:
p = float(input("nota: "))
bn = input("bonificacao(S/N):")
if(bn.upper()=="S"):
	print(p+(p*0.10))
else:
	print(p)
-- EXECUTION TIME:
0.190696
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
