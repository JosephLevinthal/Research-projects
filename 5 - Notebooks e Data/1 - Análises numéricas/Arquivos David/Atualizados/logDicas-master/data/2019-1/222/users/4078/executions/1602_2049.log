== TEST (2019-03-25 19:14:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
x=int(input("dividendo: "))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z, a)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:15:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
x=int(input("dividendo: "))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z, a)
-- EXECUTION TIME:
0.231921
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:25:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z)
-- OUTPUT:
8 5 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:26:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z)
-- OUTPUT:
8 5 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:27:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z)
-- EXECUTION TIME:
0.137707
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:27:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z)
-- OUTPUT:
8 5 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:28:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z)
-- EXECUTION TIME:
0.123117
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:28:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z)
-- OUTPUT:
8 5 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:29:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z,a)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:30:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z,a)
-- EXECUTION TIME:
0.124338
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 18:31:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z, a)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 18:31:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z, a)
-- EXECUTION TIME:
0.208762
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:53:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z, a)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 23:53:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x=int(input("dividendo:"))
y=int(input("divisor: "))
z=x//y
a=x%y
print(x, y, z, a)
-- EXECUTION TIME:
0.199428
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:56:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor: "))
a =x//y
z =x%y
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:56:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor: "))
a =x//y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 23:57:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor: "))
a =x//y
z =x%y
print(x, y, a, z)
-- EXECUTION TIME:
0.155386
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:19:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x//y
z =x%y
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:20:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x/y
z =x%y
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:20:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x/y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1.6 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 12:20:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x/y
z =x%y
print(x, y, a, z)
-- EXECUTION TIME:
0.198924
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1.6 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7.0 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173.5 1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:21:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x//y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 12:21:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x//y
z =x%y
print(x, y, a, z)
-- EXECUTION TIME:
0.156409
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:33:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x/y
z =x%y
print(x. y, a, z)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(x. y, a, z)
AttributeError: 'int' object has no attribute 'y'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:34:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x/y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1.6 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:34:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x//y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 12:34:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x//y
z =x%y
print(x, y, a, z)
-- EXECUTION TIME:
0.203763
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:55:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor: "))
a =x//y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 13:55:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor: "))
a =x//y
z =x%y
print(x, y, a, z)
-- EXECUTION TIME:
0.199801
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:03:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x//y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 14:03:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x//y
z =x%y
print(x, y, a, z)
-- EXECUTION TIME:
0.137491
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:56:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x//y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:57:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x//y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:57:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corr
x =int(input("dividendo: "))
y =int(input("divisor:"))
a =x//y
z =x%y
print(x, y, a, z)
-- EXECUTION TIME:
0.159044
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:25:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a c
x =int(input("dividendo: "))
y =int(input("divisor: "))
a =x/y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1.6 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:25:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a c
x =int(input("dividendo: "))
y =int(input("divisor: "))
a =x//y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 19:25:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a c
x =int(input("dividendo: "))
y =int(input("divisor: "))
a =x//y
z =x%y
print(x, y, a, z)
-- EXECUTION TIME:
0.291685
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 09:22:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a c
x =int(input("dividendo: "))
y =int(input("divisor: "))
a =x//y
z =x%y
print(x, y, a, z)
-- OUTPUT:
8 5 1 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 09:23:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a c
x =int(input("dividendo: "))
y =int(input("divisor: "))
a =x//y
z =x%y
print(x, y, a, z)
-- EXECUTION TIME:
0.136823
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8 5 1 3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14 2 7 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347 2 173 1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
