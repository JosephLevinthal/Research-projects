== TEST (2019-04-07 01:02:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
desconto = float(input("preço: "))
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:03:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
desconto = float(input("preco: "))
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:06:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco - 5 / 100)
else:
	print(preco)

-- OUTPUT:
200.04
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:06:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco - (5 / 100))
else:
	print(preco)

-- OUTPUT:
200.04
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:07:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco * (5 / 100))
else:
	print(preco)

-- OUTPUT:
10.0045
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:07:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco * 5 / 100)
else:
	print(preco)

-- OUTPUT:
10.0045
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:09:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco * 5 / 100)
else:
	print(preco)

-- OUTPUT:
10.0045
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:10:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco * 95 / 100)
else:
	print(preco)

-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:21:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco * 95 / 100)
else:
	print(preco)

-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:22:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco * 95 / 100)
else:
	print(preco)

-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 01:23:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco * 95 / 100)
else:
	print(preco)

-- EXECUTION TIME:
0.184497
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.0855
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.50349999999997
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:23:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco * 95 / 100)
else:
	print(preco)

-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 01:23:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco * 95 / 100)
else:
	print(preco)

-- EXECUTION TIME:
0.193908
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.0855
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.50349999999997
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:23:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(preco * 95 / 100)
else:
	print(preco)

-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:24:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(round(preco * 95 / 100 , 2)
else:
	print(preco,2)

-- ERROR:
File "XXXX", line 7
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:24:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(round(preco * 95 / 100 , 2)
else:
	print(round(preco,2)

-- ERROR:
File "XXXX", line 7
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:25:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(round(preco * 95 / 100 , 2)
else:
	print(round(preco,2)

-- ERROR:
File "XXXX", line 7
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:25:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(round(preco * (95 / 100) , 2)
else:
	print(round(preco,2)

-- ERROR:
File "XXXX", line 7
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:26:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(round(preco * (95 / 100))
else:
	print(round(preco,2)

-- ERROR:
File "XXXX", line 7
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:27:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(round(preco * (95 / 100))
else:
	print(round(preco,2))

-- ERROR:
File "XXXX", line 7
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:27:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(round(preco * (95 / 100)))
else:
	print(round(preco,2))

-- OUTPUT:
190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:27:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(round(preco * (95 / 100 ,2)))
else:
	print(round(preco,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(preco * (95 / 100 ,2)))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:27:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(round(preco * (95 / 100 ,2)))
else:
	print(round(preco,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(preco * (95 / 100 ,2)))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 01:28:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(round(preco * (95 / 100) ,2))
else:
	print(round(preco,2))

-- OUTPUT:
190.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 01:28:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco: "))
if(preco >= 200):
	print(round(preco * (95 / 100) ,2))
else:
	print(round(preco,2))

-- EXECUTION TIME:
0.155893
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
