== TEST (2019-03-20 19:27:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantos litros: "))
x=2/3
litros=
print(litros)
-- ERROR:
File "XXXX", line 6
    litros=
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:27:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantos litros: "))
x=2/3
litros=float(michel*x)
print(litros)
-- OUTPUT:
4.666666666666666
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:27:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantos litros: "))
x=2/3
litros=float(michel*x)
print(litros)
-- EXECUTION TIME:
0.147115
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
4.666666666666666
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:

-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
10.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:27:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantos litros: "))
x=2/3
litros=float(michel*x)
print(litros)
-- OUTPUT:
4.666666666666666
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:27:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantos litros: "))
x=2/3
litros=float(michel*x)
print(litros)
-- OUTPUT:
4.666666666666666
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:28:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantos litros: "))
x=2/3
litros=float(michel*x)
print(litros)
-- EXECUTION TIME:
0.188604
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
4.666666666666666
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:

-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
10.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:28:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantos litros: "))
x=2/3
litros=float(michel*x)
print(litros)
-- OUTPUT:
4.666666666666666
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:28:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantos litros: ")
x=2/3
litros=float(michel*x)
print(litros)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    litros=float(michel*x)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:28:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantos litros: ")
x=2/3
litros=float(michel*x)
print(litros)
-- EXECUTION TIME:
0.135146
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 6, in <module>
    litros=float(michel*x)
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:28:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantos litros: ")
x= 2/3
litros=float(michel*x)
print(litros)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    litros=float(michel*x)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:29:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantos litros: ")
x= 2/3
litros=float(int(michel*x))
print(litros)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    litros=float(int(michel*x))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:30:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantos litros: ")
x= 2/3
litros=float(int(michel*x))
print(round(litros))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    litros=float(int(michel*x))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:30:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantos litros: ")
x= 2/3
litros=float(int(michel*x))
print(round(litros))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    litros=float(int(michel*x))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 23:58:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantidades de litros"))
x= float(michel/2/3)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    litros=float(int(michel*x))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:09:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantidades de litros"))
x= float(michel/2/3)
print(round())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round())
TypeError: Required argument 'number' (pos 1) not found
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:09:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantidades de litros"))
x= float(michel/2/3)
print(round())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round())
TypeError: Required argument 'number' (pos 1) not found
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:10:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(michel/2/3)
print(round())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x= float(michel/2/3)
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:11:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(miche,l2/3)
print(round())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x= float(miche,l2/3)
NameError: name 'miche' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:11:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(miche,2/3)
print(round())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x= float(miche,2/3)
NameError: name 'miche' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:12:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round())
TypeError: Required argument 'number' (pos 1) not found
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:13:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(michel))
-- EXECUTION TIME:
0.166306
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 6, in <module>
    print(round(michel))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:13:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(michel))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(michel))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:14:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(michel,0.66))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(michel,0.66))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:14:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(michel,0.66))
-- EXECUTION TIME:
0.113111
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 6, in <module>
    print(round(michel,0.66))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:14:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(michel,0.6))
-- EXECUTION TIME:
0.118695
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 6, in <module>
    print(round(michel,0.6))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:14:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(michel,0.6))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(michel,0.6))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:17:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,2))
-- OUTPUT:
0.67
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:17:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,2))
-- EXECUTION TIME:
0.12859
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.67
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.67
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.67
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:17:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,2))
-- OUTPUT:
0.67
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:18:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,2))
-- EXECUTION TIME:
0.181649
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.67
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.67
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.67
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:18:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,2))
-- OUTPUT:
0.67
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:18:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,2))
-- OUTPUT:
0.67
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:18:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,2))
-- EXECUTION TIME:
0.170906
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.67
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.67
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.67
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:18:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,2/3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(x,2/3))
TypeError: 'float' object cannot be interpreted as an integer
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:19:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(float(x,2/3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(x,2/3))
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:19:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(float(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(x,3))
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:20:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(float(x,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(x,2))
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:20:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(float(x,2))
-- EXECUTION TIME:
0.121331
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 6, in <module>
    print(float(x,2))
TypeError: float() takes at most 1 argument (2 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:20:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(float(x,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(x,2))
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:20:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(float(x,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(x,5))
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:21:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,5))
-- OUTPUT:
0.66667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:21:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,5))
-- EXECUTION TIME:
0.138283
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.66667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.66667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.66667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:21:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,5))
-- OUTPUT:
0.66667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:21:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,5))
-- EXECUTION TIME:
0.14241
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.66667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.66667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.66667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:21:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,12))
-- OUTPUT:
0.666666666667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:21:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,12))
-- EXECUTION TIME:
0.134773
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.666666666667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.666666666667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.666666666667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:22:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,33))
-- OUTPUT:
0.6666666666666666
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:22:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,3/2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(x,3/2))
TypeError: 'float' object cannot be interpreted as an integer
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:22:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,2/3))
-- EXECUTION TIME:
0.208897
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 6, in <module>
    print(round(x,2/3))
TypeError: 'float' object cannot be interpreted as an integer

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:22:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,2/3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(x,2/3))
TypeError: 'float' object cannot be interpreted as an integer
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:23:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,0.6))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(x,0.6))
TypeError: 'float' object cannot be interpreted as an integer
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:23:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,0,6))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(x,0,6))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:23:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,10.0))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(x,10.0))
TypeError: 'float' object cannot be interpreted as an integer
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:24:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,10,0))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(x,10,0))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:24:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(float(x,10,0))
-- EXECUTION TIME:
0.121354
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 6, in <module>
    print(float(x,10,0))
TypeError: float() takes at most 1 argument (3 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:24:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(float(x,10,0))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(x,10,0))
TypeError: float() takes at most 1 argument (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:24:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(float(x,10))
-- EXECUTION TIME:
0.277743
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 6, in <module>
    print(float(x,10))
TypeError: float() takes at most 1 argument (2 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:24:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(float(x,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(x,10))
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:25:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,10))
-- OUTPUT:
0.6666666667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:25:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,10))
-- EXECUTION TIME:
0.125343
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.6666666667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.6666666667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.6666666667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:26:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,0,6))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(x,0,6))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:26:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,0.6))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(x,0.6))
TypeError: 'float' object cannot be interpreted as an integer
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:27:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(float(round(x,0.6)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(round(x,0.6)))
TypeError: 'float' object cannot be interpreted as an integer
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:27:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,3))
-- EXECUTION TIME:
0.138761
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:27:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,3))
-- OUTPUT:
0.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:28:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,3))
-- EXECUTION TIME:
0.177758
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:28:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3)
print(round(x,3))
-- OUTPUT:
0.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:30:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2,5)
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x= float(2,5)
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:30:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2.5)
print(round(x,3))
-- OUTPUT:
2.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:30:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2.5)
print(round(x,3))
-- EXECUTION TIME:
0.157336
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.5
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.5
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:30:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2.3)
print(round(x,3))
-- OUTPUT:
2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:31:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2.3)
print(round(x,3))
-- EXECUTION TIME:
0.164673
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.3
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.3
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:31:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(3.333)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:31:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(3.333)
print(round(x,3))
-- EXECUTION TIME:
0.169647
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:39:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(3.333)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:39:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(3.333)
print(round(x,3))
-- EXECUTION TIME:
0.145267
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:39:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= round(3.333)
print(round(x,3))
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:39:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= round(3.333)
print(round(x,3))
-- EXECUTION TIME:
0.204667
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:39:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= round(3.333)
print(round(x,3))
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:40:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= round(3.333)
print(round(x,3))
-- EXECUTION TIME:
0.13412
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:40:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= int(3.333)
print(round(x,3))
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:40:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= int(3.333)
print(round(x,3))
-- EXECUTION TIME:
0.123399
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:40:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= input(3.333)
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x= input(3.333)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:40:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= input(3.333)
print(round(x,3))
-- EXECUTION TIME:
0.207954
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 5, in <module>
    x= input(3.333)
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:40:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= input(3.333)
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x= input(3.333)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:41:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(3.333)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:41:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(3.333)
print(round(x,3))
-- EXECUTION TIME:
0.131649
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:41:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(input(3.333))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x= float(input(3.333))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:42:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(input(3.333))
print(round(x,3))
-- EXECUTION TIME:
0.143035
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 5, in <module>
    x= float(input(3.333))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:42:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(michel(3.333))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x= float(michel(3.333))
TypeError: 'str' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:42:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= int(michel(3.333))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x= int(michel(3.333))
TypeError: 'str' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:43:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= input(michel(3.333))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x= input(michel(3.333))
TypeError: 'str' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:44:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*10.0)
print(round(x,3))
-- OUTPUT:
6.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:44:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*10.0)
print(round(x,3))
-- EXECUTION TIME:
0.206161
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
6.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
6.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:44:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*0.5)
print(round(x,3))
-- OUTPUT:
0.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:44:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*0.5)
print(round(x,3))
-- EXECUTION TIME:
0.118765
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:45:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*0.6)
print(round(x,3))
-- OUTPUT:
0.4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:45:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*0.6)
print(round(x,3))
-- EXECUTION TIME:
0.267799
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.4
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.4
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:45:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*0.66)
print(round(x,3))
-- OUTPUT:
0.44
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:45:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*0.66)
print(round(x,3))
-- EXECUTION TIME:
0.157935
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.44
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.44
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.44
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:45:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*0.67)
print(round(x,3))
-- OUTPUT:
0.447
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:45:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*0.67)
print(round(x,3))
-- EXECUTION TIME:
0.122758
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.447
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.447
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.447
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:45:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*1.67)
print(round(x,3))
-- OUTPUT:
1.113
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:46:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*3.67)
print(round(x,3))
-- OUTPUT:
2.447
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:46:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*3.67)
print(round(x,3))
-- EXECUTION TIME:
0.14914
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.447
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.447
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.447
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:46:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*6.67)
print(round(x,3))
-- OUTPUT:
4.447
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:46:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*4.67)
print(round(x,3))
-- OUTPUT:
3.113
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:46:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*4.67)
print(round(x,3))
-- OUTPUT:
3.113
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:47:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*4.67)
print(round(x,3))
-- EXECUTION TIME:
0.176259
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.113
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.113
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.113
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:47:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*4.66)
print(round(x,3))
-- EXECUTION TIME:
0.162246
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.107
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.107
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.107
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:47:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*4.66)
print(round(x,3))
-- OUTPUT:
3.107
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:47:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*4.6)
print(round(x,3))
-- OUTPUT:
3.067
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:47:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5.6)
print(round(x,3))
-- OUTPUT:
3.733
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:47:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5.5)
print(round(x,3))
-- OUTPUT:
3.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:48:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5.2)
print(round(x,3))
-- EXECUTION TIME:
0.274445
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.467
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.467
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.467
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:48:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5.2)
print(round(x,3))
-- OUTPUT:
3.467
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:48:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5.05)
print(round(x,3))
-- OUTPUT:
3.367
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:48:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:48:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:49:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5)
print(round(x,3))
-- EXECUTION TIME:
0.16182
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:49:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:49:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5)
print(round(x,3))
-- EXECUTION TIME:
0.159546
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:49:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5.0)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:49:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(2/3*5.0)
print(round(x,3))
-- EXECUTION TIME:
0.117476
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:49:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(round(2/3*5.0))
print(round(x,3))
-- OUTPUT:
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:50:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(round(2/3*5.0))
print(round(x,3))
-- EXECUTION TIME:
0.119257
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.0
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:50:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(input(2/3*5.0))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x= float(input(2/3*5.0))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:50:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(input(2/3*5.0))
print(round(x,3))
-- EXECUTION TIME:
0.192437
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 5, in <module>
    x= float(input(2/3*5.0))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:51:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= float(int(2/3*5.0))
print(round(x,3))
-- OUTPUT:
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:51:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= round(int(2/3*5.0))
print(round(x,3))
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:51:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= round(int(2/3*5.0))
print(round(x,3))
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:51:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= round(int(2/3*5.0))
print(round(x,3))
-- EXECUTION TIME:
0.165183
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:52:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= round(2/3*5.0)
print(round(x,3))
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:52:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= round(2/3*5.0)
print(round(x,3))
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:52:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x= round(2/3*5.0)
print(round(x,3))
-- EXECUTION TIME:
0.281319
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:52:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=input(2/3*5.0)
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x=input(2/3*5.0)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:53:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*5.0)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:53:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*5.0)
print(round(x,3))
-- EXECUTION TIME:
0.156474
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:53:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*0.5)
print(round(x,3))
-- EXECUTION TIME:
0.227055
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:53:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*0.5)
print(round(x,3))
-- OUTPUT:
0.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:53:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*0.5)
print(round(x,3))
-- OUTPUT:
0.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:54:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*0.5)
print(round(x,3))
-- EXECUTION TIME:
0.174006
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:54:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*3.5)
print(round(x,3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:54:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*3.5)
print(round(x,3))
-- EXECUTION TIME:
0.151741
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:54:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*4.5)
print(round(x,3))
-- OUTPUT:
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:54:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*4.5)
print(round(x,3))
-- EXECUTION TIME:
0.196559
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.0
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:54:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*4.55)
print(round(x,3))
-- OUTPUT:
3.033
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:54:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*4.555)
print(round(x,3))
-- OUTPUT:
3.037
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:55:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*5)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:55:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(2/3*5)
print(round(x,3))
-- EXECUTION TIME:
0.193662
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:55:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 02:56:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(5*2/3)
print(round(x,3))
-- EXECUTION TIME:
0.117088
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 02:56:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros")
x=float(input(5*2/3))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x=float(input(5*2/3))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:00:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros:"))
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:00:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros:"))
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:00:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros:"))
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 03:00:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros:"))
x=float(5*2/3)
print(round(x,3))
-- EXECUTION TIME:
0.10607
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 03:01:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros:"))
x=float(5*2/3)
print(round(x,3))
-- EXECUTION TIME:
0.117754
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:03:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantidades de litros:"))
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:03:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros:"))
x=float(5*2/3)
print(round(x,3))
-- ERROR:
File "XXXX", line 4
    michel=input())
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:03:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int("quantidades de litros:"))
x=float(5*2/3)
print(round(x,3))
-- ERROR:
File "XXXX", line 4
    michel=int("quantidades de litros:"))
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:03:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int("quantidades de litros:")
x=float(5*2/3)
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    michel=int("quantidades de litros:")
ValueError: invalid literal for int() with base 10: 'quantidades de litros:'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:04:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros:")
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 03:04:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros:")
x=float(5*2/3)
print(round(x,3))
-- EXECUTION TIME:
0.139075
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:04:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros:")
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 03:04:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=input("quantidades de litros:")
x=float(5*2/3)
print(round(x,3))
-- EXECUTION TIME:
0.16613
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:05:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantidades de litros:"))
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 03:05:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantidades de litros:"))
x=float(5*2/3)
print(round(x,3))
-- EXECUTION TIME:
0.103075
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:

-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:05:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=int(input("quantidades de litros:"))
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 03:06:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 03:06:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(5*2/3)
print(round(x,3))
-- EXECUTION TIME:
0.156002
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:12:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(5*2/100)
print(round(x,3))
-- OUTPUT:
0.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:12:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(5*2/100)
print(round(x,3))
-- EXECUTION TIME:
0.135195
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.1
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.1
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:13:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:13:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(5*2/3)
print(round(x,3))
-- EXECUTION TIME:
0.138327
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:13:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:13:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(5*2/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:13:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(5*2/3)
print(round(x,3))
-- EXECUTION TIME:
0.14418
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:13:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(10/3)
print(round(x,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:14:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(10/3)
print(round(x,3))
-- EXECUTION TIME:
0.178247
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:15:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*/3)
print(round(x,3))
-- ERROR:
File "XXXX", line 5
    x=float(2/3*/3)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:15:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*100/3)
print(round(x,3))
-- OUTPUT:
22.222
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:16:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*100/3)
print(round(x,3))
-- EXECUTION TIME:
0.210059
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
22.222
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
22.222
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
22.222
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:16:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*10/3)
print(round(x,3))
-- OUTPUT:
2.222
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:16:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*10/3)
print(round(x,3))
-- EXECUTION TIME:
0.230959
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.222
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.222
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.222
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:16:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*1/3)
print(round(x,3))
-- OUTPUT:
0.222
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:16:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*1/3)
print(round(x,3))
-- EXECUTION TIME:
0.136298
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.222
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.222
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.222
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:16:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*12/3)
print(round(x,3))
-- EXECUTION TIME:
0.129743
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:16:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*12/3)
print(round(x,3))
-- OUTPUT:
2.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:17:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*1000/3)
print(round(x,3))
-- OUTPUT:
222.222
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:17:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*1000/3)
print(round(x,3))
-- EXECUTION TIME:
0.12646
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
222.222
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
222.222
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
222.222
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:17:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*10.0/3)
print(round(x,3))
-- OUTPUT:
2.222
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:17:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*10.0/3)
print(round(x,3))
-- EXECUTION TIME:
0.133044
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.222
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.222
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.222
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:17:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*100.0/3)
print(round(x,3))
-- OUTPUT:
22.222
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:18:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*100.0/3)
print(round(x,3))
-- EXECUTION TIME:
0.141607
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
22.222
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
22.222
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
22.222
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:21:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(2/3*100%/3)
print(round(x,3))
-- ERROR:
File "XXXX", line 5
    x=float(2/3*100%/3)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:21:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=int(2/3*100%/3)
print(round(x,3))
-- ERROR:
File "XXXX", line 5
    x=int(2/3*100%/3)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:21:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=input(2/3*100%/3)
print(round(x,3))
-- ERROR:
File "XXXX", line 5
    x=input(2/3*100%/3)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:21:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=int(input(2/3*100%/3))
print(round(x,3))
-- EXECUTION TIME:
0.166332
-- ERROR:
  File "/home/codebench/codes/1602/1446/main.py", line 5
    x=int(input(2/3*100%/3))
                        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:21:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=int(input(2/3*100%/3))
print(round(x,3))
-- ERROR:
File "XXXX", line 5
    x=int(input(2/3*100%/3))
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:21:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=int(input(2/3*100%3))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x=int(input(2/3*100%3))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:22:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=int(input(2/3*100%3))
print(round(x,3))
-- EXECUTION TIME:
0.222671
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 5, in <module>
    x=int(input(2/3*100%3))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:22:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=int(input(2/3*10%3))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x=int(input(2/3*10%3))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:22:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=input(2/3*10%3)
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x=input(2/3*10%3)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:23:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=input(round(2/3*10%3))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x=input(round(2/3*10%3))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:23:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=input(round(2/3*10%3))
print(round(x,3))
-- EXECUTION TIME:
0.152731
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 5, in <module>
    x=input(round(2/3*10%3))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:23:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=input(round(2/3*10/3))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x=input(round(2/3*10/3))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:23:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=input(round(2/3*100/3))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x=input(round(2/3*100/3))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:24:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=int(round(2/3*100/3))
print(round(x,3))
-- OUTPUT:
22
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:24:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=int(round(2/3*100/3))
print(round(x,3))
-- EXECUTION TIME:
0.281819
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
22
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
22
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
22
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:24:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(2/3*100/3))
print(round(x,3))
-- OUTPUT:
22.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:24:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(2/3*100/3))
print(round(x,3))
-- EXECUTION TIME:
0.109901
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
22.0
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
22.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
22.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:24:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(2/3*10/3))
print(round(x,3))
-- OUTPUT:
2.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:24:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(2/3*10/3))
print(round(x,3))
-- EXECUTION TIME:
0.125336
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.0
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:25:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(2,3*10/3))
print(round(x,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x=float(round(2,3*10/3))
TypeError: 'float' object cannot be interpreted as an integer
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:25:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(2.3*10/3))
print(round(x,3))
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:25:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(2.3*10/3))
print(round(x,3))
-- EXECUTION TIME:
0.140864
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
8.0
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
8.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
8.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:25:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(2.3*100/3))
print(round(x,3))
-- OUTPUT:
77.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:25:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(2.3*100/3))
print(round(x,3))
-- EXECUTION TIME:
0.137291
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
77.0
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
77.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
77.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:25:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(2.3*10.0/3))
print(round(x,3))
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:28:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(0.6*10.0/3))
print(round(x,3))
-- OUTPUT:
2.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:28:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(0.6*100/3))
print(round(x,3))
-- EXECUTION TIME:
0.131533
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
20.0
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
20.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
20.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:28:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input("quantidades de litros: "))
x=float(round(0.6*100/3))
print(round(x,3))
-- OUTPUT:
20.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:18:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input())
x_doada=quantidade/3
print(round(x_doada,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x_doada=quantidade/3
NameError: name 'quantidade' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:18:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input())
x_doada=quant/3
print(round(x_doada,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x_doada=quant/3
NameError: name 'quant' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:19:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input())
doada=quant/3
print(round(doada,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    doada=quant/3
NameError: name 'quant' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:19:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input())
doada=michel/3
print(round(doada,3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 23:19:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michel=float(input())
doada=michel/3
print(round(doada,3))
-- EXECUTION TIME:
0.171603
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
