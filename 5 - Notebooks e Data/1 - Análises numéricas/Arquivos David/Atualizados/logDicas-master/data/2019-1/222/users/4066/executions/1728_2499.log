== TEST (2019-05-15 00:21:31) 
-- CODE:
from import math *

k = int(input("Numero de termos: "))

fat = 1
i = 2
while (i <= k):
	fat = fat*i
	i = i + 1
	
print(fat)
-- ERROR:
File "XXXX", line 1
    from import math *
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:21:45) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

fat = 1
i = 2
while (i <= k):
	fat = fat*i
	i = i + 1
	
print(fat)
-- OUTPUT:
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:21:50) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

fat = 1
i = 2
while (i <= k):
	fat = fat*i
	i = i + 1
	
print(fat)
-- OUTPUT:
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:22:25) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

num = 1 - k
fat = 1
i = 2
while (i <= num):
	fat = fat*i
	i = i + 1
	


-- OUTPUT:
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:22:56) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

num = 1 - k
fat = 1
i = 2
while (i <= num):
	fat = fat*i
	i = i + 1
	
print(fat)

-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:23:01) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

num = 1 - k
fat = 1
i = 2
while (i <= num):
	fat = fat*i
	i = i + 1
	
print(fat)

-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:27:30) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

t = 0
fat = 1
i = 2
while (i <= t):
	fat = fat*i
	i = i + 1

tg = 1 /(fat)

soma = 0
while (t < k):
	soma = soma + tg
	t = t + 1
	
	print(soma)
-- OUTPUT:
1.0
2.0
3.0
4.0
5.0
6.0
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:27:37) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

t = 0
fat = 1
i = 2
while (i <= t):
	fat = fat*i
	i = i + 1

tg = 1 /(fat)

soma = 0
while (t < k):
	soma = soma + tg
	t = t + 1
	
	print(soma)
-- OUTPUT:
1.0
2.0
3.0
4.0
5.0
6.0
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:27:40) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

t = 0
fat = 1
i = 2
while (i <= t):
	fat = fat*i
	i = i + 1

tg = 1 /(fat)

soma = 0
while (t < k):
	soma = soma + tg
	t = t + 1
	
	print(soma)
-- OUTPUT:
1.0
2.0
3.0
4.0
5.0
6.0
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:27:51) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

t = 0
fat = 1
i = 2
while (i <= t):
	fat = fat*i
	i = i + 1

tg = 1 /(fat)

soma = 0
while (t < k):
	soma = soma + tg
	t = t + 1
	
	print(soma)
-- OUTPUT:
1.0
2.0
3.0
4.0
5.0
6.0
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:28:19) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

t = 0
fat = 1
i = 2
while (i <= t):
	fat = fat*i
	i = i + 1


soma = 0
while (t < k):
	tg = 1 /(fat)
	soma = soma + tg
	t = t + 1
	
	print(soma)
-- OUTPUT:
1.0
2.0
3.0
4.0
5.0
6.0
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:28:24) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

t = 0
fat = 1
i = 2
while (i <= t):
	fat = fat*i
	i = i + 1


soma = 0
while (t < k):
	tg = 1 /(fat)
	soma = soma + tg
	t = t + 1
	
	print(soma)
-- OUTPUT:
1.0
2.0
3.0
4.0
5.0
6.0
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:28:28) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

t = 0
fat = 1
i = 2
while (i <= t):
	fat = fat*i
	i = i + 1


soma = 0
while (t < k):
	tg = 1 /(fat)
	soma = soma + tg
	t = t + 1
	
	print(soma)
-- OUTPUT:
1.0
2.0
3.0
4.0
5.0
6.0
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:32:36) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

soma = 0



t = 0

while (t < k):
	tg = 1/factorial(t-1)
	soma = soma + tg
	t = t+1
	
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    tg = 1/factorial(t-1)
ValueError: factorial() not defined for negative values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:32:57) 
-- CODE:
from math import *

k = int(input("Numero de termos: "))

soma = 0



t = 0

while (t < k):
	tg = 1/(math.factorial(t-1))
	soma = soma + tg
	t = t+1
	
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    tg = 1/(math.factorial(t-1))
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:33:19) 
-- CODE:
import math

k = int(input("Numero de termos: "))

soma = 0



t = 0

while (t < k):
	tg = 1/(math.factorial(t-1))
	soma = soma + tg
	t = t+1
	
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    tg = 1/(math.factorial(t-1))
ValueError: factorial() not defined for negative values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:33:47) 
-- CODE:
import math

k = int(input("Numero de termos: "))

soma = 0



t = 0

while (t < k):
	tg = 1/(math.factorial(t))
	soma = soma + tg
	t = t+1
	
print(soma)
-- OUTPUT:
2.7180555555555554
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:33:52) 
-- CODE:
import math

k = int(input("Numero de termos: "))

soma = 0



t = 0

while (t < k):
	tg = 1/(math.factorial(t))
	soma = soma + tg
	t = t+1
	
print(soma)
-- OUTPUT:
2.7180555555555554
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 00:33:57) 
-- CODE:
import math

k = int(input("Numero de termos: "))

soma = 0



t = 0

while (t < k):
	tg = 1/(math.factorial(t))
	soma = soma + tg
	t = t+1
	
print(soma)
-- OUTPUT:
2.7180555555555554
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 00:34:17) 
-- CODE:
import math

k = int(input("Numero de termos: "))

soma = 0



t = 0

while (t < k):
	tg = 1/(math.factorial(t))
	soma = soma + tg
	t = t+1
	
print(round(soma, 8))
-- EXECUTION TIME:
0.134085
-- TEST CASE 1:
---- input:
7
---- correct output:
2.71805556
---- user output:
2.71805556
-- TEST CASE 2:
---- input:
15
---- correct output:
2.71828183
---- user output:
2.71828183
-- TEST CASE 3:
---- input:
6
---- correct output:
2.71666667
---- user output:
2.71666667
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
