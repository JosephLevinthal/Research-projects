== TEST (2019-04-25 13:01:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if ( a <= x and x <= b):
	print("x pertence ao intervalo a, b")

-- OUTPUT:
Entrada: lula
Casa: Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:03:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas a e b invalidas")
elif (a <= x and x <= b):
	print("x pertence ao intervalo a, b")
elif (x < a or x > b):
	print("x nao pertence ao intervalo a, b")

-- OUTPUT:
x nao pertence ao intervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:04:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b =< a):
	print("Entradas a e b invalidas")
elif (a <= x and x <= b):
	print("x pertence ao intervalo a, b")
elif (x < a or x > b):
	print("x nao pertence ao intervalo a, b")

-- ERROR:
File "XXXX", line 9
    if (b =< a):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:04:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b =< a):
	print("Entradas a e b invalidas")
elif (a <= x and x <= b):
	print("x pertence ao intervalo a, b")
elif (x < a or x > b):
	print("x nao pertence ao intervalo a, b")

-- ERROR:
File "XXXX", line 9
    if (b =< a):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:04:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas a e b invalidas")
	
elif (a <= x and x <= b):
	print("x pertence ao intervalo a, b")
	
else:
	print("x nao pertence ao intervalo a, b")
	

-- OUTPUT:
x nao pertence ao intervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:04:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas a e b invalidas")
	
elif (a <= x and x <= b):
	print("x pertence ao intervalo a, b")
	
else:
	print("x nao pertence ao intervalo a, b")
	

-- OUTPUT:
x nao pertence ao intervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:04:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas a e b invalidas")
	
elif (a <= x and x <= b):
	print("x pertence ao intervalo a, b")
	
else:
	print("x nao pertence ao intervalo a, b")
	

-- EXECUTION TIME:
0.233168
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
x nao pertence ao intervalo a, b
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
x pertence ao intervalo a, b
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:05:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas", a "e", b "invalidas")
	
elif (a <= x and x <= b):
	print(x,"pertence ao intervalo", a, b)
	
else:
	print(x,"nao pertence ao intervalo" a, b)
	

-- ERROR:
File "XXXX", line 10
    print("Entradas", a "e", b "invalidas")
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:05:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas", a,"e", b, "invalidas")
	
elif (a <= x and x <= b):
	print(x,"pertence ao intervalo", a, b)
	
else:
	print(x,"nao pertence ao intervalo" a, b)
	

-- ERROR:
File "XXXX", line 16
    print(x,"nao pertence ao intervalo" a, b)
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:05:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas", a,"e", b, "invalidas")
	
elif (a <= x and x <= b):
	print(x,"pertence ao intervalo", a, b)
	
else:
	print(x,"nao pertence ao intervalo" a, b)
	

-- ERROR:
File "XXXX", line 16
    print(x,"nao pertence ao intervalo" a, b)
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:06:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas", a,"e", b, "invalidas")
	
elif (a <= x and x <= b):
	print(x,"pertence ao intervalo", a, b)
	
else:
	print(x,"nao pertence ao intervalo", a, b)
	

-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:06:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas", a,"e", b, "invalidas")
	
elif (a <= x and x <= b):
	print(x,"pertence ao intervalo", a, b)
	
else:
	print(x,"nao pertence ao intervalo", a, b)
	

-- EXECUTION TIME:
0.143591
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:06:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas", a,"e", b, "invalidas")
	
elif (a <= x and x <= b):
	print(x,"pertence ao intervalo", a, b)
	
else:
	print(x,"nao pertence ao intervalo", a, b)
	

-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:07:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas {} e {} invalidas".format(a,b))
	
elif (a <= x and x <= b):
	print(x,"pertence ao intervalo", a, b)
	
else:
	print(x,"nao pertence ao intervalo", a, b)
	

-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:09:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas {} e {} invalidas".format(a,b))
	
elif (a <= x and x <= b):
	print("{} pertence ao intervalo {}, {}".format(x,a,b))
	
else:
	print("{} nao pertence ao intervalo{}, {}".format(x,a,b))
	

-- OUTPUT:
2.0 nao pertence ao intervalo3.0, 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:09:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas {} e {} invalidas".format(a,b))
	
elif (a <= x and x <= b):
	print("{} pertence ao intervalo {}, {}".format(x,a,b))
	
else:
	print("{} nao pertence ao intervalo {}, {}".format(x,a,b))
	

-- EXECUTION TIME:
0.150976
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0, 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1, 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:09:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas {} e {} invalidas".format(a,b))
	
elif (a <= x and x <= b):
	print("{} pertence ao intervalo {}, {}".format(x,a,b))
	
else:
	print("{} nao pertence ao intervalo {}, {}".format(x,a,b))
	

-- OUTPUT:
2.0 nao pertence ao intervalo 3.0, 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:09:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas {} e {} invalidas".format(a,b))
	
elif (a <= x and x <= b):
	print("{} pertence ao intervalo {}, {}".format(x,a,b))
	
else:
	print("{} nao pertence ao intervalo {}, {}".format(x,a,b))
	

-- OUTPUT:
2.0 nao pertence ao intervalo 3.0, 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:09:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas {} e {} invalidas".format(a,b))
	
elif (a <= x and x <= b):
	print("{} pertence ao intervalo {} , {}".format(x,a,b))
	
else:
	print("{} nao pertence ao intervalo {}, {}".format(x,a,b))
	

-- EXECUTION TIME:
0.213818
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0, 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:09:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (b <= a):
	print("Entradas {} e {} invalidas".format(a,b))
	
elif (a <= x and x <= b):
	print("{} pertence ao intervalo {} , {}".format(x,a,b))
	
else:
	print("{} nao pertence ao intervalo {} , {}".format(x,a,b))
	

-- EXECUTION TIME:
0.151762
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
