== TEST (2019-04-16 22:00:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("digite preco: "))

if((preco > 200)*0.05):
	mensagem = ("preco com desconto")
else:
	mensagem = ("preco sem desconto")

print(round(mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:05:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("digite preco: "))

if((preco > 200)*0.05):
	mensagem = ("preco com desconto")
else:
	mensagem = ("preco < 200")

print(round(mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:06:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("digite preco: "))

if(preco > 200)*0.05:
	mensagem = ("preco com desconto")
else:
	mensagem = ("preco < 200")

print(round(mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:06:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("digite preco: "))

if(preco > 200)*0.05:
	mensagem = ("preco")
else:
	mensagem = ("preco < 200")

print(round(mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:07:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("digite preco: "))

if(preco >= 200)*0.05:
	mensagem = ("preco")
else:
	mensagem = ("preco < 200")

print(round(mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:08:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("digite preco: "))

if(preco >= 200)*0.05:
	mensagem = ("preco >= 200")
else:
	mensagem = ("preco =< 200")

print(round(mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:08:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("digite preco: "))

if(preco >= 200)*0.05:
	mensagem = (preco >= 200)
else:
	mensagem = (preco =< 200)

print(round(mensagem, 2))

-- ERROR:
File "XXXX", line 10
    mensagem = (preco =< 200)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:09:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("digite preco: "))

if(preco >= 200)*0.05:
	mensagem = ("preco")
else:
	mensagem = ("preco")

print(round(mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:11:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("preco")
else:
	mensagem = ("preco")

print(round(mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:12:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("total")
else:
	mensagem = ("total")

print(round(mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:12:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("total")
else:
	mensagem = ("total")

print(round(mensagem, 2))

-- ERROR:
File "XXXX", line 4
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:13:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("total")
else:
	mensagem = ("total")

print(round(mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:13:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("total")
else:
	mensagem = ("total")

print(round (mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round (mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:14:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("total")
else:
	mensagem = ("total")
print(round(mensagem, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:14:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("total")
else:
	mensagem = ("total")
	
print(round(mensagem, 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:15:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("total")
#else:
	#mensagem = ("total")
	
print(round(mensagem, 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:15:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("total")
#else:
	#mensagem = ("total")
	
print(mensagem)


-- OUTPUT:
total
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:15:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	#mensagem = ("total")
#else:
	#mensagem = ("total")
	
print(if)


-- ERROR:
File "XXXX", line 11
    print(if)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:16:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if=(preco*0.05)-preco:
	#mensagem = ("total")
#else:
	#mensagem = ("total")
	
print(if)


-- ERROR:
File "XXXX", line 6
    if=(preco*0.05)-preco:
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:16:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("total")
else:
	mensagem = ("total")
	
print(round(mensagem, 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:49:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("preco")
else:
	mensagem = ("preco")
	
print(round(mensagem, 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:50:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("preco")
else:
	mensagem = ("preco")
	
print(mensagem)


-- OUTPUT:
preco
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:51:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco:
	mensagem = ("(preco*0.05)-preco")
else:
	mensagem = ("preco")
	
print(mensagem)


-- OUTPUT:
(preco*0.05)-preco
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:51:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco==0:
	mensagem = ("")
else:
	mensagem = ("preco")
	
print(mensagem)


-- OUTPUT:
preco
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:52:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if(preco*0.05)-preco==0:
	mensagem = ("preco")
else:
	mensagem = ("preco==preco")
	
print(mensagem)


-- OUTPUT:
preco==preco
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:53:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

h = (preco*0.05)-preco==0:
	#mensagem = ("preco")
#else:
	#mensagem = ("preco==preco")
	
print(h)


-- ERROR:
File "XXXX", line 6
    h = (preco*0.05)-preco==0:
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:53:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

h = (preco*0.05)-preco
	#mensagem = ("preco")
#else:
	#mensagem = ("preco==preco")
	
print(h)


-- OUTPUT:
-190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:54:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

h = (preco*0.05)+preco
	#mensagem = ("preco")
#else:
	#mensagem = ("preco==preco")
	
print(h)


-- OUTPUT:
210.0945
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:55:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

h = preco-(preco*0.05)
	#mensagem = ("preco")
#else:
	#mensagem = ("preco==preco")
	
print(h)


-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:56:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if (preco-(preco*0.05)):
	mensagem = ("preco")
else:
	mensagem = ("preco")
	
print(h)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(h)
NameError: name 'h' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:56:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if (preco-(preco*0.05)):
	mensagem = ("preco")
else:
	mensagem = ("preco")
	
print(mensagem)


-- OUTPUT:
preco
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:58:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if (preco-(preco*0.05)):
	mensagem = ("preco sem desconto")
else:
	mensagem = ("valor a ser pago")
	
print(mensagem)


-- OUTPUT:
preco sem desconto
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 18:59:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if (preco >= 200):
	mensagem = ("preco-(preco*0.05)")
else:
	mensagem = ("preco")
	
print(mensagem)


-- OUTPUT:
preco-(preco*0.05)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 19:00:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if (preco >= 200):
	mensagem = preco-(preco*0.05)
else:
	mensagem = preco
	
print(mensagem)


-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 21:08:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if (preco >= 200):
	mensagem = preco-(preco*0.05)
else:
	mensagem = preco
	
print(round(mensagem, 2))


-- OUTPUT:
190.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-17 21:08:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("digite preco: "))

if (preco >= 200):
	mensagem = preco-(preco*0.05)
else:
	mensagem = preco
	
print(round(mensagem, 2))


-- EXECUTION TIME:
0.148115
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
