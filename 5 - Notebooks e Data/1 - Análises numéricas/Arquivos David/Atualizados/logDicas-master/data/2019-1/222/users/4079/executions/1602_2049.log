== TEST (2019-03-22 22:36:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int("dividendo")
y=int("divisor")
w=int("quociente")
z=int("resto")
elemento=(12%2)
print(elemento,6)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x=int("dividendo")
ValueError: invalid literal for int() with base 10: 'dividendo'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:37:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int("divisor")
w=int("quociente")
z=int("resto")
elemento=(12%2)
print(elemento,6)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    y=int("divisor")
ValueError: invalid literal for int() with base 10: 'divisor'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:37:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int("divisor")
w=int("quociente")
z=int("resto")
elemento=(12%2)
print(elemento,6)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    y=int("divisor")
ValueError: invalid literal for int() with base 10: 'divisor'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:37:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int("divisor")
w=int("quociente")
z=int("resto")
elemento=(12%2)
print(elemento,6)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    y=int("divisor")
ValueError: invalid literal for int() with base 10: 'divisor'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:37:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int("quociente")
z=int("resto")
elemento=(12%2)
print(elemento,6)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int("quociente")
ValueError: invalid literal for int() with base 10: 'quociente'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:38:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(12%2)
print(elemento,6)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:39:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(12%2)
print(elemento,6)
-- EXECUTION TIME:
0.150864
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:39:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(12%2)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:39:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(12%2)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:40:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(12%2)
print(elemento)
-- EXECUTION TIME:
0.158971
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:40:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(9%4)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:40:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(9%4)
print(elemento)
-- EXECUTION TIME:
0.209634
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:40:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(9%4)
print("elemento")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:41:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(9%4)
print("elemento")
-- EXECUTION TIME:
0.15663
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:42:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(9%4)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:42:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(9%4)
print(elemento)
-- EXECUTION TIME:
0.171777
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:43:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(346%2)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:43:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(346%2)
print(elemento)
-- EXECUTION TIME:
0.205613
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:43:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(346%2)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:43:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(346%2)
print(elemento)
-- EXECUTION TIME:
0.134704
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:45:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(16%2)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:45:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
w=int(input("quociente"))
z=int(input("resto"))
elemento=(16%2)
print(elemento)
-- EXECUTION TIME:
0.216528
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:46:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=(16%2)
print(elemento)
-- EXECUTION TIME:
0.150725
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:46:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=(16%2)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:46:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=(16%2)
print(elemento)
-- EXECUTION TIME:
0.125791
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:46:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=(16%2)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:46:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=(16%2)
print(elemento)
-- EXECUTION TIME:
0.154299
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:47:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=(16//2)
print(elemento)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:47:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=(16//2)
print(elemento)
-- EXECUTION TIME:
0.143043
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
8
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:47:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=float(16//2)
print(elemento)
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:48:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=float(16/2)
print(elemento)
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:48:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=float(16/2)
print(elemento)
-- EXECUTION TIME:
0.281246
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
8.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
8.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:48:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=int(16/2)
print(elemento)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:48:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=int(16/2)
print(elemento)
-- EXECUTION TIME:
0.190849
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
8
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:48:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=int(imput(16/2))
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    elemento=int(imput(16/2))
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:49:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=int(input(16/2))
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    elemento=int(input(16/2))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:49:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=input(16/2)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    elemento=input(16/2)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:49:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=input(16/2)
print(elemento)
-- EXECUTION TIME:
0.13334
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    elemento=input(16/2)
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:49:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=input(16%2)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    elemento=input(16%2)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:50:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=input(16%2)
print(elemento)
-- EXECUTION TIME:
0.148208
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    elemento=input(16%2)
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:52:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=input(10%3)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    elemento=input(10%3)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:52:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo"))
y=int(input("divisor"))
elemento=input(10%3)
print(elemento)
-- EXECUTION TIME:
0.168336
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    elemento=input(10%3)
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:53:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo: "))
y=int(input("divisor: "))
elemento=input(10%3)
print(elemento)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    elemento=input(10%3)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:53:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("dividendo: "))
y=int(input("divisor: "))
elemento=input(10%3)
print(elemento)
-- EXECUTION TIME:
0.163289
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/2049/main.py", line 6, in <module>
    elemento=input(10%3)
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:12:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input("dividendo: "))
y=float(input("divisor: "))
quociente=x//y
resto=x%y
print(round(x))
print(round(y))
print(round(quociente))
print(round(resto))
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 23:12:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input("dividendo: "))
y=float(input("divisor: "))
quociente=x//y
resto=x%y
print(round(x))
print(round(y))
print(round(quociente))
print(round(resto))
-- EXECUTION TIME:
0.14622
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
