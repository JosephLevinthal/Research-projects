== TEST (2019-03-31 21:40:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total = (vendas * 30%)
-- ERROR:
File "XXXX", line 5
    total = (vendas * 30%)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:40:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total =round(vendas*30//100)
-- ERROR:
File "XXXX", line 5
    total = (vendas * 30%)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:41:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total =round(vendas*30//100)
-- EXECUTION TIME:
0.175251
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:41:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total =round(vendas*30//100)
print = (total)
-- ERROR:
File "XXXX", line 5
    total = (vendas * 30%)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:41:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total =round(vendas*30//100 , 2)
print = (total)
-- ERROR:
File "XXXX", line 5
    total = (vendas * 30%)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:41:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total =round(vendas*30//100 , 2)
print = (total)
-- EXECUTION TIME:
0.185161
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:42:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("Qual o total de vendas: "))
total =round(vendas*30//100 , 2)
print = (total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:42:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("Qual o total de vendas: "))
total =round(vendas*30//100 , 2)
print = (total)
-- EXECUTION TIME:
0.147887
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:43:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total =round(vendas*0.3)
print = (total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:44:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total =round(vendas*0.3)
print = (total)
-- EXECUTION TIME:
0.175965
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:44:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total =round(vendas*0.3, 2)
print = (total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:44:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total =round(vendas*0.3, 2)
print = (total)
-- EXECUTION TIME:
0.183681
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:44:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total = round(vendas*0.3, 2)
print = (total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:44:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total = round(vendas*0.3, 2)
print = (total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:44:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total = round(vendas*0.3, 2)
print = (total)
-- EXECUTION TIME:
0.154951
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:45:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total = round(vendas*0.3, 2)
print = (total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:45:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total = round(vendas*0.3, 2)
print = (total)
-- EXECUTION TIME:
0.24985
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:45:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("Qual o total de vendas: "))
total = round(vendas*0.3, 2)
print = (total)
-- EXECUTION TIME:
0.150567
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:45:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("Qual o total de vendas: "))
total = round(vendas*0.3, 2)
print = (total)
-- EXECUTION TIME:
0.136546
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:45:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("Qual o total de vendas: "))
total = round(vendas*0.3, 2)
print = (total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:45:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = int(input("Qual o total de vendas: "))
total = round(vendas*0.3, 2)
print = (total)
-- EXECUTION TIME:
0.171173
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1014/main.py", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:46:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total = vendas*0.3
print =(total)
-- EXECUTION TIME:
0.155612
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:46:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total = vendas*0.3
print =(total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:46:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total = vendas*0.3
print =(total)
-- EXECUTION TIME:
0.206291
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:46:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total = vendas*0.3
print =(total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vendas = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:46:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
vendas = float(input("Qual o total de vendas: "))
total = vendas*0.3
print =(total)
-- EXECUTION TIME:
0.144811
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:48:44) 
-- CODE:
total = float(input("Qual o total de vendas:")
lucro = vendas*0.3
print = (lucro)
-- EXECUTION TIME:
0.218282
-- ERROR:
  File "/home/codebench/codes/1602/1014/main.py", line 2
    lucro = vendas*0.3
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:48:46) 
-- CODE:
total = float(input("Qual o total de vendas:")
lucro = vendas*0.3
print = (lucro)
-- ERROR:
File "XXXX", line 2
    lucro = vendas*0.3
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:49:31) 
-- CODE:
total=float(input("Qual o total de vendas:")
lucro=(vendas*0.3)
print = (lucro)
-- ERROR:
File "XXXX", line 2
    lucro=(vendas*0.3)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:49:41) 
-- CODE:
total=float(input("Qual o total de vendas:")
lucro=vendas*0.3
print = (lucro)
-- ERROR:
File "XXXX", line 2
    lucro=vendas*0.3
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:50:24) 
-- CODE:
total=float(input("Qual o total de vendas: ")
lucro=vendas*0.3
print = (lucro)
-- ERROR:
File "XXXX", line 2
    lucro=vendas*0.3
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:51:16) 
-- CODE:
total=float(input("Qual o total de vendas: ")
lucro = round(print(total*0.3, 2)
print = (lucro)
-- ERROR:
File "XXXX", line 2
    lucro = round(print(total*0.3, 2)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:52:41) 
-- CODE:
total = float(input("qual o valor das vendas: "))
lucro = total*0.3	
print(lucro)
-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:52:46) 
-- CODE:
total = float(input("qual o valor das vendas: "))
lucro = total*0.3	
print(lucro)
-- EXECUTION TIME:
0.174659
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.15
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
