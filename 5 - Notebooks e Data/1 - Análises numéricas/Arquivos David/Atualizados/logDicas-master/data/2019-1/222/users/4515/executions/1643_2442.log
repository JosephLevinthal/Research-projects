== TEST (2019-04-15 12:17:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:22:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 9
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:23:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:23:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:27:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:28:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num%2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num%2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:28:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if ((num % 2) == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if ((num % 2) == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:29:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:29:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:29:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:31:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num =float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:31:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num =float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:31:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num =float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:31:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num =float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.163645
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
Par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:32:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:32:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:32:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- EXECUTION TIME:
0.226961
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
Par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:32:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- EXECUTION TIME:
0.309488
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:32:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:32:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- EXECUTION TIME:
0.163045
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
Par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:33:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"	
else:
	mensagem = "Impar"
print(mensagem)
-- EXECUTION TIME:
0.207025
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
Par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:33:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"	
else:
	mensagem = "Impar"
print(mensagem)
-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:33:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"	
else:
	mensagem = "impar"
print(mensagem)
-- EXECUTION TIME:
0.194684
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
