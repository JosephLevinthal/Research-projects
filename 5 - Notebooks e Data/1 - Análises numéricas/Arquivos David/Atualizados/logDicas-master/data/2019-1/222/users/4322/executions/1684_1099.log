== TEST (2019-04-24 19:15:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) or (y < x + z) or (z < x + y):
	if (x != y) and (y != z and (z != x)):
		print("escaleno")
	else:
		if (x = y = z):
			print("equilatero")
		else:
			if (x = y) or (y = z) or (z = x):
				print("isoceles")
			else:
				print(invalido)
-- ERROR:
File "XXXX", line 12
    if (x = y = z):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:18:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) or (y < x + z) or (z < x + y):
	if (x != y) and (y != z and (z != x)):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("isoceles")
else:
	print(invalido)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:19:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x >= y + z) or (y >= x + z) or (z >= x + y):
	if (x != y) and (y != z and (z != x)):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print(invalido)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(invalido)
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:20:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x >= y + z) or (y >= x + z) or (z >= x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print(invalido)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(invalido)
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x > y + z) or (y > x + z) or (z > x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print(invalido)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(invalido)
NameError: name 'invalido' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x > y + z) or (y > x + z) or (z > x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:21:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x > y + z) or (y > x + z) or (z > x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print("invalido")
-- EXECUTION TIME:
0.16941
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:21:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x > y + z) or (y > x + z) or (z > x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:24:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) or (y < x + z) or (z < x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:25:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:25:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:25:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print("invalido")
-- EXECUTION TIME:
0.254714
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:25:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print(tipo de triangulo, "invalido")
-- ERROR:
File "XXXX", line 17
    print(tipo de triangulo, "invalido")
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:26:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print("tipo de triangulo invalido")
-- EXECUTION TIME:
0.167053
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:26:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print("tipo de triangulo: invalido")
-- EXECUTION TIME:
0.182683
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:26:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if (x != y) and (y != z) and (z != x):
		print("escaleno")
	else:
		if (x != y) or (y != z):
			print("isoceles")
		else:
				print("equilatero")
else:
	print("tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:28:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isoceles")
		else:
				print("equilatero")
else:
	print("tipo de triangulo: invalido")
-- EXECUTION TIME:
0.099776
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:28:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("tipo de triangulo: invalido")
-- EXECUTION TIME:
0.183482
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:28:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:29:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.129205
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:29:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:32:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.156288
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:33:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.190552
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:33:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:33:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:33:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:33:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:33:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.129868
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:36:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:36:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.215131
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:37:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.20869
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:38:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((x != y) or (y != z)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:39:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((x != y) or (y != z)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.162092
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 15:37:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
x = float(input("valor de X? "))
y = float(input("valor de Y? "))
z = float(input("valor de Z? "))
print("Entradas:", x, ",", y, ",", z)

if (x < y + z) and (y < x + z) and (z < x + y):
	if ((x != y) and (y != z) and (z != x)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((x != y) or (y != z)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.167262
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
