== TEST (2019-04-23 12:13:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

-- ERROR:
File "XXXX", line 12
    elif(a==b)and(b==c):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:11:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((x < y + z) and (y < x + z) and (z < y + x)):

    
-- ERROR:
File "XXXX", line 10
    
        ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:11:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((x < y + z) and (y < x + z) and (z < y + x)):

    
-- ERROR:
File "XXXX", line 10
    
        ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:21:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((x >= y + z) or (y >= x + z) or (z >= y + x):
	 print("nao eh triangulo")
else:
	 if((x == y) and (y == z)):
      print("equilatero")
    else:
		 if ((x == y) or (y == z) or (z == x):
			  print("isosceles")
		 else:
			  print("escaleno")
-- ERROR:
File "XXXX", line 7
    if ((x >= y + z) or (y >= x + z) or (z >= y + x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 15:22:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((x >= y + z) or (y >= x + z) or (z >= y + x):
	 print("nao eh triangulo")
else:
	 if((x == y) and (y == z)):
      print("equilatero")
    else:
		 if ((x == y) or (y == z) or (z == x):
			  print("isosceles")
		 else:
			  print("escaleno")
-- EXECUTION TIME:
0.126323
-- ERROR:
  File "/home/codebench/codes/1684/1099/main.py", line 7
    if ((x >= y + z) or (y >= x + z) or (z >= y + x):
                                                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:22:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((x >= y + z) or (y >= x + z) or (z >= y + x):
	 print("nao eh triangulo")
else:
	 if((x == y) and (y == z)):
      print("equilatero")
    else:
		 if ((x == y) or (y == z) or (z == x):
			  print("isosceles")
		 else:
			  print("escaleno")
-- ERROR:
File "XXXX", line 7
    if ((x >= y + z) or (y >= x + z) or (z >= y + x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:22:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((x >= y + z) or (y >= x + z) or (z >= y + x):
	 print("nao eh triangulo")
else:
	 if((x == y) and (y == z)):
      print("equilatero")
    else:
		 if ((x == y) or (y == z) or (z == x):
			  print("isosceles")
		 else:
			  print("escaleno")
-- ERROR:
File "XXXX", line 7
    if ((x >= y + z) or (y >= x + z) or (z >= y + x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:22:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((x >= y + z) or (y >= x + z) or (z >= y + x):
	 print("nao eh triangulo")
else:
	 if((x == y) and (y == z)):
      print("equilatero")
    else:
		 if ((x == y) or (y == z) or (z == x):
			  print("isosceles")
		 else:
			  print("escaleno")
-- ERROR:
File "XXXX", line 7
    if ((x >= y + z) or (y >= x + z) or (z >= y + x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:22:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((x >= y + z) or (y >= x + z) or (z >= y + x):
	 print("nao eh triangulo")
else:
	 if((x == y) and (y == z)):
      print("equilatero")
    else:
		 if ((x == y) or (y == z) or (z == x):
			  print("isosceles")
		 else:
			  print("escaleno")
-- ERROR:
File "XXXX", line 7
    if ((x >= y + z) or (y >= x + z) or (z >= y + x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:27:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((a >= b + c) or (b >= a + c) or (c >= b + a):
	 print("nao eh triangulo")
else:
	 if((a == b) and (b == c)):
      print("equilatero")
    else:
		 if ((a == b) or (b == c) or (c == a):
			  print("isosceles")
		 else:
			  print("escaleno")
-- ERROR:
File "XXXX", line 7
    if ((a >= b + c) or (b >= a + c) or (c >= b + a):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:27:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((a >= b + c) or (b >= a + c) or (c >= b + a)):
	 print("nao eh triangulo")
else:
	 if((a == b) and (b == c)):
      print("equilatero")
    else:
		 if ((a == b) or (b == c) or (c == a)):
			  print("isosceles")
		 else:
			  print("escaleno")
-- ERROR:
File "XXXX", line 11
    print("equilatero")
                      ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:32:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((a >= b + c) or (b >= a + c) or (c >= b + a)):

-- ERROR:
File "XXXX", line 8
    
                                                      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:32:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if ((a >= b + c) or (b >= a + c) or (c >= b + a)):
-- ERROR:
File "XXXX", line 8
    
                                                      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:36:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if (b + c > a) or (a + c > b) or (a + b > c): 
-- ERROR:
File "XXXX", line 8
    
                                                  ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:38:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

-- ERROR:
File "XXXX", line 8
    
                                                  ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 15:38:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
-- EXECUTION TIME:
0.139014
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:

-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:39:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
-- ERROR:
File "XXXX", line 8
    
                                                  ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:41:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))
if (equilatero >= 0)
-- ERROR:
File "XXXX", line 7
    if (equilatero >= 0)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:09:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada":, a, ",", b, ",", c)
if(a > 0) or (b > 0) or (c > 0):
-- ERROR:
File "XXXX", line 8
    print("entrada":, a, ",", b, ",", c)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:12:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada":, a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   print("invalido")


-- ERROR:
File "XXXX", line 8
    print("entrada":, a, ",", b, ",", c)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:13:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada":, a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
print("invalido")


-- ERROR:
File "XXXX", line 8
    print("entrada":, a, ",", b, ",", c)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:20:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   print("invalido")
elif(x >= y + z) or (y >= z + x) or (z >= y + x):
	print("invalido")



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    elif(x >= y + z) or (y >= z + x) or (z >= y + x):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:33:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if(a == b) and (b == c):
	tipo = "equilatero"
else:
	if(a == b) and (b == c) and (b == c):
	tipo = "escaleno"

print("tipo de triangulo",tipo)



-- ERROR:
File "XXXX", line 15
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:33:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if(a == b) and (b == c):
	tipo = "equilatero"
else:
	if(a == b) and (b == c) and (b == c):
	tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:34:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if(a == b) and (b == c):
	tipo = "equilatero"
else:
	if(a == b) and (b == c) and (b == c):
	tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:35:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if(a == b) and (b == c):
	tipo = "equilatero"
else:
	if(a == b) and (b == c) and (b == c):
	tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:35:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if(a == b) and (b == c):
	tipo ="equilatero"
else:
	if(a == b) and (b == c) and (b == c):
	tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    tipo ="equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:36:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if(a == b) and (b == c):
		tipo ="equilatero"
else:
	if(a == b) and (b == c) and (b == c):
	tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    tipo ="equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:36:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if(a == b) and (b == c):
		tipo = "equilatero"
else:
	if(a == b) and (b == c) and (b == c):
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:37:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if((a == b) and (b == c)):
		tipo = "equilatero"
else:
	if(a == b) and (b == c) and (b == c):
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:38:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if((a == b) and (b == c)):
		tipo = "equilatero"
else:
	if(a == b) and (b == c) and (b == c):
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:39:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if((a == b) and (b == c)):
		tipo = "equilatero"
else:
	if(a == b) and (b == c) and (b == c):
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 13
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:40:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if((a == b) and (b == c)):
		tipo = "equilatero"
else:
	if(a == b) and (b == c) and (b == c):
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 13
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:40:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if((a == b) and (b == c)):
		tipo = "equilatero"
else:
	if(a == b) and (b == c) and (b == c):
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 13
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:41:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if((a == b) and (b == c)):
		tipo = "equilatero"
		
else:
	if(a == b) and (b == c) and (b == c):
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 13
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:41:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if((a == b) and (b == c)):
		tipo = "equilatero"	
else:
	if(a == b) and (b == c) and (b == c):
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 13
    tipo = "equilatero"	
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:44:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if((a == b) and (b == c)):
		tipo = "equilatero"	
   else:
	if(a == b) or (b == c) or (b == c):
		tipo = "isosceles"
		else:
			tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 13
    tipo = "equilatero"	
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:45:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if((a == b) and (b == c)):
		tipo = "equilatero"	
   else:
	if(a == b) or (b == c) or (b == c):
		tipo = "isosceles"
		else:
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 13
    tipo = "equilatero"	
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:45:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
	if(a == b) or (b == c) or (b == c):
		tipo = "isosceles"
		else:
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 13
    tipo = "equilatero"	
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:46:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
   if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
	if(a == b) or (b == c) or (b == c):
		tipo = "isosceles"
		else:
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 13
    tipo = "equilatero"	
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:47:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
	if(a == b) or (b == c) or (b == c):
		tipo = "isosceles"
		else:
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    if(a == b) or (b == c) or (b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:47:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
	if(a == b) or (b == c) or (b == c):
		tipo = "isosceles"
		else:
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    if(a == b) or (b == c) or (b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:47:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
	if(a == b) or (b == c) or (b == c):
		tipo = "isosceles"
		else:
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    if(a == b) or (b == c) or (b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:47:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
   tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
	if(a == b) or (b == c) or (b == c):
		tipo = "isosceles"
		else:
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    if(a == b) or (b == c) or (b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:47:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
	if(a == b) or (b == c) or (b == c):
		tipo = "isosceles"
		else:
		tipo = "escaleno"

print("tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 15
    if(a == b) or (b == c) or (b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:49:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("tipo de triangulo",tipo)
-- OUTPUT:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:49:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("tipo de triangulo",tipo)
-- EXECUTION TIME:
0.12427
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entrada 3.3 , 4.4 , 5.5
tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entrada 1.0 , 2.0 , 7.0
tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:49:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("tipo de triangulo",tipo)
-- OUTPUT:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:50:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo",tipo)
-- OUTPUT:
entrada 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:50:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo",tipo)
-- EXECUTION TIME:
0.129701
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entrada 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entrada 3.3 , 4.4 , 5.5
Tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entrada 1.0 , 2.0 , 7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:50:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo",tipo)
-- OUTPUT:
entrada 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:50:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- OUTPUT:
entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:50:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- EXECUTION TIME:
0.197312
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:51:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entrada", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- OUTPUT:
entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:51:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- OUTPUT:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:51:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- EXECUTION TIME:
0.187955
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:51:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:51:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- EXECUTION TIME:
0.140328
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:55:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 23:55:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- EXECUTION TIME:
0.130962
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:33:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:34:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:34:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- EXECUTION TIME:
0.148351
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 21:34:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
		tipo = "isosceles"
		else:
		tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- ERROR:
File "XXXX", line 16
    tipo = "isosceles"
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 21:34:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
		   tipo = "isosceles"
		else:
		   tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 21:34:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identific
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas:", a, ",", b, ",", c)
if(a < 0) or (b < 0) or (c < 0): 
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if((a == b) and (b == c)):
		tipo = "equilatero"	
	else:
		if(a == b) or (b == c) or (b == c):
		   tipo = "isosceles"
		else:
		   tipo = "escaleno"

print("Tipo de triangulo:",tipo)
-- EXECUTION TIME:
0.176446
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 14:03:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
		else:
		if(a==b) or (b==c) or (b==c):
		tipo = "isosceles"
		else:
			tipo = "escaleno"
print("Tipo de triangulo: ",tipo)
				
			
-- ERROR:
File "XXXX", line 12
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 14:03:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
		tipo = "isosceles"
		else:
			tipo = "escaleno"
print("Tipo de triangulo: ",tipo)
				
			
-- ERROR:
File "XXXX", line 14
    tipo = "isosceles"
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 14:04:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
		tipo = "isosceles"
		else:
		tipo = "escaleno"
print("Tipo de triangulo: ",tipo)
				
			
-- ERROR:
File "XXXX", line 14
    tipo = "isosceles"
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:37:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
		tipo = "isosceles"
		else:
		tipo = "escaleno"
print("Tipo de triangulo: ",tipo)
				
			
-- ERROR:
File "XXXX", line 14
    tipo = "isosceles"
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:38:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
		   tipo = "isosceles"
		else:
		   tipo = "escaleno"
print("Tipo de triangulo: ",tipo)
				
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Tipo de triangulo: ",tipo)
NameError: name 'tipo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:41:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
		   tipo = "isosceles"
		else:
		   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
				
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Tipo de triangulo:",tipo)
NameError: name 'tipo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:41:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
		   tipo = "isosceles"
	else:
		   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
				
			
-- ERROR:
File "XXXX", line 15
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:42:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
		   tipo = "isosceles"
	   else:
		   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
				
			
-- ERROR:
File "XXXX", line 15
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:42:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
		   tipo = "isosceles"
	   else:
		   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
				
			
-- ERROR:
File "XXXX", line 15
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:45:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
		   tipo = "isosceles"
	   else:
		   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
			
-- ERROR:
File "XXXX", line 15
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:45:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		  if(a==b) or (b==c) or (b==c):
		   tipo = "isosceles"
	      else:
		   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
			
-- ERROR:
File "XXXX", line 15
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:46:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	   tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
	   if(a==b) or (b==c) or (b==c):
		   tipo = "isosceles"
	   else:
		   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
			
-- ERROR:
File "XXXX", line 10
    if(a==b) and (b==c):
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:47:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c):
	 tipo = "invalido"
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
	   if(a==b) or (b==c) or (b==c):
		   tipo = "isosceles"
	   else:
		   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
			
-- ERROR:
File "XXXX", line 10
    if(a==b) and (b==c):
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:54:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
		else:
			if(a==b) or (b==c) or (b==c):
				tipo = "isosceles"
				else:
					tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:54:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			tipo = "isosceles"
			else:
			tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 16
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:54:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 20
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:55:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			tipo = "isosceles"
		else:
			tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 20
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:57:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if((a==b) or (b==c) or (b==c)):
			tipo = "isosceles"
	   else:
			tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:00:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if((a==b) or (b==c) or (b==c)):
			    tipo = "isosceles"
	   else:
			    tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:00:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			    tipo = "isosceles"
	   else:
			    tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:01:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			    tipo = "isosceles"
	      else:
			    tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:01:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			    tipo = "isosceles"
	   else:
			    tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:02:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
	   else:
			   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:06:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
	   else:
			   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:06:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
	   else:
			   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
		
		else:
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:08:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
	   else:
			   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:10:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado 1: "))
b =float(input("lado 2: "))
c =float(input("lado 3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	 if(a==b) and (b==c):
		tipo = "equilatero"
	   else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
	   else:
			   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
-- ERROR:
File "XXXX", line 12
    tipo = "equilatero"
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:12:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
	   else:
			   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:19:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
	   else:
			   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:20:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
	   else:
			   tipo = "escaleno"
print("Tipo de triangulo:",tipo)
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:29:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:30:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 23:30:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- EXECUTION TIME:
0.199817
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 00:05:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 00:06:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- EXECUTION TIME:
0.130725
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:36:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:37:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:37:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 13:38:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
		tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- EXECUTION TIME:
0.258184
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:39:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
	    tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 13:40:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
	    tipo = "equilatero"
	else:
		if(a==b) or (b==c) or (b==c):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- EXECUTION TIME:
0.203479
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:40:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
	    tipo = "equilatero"
	else:
		if((a==b) or (b==c) or (b==c)):
			   tipo = "isosceles"
		else:
			   tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:51:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
	    tipo = "equilatero"
	else:
		if((a==b) or (b==c) or (b==c)):
			  tipo = "isosceles"
		else:
			  tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:51:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
	    tipo = "equilatero"
	else:
		if((a==b) or (b==c) or (b==c)):
			  tipo = "isosceles"
		else:
			  tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 13:52:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
	    tipo = "equilatero"
	else:
		if((a==b) or (b==c) or (b==c)):
			  tipo = "isosceles"
		else:
			  tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- EXECUTION TIME:
0.238324
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:14:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
	    tipo = "equilatero"
	else:
		if((a==b) or (b==c) or (b==c)):
			  tipo = "isosceles"
	   else:
			  tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:15:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
	    tipo = "equilatero"
	else:
		if((a==b) or (b==c) or (b==c)):
			  tipo = "isosceles"
		else:
			  tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 14:15:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de iden
a =float(input("lado1: "))
b =float(input("lado2: "))
c =float(input("lado3: "))
print("Entrada: ",a, ",",b, ",",c)
if(a < 0) or (b < 0) or (c < 0):
	tipo = "invalido"
elif(a >= b + c) or (b >= a + c) or (c >= a + b):
	tipo = "invalido"
else:
	if(a==b) and (b==c):
	    tipo = "equilatero"
	else:
		if((a==b) or (b==c) or (b==c)):
			  tipo = "isosceles"
		else:
			  tipo = "escaleno"
print("Tipo de triangulo",tipo)
-- EXECUTION TIME:
0.180507
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
