== TEST (2019-03-20 19:25:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round( "quantos litros foram comprados"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round( "quantos litros foram comprados"))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:26:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round( "quantos litros foram comprados"))
ptint("valor do frete")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round( "quantos litros foram comprados"))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:26:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round( "quantos litros foram comprados"))
ptint("valor do frete")
-- EXECUTION TIME:
0.167931
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 4, in <module>
    print(round( "quantos litros foram comprados"))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:27:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round( "quantos litros foram comprados"))
ptint("valor do frete")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round( "quantos litros foram comprados"))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:27:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round( "quantos litros foram comprados"))
ptint("valor do frete")
-- EXECUTION TIME:
0.177713
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 4, in <module>
    print(round( "quantos litros foram comprados"))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:27:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round( "quantos litros foram comprados"))
ptint("valor do frete")
-- EXECUTION TIME:
0.152192
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 4, in <module>
    print(round( "quantos litros foram comprados"))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:27:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round( "quantos litros foram comprados"))
print("valor do frete")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round( "quantos litros foram comprados"))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:27:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round( "quantos litros foram comprados"))
print("valor do frete")
-- EXECUTION TIME:
0.159385
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 4, in <module>
    print(round( "quantos litros foram comprados"))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:30:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
quantidade = round(alguns litros de frutas, n )
print("total com michael")
-- ERROR:
File "XXXX", line 4
    quantidade = round(alguns litros de frutas, n )
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:30:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
quantidade = round(alguns litros de frutas, n )
print("total com michael")
-- EXECUTION TIME:
0.209181
-- ERROR:
  File "/home/codebench/codes/1602/1446/main.py", line 4
    quantidade = round(alguns litros de frutas, n )
                                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:31:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(alguns litros de frutas, n )
print("total com michael")
-- ERROR:
File "XXXX", line 4
    print(round(alguns litros de frutas, n )
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:31:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(alguns litros de frutas, n )
print("total com michael")
-- EXECUTION TIME:
0.16878
-- ERROR:
  File "/home/codebench/codes/1602/1446/main.py", line 4
    print(round(alguns litros de frutas, n )
                            ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:31:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round("alguns litros de polpas frutas", n )
print("total com michael")
-- ERROR:
File "XXXX", line 5
    print("total com michael")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:31:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round("alguns litros de polpas frutas", n )
print("total com michael")
-- EXECUTION TIME:
0.175134
-- ERROR:
  File "/home/codebench/codes/1602/1446/main.py", line 5
    print("total com michael")
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:31:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round("alguns litros de polpa frutas", n )
print("total com michael")
-- ERROR:
File "XXXX", line 5
    print("total com michael")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:31:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round("alguns litros de polpa frutas", n )
print("total com michael")
-- EXECUTION TIME:
0.240407
-- ERROR:
  File "/home/codebench/codes/1602/1446/main.py", line 5
    print("total com michael")
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:32:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round("alguns litros de polpa frutas", n )
print("total")
-- ERROR:
File "XXXX", line 5
    print("total")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:32:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round("alguns litros de polpa frutas", n )
print("total")
-- EXECUTION TIME:
0.180626
-- ERROR:
  File "/home/codebench/codes/1602/1446/main.py", line 5
    print("total")
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:32:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round("alguns litros de polpa frutas", n )
round(2,5, n)
print("total")
-- ERROR:
File "XXXX", line 5
    round(2,5, n)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:32:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round("alguns litros de polpa frutas", n )
round(2,5, n)
print("total")
-- EXECUTION TIME:
0.19765
-- ERROR:
  File "/home/codebench/codes/1602/1446/main.py", line 5
    round(2,5, n)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:33:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,5, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round(2,5, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:33:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,5, 2))
-- EXECUTION TIME:
0.13438
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 4, in <module>
    print(round(2,5, 2))
TypeError: round() takes at most 2 arguments (3 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:34:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,52, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round(2,52, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:34:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,52, 2))
-- EXECUTION TIME:
0.13307
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 4, in <module>
    print(round(2,52, 2))
TypeError: round() takes at most 2 arguments (3 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:34:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,35, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round(2,35, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:35:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,35, 2))
round(2/3, 3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round(2,35, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:35:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,35, 2))
round(2/3, 3)
-- EXECUTION TIME:
0.185476
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 4, in <module>
    print(round(2,35, 2))
TypeError: round() takes at most 2 arguments (3 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:35:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,35, 2))
round(2/3, 3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round(2,35, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:35:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,35, 2))
round(2/3, 0,3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round(2,35, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:35:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,35, 2))
round(2/3, 0,3)
-- EXECUTION TIME:
0.139076
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 4, in <module>
    print(round(2,35, 2))
TypeError: round() takes at most 2 arguments (3 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 19:36:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,35, 2))
round(2/3*1/3, 2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round(2,35, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 19:36:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2,35, 2))
round(2/3*1/3, 2)
-- EXECUTION TIME:
0.161232
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1446/main.py", line 4, in <module>
    print(round(2,35, 2))
TypeError: round() takes at most 2 arguments (3 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:24:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(quantos litros, 3))
print(quantidade que ficara com Michael, 3)
-- ERROR:
File "XXXX", line 4
    print(round(quantos litros, 3))
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:24:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
round(quantos litros, 3))
print(quantidade que ficara com Michael, 3)
-- ERROR:
File "XXXX", line 4
    round(quantos litros, 3))
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:24:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
round(quantos litros, 3)
print(quantidade que ficara com Michael, 3)
-- ERROR:
File "XXXX", line 4
    round(quantos litros, 3)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:39:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajuda
var= float(input("quantos litros serem comprados?:"))
total= (var∕3)
print(round(total,3))
-- ERROR:
File "XXXX", line 5
    total= (var∕3)
                ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:43:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajuda
var= float(input("quantos litros serem comprados?:"))
total= (var∕3)
print(round(total,3))
-- ERROR:
File "XXXX", line 5
    total= (var∕3)
                ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:43:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajuda
var= float(input("quantos litros serem comprados?:"))
total= (var∕3)
print(round(total,3))
-- ERROR:
File "XXXX", line 5
    total= (var∕3)
                ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 22:44:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajuda
var= float(input("quantos litros serem comprados?:"))
total= (var∕3)
print(round(total,3))
-- EXECUTION TIME:
0.134069
-- ERROR:
  File "/home/codebench/codes/1602/1446/main.py", line 5
    total= (var\u22153)
                ^
SyntaxError: invalid character in identifier

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:44:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajuda
var= float(input("quantos litros serem comprados?:"))
total= (var∕3)
print(round(total, 3))
-- ERROR:
File "XXXX", line 5
    total= (var∕3)
                ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:45:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajuda
var= float(input("quantos litros serem comprado?:"))
total= (var∕3)
print(round(total, 3))
-- ERROR:
File "XXXX", line 5
    total= (var∕3)
                ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:45:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajuda
var= float(input("quantos litros serem comprado?:"))
total= (var∕3)
print(round(total, 3))
-- ERROR:
File "XXXX", line 5
    total= (var∕3)
                ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 18:57:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajuda
var= float(input("quantos litros serem comprado?:"))
total= (var∕3)
print(round(total, 3))
-- ERROR:
File "XXXX", line 5
    total= (var∕3)
                ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 18:58:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajuda
var= float(input("quantos litros serem comprado?:"))
total= (var∕ 3)
print(round(total, 3))
-- ERROR:
File "XXXX", line 5
    total= (var∕ 3)
               ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 18:58:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajuda
var= float(input("quantos litros serem comprado?:"))
total= (var/3)
print(round(total, 3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 18:59:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajuda
var= float(input("quantos litros serem comprado?:"))
total= (var/3)
print(round(total, 3))
-- EXECUTION TIME:
0.15792
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
