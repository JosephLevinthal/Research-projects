== TEST (2019-04-22 18:35:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

num1 = float(input("numero 1: "))
num2 = float(input("numero 2: "))
num3 = float(input("numero 3: "))

print("Entradas:", num1, ",", num2, ",", num3)

if ((num1 < 0 or num2 < 0 or num3 < 0) or (num1 + num2 > num3 and num2 + num3 > num1 and num3 + num1 > num2)):
	print("Tipo de triangulo: invalido")
	
elif: (num1 = num2 and num2 = num3):
		
-- ERROR:
File "XXXX", line 13
    elif: (num1 = num2 and num2 = num3):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:36:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

num1 = float(input("numero 1: "))
num2 = float(input("numero 2: "))
num3 = float(input("numero 3: "))

print("Entradas:", num1, ",", num2, ",", num3)

if ((num1 < 0 or num2 < 0 or num3 < 0) or (num1 + num2 > num3 and num2 + num3 > num1 and num3 + num1 > num2)):
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:36:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

num1 = float(input("numero 1: "))
num2 = float(input("numero 2: "))
num3 = float(input("numero 3: "))

print("Entradas:", num1, ",", num2, ",", num3)

if ((num1 < 0 or num2 < 0 or num3 < 0) or (num1 + num2 > num3 and num2 + num3 > num1 and num3 + num1 > num2)):
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:38:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

num1 = float(input("numero 1: "))
num2 = float(input("numero 2: "))
num3 = float(input("numero 3: "))

print("Entradas:", num1, ",", num2, ",", num3)

if ((num1 < 0 or num2 < 0 or num3 < 0) or ((num1 + num2 > num3) and (num2 + num3 > num1) and (num3 + num1 > num2))):
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:38:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

num1 = float(input("numero 1: "))
num2 = float(input("numero 2: "))
num3 = float(input("numero 3: "))

print("Entradas:", num1, ",", num2, ",", num3)

if ((num1 < 0 or num2 < 0 or num3 < 0):
	print("Tipo de triangulo: invalido")
elif : ((num1 + num2 > num3) and (num2 + num3 > num1) and (num3 + num1 > num2)):
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 10
    if ((num1 < 0 or num2 < 0 or num3 < 0):
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:38:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

num1 = float(input("numero 1: "))
num2 = float(input("numero 2: "))
num3 = float(input("numero 3: "))

print("Entradas:", num1, ",", num2, ",", num3)

if (num1 < 0 or num2 < 0 or num3 < 0):
	print("Tipo de triangulo: invalido")
elif : ((num1 + num2 > num3) and (num2 + num3 > num1) and (num3 + num1 > num2)):
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 12
    elif : ((num1 + num2 > num3) and (num2 + num3 > num1) and (num3 + num1 > num2)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:38:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

num1 = float(input("numero 1: "))
num2 = float(input("numero 2: "))
num3 = float(input("numero 3: "))

print("Entradas:", num1, ",", num2, ",", num3)

if (num1 < 0 or num2 < 0 or num3 < 0):
	print("Tipo de triangulo: invalido")
elif ((num1 + num2 > num3) and (num2 + num3 > num1) and (num3 + num1 > num2)):
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:40:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if (num1 < 0 or num2 < 0 or num3 < 0):
	print("Tipo de triangulo: invalido")
elif ((a + b > c) and (a + c > b) and (b + c > a)):
	print("Tipo de triangulo: invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (num1 < 0 or num2 < 0 or num3 < 0):
NameError: name 'num1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:40:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a < 0 or b < 0 or c < 0):
	print("Tipo de triangulo: invalido")
elif ((a + b > c) and (a + c > b) and (b + c > a)):
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:41:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a < 0 or b < 0 or c < 0):
	print("Tipo de triangulo: invalido")
elif ((a + b < c) or (a + c < b) or (b + c < a)):
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:42:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b < c) or (a + c < b) or (b + c < a)):
	print("Tipo de triangulo: invalido")

	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:42:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b < c) or (a + c < b) or (b + c < a)):
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:42:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b < c) or (a + c < b) or (b + c < a)):
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:43:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b < c) or (a + c < b) or (b + c < a)):
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:44:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a + b < c) or (a + c < b) or (b + c < a):
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:44:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a + b < c) or (a + c < b) or (b + c < a):
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:44:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:45:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:45:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:45:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:47:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:48:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 18:48:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.198757
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:51:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
	
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isoceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:51:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
	
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isoceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:51:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
	
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isoceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 18:51:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
	
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isoceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.175919
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 18:52:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
	
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isoceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 18:52:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")
	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
	
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isoceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.126672
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 18:53:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.139089
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 18:53:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.146404
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 14:25:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.203488
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 17:22:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("numero 1: "))
b = float(input("numero 2: "))
c = float(input("numero 3: "))

print("Entradas:", a, ",", b, ",", c)

if ((a < 0) or (b < 0) or (c < 0) or (a + b <= c) or (a + c <= b) or (b + c <= a)):
	print("Tipo de triangulo: invalido")	
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
