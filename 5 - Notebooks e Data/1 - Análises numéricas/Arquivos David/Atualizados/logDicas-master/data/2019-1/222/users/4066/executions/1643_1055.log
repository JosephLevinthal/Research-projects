== TEST (2019-04-08 18:50:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math

v0 = float(input("velocidade inicial: "))
a = float(input('angulo: '))
d = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2a)))/g

print(R)
-- ERROR:
File "XXXX", line 10
    R = ((math.pow(v0, 2)*math.sin(2a)))/g
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:50:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math

v0 = float(input("velocidade inicial: "))
a = float(input('angulo: '))
d = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2a)))/(g)

print(R)
-- ERROR:
File "XXXX", line 10
    R = ((math.pow(v0, 2)*math.sin(2a)))/(g)
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:51:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math

v0 = float(input("velocidade inicial: "))
a = float(input('angulo: '))
d = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)

print(R)
-- OUTPUT:
1.1923595072005144
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:53:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
d = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)

print(R)
-- OUTPUT:
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:53:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
d = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)

print(R)
-- OUTPUT:
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:54:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
d = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)

print(R)
-- OUTPUT:
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:56:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
d = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)

if (abs(D - R) < 0.1):
	print("sim")
	
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    if (abs(D - R) < 0.1):
NameError: name 'D' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:57:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
d = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)

if (math.abs(D - R) < 0.1):
	print("sim")
	
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    if (math.abs(D - R) < 0.1):
AttributeError: module 'math' has no attribute 'abs'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:57:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
d = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)

if (math.abs(d - R) < 0.1):
	print("sim")
	
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    if (math.abs(d - R) < 0.1):
AttributeError: module 'math' has no attribute 'abs'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:58:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
d = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)
acerto = math.abs(d )

print(acerto)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    acerto = math.abs(d )
AttributeError: module 'math' has no attribute 'abs'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:59:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
D = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)
ac = D - R
acerto = math.abs(ac)

print(acerto)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    acerto = math.abs(ac)
AttributeError: module 'math' has no attribute 'abs'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:59:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
D = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)
ac = D - R
acerto = math.abs(ac)

print(acerto)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    a = math.radians(float(input()))
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 18:59:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
D = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)
ac = D - R
acerto = math.abs(ac)

print(acerto)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    acerto = math.abs(ac)
AttributeError: module 'math' has no attribute 'abs'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 19:01:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
D = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)
ac = D - R
acerto = abs(ac)

print(acerto)
-- OUTPUT:
0.05171342949060076
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 19:03:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
D = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)
ac = D - R
acerto = abs(ac)

if (acerto > 0.1):
	print("sim")
	
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 19:03:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
D = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)
ac = D - R
acerto = abs(ac)

if (acerto < 0.1):
	print("sim")
	
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 19:03:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

import math

v0 = float(input("velocidade inicial: "))
a = math.radians(float(input('angulo: ')))
D = float(input('distancia: '))
g = 9.8
R = ((math.pow(v0, 2)*math.sin(2*a)))/(g)
ac = D - R
acerto = abs(ac)

if (acerto < 0.1):
	print("sim")
	
else:
	print("nao")
-- EXECUTION TIME:
0.218224
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
