== TEST (2019-04-21 22:10:39) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print(invalida)
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) or (b >= a + c) or (c >= a + b)):
		print("invalida")
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    print(invalida)
NameError: name 'invalida' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:23:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)



# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) or (b >= a + c) or (c >= a + b)):
		print("invalida")
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.19286
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
invalida
invalida
Area: -0.0
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:23:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)



# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) or (b >= a + c) or (c >= a + b)):
		print("invalida")
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
invalida
invalida
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:28:47) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)



# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) or (b >= a + c) or (c >= a + b)):
		print("invalida")
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.201626
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
invalida
invalida
Area: -0.0
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:28:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)



# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) or (b >= a + c) or (c >= a + b)):
		print("invalida")
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
invalida
invalida
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:32:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)



# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("Area: invalida")
	# Testa se medidas correspondem aas de um triangulo
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("Area: invalida")
else:
	s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	area = round(area, 3)
	print("Area:", area)
	

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:32:45) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)



# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("Area: invalida")
	# Testa se medidas correspondem aas de um triangulo
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("Area: invalida")
else:
	s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	area = round(area, 3)
	print("Area:", area)
	

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:33:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)



# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("Area: invalida")
	# Testa se medidas correspondem aas de um triangulo
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("Area: invalida")
else:
	s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	area = round(area, 3)
	print("Area:", area)
	

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:35:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)



# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("Area: invalida")
	# Testa se medidas correspondem aas de um triangulo
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("Area: invalida")
else:
	s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	area = round(area, 3)
	print("Area:", area)
	

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:40:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("Area: invalida")
	# Testa se medidas correspondem aas de um triangulo
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("Area: invalida")
else:
	s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	area = round(area, 3)
	print("Area:", area)
	

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:40:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("Area: invalida")
	# Testa se medidas correspondem aas de um triangulo
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("Area: invalida")
else:
	s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	area = round(area, 3)
	print("Area:", area)
	

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:40:10) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("Area: invalida")
	# Testa se medidas correspondem aas de um triangulo
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("Area: invalida")
else:
	s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	area = round(area, 3)
	print("Area:", area)
	

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:40:10) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("Area: invalida")
	# Testa se medidas correspondem aas de um triangulo
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("Area: invalida")
else:
	s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	area = round(area, 3)
	print("Area:", area)
	

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:40:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print ("Entradas:", a,",", b,",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 or b < 0 or c < 0):
	print("Area: invalida")
	# Testa se medidas correspondem aas de um triangulo
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("Area: invalida")
else:
	s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	area = round(area, 3)
	print("Area:", area)
	

-- EXECUTION TIME:
0.155945
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
