== TEST (2019-03-21 23:50:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))
soma = var // 2
print( soma)
-- OUTPUT:
4586
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:51:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))
soma = var & 
print( soma)
-- ERROR:
File "XXXX", line 5
    soma = var & 
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:51:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))
soma = var%
print( soma)
-- ERROR:
File "XXXX", line 5
    soma = var%
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:51:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))
soma = var%2
print( soma)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 23:18:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))

n1 = var//1000
print(n1)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 23:20:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))

n1 = var//1000
n2 = (var%1000) // (100)
print(n2)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 23:23:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))

n1 = var//1000
n2 = (var%1000) // (100)
n3 = ((var%1000) - (n2)) // 10
n4 = ((var%1000)-(n2+n3)) // 1
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 23:24:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))

n1 = var//1000
n2 = (var%1000) // (100)
n3 = ((var%1000) - (n2)) // 10
n4 = ((var%1000)-(n2+n3)) // 1
total =(n1 + n2 + n3 + n2)
print(total)
-- OUTPUT:
28
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 23:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))

n1 = var//1000
n2 = (var%1000) // (100)
n3 = ((var%1000) - (n2)) // 10
n4 = ((var%1000)-(n2+n3)) // 1
total =(n1 + n2 + n3 + n4)
print(total)
-- OUTPUT:
182
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 23:25:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))

n1 = var//1000
n2 = (var%1000) // (100)
n3 = ((var%1000) - (n2)) // 10
n4 = ((var%1000)-(n2+n3)) // 1
print(n1)
print(n2)
print(n3)
print(n4)
-- OUTPUT:
9
1
17
155
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 23:27:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))

n1 = var//1000
n2 = (var%1000) // (100)
n3 = ((var%1000) - (n2*100)) // 10
n4 = ((var%1000)-(n2+n3)) // 1
print(n1)
print(n2)
print(n3)
print(n4)
-- OUTPUT:
9
1
7
165
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 23:29:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))

n1 = var//1000
n2 = (var%1000) // (100)
n3 = ((var%1000) - (n2*100)) // 10
n4 = ((var%1000)-(n2*100+n3*10)) // 1
print(n1)
print(n2)
print(n3)
print(n4)
-- OUTPUT:
9
1
7
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 23:29:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite um numero de 4 digitos"))

n1 = var//1000
n2 = (var%1000) // (100)
n3 = ((var%1000) - (n2*100)) // 10
n4 = ((var%1000)-(n2*100+n3*10)) // 1
total = n1 + n2 + n3 + n4
print(total)
-- EXECUTION TIME:
0.129407
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
