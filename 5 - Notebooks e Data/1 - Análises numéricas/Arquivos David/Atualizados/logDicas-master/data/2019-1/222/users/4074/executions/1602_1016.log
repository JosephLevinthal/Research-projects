== TEST (2019-03-27 19:05:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
semi = ((a+b+c)/2)
area=
-- ERROR:
File "XXXX", line 6
    area=
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:07:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
s = ((a+b+c)/2)
area=sqrt(s(s-a)(s-b)(s-c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    s = ((a+b+c)/2)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:07:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
semi = ((a+b+c)/2)
area=sqrt(semi(s-a)(s-b)(s-c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    semi = ((a+b+c)/2)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:23:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
semi = ((a+b+c)/2)
area=sqrt(semi(s-a)(s-b)(s-c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    semi = ((a+b+c)/2)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:27:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
varA= int(input("numero 1:"))
varB= int(input("numero 2:"))
varC= int(input("numero 3:"))

semi = ((varA+varB+varC)/2)
area=sqrt(semi(s-a)(s-b)(s-c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    varA= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:27:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
varA= int(input("numero: "))
varB= int(input("numero: "))
varC= int(input("numero: "))

semi = ((varA+varB+varC)/2)
area=sqrt(semi(s-a)(s-b)(s-c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    varA= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:29:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

semi = ((a+b+c)/2)
area=sqrt(semi(s-a)(s-b)(s-c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:29:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area=sqrt(s(s-a)(s-b)(s-c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:30:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area=sqrt(s(s-a)(s-b)(s-c))

print(round(area, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:31:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s(s-a)(s-b)(s-c))

print((int(round(area, 5)))
-- ERROR:
File "XXXX", line 13
    
                               ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:31:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s(s-a)(s-b)(s-c))

print((int(round(area, 5)))
-- ERROR:
File "XXXX", line 13
    
                               ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:31:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s(s-a)(s-b)(s-c))

print((round(area, 5))
-- ERROR:
File "XXXX", line 13
    
                          ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:32:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s(s-a)(s-b)(s-c))

print((round(area, 5))
-- ERROR:
File "XXXX", line 13
    
                          ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:33:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s(s-a)(s-b)(s-c))

print((round(area, 5))
-- ERROR:
File "XXXX", line 13
    
                          ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:36:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s(s-a)(s-b)(s-c))

print((round(area, 5))
-- ERROR:
File "XXXX", line 13
    
                          ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:40:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s(s-a)(s-b)(s-c))

print((round(area, 5))
-- ERROR:
File "XXXX", line 13
    
                          ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:41:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s(s-a)(s-b)(s-c))
print((round(area, 5))
-- ERROR:
File "XXXX", line 12
    
                          ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:41:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s(s-a)(s-b)(s-c))
#print((round(area, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:42:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s(s-a)(s-b)(s-c))
print(round(area, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:42:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(area, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:42:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt*(s*(s-a)*(s-b)*(s-c))
print(round(area, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:42:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt*(s*(s-a)*(s-b)*(s-c))
#print(round(area, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:42:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt*(s*(s-a)*(s-b)*(s-c))
print(round(area, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:42:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(area, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:43:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: 3"))
b = int(input("numero: 8"))
c = int(input("numero: 6"))

s = ((a+b+c)/2)
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(area, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:43:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round("area" , 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 19:43:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round("area:" , 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:56:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round("area" , 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:02:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round("area" , 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:03:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = ((a+b+c)/2)
area = (s*(s-a)*(s-b)*(s-c))**0.5
print(round("area" , 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 09:22:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = (a + b + c)/2
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(area, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 09:22:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = (a + b + c)/2
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(area, 5))
-- EXECUTION TIME:
0.218466
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1016/main.py", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 18:17:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))

s = (a + b + c)/2
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(area, 5))
-- EXECUTION TIME:
0.196877
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1016/main.py", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 18:17:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))
from math import*
s = (a + b + c)/2
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(area, 5))
-- EXECUTION TIME:
0.132204
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1016/main.py", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:17:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("numero: "))
b = int(input("numero: "))
c = int(input("numero: "))
from math import *
s = (a + b + c)/2
Area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(Area, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 18:18:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o lado A "))
b = int(input("digite o lado B "))
c = int(input("digite o lado C "))
from math import *
s = (a + b + c)/2
Area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(Area, 5))
-- EXECUTION TIME:
0.183909
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1602/1016/main.py", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 18:18:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("digite o lado A "))
b = float(input("digite o lado B "))
c = float(input("digite o lado C "))
from math import *
s = (a + b + c)/2
Area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(Area, 5))
-- EXECUTION TIME:
0.131665
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
