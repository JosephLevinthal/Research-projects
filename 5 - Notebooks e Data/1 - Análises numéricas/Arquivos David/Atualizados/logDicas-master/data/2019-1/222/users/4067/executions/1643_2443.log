== SUBMITION (2019-04-15 15:59:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("raio do tanque: "))
h = float(input("altura da coluna: "))
n = int(input("opcao: "))
if n == 1:
	v = ((pi*h**2) * (3*r)-h)/3
else:
	v = (4*pi*r**3)/3
print(round(v,4))
-- EXECUTION TIME:
0.153881
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.6068
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
310.3391
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 15:59:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("raio do tanque: "))
h = float(input("altura da coluna: "))
n = int(input("opcao: "))
if n == 1:
	v = ((pi*h**2) * (3*r)-h)/3
else:
	v = (4*pi*r**3)/3
print(round(v,4))
-- OUTPUT:
9.6068
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:00:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("raio do tanque: "))
h = float(input("altura da coluna: "))
n = int(input("opcao: "))
if n == 1:
	v = ((pi*h**2) * ((3*r)-h)/3
else:
	v = (4*pi*r**3)/3
print(round(v,4))
-- EXECUTION TIME:
0.156833
-- ERROR:
  File "/home/codebench/codes/1643/2443/main.py", line 10
    else:
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:00:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("raio do tanque: "))
h = float(input("altura da coluna: "))
n = int(input("opcao: "))
if n == 1:
	v = ((pi*h**2) * ((3*r)-h)/3
else:
	v = (4*pi*r**3)/3
print(round(v,4))
-- ERROR:
File "XXXX", line 10
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:03:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("raio do tanque: "))
h = float(input("altura da coluna: "))
n = int(input("opcao: "))
if n == 1:
	v = ((pi*h**2) * ((3*r)-h)/3
else:
	v = (4*pi*r**3)/3 - ((pi*h**2) * ((3*r)-h)/3
print(round(v,4))
-- ERROR:
File "XXXX", line 10
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:04:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("raio do tanque: "))
h = float(input("altura da coluna: "))
n = int(input("opcao: "))
if n == 1:
	v = (pi*h**2 * (3*r - h))/3
else:
	v = (4*pi*r**3)/3 - (pi*h**2 * (3*r - h))/3
print(round(v,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:05:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("raio do tanque: "))
h = float(input("altura da coluna: "))
n = int(input("opcao: "))
if n == 1:
	v = (pi*h**2 * (3*r - h))/3
else:
	v = (4*pi*r**3)/3 - (pi*h**2 * (3*r - h))/3
print(round(v,4))
-- EXECUTION TIME:
0.165902
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
