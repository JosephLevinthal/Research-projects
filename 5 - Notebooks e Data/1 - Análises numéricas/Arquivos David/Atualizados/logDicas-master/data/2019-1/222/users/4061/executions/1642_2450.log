== TEST (2019-04-16 21:59:31) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper()>nome2.upper()):
	mensagem = ("primeiro")
else:
	mensagem = ("segundo")

print(mensagem)


-- OUTPUT:
segundo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 22:04:23) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper()!=nome2.upper()):
	mensagem = ("primeiro")
else:
	mensagem = ("segundo")

print(mensagem)


-- OUTPUT:
primeiro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:38:54) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem = nome1.upper()
else:
	mensagem = nome2.upper

print(mensagem)


-- OUTPUT:
<built-in method upper of str object at 0x7fbc99dd6618>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:39:31) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem = nome1.upper()
else:
	mensagem = nome2.upper()

print(mensagem)


-- OUTPUT:
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:40:18) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 >= nome2):
	mensagem = nome1.upper()
else:
	mensagem = nome2.upper()

print(mensagem)


-- OUTPUT:
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:41:29) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 != nome2):
	mensagem = nome1.upper()
else:
	mensagem = nome2.upper()

print(mensagem)


-- OUTPUT:
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:42:27) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 != nome2):
	mensagem = nome1.upper()
else:
	mensagem = nome2.upper()

print(mensagem)
print(mensagem)


-- OUTPUT:
ADA
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:43:34) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 >= nome2 or nome1 <= nome2):
	mensagem = nome1.upper()
else:
	mensagem = nome2.upper()

print(mensagem)
print(mensagem)


-- OUTPUT:
ADA
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:44:19) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(a >= o):
	mensagem = nome1.upper()
else:
	mensagem = nome2.upper()

print(mensagem)
print(mensagem)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(a >= o):
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:44:48) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(pa >= pe):
	mensagem = nome1.upper()
else:
	mensagem = nome2.upper()

print(mensagem)
print(mensagem)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(pa >= pe):
NameError: name 'pa' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:49:44) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 < nome2):
	mensagem = nome1.upper()
else:
	if(nome2 < nome1 ):
		mensagem = nome2.upper()

print(mensagem)
print(mensagem)


-- OUTPUT:
ADA
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:50:35) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 <= nome2):
	mensagem = nome1.upper()
else:
	if(nome2 <= nome1 ):
		mensagem = nome2.upper()

print(mensagem)
print(mensagem)


-- OUTPUT:
ADA
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:51:36) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 <= nome2):
	mensagem = nome1 and nome2.upper()
else:
	mensagem = nome2 and nome1.upper()

print(mensagem)
print(mensagem)


-- OUTPUT:
LEON
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 20:55:14) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 == nome2):
	mensagem = nome1.upper()
else:
	mensagem = nome2.upper()

print(mensagem)
print(mensagem)



-- OUTPUT:
LEON
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:59:24) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem1 = nome1.upper()
else:
	mensagem2 = nome2.upper()

print(mensagem1)
print(mensagem2)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(mensagem1)
NameError: name 'mensagem1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 20:01:54) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem1 = nome1.upper()
else:
	mensagem2 = nome2 < nome1.upper()

print(mensagem1)
print(mensagem2)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(mensagem1)
NameError: name 'mensagem1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 20:09:10) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2):
	mensagem1 = nome1 < nome2
else:
	mensagem2 = nome1 == nome2

print(mensagem1)
print(mensagem2)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(mensagem1)
NameError: name 'mensagem1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 20:09:48) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2):
	mensagem = nome1 < nome2
else:
	mensagem = nome1 == nome2

print(mensagem)




-- OUTPUT:
False
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 20:11:20) 
-- CODE:
#nome1 = input("digite nome 1: ")
#nome2 = input("digite nome 2: ")

#if(nome1.upper() > nome2):
	#mensagem = nome1 < nome2
#else:
	#mensagem = nome1 == nome2

#print(mensagem)
nome1 = 'dragao'
nome2 = 'harpia'
nome3 = 'Dragao'
print(nome1 > nome2)
print(nome1 < nome2)
print(nome1 == nome3)



-- OUTPUT:
False
True
False
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 20:12:56) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2 or nome1 < nome2):
	mensagem = nome1
else:
	mensagem = nome2

print(mensagem)




-- OUTPUT:
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 20:13:36) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2 or nome1 < nome2):
	mensagem = nome1
else:
	mensagem = nome2

print(mensagem)
print(mensagem)




-- OUTPUT:
Ada
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 20:14:11) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem = nome1
else:
	mensagem = nome2

print(mensagem)
print(mensagem)




-- OUTPUT:
Leon
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 20:14:44) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem1 = nome1
else:
	mensagem = nome2

print(mensagem1)
print(mensagem)




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(mensagem1)
NameError: name 'mensagem1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 20:16:58) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem = nome1
else:
	mensagem = nome2
	if(nome1 < nome2):
		mensagem = nome1
	
	else:
		mensagem = nome2

print(mensagem)
print(mensagem)




-- OUTPUT:
Ada
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:22:12) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1)
	print(nome2)
else:
	print(nome2)
	print(nome1)



-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:22:36) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1)
	print(nome2)
else:
	print(nome2)
	print(nome1)



-- EXECUTION TIME:
0.178957
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
Leon
Ada
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
Marcos
Demetrius
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
george
WILSON
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:23:16) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 < nome2):
	print(nome1)
	print(nome2)
else:
	print(nome2)
	print(nome1)



-- OUTPUT:
Ada
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:24:15) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1)
	print(nome2)
else:
	print(nome2)
	print(nome1)



-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:34:40) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1.upper())
	print(nome2.upper())
else:
	print(nome2.upper())
	print(nome1.upper())



-- OUTPUT:
LEON
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:40:23) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1.upper())
	print(nome2.upper())
else:
	print(nome2.upper())
	print(nome1.upper())



-- OUTPUT:
LEON
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:40:45) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1.upper())
	print(nome2.upper())
else:
	print(nome2.upper())
	print(nome1.upper())



-- EXECUTION TIME:
0.132238
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
LEON
ADA
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
MARCOS
DEMETRIUS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
GEORGE
WILSON
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:41:27) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1.upper())
	print(nome2
else:
	print(nome2)
	print(nome1.upper())



-- ERROR:
File "XXXX", line 7
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:41:41) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1.upper())
	print(nome2)
else:
	print(nome2)
	print(nome1.upper())



-- OUTPUT:
Leon
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:42:42) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1.upper())
	print(nome2)
else:
	print(nome2)
	print(nome1)



-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:43:12) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1)
	print(nome2)
else:
	print(nome2)
	print(nome1.upper())



-- OUTPUT:
Leon
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:43:21) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1)
	print(nome2)
else:
	print(nome2)
	print(nome1.upper())



-- OUTPUT:
Leon
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:43:42) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1)
	print(nome2)
else:
	print(nome2)
	print(nome1)



-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:44:39) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1)
	print(nome2)
else:
	print(nome2)
	print(nome1)



-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:45:15) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	print(nome1)
	print(nome2)
else:
	print(nome2)
	print(nome1)



-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:52:49) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem1 = nome1.upper()
	mensagem2 = nome2.upper()
else:
	mensagem1 = nome2.upper()
	mensagem2 = nome1.upper()
	
print(mensagem1)
print(mensagem2)

-- OUTPUT:
LEON
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:53:10) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem1 = nome1.upper()
	mensagem2 = nome2.upper()
else:
	mensagem1 = nome2.upper()
	mensagem2 = nome1.upper()
	
print(mensagem1)
print(mensagem2)

-- OUTPUT:
LEON
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:53:44) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem1 = nome1.upper()
	mensagem2 = nome2.upper()
else:
	mensagem1 = nome2.upper()
	mensagem2 = nome1.upper()
	
print(mensagem1)
print(mensagem2)

-- OUTPUT:
LEON
ADA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:54:02) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 < nome2):
	mensagem1 = nome1.upper()
	mensagem2 = nome2.upper()
else:
	mensagem1 = nome2.upper()
	mensagem2 = nome1.upper()
	
print(mensagem1)
print(mensagem2)

-- OUTPUT:
ADA
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:54:09) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 < nome2):
	mensagem1 = nome1.upper()
	mensagem2 = nome2.upper()
else:
	mensagem1 = nome2.upper()
	mensagem2 = nome1.upper()
	
print(mensagem1)
print(mensagem2)

-- OUTPUT:
ADA
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:54:17) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 < nome2):
	mensagem1 = nome1.upper()
	mensagem2 = nome2.upper()
else:
	mensagem1 = nome2.upper()
	mensagem2 = nome1.upper()
	
print(mensagem1)
print(mensagem2)

-- OUTPUT:
ADA
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:54:30) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 < nome2):
	mensagem1 = nome1.upper()
	mensagem2 = nome2.upper()
else:
	mensagem1 = nome2.upper()
	mensagem2 = nome1.upper()
	
print(mensagem1)
print(mensagem2)

-- EXECUTION TIME:
0.159291
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
ADA
LEON
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
DEMETRIUS
MARCOS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
WILSON
GEORGE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:56:04) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 < nome2):
	mensagem1 = nome1
	mensagem2 = nome2
else:
	mensagem1 = nome2
	mensagem2 = nome1
	
print(mensagem1)
print(mensagem2)

-- EXECUTION TIME:
0.168865
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
Ada
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
Demetrius
Marcos
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:56:11) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 < nome2):
	mensagem1 = nome1
	mensagem2 = nome2
else:
	mensagem1 = nome2
	mensagem2 = nome1
	
print(mensagem1)
print(mensagem2)

-- OUTPUT:
Ada
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:57:10) 
-- CODE:
nome1.upper() = input("digite nome 1: ")
nome2.upper() = input("digite nome 2: ")

if(nome1 < nome2):
	mensagem1 = nome1
	mensagem2 = nome2
else:
	mensagem1 = nome2
	mensagem2 = nome1
	
print(mensagem1)
print(mensagem2)

-- ERROR:
File "XXXX", line 1
    nome1.upper() = input()
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:57:42) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 < nome2):
	mensagem1 = nome1.upper()
	mensagem2 = nome2
else:
	mensagem1 = nome2
	mensagem2 = nome1.upper()
	
print(mensagem1)
print(mensagem2)

-- OUTPUT:
ADA
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:58:16) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 < nome2):
	mensagem1 = nome1.upper()
	mensagem2 = nome2.upper()
else:
	mensagem1 = nome2.upper()
	mensagem2 = nome1.upper()
	
print(mensagem1)
print(mensagem2)

-- OUTPUT:
ADA
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:59:55) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

mensagem1 = nome1.upper()
mensagem2 = nome2.upper()

if(mensagem1 < mensagem2):
	mensagem3 = mensagem1
	mensagem4 = mensagem2
else:
	mensagem3 = mensagem2
	mensagem4 = mensagem1
	
print(mensagem3)
print(mensagem4)

-- OUTPUT:
ADA
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 15:00:07) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

mensagem1 = nome1.upper()
mensagem2 = nome2.upper()

if(mensagem1 < mensagem2):
	mensagem3 = mensagem1
	mensagem4 = mensagem2
else:
	mensagem3 = mensagem2
	mensagem4 = mensagem1
	
print(mensagem3)
print(mensagem4)

-- EXECUTION TIME:
0.143307
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
ADA
LEON
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
DEMETRIUS
MARCOS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
GEORGE
WILSON
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:49:51) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem = nome1
	mensagem = nome2
else:
	mensagem = nome2
	mensagem = nome1

print(mensagem)
-- OUTPUT:
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:06:46) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2):
	mensagem = nome1
	
else:
	mensagem = nome2
	

print(mensagem)
print(mensagem)
-- OUTPUT:
Leon
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:07:28) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper()):
	mensagem = nome1
	
else:
	mensagem = nome2
	

print(mensagem)
print(mensagem)
-- OUTPUT:
Leon
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:08:14) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper()):
	mensagem = nome1
	
else:
	mensagem = nome2
	

print(mensagem)
print(mensagem)
-- OUTPUT:
Leon
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:11:33) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper()):
	mensagem = nome1
else:
	mensagem = nome2
	
print(mensagem)
print(mensagem)
-- OUTPUT:
Leon
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:12:01) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper()):
	mensagem = nome1
else:
	mensagem = nome2
	
print(mensagem)
print(mensagem)
-- OUTPUT:
Leon
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:13:45) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper()):
	print(nome1)
else:
	print(nome2)
	
#print(mensagem)
#print(mensagem)
-- OUTPUT:
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:15:45) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper()):
	mensagem = nome1
	mensagem = nome2
else:
	mensagem = nome2
	mensagem = nome1
	
print(mensagem)
print(mensagem)
-- OUTPUT:
Ada
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:16:13) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper()):
	mensagem = nome1
	mensagem = nome2
else:
	mensagem = nome2
	mensagem = nome1
	
print(mensagem)
#print(mensagem)
-- OUTPUT:
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:17:28) 
-- CODE:
nome1 = input.upper()("digite nome 1: ")
nome2 = input.upper()("digite nome 2: ")

if(nome1 > nome2):
	mensagem = nome1
	
else:
	mensagem = nome2
	
	
print(mensagem)
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nome1 = input.upper()("digite nome 1: ")
AttributeError: 'builtin_function_or_method' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:17:44) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 > nome2):
	mensagem = nome1
	
else:
	mensagem = nome2
	
	
print(mensagem)
print(mensagem)
-- OUTPUT:
Leon
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:18:20) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 >= nome2):
	mensagem = nome1
	
else:
	mensagem = nome2
	
	
print(mensagem)
print(mensagem)
-- OUTPUT:
Leon
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:18:50) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 < nome2):
	mensagem = nome1
	
else:
	mensagem = nome2
	
	
print(mensagem)
print(mensagem)
-- OUTPUT:
Ada
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:19:51) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1 != nome2):
	mensagem = nome1
	
else:
	mensagem = nome2
	
	
print(mensagem)
print(mensagem)
-- OUTPUT:
Ada
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:19:52) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper):
	mensagem = nome1
	mensagem = nome2
	
else:
	mensagem = nome2
	mensagem = nome1
	
print(mensagem)
#print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(nome1.upper() > nome2.upper):
TypeError: '>' not supported between instances of 'str' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:20:49) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper):
	mensagem = nome2
	mensagem = nome1
	
else:
	mensagem = nome1
	mensagem = nome2
	
print(mensagem)
#print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(nome1.upper() > nome2.upper):
TypeError: '>' not supported between instances of 'str' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:21:23) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper):
	mensagem = nome2
	mensagem = nome1
	
 	else:
		mensagem = nome1
		mensagem = nome2
	
print(mensagem)
#print(mensagem)
-- ERROR:
File "XXXX", line 8
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:22:03) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper):
	mensagem = nome2
	mensagem = nome1
 	else:
		mensagem = nome1
		mensagem = nome2
	
print(mensagem)
#print(mensagem)
-- ERROR:
File "XXXX", line 7
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:22:23) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() > nome2.upper):
	mensagem = nome2
	mensagem = nome1
else:
	mensagem = nome1
	mensagem = nome2
	
print(mensagem)
#print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(nome1.upper() > nome2.upper):
TypeError: '>' not supported between instances of 'str' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:22:49) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() < nome2.upper):
	mensagem = nome2
	mensagem = nome1
else:
	mensagem = nome1
	mensagem = nome2
	
print(mensagem)
#print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(nome1.upper() < nome2.upper):
TypeError: '<' not supported between instances of 'str' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:26:23) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() < nome2.upper):
	mensagem = nome1
	mensagem = nome2
else:
	mensagem = nome2
	mensagem = nome1
	
print(mensagem)
#print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(nome1.upper() < nome2.upper):
TypeError: '<' not supported between instances of 'str' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:26:48) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() < nome2.upper()):
	mensagem = nome1
	mensagem = nome2
else:
	mensagem = nome2
	mensagem = nome1
	
print(mensagem)
#print(mensagem)
-- OUTPUT:
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:27:30) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() < nome2.upper()):
	mensagem = nome2
	mensagem = nome1
else:
	mensagem = nome1
	mensagem = nome2
	
print(mensagem)
print(mensagem)
-- OUTPUT:
Ada
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-06 23:28:06) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() < nome2.upper()):
	mensagem = nome2
	mensagem = nome1
else:
	mensagem = nome1
	mensagem = nome2
	
print(mensagem)
print(mensagem)
-- EXECUTION TIME:
0.136996
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
Ada
Ada
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
Demetrius
Demetrius
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
george
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:28:53) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() < nome2.upper()):
	mensagem = nome1
	mensagem = nome2
else:
	mensagem = nome2
	mensagem = nome1
	
print(mensagem)
print(mensagem)
-- OUTPUT:
Leon
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:29:57) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() < nome2.upper()):
	mensagem = nome1
	mensagem = nome2
else:
	mensagem = nome2
	mensagem = nome1
	
#print(mensagem)
#print(mensagem)
-- OUTPUT:
Leon
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-06 23:30:41) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() < nome2.upper()):
	mensagem1 = nome1
	mensagem2 = nome2
else:
	mensagem1 = nome2
	mensagem2 = nome1
	
print(mensagem1)
print(mensagem2)
-- OUTPUT:
Ada
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-06 23:31:05) 
-- CODE:
nome1 = input("digite nome 1: ")
nome2 = input("digite nome 2: ")

if(nome1.upper() < nome2.upper()):
	mensagem1 = nome1
	mensagem2 = nome2
else:
	mensagem1 = nome2
	mensagem2 = nome1
	
print(mensagem1)
print(mensagem2)
-- EXECUTION TIME:
0.203945
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
Ada
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
Demetrius
Marcos
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
george
WILSON
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
