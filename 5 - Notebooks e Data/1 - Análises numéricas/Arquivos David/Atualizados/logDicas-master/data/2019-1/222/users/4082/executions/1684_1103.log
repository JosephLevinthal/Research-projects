== TEST (2019-04-29 13:37:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x:"))
a = float(input("a:"))
b = float(input("b
					 
if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{}pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- ERROR:
File "XXXX", line 7
    b = float(input("b
                     ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:37:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
					 
if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{}pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:38:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
					 
if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{}pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- EXECUTION TIME:
0.144116
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entrada 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5pertence ao invalido 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:38:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
					 
if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{}pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:38:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
					 
if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{}pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:39:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
					 
if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{}pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:40:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
					 
	
if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{}pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:41:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
					 
	
if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{}pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- EXECUTION TIME:
0.207156
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entrada 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5pertence ao invalido 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:41:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
					 
	
if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{}pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:12:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
					 
	if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{}pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- ERROR:
File "XXXX", line 9
    if (b <=a):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 18:13:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
					 
if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{} pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- EXECUTION TIME:
0.202902
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entrada 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao invalido 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:13:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
					 
if (b <=a):
	print("Entrada {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{} pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 18:14:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
					 
if (b <= a):
	print("Entradas {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{} pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- EXECUTION TIME:
0.145013
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao invalido 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:14:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
					 
if (b <= a):
	print("Entradas {} e {} invalidas". format(a,b))
					 
elif (a <= x and x <= b):
	print("{} pertence ao invalido {} , {}". format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}". format(x,a,b))
					 
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 18:14:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
					 
if (b <= a):
	print("Entradas {} e {} invalidas".format(a,b))
					 
elif (a <= x and x <= b):
	print("{} pertence ao invalido {} , {}".format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}".format(x,a,b))
					 
-- EXECUTION TIME:
0.234745
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao invalido 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 18:15:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
					 
if (b <= a):
	print("Entradas {} e {} invalidas".format(a,b))
					 
elif (a <= x and x <= b):
	print("{} pertence ao intervalo {} , {}".format(x,a,b))

else:
	print("{} nao pertence ao intervalo {} , {}".format(x,a,b))
					 
-- EXECUTION TIME:
0.135981
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
