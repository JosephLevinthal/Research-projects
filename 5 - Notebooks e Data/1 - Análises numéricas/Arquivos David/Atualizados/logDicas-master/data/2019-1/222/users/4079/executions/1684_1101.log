== TEST (2019-04-26 22:21:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=int(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<0):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    faixa=int(input())
ValueError: invalid literal for int() with base 10: 'I'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:21:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=int(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<0):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    faixa=int(input())
ValueError: invalid literal for int() with base 10: 'I'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:22:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=int(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<0):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    faixa=int(input())
ValueError: invalid literal for int() with base 10: 'I'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 22:22:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=int(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<0):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- EXECUTION TIME:
0.208097
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1684/1101/main.py", line 5, in <module>
    faixa=int(input())
ValueError: invalid literal for int() with base 10: 'I'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:22:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=int(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<0):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    faixa=int(input())
ValueError: invalid literal for int() with base 10: 'I'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:23:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=float(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<0):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    faixa=float(input())
ValueError: could not convert string to float: 'I'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:24:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=float(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<0):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    faixa=float(input())
ValueError: could not convert string to float: 'I'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:26:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=float(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<0):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    faixa=float(input())
ValueError: could not convert string to float: 'I'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:27:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=float(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<0):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    faixa=float(input())
ValueError: could not convert string to float: 'I'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:28:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=float(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<=5000):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    faixa=float(input())
ValueError: could not convert string to float: 'I'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:28:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=float(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<5000):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    faixa=float(input())
ValueError: could not convert string to float: 'I'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:28:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=float(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<5000)
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
File "XXXX", line 21
    if(fixa<5000)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:28:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=float(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	 if(fixa<5000):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
File "XXXX", line 22
    preco=-1
           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:29:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
tipo=input("tipo de intalacao(R, I ou C):")
faixa=float(input("faixa de consumo:"))
if(tipo=="R"):
	if(faixa<0):
		preco=-1
	elif(faixa<=500):
		 preco=faixa*0.44
	else:
		 preco=faixa*0.65
elif(tipo=="I"):
	if(faixa<0):
		preco=-1
	elif(faixa<=1000):
		preco=feixa*0.55
	else:
		 preco=faixa*0.60
elif(tipo=="C"):
	if(fixa<0):
		preco=-1
	elif(faixa<=5000):
		 preco=feixa*0.55
	else:
		 preco=faixa*0.60
else:
	 preco=-1
print(preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    faixa=float(input())
ValueError: could not convert string to float: 'I'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 18:55:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=input("tipo de intalacao(R, I ou C):")
y=float(input("faixa de consumo:"))
print("Entrada:" x, "kWh e tipo", y.upper())
if(x and x<= 500 and y.upper()=="R"):
	z= x*0.44
	print("valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C")
	z=x*0.60
	print("valor total: R$",round(z,2))
elif(x>0 and x<= 500 and y.upper()=="I"):
	z=x*0.55
	print("valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 6
    print("Entrada:" x, "kWh e tipo", y.upper())
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 18:57:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entrada:" x, "kWh e tipo", y.upper())
if(x and x<= 500 and y.upper()=="R"):
	z= x*0.44
	print("valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C")
	z=x*0.60
	print("valor total: R$",round(z,2))
elif(x>0 and x<= 500 and y.upper()=="I"):
	z=x*0.55
	print("valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 6
    print("Entrada:" x, "kWh e tipo", y.upper())
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 18:57:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entradas:" x, "kWh e tipo", y.upper())
if(x and x<= 500 and y.upper()=="R"):
	z= x*0.44
	print("valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C")
	z=x*0.60
	print("valor total: R$",round(z,2))
elif(x>0 and x<= 500 and y.upper()=="I"):
	z=x*0.55
	print("valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 6
    print("Entradas:" x, "kWh e tipo", y.upper())
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 18:57:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entradas:" x, "kWh e tipo", y.upper())

if(x>0 and x<= 500 and y.upper()=="R"):
	z= x*0.44
	print("valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C")
	z=x*0.60
	print("valor total: R$",round(z,2))
elif(x>0 and x<= 500 and y.upper()=="I"):
	z=x*0.55
	print("valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 6
    print("Entradas:" x, "kWh e tipo", y.upper())
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 19:02:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entradas:" x, "kWh e tipo", y.upper())

if(x>0 and x<= 500 and y.upper()=="R"):
	z= x*0.44
	print("Valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C")
	z=x*0.60
	print("Valor total: R$",round(z,2))
elif(x>0 and x<= 500 and y.upper()=="I"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("Valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 6
    print("Entradas:" x, "kWh e tipo", y.upper())
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 19:02:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entradas:" x, "kWh e tipo" y.upper())

if(x>0 and x<= 500 and y.upper()=="R"):
	z= x*0.44
	print("Valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C")
	z=x*0.60
	print("Valor total: R$",round(z,2))
elif(x>0 and x<= 500 and y.upper()=="I"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("Valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 6
    print("Entradas:" x, "kWh e tipo" y.upper())
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 19:04:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entradas:", x, "kWh e tipo", y.upper())

if(x>0 and x<= 500 and y.upper()=="R"):
	z= x*0.44
	print("Valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C")
	z=x*0.60
	print("Valor total: R$",round(z,2))
elif(x>0 and x<= 500 and y.upper()=="I"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("Valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 17
    elif(x>1000 and y.upper()=="C")
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-03 19:05:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entradas:", x, "kWh e tipo", y.upper())

if(x>0 and x<= 500 and y.upper()=="R"):
	z= x*0.44
	print("Valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C")
	z=x*0.60
	print("Valor total: R$",round(z,2))
elif(x>0 and x<= 500 and y.upper()=="I"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("Valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 17
    elif(x>1000 and y.upper()=="C")
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-20 13:53:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entradas:", x,"kWh e tipo", y.upper())

if(x>0 and x<=500 and y.upper()=="R"):
	z=x*0.44
	print("Valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C")
	z=x*0.60
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=5000 and y.upper()=="I"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("Valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 17
    elif(x>1000 and y.upper()=="C")
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-20 13:54:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entradas:", x,"kWh e tipo", y.upper())

if(x>0 and x<=500 and y.upper()=="R"):
	z=x*0.44
	print("Valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C"):
	z=x*0.60
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=5000 and y.upper()=="I"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("Valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-20 13:55:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entradas:", x,"kWh e tipo", y.upper())

if(x>0 and x<=500 and y.upper()=="R"):
	z=x*0.44
	print("Valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C"):
	z=x*0.60
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=5000 and y.upper()=="I"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("Valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.841892
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-20 14:02:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entradas:", x,"kWh e tipo", y.upper())

if(x>0 and x<=500 and y.upper()=="R"):
	z=x*0.44
	print("Valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C"):
	z=x*0.60
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=5000 and y.upper()=="I"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("Valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-20 14:03:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(":"))
y=input(":")
print("Entradas:", x,"kWh e tipo", y.upper())

if(x>0 and x<=500 and y.upper()=="R"):
	z=x*0.44
	print("Valor total: R$",round(z,2))
elif(x>500 and y.upper()=="R"):
	z=x*0.65
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=1000 and y.upper()=="C"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>1000 and y.upper()=="C"):
	z=x*0.60
	print("Valor total: R$",round(z,2))
elif(x>0 and x<=5000 and y.upper()=="I"):
	z=x*0.55
	print("Valor total: R$",round(z,2))
elif(x>5000 and y.upper()=="I"):
	z=x*0.60
	print("Valor total: R$",round(z,2))

else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.785315
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
