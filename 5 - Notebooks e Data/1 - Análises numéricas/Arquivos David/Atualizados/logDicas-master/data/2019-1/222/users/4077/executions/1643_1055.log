== TEST (2019-04-10 02:48:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v = float(input("velocidade: "))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(S)
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:49:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v = float(input("velocidade: "))
a = radians(float(input("angulo com o solo: ")))



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(S)
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:51:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v = float(input("velocidade: "))
a = radians(float(input("angulo com o solo: ")))
D = float(input("distancia passaro e porco: "))
g = 9.8
R = ((v ** 2) * sin(2 * a)) / g




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(S)
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:52:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v = float(input("velocidade: "))
a = radians(float(input("angulo com o solo: ")))
D = float(input("distancia passaro e porco: "))
g = 9.8
R = ((v ** 2) * sin(2 * a)) / g

if (abs(R - D) <= 0.1):
	print("1")
else:
	print("0")




-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 02:53:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v = float(input("velocidade: "))
a = radians(float(input("angulo com o solo: ")))
D = float(input("distancia passaro e porco: "))
g = 9.8
R = ((v ** 2) * sin(2 * a)) / g

if (abs(R - D) <= 0.1):
	print("sim")
else:
	print("nao")




-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 02:53:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v = float(input("velocidade: "))
a = radians(float(input("angulo com o solo: ")))
D = float(input("distancia passaro e porco: "))
g = 9.8
R = ((v ** 2) * sin(2 * a)) / g

if (abs(R - D) <= 0.1):
	print("sim")
else:
	print("nao")




-- EXECUTION TIME:
0.121106
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
