== SUBMITION (2019-04-15 16:11:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import
v=float(input('velocidade inicial:'))
a=radians(float(input('angulo de tiro:')))
d=float(input('valor da distancia:'))
r=((v**2)*sin(2*a))/9*8
p=d-r
if(abs(p))<0.1:
	print('sim')
else:
	print('nao')
-- EXECUTION TIME:
0.126761
-- ERROR:
  File "/home/codebench/codes/1643/1055/main.py", line 4
    from math import
                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:12:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import
v=float(input('velocidade inicial:'))
a=radians(float(input('angulo de tiro:')))
d=float(input('valor da distancia:'))
r=((v**2)*sin(2*a))/9*8
p=d-r
if(abs(p)<0.1):
	print('sim')
else:
	print('nao')
-- EXECUTION TIME:
0.207707
-- ERROR:
  File "/home/codebench/codes/1643/1055/main.py", line 4
    from math import
                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:12:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import
v=float(input('velocidade inicial:'))
a=radians(float(input('angulo de tiro:')))
d=float(input('valor da distancia:'))
r=((v**2)*sin(2*a))/9*8
p=d-r
if(abs(p)<0.1):
	print('sim')
else:
	print('nao')
-- EXECUTION TIME:
0.217005
-- ERROR:
  File "/home/codebench/codes/1643/1055/main.py", line 4
    from math import
                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:12:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import
v=float(input('velocidade inicial:'))
a=radians(float(input('angulo de tiro:')))
d=float(input('valor da distancia:'))
r=((v**2)*sin(2*a))/9*8
p=d-r
if(abs(p)<0.1):
	print('sim')
else:
	print('nao')
-- ERROR:
File "XXXX", line 4
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:13:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v=float(input('velocidade inicial:'))
a=radians(float(input('angulo de tiro:')))
d=float(input('valor da distancia:'))
r=((v**2)*sin(2*a))/9*8
p=d-r
if(abs(p)<0.1):
	print('sim')
else:
	print('nao')
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:13:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v=float(input('velocidade inicial:'))
a=radians(float(input('angulo de tiro:')))
d=float(input('valor da distancia:'))
r=((v**2)*sin(2*a))/9*8
p=d-r
if(abs(p)<0.1):
	print('sim')
else:
	print('nao')
-- EXECUTION TIME:
0.137301
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:14:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v=float(input('velocidade inicial:'))
a=radians(float(input('angulo de tiro:')))
d=float(input('valor da distancia:'))
r=((v**2)*sin(2*a))/9.8
p=d-r
if(abs(p)<0.1):
	print('sim')
else:
	print('nao')
-- EXECUTION TIME:
0.158576
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
