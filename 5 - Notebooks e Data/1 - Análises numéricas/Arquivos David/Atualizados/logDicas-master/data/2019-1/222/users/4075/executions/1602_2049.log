== TEST (2019-03-25 19:12:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (x/y)
print( total//, 17%2 )
-- ERROR:
File "XXXX", line 7
    print( total//, 17%2 )
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:13:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (x/y)
print( total// 17%2 )
-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:13:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (x/y)
print( total// 17%2 )
-- EXECUTION TIME:
0.174657
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
0.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:13:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (x/y)
print( total//1, 17%2 )
-- OUTPUT:
8.0 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:13:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (x/y)
print( total//1, 17%2 )
-- EXECUTION TIME:
0.147757
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0 1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
8.0 1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
8.0 1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:16:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (17/2)
quo= (17//2)
resto= (17%2)
print= (total, quo, resto)
-- OUTPUT:
8.0 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:16:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (17/2)
quo= (17//2)
resto= (17%2)
print= (total, quo, resto)
-- EXECUTION TIME:
0.169756
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:

-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:

-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:16:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (17/2)
quo= (17//2)
resto= (17%2)
print= (total, quo, resto)
-- OUTPUT:
8.0 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:16:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (17/2)
quo= (17//2)
resto= (17%2)
print= (total, quo, resto)
-- EXECUTION TIME:
0.196592
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:

-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:

-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:16:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (17/2)
quo= (17//2)
resto= (17%2)
print= (total, quo, resto)
-- OUTPUT:
8.0 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:17:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (17/2)
quo= (17//2)
resto= (17%2)
print= (*total, quo, resto*)
-- ERROR:
File "XXXX", line 9
    print= (*total, quo, resto*)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:17:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (17/2)
quo= (17//2)
resto= (17%2)
print= ( *total, quo, resto* )
-- ERROR:
File "XXXX", line 9
    print= ( *total, quo, resto* )
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:17:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (17/2)
quo= (17//2)
resto= (17%2)
print= ( *total, quo, resto* )
-- ERROR:
File "XXXX", line 9
    print= ( *total, quo, resto* )
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:17:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (17/2)
quo= (17//2)
resto= (17%2)
print= ( * total, quo, resto * )
-- ERROR:
File "XXXX", line 9
    print= ( * total, quo, resto * )
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:17:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (17/2)
quo= (17//2)
resto= (17%2)
print= ( * total, quo, resto * )
-- EXECUTION TIME:
0.213375
-- ERROR:
  File "/home/codebench/codes/1602/2049/main.py", line 9
    print= ( * total, quo, resto * )
                                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:17:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= (17/2)
quo= (17//2)
resto= (17%2)
print= ( * total, quo, resto * )
-- ERROR:
File "XXXX", line 9
    print= ( * total, quo, resto * )
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:20:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= int((17/2))
quo= int((17//2))
resto= int((17%2))
print= ( * total, quo, resto * )
-- ERROR:
File "XXXX", line 9
    print= ( * total, quo, resto * )
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:21:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= int((17/2))
quo= int((17//2))
resto= int((17%2))
print= (*total// quo% resto)
-- ERROR:
File "XXXX", line 9
    print= (*total// quo% resto)
           ^
SyntaxError: can't use starred expression here
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:21:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=17
y=2
total= int((17/2))
quo= int((17//2))
resto= int((17%2))
print= (*total// quo% resto*)
-- ERROR:
File "XXXX", line 9
    print= (*total// quo% resto*)
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:37:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
varA= int(input("quanto vale x:"))
varB= int(input("quanto vale y:"))
print(varA)
print(varB)
print(varA//varB)
print(varA%varB)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 23:38:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
varA= int(input("quanto vale x:"))
varB= int(input("quanto vale y:"))
print(varA)
print(varB)
print(varA//varB)
print(varA%varB)
-- EXECUTION TIME:
0.161958
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
