== TEST (2019-04-01 19:21:14) 
-- CODE:
from math import *

h = float(int("haltura:"))

g = 9,81

v = sqrt(2*g*h)
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    h = float(int("haltura:"))
ValueError: invalid literal for int() with base 10: 'haltura:'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:21:51) 
-- CODE:
from math import *

h = float(input("haltura:"))

g = 9,81

v = sqrt(2*g*h)
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    v = sqrt(2*g*h)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:23:38) 
-- CODE:
from math import *

h = float(input("haltura:"))

g = 9,81

v = str(2*g*h)
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    v = str(2*g*h)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:26:11) 
-- CODE:
from math import *

h = float(input("haltura:"))

g = 9,81

v = sqrt(2*g*h)
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    v = sqrt(2*g*h)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:26:36) 
-- CODE:
from math import *

h = float(input("haltura:"))

g = 9.81

v = sqrt(2*g*h)
print(v)
-- OUTPUT:
54.753410852658305
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:26:43) 
-- CODE:
from math import *

h = float(input("haltura:"))

g = 9.81

v = sqrt(2*g*h)
print(v)
-- EXECUTION TIME:
0.124023
-- TEST CASE 1:
---- input:
152.8
---- correct output:
54.753410852658305
---- user output:
54.753410852658305
-- TEST CASE 2:
---- input:
325.3
---- correct output:
79.8898366502273
---- user output:
79.8898366502273
-- TEST CASE 3:
---- input:
12.7
---- correct output:
15.785246276190943
---- user output:
15.785246276190943
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
