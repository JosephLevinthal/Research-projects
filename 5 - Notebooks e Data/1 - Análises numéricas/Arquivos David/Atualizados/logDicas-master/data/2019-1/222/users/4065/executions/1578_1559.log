== TEST (2019-03-12 16:12:30) 
-- CODE:
frase = "ada lovelace foi a primeira programadora da historia"
print((.upper)frase.???)
-- ERROR:
File "XXXX", line 2
    print((.upper)frase.???)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-12 16:12:43) 
-- CODE:
frase = "ada lovelace foi a primeira programadora da historia"
print((.upper)frase.???))
-- ERROR:
File "XXXX", line 2
    print((.upper)frase.???))
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-12 16:12:45) 
-- CODE:
frase = "ada lovelace foi a primeira programadora da historia"
print((.upper)frase.???))
-- EXECUTION TIME:
0.233981
-- ERROR:
  File "/home/codebench/codes/1578/1559/main.py", line 2
    print((.upper)frase.???))
           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-12 16:12:45) 
-- CODE:
frase = "ada lovelace foi a primeira programadora da historia"
print((.upper)frase.???))
-- ERROR:
File "XXXX", line 2
    print((.upper)frase.???))
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-12 16:22:10) 
-- CODE:
frase = "ada lovelace foi a primeira programadora da historia"
print(frase.upper???)

-- ERROR:
File "XXXX", line 2
    print(frase.upper???)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-12 16:22:19) 
-- CODE:
frase = "ada lovelace foi a primeira programadora da historia"
print(frase.upper)

-- OUTPUT:
<built-in method upper of str object at 0x7f65480a89f0>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-12 16:27:00) 
-- CODE:
frase = "ada lovelace foi a primeira programadora da historia"
print(frase.upper())
-- OUTPUT:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-12 16:27:06) 
-- CODE:
frase = "ada lovelace foi a primeira programadora da historia"
print(frase.upper())
-- EXECUTION TIME:
0.136252
-- TEST CASE 1:
---- input:
nonono
---- correct output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
---- user output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-12 16:27:11) 
-- CODE:
frase = "ada lovelace foi a primeira programadora da historia"
print(frase.upper())
-- OUTPUT:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-12 16:27:15) 
-- CODE:
frase = "ada lovelace foi a primeira programadora da historia"
print(frase.upper())
-- EXECUTION TIME:
0.132687
-- TEST CASE 1:
---- input:
nonono
---- correct output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
---- user output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-12 16:27:44) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia"
print(frase.upper())
-- OUTPUT:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-12 16:27:51) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia"
print(frase.upper())
-- EXECUTION TIME:
0.19262
-- TEST CASE 1:
---- input:
nonono
---- correct output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
---- user output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-12 16:28:00) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia."
print(frase.upper())
-- OUTPUT:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-12 16:28:02) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia."
print(frase.upper())
-- EXECUTION TIME:
0.134292
-- TEST CASE 1:
---- input:
nonono
---- correct output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
---- user output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-12 16:28:20) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia."
print(frase.upper())
-- OUTPUT:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-12 16:28:59) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia."
print(frase.upper())
-- OUTPUT:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-12 16:29:02) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia."
print(frase.upper())
-- EXECUTION TIME:
0.165273
-- TEST CASE 1:
---- input:
nonono
---- correct output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
---- user output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-13 19:16:56) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia."
print(frase.upper())
-- EXECUTION TIME:
0.303901
-- TEST CASE 1:
---- input:
nonono
---- correct output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
---- user output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 12:13:00) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia."
print(frase.upper())
-- OUTPUT:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 12:13:02) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia."
print(frase.upper())
-- EXECUTION TIME:
0.154469
-- TEST CASE 1:
---- input:
nonono
---- correct output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
---- user output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
