== TEST (2019-04-08 19:22:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("Digite sua idade: "))
y = int(input("Digite sua idade: "))

if((2*x)+y == 3):
	
	mensagem="ponto pertence a reta" 
	
else:
	
	mensagem="ponto nao pertence a reta"
	
print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 19:23:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("Digite x: "))
y = int(input("Digite y: "))

if((2*x)+y == 3):
	
	mensagem="ponto pertence a reta" 
	
else:
	
	mensagem="ponto nao pertence a reta"
	
print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 19:23:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("Digite x: "))
y = int(input("Digite y: "))

if((2*x)+y == 3):
	
	mensagem="ponto pertence a reta" 
	
else:
	
	mensagem="ponto nao pertence a reta"
	
print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 19:23:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("Digite x: "))
y = int(input("Digite y: "))

if((2*x)+y == 3):
	
	mensagem="ponto pertence a reta" 
	
else:
	
	mensagem="ponto nao pertence a reta"
	
print(mensagem)
-- EXECUTION TIME:
0.140586
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
