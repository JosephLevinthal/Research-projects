== TEST (2019-06-04 11:49:12) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
   if vet[i]%2 == 0
		npar += 1
	i += 1

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 != 0):
         nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 11
    if vet[i]%2 == 0
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:49:51) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
   if vet[i]%2 == 0:
		npar += 1
	i += 1

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 != 0):
         nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    npar += 1
            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:52:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	if vet[i]%2 == 0:
		npar += 1
	i += 1

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 != 0):
         nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 16
    for elemento in vet:
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:52:48) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	if vet[i]%2 == 0:
		npar += 1
	i += 1

   # Conta quantidade de elementos pares
for elemento in vet:
    if (elemento % 2 != 0):
    	nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 21
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:53:12) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	if vet[i]%2 == 0:
		npar += 1
	i += 1

   # Conta quantidade de elementos pares
for elemento in vet:
    if (elemento % 2 != 0):
    	nimpar = nimpar + 1

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:53:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	if vet[i]%2 == 0:
		npar += 1
	i += 1

   # Conta quantidade de elementos pares
for elemento in vet:
    if (elemento % 2 != 0):
    	nimpar = nimpar + 1

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:53:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	if vet[i]%2 == 0:
		npar += 1
	i += 1

   # Conta quantidade de elementos pares
for elemento in vet:
    if (elemento % 2 != 0):
    	nimpar = nimpar + 1

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-04 11:53:48) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	if vet[i]%2 == 0:
		npar += 1
	i += 1

   # Conta quantidade de elementos pares
for elemento in vet:
    if (elemento % 2 != 0):
    	nimpar = nimpar + 1

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.19729
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-04 11:56:54) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
		for i in vet:
			if vet[i] % 2 == 0:
				npar += 1

   # Conta quantidade de elementos pares
		for elemento in vet:
    		if (elemento % 2 != 0):
    			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
0.769038
-- ERROR:
  File "/home/codebench/codes/1800/2562/main.py", line 17
    if (elemento % 2 != 0):
                          ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:56:56) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
		for i in vet:
			if vet[i] % 2 == 0:
				npar += 1

   # Conta quantidade de elementos pares
		for elemento in vet:
    		if (elemento % 2 != 0):
    			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 17
    if (elemento % 2 != 0):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:57:32) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
		for i in vet:
			if i % 2 == 0:
				npar += 1

   # Conta quantidade de elementos pares
		for elemento in vet:
    		if (elemento % 2 != 0):
    			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 17
    if (elemento % 2 != 0):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:20:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
		for i in vet:
			if i % 2 == 0:
				npar += 1

   # Conta quantidade de elementos pares
		for elemento in vet:
    		if (elemento % 2 != 0):
    			nimpar += 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 17
    if (elemento % 2 != 0):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:21:37) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	for i in vet:
		if i % 2 == 0:
				npar += 1

   # Conta quantidade de elementos pares
	for elemento in vet:
    	if (elemento % 2 != 0):
    			nimpar += 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 17
    if (elemento % 2 != 0):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:23:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	for i in vet:
		if i % 2 == 0:
			npar += 1

   # Conta quantidade de elementos pares
	for elemento in vet:
    	if (elemento % 2 != 0):
    		nimpar += 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 17
    if (elemento % 2 != 0):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:25:31) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	 for i in vet:
		if i % 2 == 0:
			npar += 1

   # Conta quantidade de elementos pares
	 for elemento in vet:
    	if (elemento % 2 != 0):
    		nimpar += 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if i % 2 == 0:
                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	for i in vet:
		if i % 2 == 0:
			npar += 1

   # Conta quantidade de elementos pares
	for elemento in vet:
    	if (elemento % 2 != 0):
			nimpar += 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 17
    if (elemento % 2 != 0):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:28:08) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	for i in vet:
		if i % 2 == 0:
			npar += 1

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 != 0):
			nimpar += 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:36:26) 
-- CODE:
from numpy import*
a = v[]
# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
j = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	for i in vet:
		if i % 2 == 0:
			npar += 1

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 != 0):
			nimpar += 1

   # No. de elementos pares
	v[j] = npar

   # No. de elementos impares
	v[j+1] = nimpar

   # No. total de elementos
	v[j+2] = size(vet)
	j+= 3
   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))
for i in v:
	print(i)
-- ERROR:
File "XXXX", line 2
    a = v[]
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:50:04) 
-- CODE:
from numpy import*
a = array([])
# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
j = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	for i in vet:
		if i % 2 == 0:
			npar += 1

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 != 0):
			nimpar += 1

   # No. de elementos pares
	append(a, npar)

   # No. de elementos impares
	append(a, nimpar)

   # No. total de elementos
	append(size(vet))
   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))
for i in a:
	print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:50:30) 
-- CODE:
from numpy import*
a = array([])
# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
j = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	for i in vet:
		if i % 2 == 0:
			npar += 1

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 != 0):
			nimpar += 1

   # No. de elementos pares
	append(a, npar)

   # No. de elementos impares
	append(a, nimpar)

   # No. total de elementos
	append(a, size(vet))
   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))
for i in a:
	print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:50:59) 
-- CODE:
from numpy import*
a = array([])
# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
j = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	for i in vet:
		if i % 2 == 0:
			npar += 1

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 != 0):
			nimpar += 1

   # No. de elementos pares
	append(a, npar)

   # No. de elementos impares
	append(a, nimpar)

   # No. total de elementos
	append(a, size(vet))
   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))
for i in a:
	print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:55:09) 
-- CODE:
from numpy import*
a = array([])
# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
j = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	for i in vet:
		if i % 2 == 0:
			npar += 1

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 != 0):
			nimpar += 1

   # No. de elementos pares
	append(a, npar)

   # No. de elementos impares
	append(a, nimpar)

   # No. total de elementos
	append(a, size(vet))
   # Leitura do proximo vetor
	i = 1
	vet = array(eval(input("Proximo vetor: ")))
for i in a:
	print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:55:33) 
-- CODE:
from numpy import*
a = array([])
# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	for i in vet:
		if i % 2 == 0:
			npar += 1

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 != 0):
			nimpar += 1

   # No. de elementos pares
	append(a, npar)

   # No. de elementos impares
	append(a, nimpar)

   # No. total de elementos
	append(a, size(vet))
   # Leitura do proximo vetor
	i = 1
	vet = array(eval(input("Proximo vetor: ")))
for i in a:
	print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:56:21) 
-- CODE:
from numpy import*
a = array([])
# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimpar = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	for i in vet:
		if i % 2 == 0:
			npar += 1

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 != 0):
			nimpar += 1

   # No. de elementos pares
	append(a, npar)

   # No. de elementos impares
	append(a, nimpar)

   # No. total de elementos
	append(a, size(vet))
   # Leitura do proximo vetor
	i = 1
	vet = array(eval(input("Proximo vetor: ")))
for i in a:
	print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 11:01:30) 
-- CODE:
from numpy import*
vet = array(eval(input('v: ')))

while size(vet) > 1:
	npar = 0
	for element in vet:
		if element % 2 == 0:
			npar += 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input('v: ')))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 11:01:30) 
-- CODE:
from numpy import*
vet = array(eval(input('v: ')))

while size(vet) > 1:
	npar = 0
	for element in vet:
		if element % 2 == 0:
			npar += 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input('v: ')))
	
-- EXECUTION TIME:
1.07427
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
v: 8
10
18
v: 2
2
4
v:
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 11:01:35) 
-- CODE:
from numpy import*
vet = array(eval(input('v: ')))

while size(vet) > 1:
	npar = 0
	for element in vet:
		if element % 2 == 0:
			npar += 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input('v: ')))
	
-- EXECUTION TIME:
0.945647
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
