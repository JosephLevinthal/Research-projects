== SUBMITION (2019-04-25 10:23:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a<0 or b<0 or c<0 or (a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles"):
else:
	 print("escaleno")
-- EXECUTION TIME:
0.154967
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 7
    if (a<0 or b<0 or c<0 or (a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b):
                                                                                                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:23:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a<0 or b<0 or c<0 or (a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles"):
else:
	 print("escaleno")
-- ERROR:
File "XXXX", line 7
    if (a<0 or b<0 or c<0 or (a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b):
                                                                                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:24:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a<0 or b<0 or c<0 or (a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b)):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles"):
else:
	 print("escaleno")
-- EXECUTION TIME:
0.183278
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 12
    print("isoceles"):
                     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:24:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a<0 or b<0 or c<0 or (a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b)):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles"):
else:
	 print("escaleno")
-- ERROR:
File "XXXX", line 12
    print("isoceles"):
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:24:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a<0 or b<0 or c<0 or (a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b)):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- EXECUTION TIME:
0.1301
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:24:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a<0 or b<0 or c<0 or (a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b)):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:25:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a<0 or b<0 or c<0 or (a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b)):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:25:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a<0 or b<0 or c<0 or (a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b)):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:26:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a<0 or b<0 or c<0 or (a>b and a>c and a<b+c) or (b>a and b>c and b<a+c) or (c>a and c>b and c<a+b)):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:27:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a<0 or b<0 or c<0 or !(a>b and a>c and a<b+c) or !(b>a and b>c and b<a+c) or !(c>a and c>b and c<a+b)):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- EXECUTION TIME:
0.123584
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 9
    if (a<0 or b<0 or c<0 or !(a>b and a>c and a<b+c) or !(b>a and b>c and b<a+c) or !(c>a and c>b and c<a+b)):
                             ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:27:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a<0 or b<0 or c<0 or !(a>b and a>c and a<b+c) or !(b>a and b>c and b<a+c) or !(c>a and c>b and c<a+b)):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- ERROR:
File "XXXX", line 9
    if (a<0 or b<0 or c<0 or !(a>b and a>c and a<b+c) or !(b>a and b>c and b<a+c) or !(c>a and c>b and c<a+b)):
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:29:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a<0 or b<0 or c<0 or not(a>b and a>c and a<b+c) or not(b>a and b>c and b<a+c) or not(c>a and c>b and c<a+b)):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:29:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a<0 or b<0 or c<0 or not(a>b and a>c and a<b+c) or not(b>a and b>c and b<a+c) or not(c>a and c>b and c<a+b)):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- EXECUTION TIME:
0.133173
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:30:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a<0 or b<0 or c<0 or (not(a>b and a>c and a<b+c)) or (not(b>a and b>c and b<a+c)) or (not(c>a and c>b and c<a+b))):
	 print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:31:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("invalido")
elif not(a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b):
	print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- EXECUTION TIME:
0.147327
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:31:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("invalido")
elif not(a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b):
	print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:31:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("invalido")
elif not(a>b and a>c and a<b+c)or(b>a and b>c and b<a+c)or(c>a and c>b and c<a+b):
	print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:31:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("invalido")
elif (a>b and a>c and a>b+c)or(b>a and b>c and b>a+c)or(c>a and c>b and c>a+b):
	print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:32:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("invalido")
elif (a>b and a>c and a>b+c)or(b>a and b>c and b>a+c)or(c>a and c>b and c>a+b):
	print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:32:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("invalido")
elif (a>b and a>c and a>b+c)or(b>a and b>c and b>a+c)or(c>a and c>b and c>a+b):
	print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:32:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("invalido")
elif (a>b and a>c and a>b+c)or(b>a and b>c and b>a+c)or(c>a and c>b and c>a+b):
	print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:32:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("invalido")
elif (a>b and a>c and a>b+c)or(b>a and b>c and b>a+c)or(c>a and c>b and c>a+b):
	print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- EXECUTION TIME:
0.206845
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:32:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("invalido")
elif (a>b and a>c and a>b+c)or(b>a and b>c and b>a+c)or(c>a and c>b and c>a+b):
	print("invalido")
elif a==b==c:
	print("equilatero")
elif a==b or a==c or b==c:
	 print("isoceles")
else:
	 print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:33:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("Tipo de triangulo: invalido")
elif (a>b and a>c and a>b+c)or(b>a and b>c and b>a+c)or(c>a and c>b and c>a+b):
	print("Tipo de triangulo: invalido")
elif a==b==c:
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	 print("Tipo de triangulo: isoceles")
else:
	 print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.190806
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:34:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("Tipo de triangulo: invalido")
elif (a>b and a>c and a>b+c)or(b>a and b>c and b>a+c)or(c>a and c>b and c>a+b):
	print("Tipo de triangulo: invalido")
elif a==b==c:
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	 print("Tipo de triangulo: isosceles")
else:
	 print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.214427
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:42:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0:
	print("Tipo de triangulo: invalido")
elif (a>b+c)or(b>a+c)or(c>a+b):
	print("Tipo de triangulo: invalido")
elif a==b==c:
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	 print("Tipo de triangulo: isosceles")
else:
	 print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.162534
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:43:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if a<0 or b<0 or c<0 or (a>b+c)or(b>a+c)or(c>a+b):
	print("Tipo de triangulo: invalido")
elif a==b==c:
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	 print("Tipo de triangulo: isosceles")
else:
	 print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.129528
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
