== TEST (2019-03-21 18:54:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
comprados = float(input(" Digite quantos litros foram comprados: "))
doacao = (2 * comprados) / 3
ficara = (1 * comprados) / 3
-- OUTPUT:
618.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 18:54:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
comprados = float(input(" Digite quantos litros foram comprados: "))
doacao = (2 * comprados) / 3
ficara = (1 * comprados) / 3
-- EXECUTION TIME:
0.153545
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:

-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:

-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 18:57:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao = (2 * comprados) / 3
ficara = round( comprados , 3)
-- OUTPUT:
618.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 18:57:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao = (2 * comprados) / 3
ficara = round( comprados , 3)
-- EXECUTION TIME:
0.166222
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:

-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:

-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 18:58:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao = (2 * comprados) / 3
ficara = print(round( comprados , 3))
-- OUTPUT:
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 18:58:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao = (2 * comprados) / 3
ficara = print(round( comprados , 3))
-- OUTPUT:
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:00:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = float(input(" Digite  quantos litros foram comprados: ")) 
doacao = (2 * comprados) / 3
ficara = print(round( comprados , 3))
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:00:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao = (2 * comprados) / 3
ficara = print(round( comprados , 3))
-- OUTPUT:
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:00:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao = (2 * comprados) / 3
ficara = print(round( doacao , 3))
-- OUTPUT:
4.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:01:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao = (2 * comprados) / 3
ficara = print(round( doacao , 3))
-- EXECUTION TIME:
0.20507
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
4.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:

-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
10.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:01:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao = (2 * comprados) / 3
ficara = print(round( doacao , 3))
-- OUTPUT:
4.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:01:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao = (2 * comprados) / 3
ficara = print(round( doacao , 3))
-- OUTPUT:
4.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:01:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao = (2 * comprados) / 3
ficara = print(round( doacao , 3))
-- EXECUTION TIME:
0.186529
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
4.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:

-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
10.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:01:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao =  comprados / 3
ficara = print(round( doacao , 3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:02:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao =  comprados / 3
ficara = print(round( doacao , 3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:02:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = int(input(" Digite  quantos litros foram comprados: ")) 
doacao =  comprados / 3
ficara = print(round( doacao , 3))
-- EXECUTION TIME:
0.175586
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:

-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:02:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = float(input(" Digite  quantos litros foram comprados: ")) 
doacao =  comprados / 3
ficara = print(round( doacao , 3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:02:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprados = float(input(" Digite  quantos litros foram comprados: ")) 
doacao =  comprados / 3
ficara = print(round( doacao , 3))
-- EXECUTION TIME:
0.166853
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:24:50) 
-- CODE:
comprados = float(input(" Digite quantos litros foram comprados: "))
ficara = comprados / 3 
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:25:10) 
-- CODE:
comprados = float(input(" Digite quantos litros foram comprados: "))
ficara = comprados / 3 
print(round(ficara))
-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:25:26) 
-- CODE:
comprados = float(input(" Digite quantos litros foram comprados: "))
ficara = comprados / 3 
print(round(ficara, 3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 21:25:31) 
-- CODE:
comprados = float(input(" Digite quantos litros foram comprados: "))
ficara = comprados / 3 
print(round(ficara, 3))
-- EXECUTION TIME:
0.162444
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
