== TEST (2019-04-05 19:52:14) 
-- CODE:
senha = str(input())
for x in range 0,6:
	senha[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 2
    for x in range 0,6:
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:52:24) 
-- CODE:
senha = str(input())
for x in range (0,6):
	senha[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    senha[x] = int(senha[x])
TypeError: 'str' object does not support item assignment
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:53:27) 
-- CODE:
senha = str(input())
for x in range (0,6):
	senhaint[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    senhaint[x] = int(senha[x])
NameError: name 'senhaint' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:53:46) 
-- CODE:
senha = str(input())
senhaint[6]
for x in range (0,6):
	senhaint[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    senhaint[6]
NameError: name 'senhaint' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:54:01) 
-- CODE:
senha = str(input())
int senhaint[6]
for x in range (0,6):
	senhaint[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 2
    int senhaint[6]
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:54:21) 
-- CODE:
senha = str(input())
str senhaint[6]
for x in range (0,6):
	senhaint[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 2
    str senhaint[6]
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:54:31) 
-- CODE:
senha = str(input())
str = senhaint[6]
for x in range (0,6):
	senhaint[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    str = senhaint[6]
NameError: name 'senhaint' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:54:57) 
-- CODE:
senha = str(input())
for x in range (0,6):
	senhaint[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    senhaint[x] = int(senha[x])
NameError: name 'senhaint' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:55:10) 
-- CODE:
senha = str(input())
for x in range (0,6):
	senha[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    senha[x] = int(senha[x])
TypeError: 'str' object does not support item assignment
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:55:22) 
-- CODE:
senha = str(input())
for x in range (0,6):
	senha[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    senha[x] = int(senha[x])
TypeError: 'str' object does not support item assignment
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:57:14) 
-- CODE:
import string
senha = str(input())
for x in range (0,6):
	senha[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    senha[x] = int(senha[x])
TypeError: 'str' object does not support item assignment
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:59:47) 
-- CODE:
senha = str(input())
for x in senha:
	senha2[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    senha2[x] = int(senha[x])
TypeError: string indices must be integers
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:00:42) 
-- CODE:
senha = str(input())
for x in senha:
	senha2[x] = int(senha[x])
	x++
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 4
    x++
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:05:56) 
-- CODE:
senha[] = str(input())
for x in senha:
	senha2[x] = int(senha[x])
	x++
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 1
    senha[] = str(input())
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:06:07) 
-- CODE:
senha[6] = str(input())
for x in senha:
	senha2[x] = int(senha[x])
	x++
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 4
    x++
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:06:15) 
-- CODE:
senha[6] = str(input())
for x in senha:
	senha2[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    senha[6] = str(input())
NameError: name 'senha' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:06:29) 
-- CODE:
senha[] = str(input())
for x in senha:
	senha2[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 1
    senha[] = str(input())
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:06:53) 
-- CODE:
senha = str(input())
senha2[] = 0 
for x in senha:
	senha2[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 2
    senha2[] = 0 
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:07:00) 
-- CODE:
senha = str(input())
senha2[] 
for x in senha:
	senha2[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 2
    senha2[] 
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:09:14) 
-- CODE:
senha = str(input())
str senha 
for x in senha:
	senha2[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 2
    str senha 
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:09:20) 
-- CODE:
senha = str(input())
str senha[] 
for x in senha:
	senha2[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 2
    str senha[] 
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:09:38) 
-- CODE:
senha = str(input())
senha2[0,0,0,0,0,0] 
for x in senha:
	senha2[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    senha2[0,0,0,0,0,0] 
NameError: name 'senha2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:11:57) 
-- CODE:
senha = str(input())
global senha2
for x in senha:
	senha2[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    senha2[x] = int(senha[x])
TypeError: string indices must be integers
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:12:20) 
-- CODE:
senha = str(input())
global senha2
x = 0
for x in senha:
	senha2[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    senha2[x] = int(senha[x])
TypeError: string indices must be integers
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:12:45) 
-- CODE:
senha = str(input())
global senha2
x = 0
for x in range(0,6):
	senha2[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    senha2[x] = int(senha[x])
NameError: name 'senha2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:13:01) 
-- CODE:
senha = str(input())
x = 0
for x in range(0,6):
	senha[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    senha[x] = int(senha[x])
TypeError: 'str' object does not support item assignment
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:13:13) 
-- CODE:
senha = input()
x = 0
for x in range(0,6):
	senha[x] = int(senha[x])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    senha[x] = int(senha[x])
TypeError: 'str' object does not support item assignment
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:14:11) 
-- CODE:
senha = input()
x = 0
for i in range(0,6):
	senha[i] = int(senha[i])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    senha[i] = int(senha[i])
TypeError: 'str' object does not support item assignment
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:14:22) 
-- CODE:
senha = input()
x = 0
for i in range(0,6):
	senha[i] = int(senha[i])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    senha[i] = int(senha[i])
TypeError: 'str' object does not support item assignment
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:14:49) 
-- CODE:
senha = input()
i = 0
for i in range(0,6):
	senha[i] = int(senha[i])
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    senha[i] = int(senha[i])
TypeError: 'str' object does not support item assignment
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:18:32) 
-- CODE:
senha = input()
i = 0
for i in range(0,6):
	senha[i] = int(senha[i])
	i = i + 1
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    senha[i] = int(senha[i])
TypeError: 'str' object does not support item assignment
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:19:33) 
-- CODE:
senha = [input()]
i = 0
for i in range(0,6):
	senha[i] = int(senha[i])
	i = i + 1
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    senha[i] = int(senha[i])
IndexError: list index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:19:57) 
-- CODE:
senha = []
senha = input()
i = 0
for i in range(0,6):
	senha[i] = int(senha[i])
	i = i + 1
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    senha[i] = int(senha[i])
TypeError: 'str' object does not support item assignment
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:20:16) 
-- CODE:
senha2 = []
senha = input()
i = 0
for i in range(0,6):
	senha2[i] = int(senha[i])
	i = i + 1
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    senha2[i] = int(senha[i])
IndexError: list assignment index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:20:29) 
-- CODE:
senha2 = [6]
senha = input()
i = 0
for i in range(0,6):
	senha2[i] = int(senha[i])
	i = i + 1
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    senha2[i] = int(senha[i])
IndexError: list assignment index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:21:31) 
-- CODE:
senha2 = [6]
senha = input()
i = 0
for i in range(0,6):
	if senha[i] == '/n':
		break
	senha2[i] = int(senha[i])
	i = i + 1
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    senha2[i] = int(senha[i])
IndexError: list assignment index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:22:58) 
-- CODE:
senha2 = [6]
senha = input()
i = 0
for i in range(0,6):
	if senha[i] == '\0':
		break
	senha2[i] = int(senha[i])
	i = i + 1
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    senha2[i] = int(senha[i])
IndexError: list assignment index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:23:18) 
-- CODE:
senha2 = []
senha = input()
i = 0
for i in range(0,6):
	if senha[i] == '\0':
		break
	senha2[i] = int(senha[i])
	i = i + 1
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    senha2[i] = int(senha[i])
IndexError: list assignment index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:25:46) 
-- CODE:
senha = input()
senha = [int(senha[i]) for i in senha]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    senha = [int(senha[i]) for i in senha]
  File "XXXX", line 2, in <listcomp>
    senha = [int(senha[i]) for i in senha]
TypeError: string indices must be integers
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:26:10) 
-- CODE:
senha = input()
int = i
senha = [int(senha[i]) for i in senha]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    int = i
NameError: name 'i' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:26:20) 
-- CODE:
senha = input()
int  i
senha = [int(senha[i]) for i in senha]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 2
    int  i
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:26:27) 
-- CODE:
senha = input()
i = int
senha = [int(senha[i]) for i in senha]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    senha = [int(senha[i]) for i in senha]
  File "XXXX", line 3, in <listcomp>
    senha = [int(senha[i]) for i in senha]
TypeError: string indices must be integers
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:26:52) 
-- CODE:
senha = input()
senha = [int(senha[i]) for i in range(0,6)]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:27:38) 
-- CODE:
senha = input()
senha = [int(senha[i]) for i in range(0,6)]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:27:55) 
-- CODE:
senha = input()
senha = [int(senha[i]) for i in range(0,6)]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:28:32) 
-- CODE:
senha = [0,0,0,0,0,0]
senha = input()
senha = [int(senha[i]) for i in range(0,6)]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:28:47) 
-- CODE:
senha = [0,0,0,0,0,0]
senha = append.input()
senha = [int(senha[i]) for i in range(0,6)]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    senha = append.input()
NameError: name 'append' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:29:19) 
-- CODE:
senha = [0,0,0,0,0,0]
senha = append(input())
senha = [int(senha[i]) for i in range(0,6)]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    senha = append(input())
NameError: name 'append' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:30:00) 
-- CODE:
senha = str(input())
senha = [int(senha[i]) for i in senha)]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 2
    senha = [int(senha[i]) for i in senha)]
                                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:30:31) 
-- CODE:
senha = str(input())
senha = [int(senha[i]) for i in senha]
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    senha = [int(senha[i]) for i in senha]
  File "XXXX", line 2, in <listcomp>
    senha = [int(senha[i]) for i in senha]
TypeError: string indices must be integers
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:31:20) 
-- CODE:
senha = str(input())
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:33:50) 
-- CODE:
senha = str(input())
while senha[x]!='\0'||x<6:
	if senha[x]=='\0':
		senha[x]=0
	x += 1
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 2
    while senha[x]!='\0'||x<6:
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:34:04) 
-- CODE:
senha = str(input())
while senha[x]!='\0' and x<6:
	if senha[x]=='\0':
		senha[x]=0
	x += 1
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    while senha[x]!='\0' and x<6:
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:34:19) 
-- CODE:
senha = str(input())
x=0
while senha[x]!='\0' and x<6:
	if senha[x]=='\0':
		senha[x]=0
	x += 1
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    while senha[x]!='\0' and x<6:
IndexError: string index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:34:34) 
-- CODE:
senha = str(input())
x=0
while senha[x]!='\0' and x<5:
	if senha[x]=='\0':
		senha[x]=0
	x += 1
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:34:47) 
-- CODE:
senha = str(input())
x=0
while senha[x]!='\0' or x<5:
	if senha[x]=='\0':
		senha[x]=0
	x += 1
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    while senha[x]!='\0' or x<5:
IndexError: string index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:35:30) 
-- CODE:
senha = str(input())
x=0
while x<5:
	if senha[x]=='\0':
		senha[x]=0
	x += 1
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:36:02) 
-- CODE:
senha = str(input())
x=1
while x<5:
	if senha[x]=='\0':
		senha[x]=0
	x += 1
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:36:36) 
-- CODE:
senha = str(input())
x=0
while x<5:
	if senha[x]=='\0':
		senha[x]+=0
	x += 1
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:37:07) 
-- CODE:
senha = str(input())
x=0
while x<5:
	if senha[x]=='\0':
		senha[x]=senha[x]+'0'
	x += 1
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:37:27) 
-- CODE:
senha = str(input())
x=0
while x<5:
	if senha[x+1]=='\0':
		senha[x]=senha[x]+'0'
	x += 1
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:37:56) 
-- CODE:
senha = str(input())
x=0
while x<5:
	if senha[x+1]=='\0':
		senha=senha+'0'
	x += 1
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:42:12) 
-- CODE:
senha = str(input())
x=0
senha = list(map(int, senha))
for len(senha) < 6:
	senha += 0
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 4
    for len(senha) < 6:
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:42:46) 
-- CODE:
senha = str(input())
x=0
for len(senha) in range(0,6):
	senha += 0
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- ERROR:
File "XXXX", line 3
    for len(senha) in range(0,6):
       ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:43:18) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:43:31) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:43:40) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:44:31) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
	print(senha)
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:45:46) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
	print(senha)
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print((senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4]))
else:
	print("acesso liberado")
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:47:31) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
	print(senha)
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
senha invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:47:42) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
senha invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:47:49) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
senha invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 20:50:40) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- EXECUTION TIME:
0.226411
-- TEST CASE 1:
---- input:
087612
---- correct output:
acesso liberado
---- user output:
senha invalida
-- TEST CASE 2:
---- input:
760834
---- correct output:
senha invalida
---- user output:
senha invalida
-- TEST CASE 3:
---- input:
122967
---- correct output:
acesso liberado
---- user output:
senha invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:51:01) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
senha invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:51:12) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
-- OUTPUT:
senha invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:52:32) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
for i in range(0,6):
	print(senha[i])
-- OUTPUT:
senha invalida
0
8
7
6
1
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:53:03) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
for i in range(0,6):
	print(senha[i],end)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(senha[i],end)
NameError: name 'end' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:54:08) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
for i in range(0,6):
	print(senha[i], end=' ')
-- OUTPUT:
senha invalida
0 8 7 6 1 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:54:45) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
for i in range(0,6):
	print(senha[i], "em",i,";" end=' ')
-- ERROR:
File "XXXX", line 10
    print(senha[i], "em",i,";" end=' ')
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:54:55) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida")
else:
	print("acesso liberado")
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:58:39) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida",senha[1]+senha[3]+senha[5])
else:
	print("acesso liberado")
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida 16
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:59:25) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4])
else:
	print("acesso liberado")
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida 16  e  8
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:59:38) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4])
else:
	print("acesso liberado")
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida 16  e  8
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:00:12) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
else:
	print("acesso liberado")
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida 16  e  8 = 2
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:00:47) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
else:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida 16  e  8 = 2
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:01:17) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
else:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado 16  e  8 = 2
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:01:35) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
else:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado 16  e  8 = 2
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:01:42) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])!=0:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
else:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado 16  e  8 = 2
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:02:45) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])==0 or :
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
else:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- ERROR:
File "XXXX", line 5
    if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])==0 or :
                                                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:02:54) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])==0:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
else:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado 16  e  8 = 2
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:03:06) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])==0:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
else:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado 16  e  8 = 2
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:03:45) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4])==0:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])&(senha[0]+senha[2]+senha[4]))
else:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])&(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado 16  e  8 = 0
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:04:22) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])==0:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
else:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida 16  e  8 = 2
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:04:27) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4])==0:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
else:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])//(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida 16  e  8 = 2
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:05:38) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])&(senha[0]+senha[2]+senha[4])==0:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4]))
else:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado 16  e  8 = 0
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:06:58) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])&(senha[0]+senha[2]+senha[4])==0 or (senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4]))
else:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[1]+senha[3]+senha[5])%(senha[0]+senha[2]+senha[4]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado 16  e  8 = 0
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:08:28) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])&(senha[0]+senha[2]+senha[4])==0 or (senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5]))
else:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5])
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- ERROR:
File "XXXX", line 9
    for i in range(0,6):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:08:48) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[1]+senha[3]+senha[5])&(senha[0]+senha[2]+senha[4])==0 or (senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5]))
else:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado 16  e  8 = 0
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:10:44) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5]))
else:
	print("senha invalida",senha[1]+senha[3]+senha[5]," e ",senha[0]+senha[2]+senha[4], "=",(senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado 16  e  8 = 0
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:11:48) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado")
else:
	print("senha invalida")
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:12:07) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado")
	print((senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5]))
else:
	print("senha invalida")
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado
0
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:12:40) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado")
else:
	print("senha invalida")
print((senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado
0
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:13:23) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += '0'
senha = list(map(int, senha))
if (senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado")
else:
	print("senha invalida")
print((senha[0]+senha[2]+senha[4]),(senha[1]+senha[3]+senha[5]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado
8 16
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:13:37) 
-- CODE:
senha = str(input())
while len(senha) < 7:
	senha += '0'
senha = list(map(int, senha))
if (senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado")
else:
	print("senha invalida")
print((senha[0]+senha[2]+senha[4]),(senha[1]+senha[3]+senha[5]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado
8 16
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:14:12) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += "0"
senha = list(map(int, senha))
if (senha[0]+senha[2]+senha[4])&(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado")
else:
	print("senha invalida")
print((senha[0]+senha[2]+senha[4]),(senha[1]+senha[3]+senha[5]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado
8 16
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:14:49) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += "0"
senha = list(map(int, senha))
if (senha[0]+senha[2]+senha[4])%(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado")
else:
	print("senha invalida")
#print((senha[0]+senha[2]+senha[4])%(senha[1]+senha[3]+senha[5]))
for i in range(0,6):
	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida
0 em 0 ; 8 em 1 ; 7 em 2 ; 6 em 3 ; 1 em 4 ; 2 em 5 ;
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:15:02) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += "0"
senha = list(map(int, senha))
if (senha[0]+senha[2]+senha[4])%(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado")
else:
	print("senha invalida")
#print((senha[0]+senha[2]+senha[4])%(senha[1]+senha[3]+senha[5]))
#for i in range(0,6):
#	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:15:06) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += "0"
senha = list(map(int, senha))
if (senha[0]+senha[2]+senha[4])%(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado")
else:
	print("senha invalida")
#print((senha[0]+senha[2]+senha[4])%(senha[1]+senha[3]+senha[5]))
#for i in range(0,6):
#	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:15:17) 
-- CODE:
senha = str(input())
while len(senha) < 6:
	senha += "0"
senha = list(map(int, senha))
if (senha[0]+senha[2]+senha[4])%(senha[1]+senha[3]+senha[5])==0:
	print("acesso liberado")
else:
	print("senha invalida")
#print((senha[0]+senha[2]+senha[4])%(senha[1]+senha[3]+senha[5]))
#for i in range(0,6):
#	print(senha[i], "em",i,";", end=' ')
-- OUTPUT:
senha invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:16:57) 
-- CODE:
s = str(input())
while len(s) < 6:
	s += "0"
s = list(map(int, s))
if (s[0]+s[2]+s[4])%(s[1]+s[3]+s[5])==0 or (s[1]+s[3]+s[5])%(s[0]+s[2]+s[4])==0:
	print("acesso liberado")
else:
	print("senha invalida")
#print((s[0]+s[2]+s[4])%(s[1]+s[3]+s[5]))
#for i in range(0,6):
#	print(s[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:17:02) 
-- CODE:
s = str(input())
while len(s) < 6:
	s += "0"
s = list(map(int, s))
if (s[0]+s[2]+s[4])%(s[1]+s[3]+s[5])==0 or (s[1]+s[3]+s[5])%(s[0]+s[2]+s[4])==0:
	print("acesso liberado")
else:
	print("senha invalida")
#print((s[0]+s[2]+s[4])%(s[1]+s[3]+s[5]))
#for i in range(0,6):
#	print(s[i], "em",i,";", end=' ')
-- OUTPUT:
acesso liberado
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 21:17:08) 
-- CODE:
s = str(input())
while len(s) < 6:
	s += "0"
s = list(map(int, s))
if (s[0]+s[2]+s[4])%(s[1]+s[3]+s[5])==0 or (s[1]+s[3]+s[5])%(s[0]+s[2]+s[4])==0:
	print("acesso liberado")
else:
	print("senha invalida")
#print((s[0]+s[2]+s[4])%(s[1]+s[3]+s[5]))
#for i in range(0,6):
#	print(s[i], "em",i,";", end=' ')
-- EXECUTION TIME:
0.134932
-- TEST CASE 1:
---- input:
087612
---- correct output:
acesso liberado
---- user output:
acesso liberado
-- TEST CASE 2:
---- input:
760834
---- correct output:
senha invalida
---- user output:
senha invalida
-- TEST CASE 3:
---- input:
122967
---- correct output:
acesso liberado
---- user output:
acesso liberado
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
