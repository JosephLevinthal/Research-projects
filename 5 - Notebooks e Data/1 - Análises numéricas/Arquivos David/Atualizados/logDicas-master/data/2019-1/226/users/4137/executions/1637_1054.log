== TEST (2019-04-06 19:35:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
cdx = float(input("Digite a coordenada x:"))
cdy = float(input("Digite a coordenada y:"))

if (3*cdx + cdy == 3):
	msg = "ponto pertence a reta"
else:
	msg "ponto nao pertence a reta"
-- ERROR:
File "XXXX", line 10
    msg "ponto nao pertence a reta"
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:36:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
cdx = float(input("Digite a coordenada x:"))
cdy = float(input("Digite a coordenada y:"))

if (3*cdx + cdy == 3):
	msg = "ponto pertence a reta"
else:
	msg "ponto nao pertence a reta"

print(msg)	
-- ERROR:
File "XXXX", line 10
    msg "ponto nao pertence a reta"
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:36:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
cdx = float(input("Digite a coordenada x:"))
cdy = float(input("Digite a coordenada y:"))

if (3*cdx + cdy == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"

print(msg)	
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:36:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
cdx = float(input("Digite a coordenada x:"))
cdy = float(input("Digite a coordenada y:"))

if (3*cdx + cdy == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"

print(msg)	
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:36:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
cdx = float(input("Digite a coordenada x:"))
cdy = float(input("Digite a coordenada y:"))

if (3*cdx + cdy == 3):
	msg = "ponto nao pertence a reta"
else:
	msg = "ponto pertence a reta"

print(msg)	
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:36:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
cdx = float(input("Digite a coordenada x:"))
cdy = float(input("Digite a coordenada y:"))

if (3*cdx + cdy == 3):
	msg = "ponto nao pertence a reta"
else:
	msg = "ponto pertence a reta"

print(msg)	
-- EXECUTION TIME:
0.138845
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:37:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
cdx = float(input("Digite a coordenada x:"))
cdy = float(input("Digite a coordenada y:"))

if (3*cdx + cdy == 3):
	msg = "ponto nao pertence a reta"
else:
	msg = "ponto pertence a reta"

	print(msg)	
-- EXECUTION TIME:
0.172518
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:37:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
cdx = float(input("Digite a coordenada x:"))
cdy = float(input("Digite a coordenada y:"))

if (2*cdx + cdy == 3):
	msg = "ponto nao pertence a reta"
else:
	msg = "ponto pertence a reta"

	print(msg)	
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:37:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
cdx = float(input("Digite a coordenada x:"))
cdy = float(input("Digite a coordenada y:"))

if (2*cdx + cdy == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"

print(msg)	
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
cdx = float(input("Digite a coordenada x:"))
cdy = float(input("Digite a coordenada y:"))

if (2*cdx + cdy == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"

print(msg)	
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:37:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
cdx = float(input("Digite a coordenada x:"))
cdy = float(input("Digite a coordenada y:"))

if (2*cdx + cdy == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"

print(msg)	
-- EXECUTION TIME:
0.171565
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
