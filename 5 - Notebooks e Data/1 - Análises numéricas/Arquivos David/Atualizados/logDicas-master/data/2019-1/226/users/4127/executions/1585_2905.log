== TEST (2019-03-23 17:44:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
l1=float(input("lado1: "))
l2=float(input("lado2: "))
l3=float(input("lado3: "))
sm= ((l1+l2+l3)/2)
print(sm)
-- OUTPUT:
21.85
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:47:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
l1=float(input("lado1: "))
l2=float(input("lado2: "))
l3=float(input("lado3: "))
sm= ((l1+l2+l3)/2)
area=(sqrt((sm*(sm-l1)*(sm-l2)*(sm-l3))))
print(round(area))
-- OUTPUT:
69
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 17:47:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
l1=float(input("lado1: "))
l2=float(input("lado2: "))
l3=float(input("lado3: "))
sm= ((l1+l2+l3)/2)
area=(sqrt((sm*(sm-l1)*(sm-l2)*(sm-l3))))
print(round(area))
-- EXECUTION TIME:
0.151756
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 17:47:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
l1=float(input("lado1: "))
l2=float(input("lado2: "))
l3=float(input("lado3: "))
sm= ((l1+l2+l3)/2)
area=(sqrt((sm*(sm-l1)*(sm-l2)*(sm-l3))))))
print(round(area))
-- EXECUTION TIME:
0.172912
-- ERROR:
  File "/home/codebench/codes/1585/2905/main.py", line 9
    area=(sqrt((sm*(sm-l1)*(sm-l2)*(sm-l3))))))
                                             ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 17:48:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
l1=float(input("lado1: "))
l2=float(input("lado2: "))
l3=float(input("lado3: "))
sm= ((l1+l2+l3)/2)
area=(sqrt((sm*(sm-l1)*(sm-l2)*(sm-l3))))))
print(round(area,5))
-- EXECUTION TIME:
0.164009
-- ERROR:
  File "/home/codebench/codes/1585/2905/main.py", line 9
    area=(sqrt((sm*(sm-l1)*(sm-l2)*(sm-l3))))))
                                             ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 17:48:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
l1=float(input("lado1: "))
l2=float(input("lado2: "))
l3=float(input("lado3: "))
sm= ((l1+l2+l3)/2)
area=(sqrt((sm*(sm-l1)*(sm-l2)*(sm-l3))))
print(round(area,5))
-- EXECUTION TIME:
0.111331
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
lado1: lado2: lado3: 69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
lado1: lado2: lado3: 600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
lado1: lado2: lado3: 709.16654
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:48:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
l1=float(input("lado1: "))
l2=float(input("lado2: "))
l3=float(input("lado3: "))
sm= ((l1+l2+l3)/2)
area=(sqrt((sm*(sm-l1)*(sm-l2)*(sm-l3))))
print(round(area,5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 17:49:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
l1=int(input("lado1: "))
l2=int(input("lado2: "))
l3=int(input("lado3: "))
sm= ((l1+l2+l3)/2)
area=(sqrt((sm*(sm-l1)*(sm-l2)*(sm-l3))))
print(round(area,5))
-- EXECUTION TIME:
0.224107
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2905/main.py", line 5, in <module>
    l1=int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:49:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
l1=int(input("lado1: "))
l2=int(input("lado2: "))
l3=int(input("lado3: "))
sm= ((l1+l2+l3)/2)
area=(sqrt((sm*(sm-l1)*(sm-l2)*(sm-l3))))
print(round(area,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    l1=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 17:51:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
l1=float(input("lado1: "))
l2=float(input("lado2: "))
l3=float(input("lado3: "))
sm= ((l1+l2+l3)/2)
area=(sqrt((sm*(sm-l1)*(sm-l2)*(sm-l3))))
print(round(area,5))
-- EXECUTION TIME:
0.138016
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
