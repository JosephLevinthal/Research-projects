== TEST (2019-05-16 10:05:44) 
-- CODE:
from math import*
n = eval(int("digite o numero: "))
k = int(input("digite o numero: "))

soma = 0
i = 0

while (i<=k-1):
	soma = soma + sinal * x**(2*i)/factorial(2*i)
	sinal = - sinal
	i = i + 1
print(round(soma, 10))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = eval(int("digite o numero: "))
ValueError: invalid literal for int() with base 10: 'digite o numero: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:06:03) 
-- CODE:
from math import*
n = eval(input("digite o numero: "))
k = int(input("digite o numero: "))

soma = 0
i = 0

while (i<=k-1):
	soma = soma + sinal * x**(2*i)/factorial(2*i)
	sinal = - sinal
	i = i + 1
print(round(soma, 10))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    soma = soma + sinal * x**(2*i)/factorial(2*i)
NameError: name 'sinal' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:06:27) 
-- CODE:
from math import*
n = eval(input("digite o numero: "))
k = int(input("digite o numero: "))

soma = 0
i = 0
sinal = +1

while (i<=k-1):
	soma = soma + sinal * x**(2*i)/factorial(2*i)
	sinal = - sinal
	i = i + 1
print(round(soma, 10))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    soma = soma + sinal * x**(2*i)/factorial(2*i)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:06:45) 
-- CODE:
from math import*
x = eval(input("digite o numero: "))
k = int(input("digite o numero: "))

soma = 0
i = 0
sinal = +1

while (i<=k-1):
	soma = soma + sinal * x**(2*i)/factorial(2*i)
	sinal = - sinal
	i = i + 1
print(round(soma, 10))

-- OUTPUT:
0.9396926208
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:06:56) 
-- CODE:
from math import*
x = eval(input("digite o numero: "))
k = int(input("digite o numero: "))

soma = 0
i = 0
sinal = +1

while (i<=k-1):
	soma = soma + sinal * x**(2*i)/factorial(2*i)
	sinal = - sinal
	i = i + 1
print(round(soma, 10))

-- OUTPUT:
0.9396926208
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:07:05) 
-- CODE:
from math import*
x = eval(input("digite o numero: "))
k = int(input("digite o numero: "))

soma = 0
i = 0
sinal = +1

while (i<=k-1):
	soma = soma + sinal * x**(2*i)/factorial(2*i)
	sinal = - sinal
	i = i + 1
print(round(soma, 10))

-- OUTPUT:
0.9396926208
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:07:15) 
-- CODE:
from math import*
x = eval(input("digite o numero: "))
k = int(input("digite o numero: "))

soma = 0
i = 0
sinal = +1

while (i<=k-1):
	soma = soma + sinal * x**(2*i)/factorial(2*i)
	sinal = - sinal
	i = i + 1
print(round(soma, 10))

-- OUTPUT:
0.9396926208
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 10:07:26) 
-- CODE:
from math import*
x = eval(input("digite o numero: "))
k = int(input("digite o numero: "))

soma = 0
i = 0
sinal = +1

while (i<=k-1):
	soma = soma + sinal * x**(2*i)/factorial(2*i)
	sinal = - sinal
	i = i + 1
print(round(soma, 10))

-- EXECUTION TIME:
0.161027
-- TEST CASE 1:
---- input:
pi/9
6
---- correct output:
0.9396926208
---- user output:
0.9396926208
-- TEST CASE 2:
---- input:
pi/10
20
---- correct output:
0.9510565163
---- user output:
0.9510565163
-- TEST CASE 3:
---- input:
pi
9
---- correct output:
-0.9999998647
---- user output:
-0.9999998647
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
