== SUBMITION (2019-05-02 01:24:51) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input('altura total: '))
b = float(input('nuvel do tanque: '))
c = float(input('raio dos bojos: '))
print('Entradas:',a,',',b,',',c)
if (a>0) and (b>0) and (c>0) and (a>b) and (a>(2*c)):
	if b<= c:
		v = (pi/3)*(b**2)*(3*c-b)
		print('Volume:',round(v*1000,3),'litros')
	elif (c<b and b<= a-r):
		v = (4*pi*(r**3)/6)+(pi*(c**2)*(b-c))
		print('Volume:',round(v*1000,3),'litros')
	elif (b>a-c):
		v = ((4*pi*(c**3))/6)+((pi/3)*((c**2)*(b-c))*2)
		print('Volume:',round(v*1000,3),'litros')
		
-- EXECUTION TIME:
0.174113
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1674/1102/main.py", line 15, in <module>
    elif (c<b and b<= a-r):
NameError: name 'r' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:25:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input('altura total: '))
b = float(input('nuvel do tanque: '))
c = float(input('raio dos bojos: '))
print('Entradas:',a,',',b,',',c)
if (a>0) and (b>0) and (c>0) and (a>b) and (a>(2*c)):
	if b<= c:
		v = (pi/3)*(b**2)*(3*c-b)
		print('Volume:',round(v*1000,3),'litros')
	elif (c<b and b<= a-r):
		v = (4*pi*(r**3)/6)+(pi*(c**2)*(b-c))
		print('Volume:',round(v*1000,3),'litros')
	elif (b>a-c):
		v = ((4*pi*(c**3))/6)+((pi/3)*((c**2)*(b-c))*2)
		print('Volume:',round(v*1000,3),'litros')
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    elif (c<b and b<= a-r):
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 01:26:15) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input('altura total: '))
b = float(input('nuvel do tanque: '))
c = float(input('raio dos bojos: '))
print('Entradas:',a,',',b,',',c)
if (a>0) and (b>0) and (c>0) and (a>b) and (a>(2*c)):
	if b<= c:
		v = (pi/3)*(b**2)*(3*c-b)
		print('Volume:',round(v*1000,3),'litros')
	elif (c<b and b<= a-c):
		v = (4*pi*(c**3)/6)+(pi*(c**2)*(b-c))
		print('Volume:',round(v*1000,3),'litros')
	elif (b>a-c):
		v = ((4*pi*(c**3))/6)+((pi/3)*((c**2)*(b-c))*2)
		print('Volume:',round(v*1000,3),'litros')
-- EXECUTION TIME:
0.165103
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:26:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input('altura total: '))
b = float(input('nuvel do tanque: '))
c = float(input('raio dos bojos: '))
print('Entradas:',a,',',b,',',c)
if (a>0) and (b>0) and (c>0) and (a>b) and (a>(2*c)):
	if b<= c:
		v = (pi/3)*(b**2)*(3*c-b)
		print('Volume:',round(v*1000,3),'litros')
	elif (c<b and b<= a-c):
		v = (4*pi*(c**3)/6)+(pi*(c**2)*(b-c))
		print('Volume:',round(v*1000,3),'litros')
	elif (b>a-c):
		v = ((4*pi*(c**3))/6)+((pi/3)*((c**2)*(b-c))*2)
		print('Volume:',round(v*1000,3),'litros')
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 01:26:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input('altura total: '))
b = float(input('nuvel do tanque: '))
c = float(input('raio dos bojos: '))
print('Entradas:',a,',',b,',',c)
if (a>0) and (b>0) and (c>0) and (a>b) and (a>(2*c)):
	if b<= c:
		v = (pi/3)*(b**2)*(3*c-b)
		print('Volume:',round(v*1000,3),'litros')
	elif (c<b and b<= a-c):
		v = (4*pi*(c**3)/6)+(pi*(c**2)*(b-c))
		print('Volume:',round(v*1000,3),'litros')
	elif (b>a-c):
		v = ((4*pi*(c**3))/6)+((pi/3)*((c**2)*(b-c))*2)
		print('Volume:',round(v*1000,3),'litros')
-- EXECUTION TIME:
0.142379
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 01:26:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input('altura total: '))
b = float(input('nuvel do tanque: '))
c = float(input('raio dos bojos: '))
print('Entradas:',a,',',b,',',c)
if (a>0) and (b>0) and (c>0) and (a>b) and (a>(2*c)):
	if b<= c:
		v = (pi/3)*(b**2)*(3*c-b)
		print('Volume:',round(v*1000,3),'litros')
	elif (c<b and b<= a-c):
		v = (4*pi*(c**3)/6)+(pi*(c**2)*(b-c))
		print('Volume:',round(v*1000,3),'litros')
	elif (b>a-c):
		v = ((4*pi*(c**3))/6)+((pi/3)*((c**2)*(b-c))*2)
		print('Volume:',round(v*1000,3),'litros')
-- EXECUTION TIME:
0.299988
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 01:26:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input('altura total: '))
b = float(input('nuvel do tanque: '))
c = float(input('raio dos bojos: '))
print('Entradas:',a,',',b,',',c)
if (a>0) and (b>0) and (c>0) and (a>b) and (a>(2*c)):
	if b<= c:
		v = (pi/3)*(b**2)*(3*c-b)
		print('Volume:',round(v*1000,3),'litros')
	elif (c<b and b<= a-c):
		v = (4*pi*(c**3)/6)+(pi*(c**2)*(b-c))
		print('Volume:',round(v*1000,3),'litros')
	elif (b>a-c):
		v = ((4*pi*(c**3))/6)+((pi/3)*((c**2)*(b-c))*2)
		print('Volume:',round(v*1000,3),'litros')
-- EXECUTION TIME:
0.211947
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 02:39:04) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input('altura total: '))
b = float(input('nuvel do tanque: '))
c = float(input('raio dos bojos: '))
print('Entradas:',a,',',b,',',c)
if (a>0) and (b>0) and (c>0) and (a>b) and (a>(2*c)):
	if b<= c:
		v = (pi/3)*(b**2)*(3*c-b)
		print('Volume:',round(v*1000,3),'litros')
	elif (c<b and b<= a-c):
		v = (4*pi*(c**3)/6)+(pi*(c**2)*(b-c))
		print('Volume:',round(v*1000,3),'litros')
	elif (b>a-c):
		v = ((4*pi*(c**3))/6)+((pi/3)*((c**2)*(b-c))*2)
		print('Volume:',round(v*1000,3),'litros')
else:
	print('Entradas invalidas')
-- EXECUTION TIME:
0.190393
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
