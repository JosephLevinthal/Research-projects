== TEST (2019-03-26 11:30:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
s = a + b + c//2
a1 = sqrt(s * (s - a) * (s - b) * (s - c))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:31:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
s = a + b + c//2
a1 = sqrt(s * (s - a) * (s - b) * (s - c))
-- EXECUTION TIME:
0.141578
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:

-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:

-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:31:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
s = a + b + c//2
a1 = sqrt(s * (s - a) * (s - b) * (s - c))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:31:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
s = a + b + c//2
a1 = sqrt(s * (s - a) * (s - b) * (s - c))
-- EXECUTION TIME:
0.190704
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:

-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:

-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:31:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
s = a + b + c//2
a1 = sqrt(s * (s - a) * (s - b) * (s - c))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:31:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
s = a + b + c//2
a1 = sqrt(s * (s - a) * (s - b) * (s - c))
-- EXECUTION TIME:
0.146608
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:

-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:

-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:31:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
s = a + b + c//2
a1 = sqrt(s * (s - a) * (s - b) * (s - c))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:32:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
s = a + b + c // 2
a1 = sqrt(s * (s - a) * (s - b) * (s - c))
print(a1)
-- OUTPUT:
607.1820773046583
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:33:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
s = a + b + c // 2
a1 = sqrt(s * (s - a) * (s - b) * (s - c))
print(a1)
-- EXECUTION TIME:
0.139275
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
607.1820773046583
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
3909.3637589766445
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
4556.841011051406
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:33:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
s = a + b + c // 2
a1 = sqrt(s * (s - a) * (s - b) * (s - c))
print(a1)
-- OUTPUT:
607.1820773046583
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:38:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + çado2 + lado3) / 2
a = sqrt(s*(s - lado1) * s*(s - lado2) * s*(s - lado3))
print(round(0.5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:38:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + çado2 + lado3) / 2
a = sqrt(s*(s - lado1) * s*(s - lado2) * s*(s - lado3))
print(round(0.5))
-- EXECUTION TIME:
0.203562
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2905/main.py", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:38:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + çado2 + lado3) / 2
a = sqrt(s*(s - lado1) * s*(s - lado2) * s*(s - lado3))
print(round(0.5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:39:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + çado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(0.5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:39:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + çado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(0.5))
-- EXECUTION TIME:
0.153779
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2905/main.py", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:39:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + çado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:39:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + çado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- EXECUTION TIME:
0.177816
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2905/main.py", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:39:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + çado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:40:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + lado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:40:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + lado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- EXECUTION TIME:
0.228663
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2905/main.py", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:40:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + lado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:41:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = int(input("lado1: "))
lado2 = int(input("lado2: "))
lado3 = int(input("lado3: "))
s = (lado + lado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- EXECUTION TIME:
0.135016
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2905/main.py", line 4, in <module>
    lado1 = int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:17:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = float(input("lado1: "))
lado2 = float(input("lado2: "))
lado3 = float(input("lado3: "))
s = (lado + lado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    s = (lado + lado2 + lado3) / 2
NameError: name 'lado' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:17:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = float(input("lado1: "))
lado2 = float(input("lado2: "))
lado3 = float(input("lado3: "))
s = (lado + lado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- EXECUTION TIME:
0.154376
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2905/main.py", line 7, in <module>
    s = (lado + lado2 + lado3) / 2
NameError: name 'lado' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:18:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = float(input("lado1: "))
lado2 = float(input("lado2: "))
lado3 = float(input("lado3: "))
s = (lado + lado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    s = (lado + lado2 + lado3) / 2
NameError: name 'lado' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:18:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
lado1 = float(input("lado1: "))
lado2 = float(input("lado2: "))
lado3 = float(input("lado3: "))
s = (lado + lado2 + lado3) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- EXECUTION TIME:
0.180488
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2905/main.py", line 7, in <module>
    s = (lado + lado2 + lado3) / 2
NameError: name 'lado' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:20:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
a = float(input("lado1: "))
b = float(input("lado2: "))
c = float(input("lado3: "))
s = (a + b + c) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
NameError: name 'lado1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:20:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
a = float(input("lado1: "))
b = float(input("lado2: "))
c = float(input("lado3: "))
s = (a + b + c) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- EXECUTION TIME:
0.137541
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2905/main.py", line 8, in <module>
    a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
NameError: name 'lado1' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:20:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
a = float(input("lado1: "))
b = float(input("lado2: "))
c = float(input("lado3: "))
s = (a + b + c) / 2
a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
print(round(a, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    a = sqrt(s*(s - lado1) * (s - lado2) * (s - lado3))
NameError: name 'lado1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:20:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
s = (a + b + c) / 2
a = sqrt(s*(s - a) * (s - b) * (s - c))
print(round(a, 5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:20:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
from math import*
a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
s = (a + b + c) / 2
a = sqrt(s*(s - a) * (s - b) * (s - c))
print(round(a, 5))
-- EXECUTION TIME:
0.162217
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
