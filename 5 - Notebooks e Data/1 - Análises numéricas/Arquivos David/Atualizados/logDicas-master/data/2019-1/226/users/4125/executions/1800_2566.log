== TEST (2019-06-06 11:46:55) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-08 21:20:02) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] =  vet[i]*100/sum[vet]
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-08 21:20:31) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] =  vet[i]*100/sum[vet]
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-08 21:21:00) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] =  vet[i]*100/sum[vet]
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-08 21:22:47) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] =  vet[i]*100/sum(vet)
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:06:42) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] =  vet[i]*100/sum(vet)
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:09:56) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:10:40) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(vet)
-- EXECUTION TIME:
1.19222
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:11:07) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round((vet),1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:11:13) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round((vet),1))
-- EXECUTION TIME:
0.859507
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1800/2566/main.py", line 21, in <module>
    print(round((vet),1))
TypeError: type numpy.ndarray doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:11:14) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round((vet),1))
-- EXECUTION TIME:
2.54073
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1800/2566/main.py", line 21, in <module>
    print(round((vet),1))
TypeError: type numpy.ndarray doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:11:23) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round(vet,1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:11:28) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = int)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round(vet,1))
-- EXECUTION TIME:
1.03737
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1800/2566/main.py", line 21, in <module>
    print(round(vet,1))
TypeError: type numpy.ndarray doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:12:22) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = float)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round(vet,1)
-- ERROR:
File "XXXX", line 22
    
                      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:12:26) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = float)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round(vet,1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:12:30) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = float)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round(vet,1))
-- EXECUTION TIME:
1.02594
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1800/2566/main.py", line 21, in <module>
    print(round(vet,1))
TypeError: type numpy.ndarray doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:12:45) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = float)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round(vet,1))
-- EXECUTION TIME:
1.69692
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1800/2566/main.py", line 21, in <module>
    print(round(vet,1))
TypeError: type numpy.ndarray doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:12:46) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = float)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round(vet,1))
-- EXECUTION TIME:
2.56141
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1800/2566/main.py", line 21, in <module>
    print(round(vet,1))
TypeError: type numpy.ndarray doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:12:46) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = float)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round(vet,1))
-- EXECUTION TIME:
4.61128
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1800/2566/main.py", line 21, in <module>
    print(round(vet,1))
TypeError: type numpy.ndarray doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:12:46) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = float)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = vet[j]/a
print(round(vet,1))
-- EXECUTION TIME:
6.13992
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1800/2566/main.py", line 21, in <module>
    print(round(vet,1))
TypeError: type numpy.ndarray doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:15:11) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = float)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = round((vet[j]./a),1)
print(vet)
-- ERROR:
File "XXXX", line 20
    vet[j] = round((vet[j]./a),1)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:15:22) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = float)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = round((vet[j]/a),1)
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:15:23) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = float)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = round((vet[j]/a),1)
print(vet)
-- EXECUTION TIME:
1.02689
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
digite as faltas: [ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
digite as faltas: [15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:15:26) 
-- CODE:
from numpy import*
faltas = array(eval(input("digite as faltas: ")))
vet = zeros(6, dtype = float)
for i in range(size(faltas)):
	if (faltas[i]==2):
		vet[0]= vet[0] + 1
	elif(faltas[i]==3):
		vet[1]= vet[1]+ 1
	elif(faltas[i]==4):
		vet[2] = vet[2]+ 1
	elif(faltas[i]==5):
		vet[3] = vet[3] + 1
	elif(faltas[i] ==6):
		vet[4] = vet[4] + 1
	elif(faltas[i] ==7):
		vet[5] = vet[5] + 1
a = sum(vet)
vet = vet*100
for j in range(size(vet)):
	vet[j] = round((vet[j]/a),1)
print(vet)
-- EXECUTION TIME:
0.842973
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
