== TEST (2019-04-01 16:25:19) 
-- CODE:
n1 = input ("Abra" + "nome do objeto: ")
n2 = int (input("numero de repeticoes"))
print(n1 + n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(n1 + n2)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:25:19) 
-- CODE:
n1 = input ("Abra" + "nome do objeto: ")
n2 = int (input("numero de repeticoes"))
print(n1 + n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(n1 + n2)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:25:19) 
-- CODE:
n1 = input ("Abra" + "nome do objeto: ")
n2 = int (input("numero de repeticoes"))
print(n1 + n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(n1 + n2)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:25:19) 
-- CODE:
n1 = input ("Abra" + "nome do objeto: ")
n2 = int (input("numero de repeticoes"))
print(n1 + n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(n1 + n2)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:25:20) 
-- CODE:
n1 = input ("Abra" + "nome do objeto: ")
n2 = int (input("numero de repeticoes"))
print(n1 + n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(n1 + n2)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:25:20) 
-- CODE:
n1 = input ("Abra" + "nome do objeto: ")
n2 = int (input("numero de repeticoes"))
print(n1 + n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(n1 + n2)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:25:30) 
-- CODE:
n1 = input ("Abra" + "nome do objeto: ")
n2 = int (input("numero de repeticoes"))
print(n1 + n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(n1 + n2)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:25:32) 
-- CODE:
n1 = input ("Abra" + "nome do objeto: ")
n2 = int (input("numero de repeticoes"))
print(n1 + n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(n1 + n2)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:26:02) 
-- CODE:
n1 = input ("Abra" + "nome do objeto: ")
n2 = int (input("numero de repeticoes"))
print(n1 + n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(n1 + n2)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:30:06) 
-- CODE:
n1 = input ("Abra" + "nome do objeto: ")
n2 = int (input("numero de repeticoes"))
print(n1 + n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(n1 + n2)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:34:02) 
-- CODE:
n1 = input ("Abra" + " ")
n2 = int (input("numero de repeticoes"))
x = n1 + n2*
print (x)
-- ERROR:
File "XXXX", line 3
    x = n1 + n2*
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:34:23) 
-- CODE:
n1 = input ("Abra" + " ")
n2 = int (input("numero de repeticoes"))
x = n1 + n2 * n2
print (x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = n1 + n2 * n2
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:34:49) 
-- CODE:
n1 = input ("Abra" + " ")
n2 = int (input("numero de repeticoes"))
x = n1 + n2 * n2
print (x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = n1 + n2 * n2
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:36:01) 
-- CODE:
n1 = input ("Abra" + " ")
n2 = int (input("numero de repeticoes"))
x = string(n1) + int(n2) * n2
print (x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = string(n1) + int(n2) * n2
NameError: name 'string' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:36:34) 
-- CODE:
n1 = input ("Abra" + " ")
n2 = int (input("numero de repeticoes"))
x = int(n1) + int(n2) * n2
print (x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = int(n1) + int(n2) * n2
ValueError: invalid literal for int() with base 10: 'livro'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:24:03) 
-- CODE:
n1 = input ("Abra" + " ")
n2 = int (input("numero de repeticoes"))
x = int(n1) + int(n2) * n2
print (x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = int(n1) + int(n2) * n2
ValueError: invalid literal for int() with base 10: 'livro'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:24:51) 
-- CODE:
n1 = input ("Abra" + " ")
n2 = int (input("numero de repeticoes"))
x = n1 + n2 * 2
print (x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = n1 + n2 * 2
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:25:34) 
-- CODE:
n1 = input ("Abra" + " ")
n2 = int (input("numero de repeticoes"))
x = 'n1' + n2 * 2
print (x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = 'n1' + n2 * 2
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:45:05) 
-- CODE:
o = input("")
nr = int(input(""))
f = ("Abra" + o)
print(f + nr*)
-- ERROR:
File "XXXX", line 4
    print(f + nr*)
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:45:35) 
-- CODE:
o = input("")
nr = int(input(""))
f = ("Abra" + o)
print(nr * f)
-- OUTPUT:
AbralivroAbralivroAbralivroAbralivroAbralivroAbralivroAbralivroAbralivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:46:15) 
-- CODE:
o = input("")
nr = int(input(""))
f = ("Abra" + o)
print(nr * f)
-- OUTPUT:
AbralivroAbralivroAbralivroAbralivroAbralivroAbralivroAbralivroAbralivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 09:46:23) 
-- CODE:
o = input("")
nr = int(input(""))
f = ("Abra" + o)
print(nr * f)
-- EXECUTION TIME:
0.106277
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
AbralivroAbralivroAbralivroAbralivroAbralivroAbralivroAbralivroAbralivro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
AbracarroAbracarro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
Abracaixa
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:46:34) 
-- CODE:
o = input("")
nr = int(input(""))
f = ("Abra " + o)
print(nr * f)
-- OUTPUT:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 09:46:46) 
-- CODE:
o = input("")
nr = int(input(""))
f = ("Abra " + o)
print(nr * f)
-- EXECUTION TIME:
0.196068
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
Abra carroAbra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
Abra caixa
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:47:07) 
-- CODE:
o = input("")
nr = int(input(""))
f = ("Abra " + o)
print(f * nr)
-- OUTPUT:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 09:47:23) 
-- CODE:
o = input("")
nr = int(input(""))
f = ("Abra " + o)
print(f * nr)
-- EXECUTION TIME:
0.139087
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
Abra carroAbra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
Abra caixa
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:34:16) 
-- CODE:
o = input("")
nr = int(input(""))
f = ("Abra " + o)
print(f * nr)
-- OUTPUT:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:34:49) 
-- CODE:
o = input("")
nr = int(input(""))
f = ("Abra " + o)
print(nr * f)
-- OUTPUT:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:35:11) 
-- CODE:
o = input("")
nr = int(input(""))
f = (" Abra " + o)
print(nr * f)
-- OUTPUT:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 14:35:19) 
-- CODE:
o = input("")
nr = int(input(""))
f = (" Abra " + o)
print(nr * f)
-- EXECUTION TIME:
0.150323
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
Abra carro Abra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
Abra caixa
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
