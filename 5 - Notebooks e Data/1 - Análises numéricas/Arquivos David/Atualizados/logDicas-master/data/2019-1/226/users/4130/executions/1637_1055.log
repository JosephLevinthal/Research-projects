== TEST (2019-04-10 15:28:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade inicial: "))
ang = float(input("Angulo:"))
dist = float(input("A distancia entre eles: "))
x = radians(ang)
r = ((v ** 2) * sin(2 * x)) / 9.8

if abs(dist - r <= 0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 15:29:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade inicial: "))
ang = float(input("Angulo: "))
dist = float(input("A distancia entre eles: "))
x = radians(ang)
r = ((v ** 2) * sin(2 * x)) / 9.8

if abs(dist - r <= 0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 15:29:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade inicial: "))
ang = float(input("Angulo: "))
dist = float(input("A distancia entre eles: "))
x = radians(ang)
r = ((v ** 2) * sin(2 * x)) / 9.8

if abs(dist - r <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.187217
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
