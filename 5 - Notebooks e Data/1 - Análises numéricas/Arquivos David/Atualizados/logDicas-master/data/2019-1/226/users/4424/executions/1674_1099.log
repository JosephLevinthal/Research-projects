== TEST (2019-04-25 11:22:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+c):
		msg="invalido"
	else:
	if(a==b or a==c or b==c):
		msg="isoceles"
	else:
		msg="escaleno"
else:
	msg="invalido"
print("tipo de triangulo", msg)
-- ERROR:
File "XXXX", line 13
    if(a==b or a==c or b==c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:23:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+c):
		msg="invalido"
	else:
	if(a==b) or (a==c or (b==c):
		msg="isoceles"
	else:
		msg="escaleno"
else:
	msg="invalido"
print("tipo de triangulo", msg)
-- ERROR:
File "XXXX", line 13
    if(a==b) or (a==c or (b==c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:23:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+c):
		msg="invalido"
	else:
	if(a==b) or (a==c or (b==c):
		msg="isoceles"
	else:
		msg="escaleno"
else:
	msg="invalido"
print("tipo de triangulo", msg)
-- ERROR:
File "XXXX", line 13
    if(a==b) or (a==c or (b==c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:27:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+c):
		msg="invalido"
	else:
	if(a==b or a==c or b%3
-- ERROR:
File "XXXX", line 13
    if(a==b or a==c or b%3
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 15:03:38) 
-- CODE:
a=float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))
print("entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		mensagem="invalido"
	else:
			if(a==b and b==c):
			mensagem="equilatero"
	     	else:
		   if(a==b or a==c or b==c):
			   mensagem="isosceles"
	      else:
		      mensagem="escaleno"
else:
	mensagem="invalido"
print("Tipo de triangulo:", mensagem)
-- ERROR:
File "XXXX", line 10
    mensagem="equilatero"
           ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 15:03:59) 
-- CODE:
a=float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))
print("entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		mensagem="invalido"
	else:
			if(a==b and b==c):
			mensagem="equilatero"
	else:
		   if(a==b or a==c or b==c):
			   mensagem="isosceles"
	      else:
		      mensagem="escaleno"
else:
	mensagem="invalido"
print("Tipo de triangulo:", mensagem)
-- ERROR:
File "XXXX", line 10
    mensagem="equilatero"
           ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:31:59) 
-- CODE:
a=float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))
print("entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		mensagem="invalido"
	else:
			if(a==b and b==c):
			mensagem="equilatero"
	     	else:
		   if(a==b or a==c or b==c):
			   mensagem="isosceles"
	    
else:
	mensagem="invalido"
print("Tipo de triangulo:", mensagem)
-- ERROR:
File "XXXX", line 10
    mensagem="equilatero"
           ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:32:36) 
-- CODE:
a=float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))
print("entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		mensagem="invalido"
	else:
			if(a==b and b==c):
			mensagem="equilatero"
	     	else:
		   if(a==b or a==c or b==c):
			   mensagem="isosceles"
	    
	else:
	mensagem="invalido"
print("Tipo de triangulo:", mensagem)
-- ERROR:
File "XXXX", line 10
    mensagem="equilatero"
           ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:32:47) 
-- CODE:
a=float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))
print("entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		mensagem="invalido"
	else:
			if(a==b and b==c):
				mensagem="equilatero"
	     	else:
		   if(a==b or a==c or b==c):
			   mensagem="isosceles"
	    
	else:
	mensagem="invalido"
print("Tipo de triangulo:", mensagem)
-- ERROR:
File "XXXX", line 11
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:33:03) 
-- CODE:
a=float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))
print("entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		mensagem="invalido"
	else:
			if(a==b and b==c):
				mensagem="equilatero"
	     	else:
		   	if(a==b or a==c or b==c):
			   mensagem="isosceles"
	    
	else:
	mensagem="invalido"
print("Tipo de triangulo:", mensagem)
-- ERROR:
File "XXXX", line 11
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:33:16) 
-- CODE:
a=float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))
print("entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		mensagem="invalido"
	else:
			if(a==b and b==c):
				mensagem="equilatero"
	     		else:
		   		if(a==b or a==c or b==c):
			   		mensagem="isosceles"
	    
	else:
	mensagem="invalido"
print("Tipo de triangulo:", mensagem)
-- ERROR:
File "XXXX", line 11
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 13:33:34) 
-- CODE:
a=float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))
print("entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		mensagem="invalido"
	else:
			if(a==b and b==c):
				mensagem="equilatero"
	     	else:
		   	if(a==b or a==c or b==c):
			   	mensagem="isosceles"
	    
	else:
	mensagem="invalido"
print("Tipo de triangulo:", mensagem)
-- ERROR:
File "XXXX", line 11
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:37:03) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=A)
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo invalido")
-- EXECUTION TIME:
0.194497
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 9
    elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=A)
                                                        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:37:06) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B)
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo invalido")
-- EXECUTION TIME:
0.146747
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 9
    elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B)
                                                        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:37:34) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B)
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.155756
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 9
    elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B)
                                                        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:37:38) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=A)
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.153756
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 9
    elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=A)
                                                        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:37:41) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=A)
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.167876
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 9
    elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=A)
                                                        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:37:44) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=A)
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.20222
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 9
    elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=A)
                                                        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:40:02) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B)
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.167325
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 9
    elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B)
                                                        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 22:40:03) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B)
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 9
    elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B)
                                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:40:18) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B):
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.233543
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 22:40:19) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B):
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:40:19) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B):
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.290268
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:40:32) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B):
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.173557
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:42:02) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B):
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.177247
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:45:54) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B):
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.15828
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:45:55) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B):
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.158867
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 22:45:56) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B):
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:54:31) 
-- CODE:
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)
if(A<B+C)and(B<A+C)and(C<A+B):
	if(A==B)and(B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B)and(B!=C)or(B==C)and(B!=A)or(A==C)and(C!=B):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.173477
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
