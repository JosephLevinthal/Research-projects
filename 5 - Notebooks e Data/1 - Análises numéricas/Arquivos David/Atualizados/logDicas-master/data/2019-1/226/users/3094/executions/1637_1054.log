== TEST (2019-04-04 16:25:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input"x: ")
y = int(input"y: ")
m = (y - 1) / (x - 2)
if (m >= 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- ERROR:
File "XXXX", line 4
    x = int(input"x: ")
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:26:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("x: "))
y = int(input("y: "))
m = (y - 1) / (x - 2)
if (m >= 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:26:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("x: "))
y = int(input("y: "))
m = (y - 1) / (x - 2)
if (m >= 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:35:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("x: "))
y = int(input("y: "))
m = (y - 1) / (x - 2)
if (m >= 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:35:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("x: "))
y = int(input("y: "))
m = (y - 1) / (x - 2)
if (m >= 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:35:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("x: "))
y = int(input("y: "))
m = (y - 1) / (x - 2)
if (m >= 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- EXECUTION TIME:
0.14656
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto nao pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:09:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("x: "))
y = int(input("y: "))
m = (y - 1) / (x - 2)
if (m >= 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:09:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = float(input("y: "))
m = (y - 1) / (x - 2)
if (m >= 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:09:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = float(input("y: "))
m = (y - 1) / (x - 2)
if (m >= 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- EXECUTION TIME:
0.203476
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto nao pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:11:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = float(input("y: "))
m = (2 * x + y - 3 == 0)
if (m = 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- ERROR:
File "XXXX", line 7
    if (m = 0):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:11:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = float(input("y: "))
m = (2 * x + y - 3 == 0)
if (m == 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:11:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = float(input("y: "))
m = (2 * x + y - 3 == 0)
if (m == 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- EXECUTION TIME:
0.143308
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto nao pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:12:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = float(input("y: "))
m = (2 * x + y - 3 == 0)
if (m == 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- EXECUTION TIME:
0.197851
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto nao pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:13:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = float(input("y: "))
m = (2 * x + y - 3 == 0)
if (m == 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- EXECUTION TIME:
0.126878
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto nao pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:14:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = float(input("y: "))
#m = (2 * x + y - 3 == 0)
if (2 * x + y - 3 == 0):
	resultado = "ponto pertence a reta"
else: 
	resultado = "ponto nao pertence a reta"
print(resultado)
-- EXECUTION TIME:
0.204182
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
