== TEST (2019-03-25 19:23:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
saque = int(input(" Digite o valor a ser sacado: "))

-- OUTPUT:
8.2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:24:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
saque = int(input(" Digite o valor a ser sacado: "))

n 100 = int(saque // 100)
n 50 = int()
-- ERROR:
File "XXXX", line 6
    n 100 = int(saque // 100)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:25:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
saque = int(input(" Digite o valor a ser sacado: "))

n 100 = saque // 100
n 50 = int()
-- ERROR:
File "XXXX", line 6
    n 100 = saque // 100
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:25:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
saque = int(input(" Digite o valor a ser sacado: "))

n1 = saque // 100
n 50 = int()
-- ERROR:
File "XXXX", line 7
    n 50 = int()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:28:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100
# Notas de 50.00: 
print (n1)
# Notas de 10.00: 

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:29:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque // 2 - 15
print(n2)
-- OUTPUT:
9
480
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:30:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 =  0
print(n2)
-- OUTPUT:
9
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:31:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 =  0
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
-- OUTPUT:
9
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:31:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 =  0
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:31:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 =  0
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- EXECUTION TIME:
0.210994
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
89
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:33:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 =  0
print(n2)
# Notas de 10.00: 
n3 = n2 % n1
print(n3)
-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:34:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque % 50
print(n2)
# Notas de 10.00: 
n3 = n2 % n1
print(n3)
-- OUTPUT:
9
40
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:42:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque % 5
print(n2)
# Notas de 10.00: 
n3 = n2 % 10
print(n3)
-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:42:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque // 5
print(n2)
# Notas de 10.00: 
n3 = n2 % 10
print(n3)
-- OUTPUT:
9
198
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:42:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque // 5
print(n2)
# Notas de 10.00: 
n3 = n2 % 20
print(n3)
-- OUTPUT:
9
198
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:44:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque // 5
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
198
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:45:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque - 130
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
860
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:45:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque - 130
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- EXECUTION TIME:
0.132478
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
860
89
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:46:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque - saque
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 19:46:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque - saque
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- EXECUTION TIME:
0.148464
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
89
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:48:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque // 10) % 5 
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
4
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:48:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque // 10) % 10
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
9
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:49:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque // 10) % 100
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
99
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:49:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque // 10) // 10
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
9
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:50:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque // 5
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
198
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 19:51:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque // 2 - 15
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
480
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:20:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque % 50                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
40
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:21:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = n1 % 50                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
9
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:21:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (n1 - n3) % 50                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    n2 = (n1 - n3) % 50                                  
NameError: name 'n3' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:21:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n3 = saque // 10 - 10
n2 = (n1 - n3) % 50                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
20
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:22:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = n1  % 50                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
9
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:22:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = n1  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
9
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:23:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque - n1)  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
1
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:24:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque // 100 - n1)  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:24:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque // 100 - n1)  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- EXECUTION TIME:
0.204385
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
89
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:24:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque // 100 - n1)  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:24:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque // 100 - n1)  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- EXECUTION TIME:
0.154628
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
89
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:25:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (n1 - n1)  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:25:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque // 100) - n1  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:26:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = saque  - n1  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
981
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:27:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque - n1)  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
1
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:27:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque - n1)  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
1
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:28:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (n1 * 100)  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:28:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (n1 * 100)  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- EXECUTION TIME:
0.181864
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
89
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:28:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (n1 * 100)  % 10                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:28:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (n1 * 100)  % 2                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:28:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (n1 * 100)  % 2                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:29:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque - 100)  % 2                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:29:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque - 100)  % 2                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:29:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque - 100)  % 2                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
0
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:34:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100 
print (n1)
# Notas de 50.00: 
n2 = (saque // 50)  % 2                                  
print(n2)
# Notas de 10.00: 
n3 = saque // 10 - 10
print(n3)
-- OUTPUT:
9
1
89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:36:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100
b = saque % 100
print (n1)
# Notas de 50.00: 
n2 = (b // 50) 
c = b % 50
print(n2)
# Notas de 10.00: 
n3 = c // 10 
print(n3)
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:36:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100
b = saque % 100
print (n1)
# Notas de 50.00: 
n2 = (b // 50) 
c = b % 50
print(n2)
# Notas de 10.00: 
n3 = c // 10 
print(n3)
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:40:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100
b = saque % 100
print (n1)
# Notas de 50.00: 
n2 = (b // 50) 
c = b % 50
print(n2)
# Notas de 10.00: 
n3 = c // 10 
print(n3)
-- EXECUTION TIME:
0.139504
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 19:08:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

saque = int(input(" Digite o valor a ser sacado: "))
# Notas de 100.00: 
n1 = saque // 100
b = saque % 100
print (n1)
# Notas de 50.00: 
n2 = (b // 50) 
c = b % 50
print(n2)
# Notas de 10.00: 
n3 = c // 10 
print(n3)
-- EXECUTION TIME:
0.225924
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
