== TEST (2019-03-21 12:27:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
val = int(input("valores: "))

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:27:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
val = int(input("valores: "))

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:32:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
val1 = int(input("valore 1: "))
val2 = int(input("valore 2: "))
val3 = int(input("valore 3: "))


print(min(val1,val2,val3))
print(min-max)
print(max(val1,val2,val3))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(min-max)
TypeError: unsupported operand type(s) for -: 'builtin_function_or_method' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:25:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
val1 = int(input("valore 1: "))
val2 = int(input("valore 2: "))
val3 = int(input("valore 3: "))


minimo = (min(val1,val2,val3))
maximo = (max(val1,val2,val3))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(min-max)
TypeError: unsupported operand type(s) for -: 'builtin_function_or_method' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:26:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
val1 = int(input("valor 1: "))
val2 = int(input("valor 2: "))
val3 = int(input("valor 3: "))


minimo = (min(val1,val2,val3))
maximo = (max(val1,val2,val3))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(min-max)
TypeError: unsupported operand type(s) for -: 'builtin_function_or_method' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:26:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

val1 = int(input("valor 1: "))
val2 = int(input("valor 2: "))
val3 = int(input("valor 3: "))


minimo = (min(val1,val2,val3))
maximo = (max(val1,val2,val3))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(min-max)
TypeError: unsupported operand type(s) for -: 'builtin_function_or_method' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:28:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

val1 = int(input("valor 1: "))
val2 = int(input("valor 2: "))
val3 = int(input("valor 3: "))


minimo = (min(val1,val2,val3))
maximo = (max(val1,val2,val3))
medio = maximo - minimo

print(minimo)
print(medio)
print(maximo)

-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:29:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

val1 = int(input("valor 1: "))
val2 = int(input("valor 2: "))
val3 = int(input("valor 3: "))


minimo = (min(val1,val2,val3))
maximo = (max(val1,val2,val3))
medio = maximo - minimo

print(minimo)
print(medio)
print(maximo)

-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:29:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

val1 = int(input("valor 1: "))
val2 = int(input("valor 2: "))
val3 = int(input("valor 3: "))


minimo = (min(val1,val2,val3))
maximo = (max(val1,val2,val3))
medio = maximo - minimo

print(minimo)
print(medio)
print(maximo)

-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:31:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

val1 = int(input("valor 1: "))
val2 = int(input("valor 2: "))
val3 = int(input("valor 3: "))


minimo = (min(val1,val2,val3))
maximo = (max(val1,val2,val3))
medio = maximo - minimo

print(minimo)
print(medio)
print(maximo)

-- EXECUTION TIME:
0.155516
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
12
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:31:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

val1 = int(input("valor 1: "))
val2 = int(input("valor 2: "))
val3 = int(input("valor 3: "))


minimo = (min(val1,val2,val3))
maximo = (max(val1,val2,val3))
medio = maximo - minimo

print(minimo)
print(medio)
print(maximo)

-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:31:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

val1 = int(input("valor 1: "))
val2 = int(input("valor 2: "))
val3 = int(input("valor 3: "))


minimo = (min(val1,val2,val3))
maximo = (max(val1,val2,val3))
medio = maximo - minimo

print(minimo)
print(medio)
print(maximo)

-- EXECUTION TIME:
0.175872
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
12
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:32:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
medio = maximo - minimo

print(minimo)
print(medio)
print(maximo)

-- EXECUTION TIME:
0.155753
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
12
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:32:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
medio = maximo - minimo

print(minimo)
print(medio)
print(maximo)

-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:34:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario = maximo - minimo

print(minimo)
print(intermediario)
print(maximo)

-- EXECUTION TIME:
0.179109
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
12
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:35:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario = (a+b+c) - min+max

print(minimo)
print(intermediario)
print(maximo)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    intermediario = (a+b+c) - min+max
TypeError: unsupported operand type(s) for -: 'int' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:42:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario = (maximo - minimo + (a+b+c)) 

print(minimo)
print(intermediario)
print(maximo)

-- OUTPUT:
-2
20
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:42:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario = (maximo - minimo - (a+b+c)) 

print(minimo)
print(intermediario)
print(maximo)

-- OUTPUT:
-2
4
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:43:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario = (maximo + minimo - (a+b+c)) 

print(minimo)
print(intermediario)
print(maximo)

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 23:43:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario = (maximo - minimo)

print(minimo)
print(intermediario)
print(maximo)

-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:43:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario = (maximo - minimo)

print(minimo)
print(intermediario)
print(maximo)

-- EXECUTION TIME:
0.157029
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
12
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:07:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario = (maximo - minimo)

print(minimo)
print(intermediario)
print(maximo)

-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:07:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario = (maximo - minimo)

print(minimo)
print(intermediario)
print(maximo)

-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:08:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario = (maximo - minimo)

print(minimo)
print(intermediario)
print(maximo)

-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:12:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario1 = (a+b+c)
intermediario = intermediario1 - ( minimo+maximo)

print(minimo)
print(intermediario)
print(maximo)

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:12:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("valor 1: "))
b = int(input("valor 2: "))
c = int(input("valor 3: "))


minimo = (min(a,b,c))
maximo = (max(a,b,c))
intermediario1 = (a+b+c)
intermediario = intermediario1 - ( minimo+maximo)

print(minimo)
print(intermediario)
print(maximo)

-- EXECUTION TIME:
0.13078
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
