== TEST (2019-04-25 10:23:03) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a + b < c) or (b + c < a) or (a + c < b)):
	print("invalida")
else:
	# Testa se medidas correspondem aas de um triangulo
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		x = round(area, 3)
		print("Area:", x)
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:25:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a + b <= c) or (b + c <= a) or (a + c <= b)):
	print("invalida")
else:
	# Testa se medidas correspondem aas de um triangulo
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		x = round(area, 3)
		print("Area:", x)
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:25:30) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a + b <= c) or (b + c <= a) or (a + c <= b)):
	print("invalida")
else:
	# Testa se medidas correspondem aas de um triangulo
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		x = round(area, 3)
		print("Area:", x)
-- EXECUTION TIME:
0.205176
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:34:49) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a < 0) or (b < 0) or (c < 0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a < b + c) and (b < a + c) and (c < a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		x = round(area, 3)
		print("Area:", x)
		else:
			print("invalida")
else:
	print("invalida")
-- ERROR:
File "XXXX", line 16
    s = (a + b + c) / 2.0
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:05) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a < 0) or (b < 0) or (c < 0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a < b + c) and (b < a + c) and (c < a + b)):
			s = (a + b + c) / 2.0
			area = sqrt(s * (s-a) * (s-b) * (s-c))
			x = round(area, 3)
			print("Area:", x)
		else:
			print("invalida")
else:
	print("invalida")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:37:02) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a < 0) or (b < 0) or (c < 0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a < b + c) and (b < a + c) and (c < a + b)):
			s = (a + b + c) / 2.0
			area = sqrt(s * (s-a) * (s-b) * (s-c))
			x = round(area, 3)
			print("Area:", x)
		else:
			print("Area: " , "invalida")
else:
	print("Area: " , "invalida")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area:  invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:37:16) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a < 0) or (b < 0) or (c < 0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a < b + c) and (b < a + c) and (c < a + b)):
			s = (a + b + c) / 2.0
			area = sqrt(s * (s-a) * (s-b) * (s-c))
			x = round(area, 3)
			print("Area:", x)
		else:
			print("Area: ","invalida")
else:
	print("Area: ","invalida")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area:  invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:37:31) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a < 0) or (b < 0) or (c < 0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a < b + c) and (b < a + c) and (c < a + b)):
			s = (a + b + c) / 2.0
			area = sqrt(s * (s-a) * (s-b) * (s-c))
			x = round(area, 3)
			print("Area:", x)
		else:
			print("Area:","invalida")
else:
	print("Area:","invalida")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:37:38) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a < 0) or (b < 0) or (c < 0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a < b + c) and (b < a + c) and (c < a + b)):
			s = (a + b + c) / 2.0
			area = sqrt(s * (s-a) * (s-b) * (s-c))
			x = round(area, 3)
			print("Area:", x)
		else:
			print("Area:","invalida")
else:
	print("Area:","invalida")
-- EXECUTION TIME:
0.160338
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:38:38) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a < 0) or (b < 0) or (c < 0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a < b + c) and (b < a + c) and (c < a + b)):
			s = (a + b + c) / 2.0
			area = sqrt(s * (s-a) * (s-b) * (s-c))
			x = round(area, 3)
			print("Area:", x)
		else:
			print("Area:", "invalida")
else:
	print("Area:", "invalida")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:39:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a < 0) and (b < 0) and (c < 0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a < b + c) and (b < a + c) and (c < a + b)):
			s = (a + b + c) / 2.0
			area = sqrt(s * (s-a) * (s-b) * (s-c))
			x = round(area, 3)
			print("Area:", x)
		else:
			print("Area:", "invalida")
else:
	print("Area:", "invalida")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:39:20) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a < 0) and (b < 0) and (c < 0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a < b + c) and (b < a + c) and (c < a + b)):
			s = (a + b + c) / 2.0
			area = sqrt(s * (s-a) * (s-b) * (s-c))
			x = round(area, 3)
			print("Area:", x)
		else:
			print("Area:", "invalida")
else:
	print("Area:", "invalida")
-- EXECUTION TIME:
0.188501
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:03:53) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a > 0) and (b > 0) and (c > 0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a < b + c) and (b < a + c) and (c < a + b)):
			s = (a + b + c) / 2.0
			area = sqrt(s * (s-a) * (s-b) * (s-c))
			x = round(area, 3)
			print("Area:", x)
		else:
			print("Area:", "invalida")
else:
	print("Area:", "invalida")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:04:00) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a > 0) and (b > 0) and (c > 0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a < b + c) and (b < a + c) and (c < a + b)):
			s = (a + b + c) / 2.0
			area = sqrt(s * (s-a) * (s-b) * (s-c))
			x = round(area, 3)
			print("Area:", x)
		else:
			print("Area:", "invalida")
else:
	print("Area:", "invalida")
-- EXECUTION TIME:
0.183408
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
