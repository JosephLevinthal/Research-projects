== SUBMITION (2019-05-01 23:16:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))
print("intervalo 1:",a,",",b)
print("intervalo 2:",c,",",b)
if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.271971
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1: 1.0 , 2.0
intervalo 2: 4.0 , 2.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1: 1.5 , 5.0
intervalo 2: 2.5 , 5.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1: -1.0 , -3.0
intervalo 2: 1.0 , -3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 23:17:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))
print("intervalo 1:",a,",",b)
print("intervalo 2:",c,",",b)
if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- OUTPUT:
intervalo 1: 1.0 , 2.0
intervalo 2: 4.0 , 2.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:19:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))
print("intervalo 1:",a,",",b)
print("intervalo 2:",c,",",b)
if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b>c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.225534
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1: 1.0 , 2.0
intervalo 2: 4.0 , 2.0
Ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1: 1.5 , 5.0
intervalo 2: 2.5 , 5.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1: -1.0 , -3.0
intervalo 2: 1.0 , -3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:19:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))
print("intervalo 1:",a,",",b)
print("intervalo 2:",c,",",b)
if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b>c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.167532
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1: 1.0 , 2.0
intervalo 2: 4.0 , 2.0
Ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1: 1.0 , 2.0
intervalo 2: 4.0 , 2.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1: 1.5 , 5.0
intervalo 2: 2.5 , 5.0
Nao ha intersecao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:19:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))
print("intervalo 1:",a,",",b)
print("intervalo 2:",c,",",b)
if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b>c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.19753
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1: 1.5 , 5.0
intervalo 2: 2.5 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1: -1.0 , -3.0
intervalo 2: 1.0 , -3.0
Entradas invalidas
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:19:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))
print("intervalo 1:",a,",",b)
print("intervalo 2:",c,",",b)
if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b>c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.221261
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1: 1.5 , 5.0
intervalo 2: 2.5 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1: -1.0 , -3.0
intervalo 2: 1.0 , -3.0
Entradas invalidas
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:20:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))
print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",b)
if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.199478
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 2.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1:  1.5 , 5.0
intervalo 2:  2.5 , 5.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1:  -1.0 , -3.0
intervalo 2:  1.0 , -3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:21:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",b)

if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.159978
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 2.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1:  1.5 , 5.0
intervalo 2:  2.5 , 5.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1:  -1.0 , -3.0
intervalo 2:  1.0 , -3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:22:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",d)

if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.150955
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1:  1.5 , 5.0
intervalo 2:  2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1:  -1.0 , -3.0
intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:23:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",d8)

if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.209996
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1674/1104/main.py", line 11, in <module>
    print("intervalo 2: ",c,",",d8)
NameError: name 'd8' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:23:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",d)

if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.170657
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1:  1.5 , 5.0
intervalo 2:  2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1:  -1.0 , -3.0
intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:23:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",d)

if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.117328
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1:  1.5 , 5.0
intervalo 2:  2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:23:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",d)

if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.163703
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:23:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",d)

if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.172004
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1:  1.5 , 5.0
intervalo 2:  2.5 , 3.0
Ha intersecao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:23:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",d)

if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.294436
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1674/1104/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:23:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",d)

if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.241289
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1:  1.5 , 5.0
intervalo 2:  2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1:  -1.0 , -3.0
intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:23:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",d)

if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.309331
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1:  -1.0 , -3.0
intervalo 2:  1.0 , 3.0
Entradas invalidas
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:

-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1:  -1.0 , -3.0
intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:24:59) 
-- CODE:

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("intervalo 1: ",a,",",b)
print("intervalo 2: ",c,",",d)

if(b<=a)and(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.161259
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
intervalo 1:  1.0 , 2.0
intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
intervalo 1:  1.5 , 5.0
intervalo 2:  2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
intervalo 1:  -1.0 , -3.0
intervalo 2:  1.0 , 3.0
Nao ha intersecao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:25:46) 
-- CODE:

a = float(input("valor de A:"))
b = float(input("valor de B:"))
c = float(input("valor de C:"))
d = float(input("valor de D:"))

print("Intervalo 1: ",a,",",b)
print("Intervalo 2: ",c,",",d)

if(b<=a)or(d<=c):
	print("Entradas invalidas")
elif(b<c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")
-- EXECUTION TIME:
0.194879
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 , 5.0
Intervalo 2:  2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 , -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
