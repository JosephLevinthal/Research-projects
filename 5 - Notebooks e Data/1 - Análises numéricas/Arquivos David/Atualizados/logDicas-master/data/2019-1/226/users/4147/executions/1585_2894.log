== TEST (2019-03-21 11:28:46) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("45"))

# Calculo do valor a ser pago, incluindo o frete:
total = print(360)

# Impressao do valor total:
print(720)
-- OUTPUT:
360
720
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:28:49) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("45"))

# Calculo do valor a ser pago, incluindo o frete:
total = print(360)

# Impressao do valor total:
print(720)
-- EXECUTION TIME:
0.161938
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
360
720
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
360
720
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
360
720
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:29:14) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("45"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("360")

# Impressao do valor total:
print("720")
-- OUTPUT:
360
720
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:30:53) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("30"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("240+45")

# Impressao do valor total:
print("600")
-- OUTPUT:
240+45
600
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:30:56) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("30"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("240+45")

# Impressao do valor total:
print("600")
-- EXECUTION TIME:
0.153698
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
240+45
600
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
240+45
600
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
240+45
600
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:31:08) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("30"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("285")

# Impressao do valor total:
print("600")
-- OUTPUT:
285
600
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:31:11) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("30"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("285")

# Impressao do valor total:
print("600")
-- EXECUTION TIME:
0.176959
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
285
600
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
285
600
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
285
600
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:34:43) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input(30))

# Calculo do valor a ser pago, incluindo o frete:
total = print("285")

# Impressao do valor total:
print("600")
-- OUTPUT:
30285
600
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:34:46) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input(30))

# Calculo do valor a ser pago, incluindo o frete:
total = print("285")

# Impressao do valor total:
print("600")
-- EXECUTION TIME:
0.257844
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
30285
600
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
30285
600
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
30285
600
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:34:49) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input(30))

# Calculo do valor a ser pago, incluindo o frete:
total = print("285")

# Impressao do valor total:
print("600")
-- OUTPUT:
30285
600
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:35:02) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input(30))

# Calculo do valor a ser pago, incluindo o frete:
total = print(285)

# Impressao do valor total:
print(600)
-- OUTPUT:
30285
600
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:35:06) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input(30))

# Calculo do valor a ser pago, incluindo o frete:
total = print(285)

# Impressao do valor total:
print(600)
-- EXECUTION TIME:
0.119507
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
30285
600
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
30285
600
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
30285
600
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:37:49) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
????? = float(input("trinta"))

# Calculo do valor a ser pago, incluindo o frete:
total = ?????

# Impressao do valor total:
print(?????
-- ERROR:
File "XXXX", line 5
    ????? = float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:39:04) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
????? = float(input("30"))

# Calculo do valor a ser pago, incluindo o frete:
total = print((30+45)*8)

# Impressao do valor total:
print(600)
-- ERROR:
File "XXXX", line 5
    ????? = float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:39:07) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
????? = float(input("30"))

# Calculo do valor a ser pago, incluindo o frete:
total = print((30+45)*8)

# Impressao do valor total:
print(600)
-- ERROR:
File "XXXX", line 5
    ????? = float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:39:20) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("30"))

# Calculo do valor a ser pago, incluindo o frete:
total = print((30+45)*8)

# Impressao do valor total:
print(600)
-- OUTPUT:
600
600
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:39:23) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("30"))

# Calculo do valor a ser pago, incluindo o frete:
total = print((30+45)*8)

# Impressao do valor total:
print(600)
-- EXECUTION TIME:
0.210157
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
600
600
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
600
600
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
600
600
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:40:12) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("30"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("(30+45)*8")

# Impressao do valor total:
print("600")
-- OUTPUT:
(30+45)*8
600
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:40:15) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("30"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("(30+45)*8")

# Impressao do valor total:
print("600")
-- EXECUTION TIME:
0.230637
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
(30+45)*8
600
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
(30+45)*8
600
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
(30+45)*8
600
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:41:55) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("30.0"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("(30+45)*8")

# Impressao do valor total:
print("600.0")
-- OUTPUT:
(30+45)*8
600.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:41:58) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
preco = float(input("30.0"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("(30+45)*8")

# Impressao do valor total:
print("600.0")
-- EXECUTION TIME:
0.195405
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
(30+45)*8
600.0
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
(30+45)*8
600.0
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
(30+45)*8
600.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:43:53) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.
preco = 30.0
# Leitura das entradas e conversao para float:
valor = float(input("preco"))

# Calculo do valor a ser pago, incluindo o frete:
total = print()

# Impressao do valor total:
print("600.0")
-- OUTPUT:
600.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:43:58) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.
preco = 30.0
# Leitura das entradas e conversao para float:
valor = float(input("preco"))

# Calculo do valor a ser pago, incluindo o frete:
total = print()

# Impressao do valor total:
print("600.0")
-- EXECUTION TIME:
0.171125
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
600.0
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
600.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:44:00) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.
preco = 30.0
# Leitura das entradas e conversao para float:
valor = float(input("preco"))

# Calculo do valor a ser pago, incluindo o frete:
total = print()

# Impressao do valor total:
print("600.0")
-- OUTPUT:
600.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:52:42) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("10"))

# Calculo do valor a ser pago, incluindo o frete:
total = ?????

# Impressao do valor total:
print(?????)


-- ERROR:
File "XXXX", line 8
    total = ?????
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:53:44) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("10"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("55")

# Impressao do valor total:
print("440")


-- OUTPUT:
55
440
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:53:47) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("10"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("55")

# Impressao do valor total:
print("440")


-- EXECUTION TIME:
0.142742
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
55
440
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
55
440
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
55
440
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:54:31) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input(10))

# Calculo do valor a ser pago, incluindo o frete:
total = print(55)

# Impressao do valor total:
print(440)


-- OUTPUT:
1055
440
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:54:34) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input(10))

# Calculo do valor a ser pago, incluindo o frete:
total = print(55)

# Impressao do valor total:
print(440)


-- EXECUTION TIME:
0.160894
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
1055
440
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
1055
440
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
1055
440
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:54:35) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input(10))

# Calculo do valor a ser pago, incluindo o frete:
total = print(55)

# Impressao do valor total:
print(440)


-- OUTPUT:
1055
440
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:55:55) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = print(float(input(10)))

# Calculo do valor a ser pago, incluindo o frete:
total = print(55)

# Impressao do valor total:
print(440)


-- OUTPUT:
101.23
55
440
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:55:57) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = print(float(input(10)))

# Calculo do valor a ser pago, incluindo o frete:
total = print(55)

# Impressao do valor total:
print(440)


-- EXECUTION TIME:
0.138192
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
101.23
55
440
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
10356.0
55
440
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
10123987.0
55
440
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:56:02) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = print(float(input(10)))

# Calculo do valor a ser pago, incluindo o frete:
total = print(55)

# Impressao do valor total:
print(440)


-- OUTPUT:
101.23
55
440
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:56:16) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = print(float(input(10)))

# Calculo do valor a ser pago, incluindo o frete:
total = print(10+45)

# Impressao do valor total:
print(440)


-- OUTPUT:
101.23
55
440
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:57:33) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = print(float(input(10)))

# Calculo do valor a ser pago, incluindo o frete:
total = print((10+45*8))

# Impressao do valor total:
print(440)


-- OUTPUT:
101.23
370
440
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:57:33) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = print(float(input(10)))

# Calculo do valor a ser pago, incluindo o frete:
total = print((10+45*8))

# Impressao do valor total:
print(440)


-- OUTPUT:
101.23
370
440
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:57:33) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = print(float(input(10)))

# Calculo do valor a ser pago, incluindo o frete:
total = print((10+45)*8)

# Impressao do valor total:
print(440)


-- OUTPUT:
101.23
440
440
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 11:57:34) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = print(float(input(10)))

# Calculo do valor a ser pago, incluindo o frete:
total = print((10+45)*8)

# Impressao do valor total:
print(440)


-- EXECUTION TIME:
0.244108
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
101.23
440
440
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
10356.0
440
440
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
10123987.0
440
440
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 11:59:14) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = (float(input("dez"))

# Calculo do valor a ser pago, incluindo o frete:
total = print((10+45)*8)

# Impressao do valor total:
print(440)


-- ERROR:
File "XXXX", line 8
    total = print((10+45)*8)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:01:01) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
var = float(input("Qual o valor unitario do jogo? "))

# Calculo do valor a ser pago, incluindo o frete:
total = print(80+45)

# Impressao do valor total:
print(125)


-- OUTPUT:
125
125
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:01:08) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
var = float(input("Qual o valor unitario do jogo? "))

# Calculo do valor a ser pago, incluindo o frete:
total = print(80+45)

# Impressao do valor total:
print(125)


-- EXECUTION TIME:
0.141136
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
125
125
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
125
125
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
125
125
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:01:16) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
var = float(input("Qual o valor unitario do jogo? "))

# Calculo do valor a ser pago, incluindo o frete:
total = print(80+45)

# Impressao do valor total:
print(125)


-- OUTPUT:
125
125
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:01:27) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
var = float(input("Qual o valor unitario do jogo? 10"))

# Calculo do valor a ser pago, incluindo o frete:
total = print(80+45)

# Impressao do valor total:
print(125)


-- OUTPUT:
125
125
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:01:55) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
var = float(input("Qual o valor unitario do jogo? 10"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("80+45")

# Impressao do valor total:
print("125")


-- OUTPUT:
80+45
125
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:01:59) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
var = float(input("Qual o valor unitario do jogo? 10"))

# Calculo do valor a ser pago, incluindo o frete:
total = print("80+45")

# Impressao do valor total:
print("125")


-- EXECUTION TIME:
0.15141
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
80+45
125
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
80+45
125
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
80+45
125
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:03:22) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
var = float(input("jogo "))

# Calculo do valor a ser pago, incluindo o frete:
total = print("80+45")

# Impressao do valor total:
print("125")


-- OUTPUT:
80+45
125
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:03:27) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
var = float(input("jogo "))

# Calculo do valor a ser pago, incluindo o frete:
total = print("80+45")

# Impressao do valor total:
print("125")


-- OUTPUT:
80+45
125
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:03:30) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
var = float(input("jogo "))

# Calculo do valor a ser pago, incluindo o frete:
total = print("80+45")

# Impressao do valor total:
print("125")


-- EXECUTION TIME:
0.117184
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
80+45
125
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
80+45
125
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
80+45
125
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:04:28) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
????? = f???t(input("Qual o valor unitario do jogo? "))

# Calculo do valor a ser pago, incluindo o frete:
total = print(100)

# Impressao do valor total:
print(845)
-- ERROR:
File "XXXX", line 5
    ????? = f???t(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:04:52) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
linux = float(input("Qual o valor unitario do jogo? "))

# Calculo do valor a ser pago, incluindo o frete:
total = print(100)

# Impressao do valor total:
print(845)
-- OUTPUT:
100
845
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:04:58) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
linux = float(input("Qual o valor unitario do jogo? "))

# Calculo do valor a ser pago, incluindo o frete:
total = print(100)

# Impressao do valor total:
print(845)
-- EXECUTION TIME:
0.19497
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
100
845
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
100
845
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
100
845
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:05:21) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
linux = float(input("55 "))

# Calculo do valor a ser pago, incluindo o frete:
total = print(100)

# Impressao do valor total:
print(845)
-- EXECUTION TIME:
0.148869
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
100
845
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
100
845
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
100
845
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:05:24) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
linux = float(input("55 "))

# Calculo do valor a ser pago, incluindo o frete:
total = print(100)

# Impressao do valor total:
print(845)
-- OUTPUT:
100
845
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:05:48) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
linux = float(input("55 "))

# Calculo do valor a ser pago, incluindo o frete:
total = print(100)

# Impressao do valor total:
print(845)
-- EXECUTION TIME:
0.170273
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
100
845
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
100
845
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
100
845
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:07:56) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
linux = float(input("55 "))

# Calculo do valor a ser pago, incluindo o frete:
total = float(input("100 "))

# Impressao do valor total:
print(845)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    total = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:08:03) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
linux = float(input("55 "))

# Calculo do valor a ser pago, incluindo o frete:
total = float(input("100 "))

# Impressao do valor total:
print(845)
-- EXECUTION TIME:
0.164872
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2894/main.py", line 8, in <module>
    total = float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:08:31) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
linux = float(input("55 "))

# Calculo do valor a ser pago, incluindo o frete:
total = float(input("100 "))

# Impressao do valor total:
float(input("600"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    total = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:10:17) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
jogo = float(input("Digite o valor do jogo: "))

# Calculo do valor a ser pago, incluindo o frete:
total = 8 * jogo + 45

# Impressao do valor total:
print (total)
-- OUTPUT:
54.84
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:10:49) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
jogo = float(input("Digite o valor do jogo: "))

# Calculo do valor a ser pago, incluindo o frete:
total = 8 * jogo + 45

# Impressao do valor total:
print (total)
-- EXECUTION TIME:
0.239344
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
54.84
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
2893.0
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
991941.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
