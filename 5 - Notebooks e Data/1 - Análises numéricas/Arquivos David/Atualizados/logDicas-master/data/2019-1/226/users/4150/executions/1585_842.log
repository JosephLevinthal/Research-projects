== TEST (2019-03-26 00:10:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

Numero = int(input(" digite qualquer numero: "))

print( numero(%)+numero(//)+numero(%)+numero(//))


-- ERROR:
File "XXXX", line 7
    print( numero(%)+numero(//)+numero(%)+numero(//))
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 00:12:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

Numero = int(input(" digite qualquer numero: "))

print()


-- ERROR:
File "XXXX", line 7
    print( numero(%)+numero(//)+numero(%)+numero(//))
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 00:15:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

numero = int(input(" digite qualquer numero: "))

numero = (%)
numero1 = (//)
print(numero + numero1)
-- ERROR:
File "XXXX", line 7
    numero = (%)
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 11:37:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input(" digite qualquer numero de quatro digitos: "))


a=(num/1000)
a1=(num%1000)
b=(num/100)
b1= a1%100
c= b1//10
c1=b1%10
d=c1
print(a+b+c+d)

-- OUTPUT:
110.903
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:12:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input(" digite qualquer numero de quatro digitos: "))


a=(num//1000)
b=(a // 100)
c=(b//10)
d=(c % 10)

print(a+b+c+d)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:13:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input(" digite qualquer numero de quatro digitos: "))


a=(num//1000)
b=(a // 100)


print(a+b)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:18:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input(" digite qualquer numero de quatro digitos: "))


a = (num//1000)
b = ( num % 10)
c = (b // 10 )
d = (num % 10)



print(a+b+c+d)

-- OUTPUT:
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:40:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = 3141


a = (num//1000)
a1 = (num%1000)
b = (a1%100)
b1 = (b//10)
c = (num//100)
c1 =(c//10)
d = (num%10)



print(a+b1+c1+d)

-- OUTPUT:
11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:45:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = 3141


a = (num//1000)

b = (num//100)
b1 = (b//10)

c = (num%1000)
c1 = (c%100)
c2 = (c1//10)

d = (num%10)



print(a+b1+c1+d)

-- OUTPUT:
48
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:45:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = 3141


a = (num//1000)

b = (num//100)
b1 = (b//10)

c = (num%1000)
c1 = (c%100)
c2 = (c1//10)

d = (num%10)



print(a+b1+c2+d)

-- OUTPUT:
11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:46:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

int(input("digite um numero de quatro digitos: "))


a = (num//1000)

b = (num//100)
b1 = (b//10)

c = (num%1000)
c1 = (c%100)
c2 = (c1//10)

d = (num%10)



print(a+b1+c2+d)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    a = (num//1000)
NameError: name 'num' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:46:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input("digite um numero de quatro digitos: "))

a = (num//1000)

b = (num//100)
b1 = (b//10)

c = (num%1000)
c1 = (c%100)
c2 = (c1//10)

d = (num%10)



print(a+b1+c2+d)

-- OUTPUT:
28
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:46:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input("digite um numero de quatro digitos: "))

a = (num//1000)

b = (num//100)
b1 = (b//10)

c = (num%1000)
c1 = (c%100)
c2 = (c1//10)

d = (num%10)



print(a+b1+c2+d)

-- OUTPUT:
28
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:46:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input("digite um numero de quatro digitos: "))

a = (num//1000)

b = (num//100)
b1 = (b//10)

c = (num%1000)
c1 = (c%100)
c2 = (c1//10)

d = (num%10)



print(a+b1+c2+d)

-- OUTPUT:
28
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 15:47:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input("digite um numero de quatro digitos: "))

a = (num//1000)

b = (num//100)
b1 = (b//10)

c = (num%1000)
c1 = (c%100)
c2 = (c1//10)

d = (num%10)



print(a+b1+c2+d)

-- EXECUTION TIME:
0.149454
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
28
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:48:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input("digite um numero de quatro digitos: "))

a = (num//1000)

b = (num//100)
b1 = (b//10)

c = (num%1000)
c1 = (c%100)
c2 = (c1//10)

d = (num%10)



print(a+b1+c2+d)

-- OUTPUT:
28
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:51:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input("digite um numero de quatro digitos: "))

a = (num//1000)

b = (num//100)
b1 = (b%10)

c = (num%1000)
c1 = (c%100)
c2 = (c1//10)

d = (num%10)



print(a+b1+c2+d)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:51:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input("digite um numero de quatro digitos: "))

a = (num//1000)

b = (num//100)
b1 = (b%10)

c = (num%1000)
c1 = (c%100)
c2 = (c1//10)

d = (num%10)



print(a+b1+c2+d)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 15:51:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num = int(input("digite um numero de quatro digitos: "))

a = (num//1000)

b = (num//100)
b1 = (b%10)

c = (num%1000)
c1 = (c%100)
c2 = (c1//10)

d = (num%10)



print(a+b1+c2+d)

-- EXECUTION TIME:
0.154417
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
