== TEST (2019-04-30 10:54:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("valor de x: "))
a= float(input("valor de b: "))
b= float(input("valor de c: "))

if(b>a):
	if(x>=a) and (x<=b)
	print(x,"pertence ao intervalo",a ",",b)
	else:
	print(x, "nao pertence ao intervalo", a ",", b)
else:
	print("Entradas",a,"e",b,"invalidas")
-- ERROR:
File "XXXX", line 9
    if(x>=a) and (x<=b)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:54:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("valor de x: "))
a= float(input("valor de b: "))
b= float(input("valor de c: "))

if(b>a):
	if(x>=a) and (x<=b):
	print(x,"pertence ao intervalo",a ",",b)
	else:
	print(x, "nao pertence ao intervalo", a ",", b)
else:
	print("Entradas",a,"e",b,"invalidas")
-- ERROR:
File "XXXX", line 10
    print(x,"pertence ao intervalo",a ",",b)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:54:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("valor de x: "))
a= float(input("valor de b: "))
b= float(input("valor de c: "))

if(b>a):
	if(x>=a) and (x<=b):
		print(x,"pertence ao intervalo",a ",",b)
	else:
		print(x, "nao pertence ao intervalo", a ",", b)
else:
	print("Entradas",a,"e",b,"invalidas")
-- ERROR:
File "XXXX", line 10
    print(x,"pertence ao intervalo",a ",",b)
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:55:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("valor de x: "))
a= float(input("valor de b: "))
b= float(input("valor de c: "))

if(b>a):
	if(x>=a) and (x<=b):
		print(x,"pertence ao intervalo",a,",",b)
	else:
		print(x, "nao pertence ao intervalo",a,",",b)
else:
	print("Entradas",a,"e",b,"invalidas")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:56:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("valor de x: "))
a= float(input("valor de b: "))
b= float(input("valor de c: "))

if(b>a):
	if(x>=a) and (x<=b):
		print(x,"pertence ao intervalo",a,",",b)
	else:
		print(x, "nao pertence ao intervalo",a,",",b)
else:
	print("Entradas",a,"e",b,"invalidas")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:56:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("valor de x: "))
a= float(input("valor de b: "))
b= float(input("valor de c: "))

if(b>a):
	if(x>=a) and (x<=b):
		print(x,"pertence ao intervalo",a,",",b)
	else:
		print(x, "nao pertence ao intervalo",a,",",b)
else:
	print("Entradas",a,"e",b,"invalidas")
-- EXECUTION TIME:
0.164686
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
