== TEST (2019-05-14 11:00:59) 
-- CODE:
from math import*
n = int(input("numero: "))

soma = 0
i = 0
fim = n - 1

while(i <= fim):
	soma = soma + (1)** (i) * 1/((2*1 + 1) * 3 ** i) * sqrt(12)
	i = i + 1
print(round(soma, 8))
-- OUTPUT:
1.73204103
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 11:01:33) 
-- CODE:
from math import*
n = int(input("numero: "))

soma = 0
i = 0
fim = n - 1

while(i <= fim):
	soma = soma + (-1)** (i) * 1/((2*1 + 1) * 3 ** i) * sqrt(12)
	i = i + 1
print(round(soma, 8))
-- OUTPUT:
0.86603029
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 11:03:35) 
-- CODE:
from math import*
n = int(input("numero: "))

soma = 0
i = 1
fim = n - 1

while(i <= fim):
	soma = soma + (-1)** (i) * 1/((2*1 + 1) * 3 ** i) * sqrt(12)
	i = i + 1
print(round(soma, 8))
-- OUTPUT:
-0.28867025
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 11:03:44) 
-- CODE:
from math import*
n = int(input("numero: "))

soma = 0
i = 0
fim = n - 1

while(i <= fim):
	soma = soma + (-1)** (i) * 1/((2*1 + 1) * 3 ** i) * sqrt(12)
	i = i + 1
print(round(soma, 8))
-- OUTPUT:
0.86603029
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 11:04:25) 
-- CODE:
from math import*
n = int(input("numero: "))

soma = 0
i = 0
fim = n - 1

while(i <= fim):
	soma = soma + (-1)** (i) * 1/((2*i + 1) * 3 ** i) * sqrt(12)
	i = i + 1
print(round(soma, 8))
-- OUTPUT:
3.1415933
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 11:04:30) 
-- CODE:
from math import*
n = int(input("numero: "))

soma = 0
i = 0
fim = n - 1

while(i <= fim):
	soma = soma + (-1)** (i) * 1/((2*i + 1) * 3 ** i) * sqrt(12)
	i = i + 1
print(round(soma, 8))
-- EXECUTION TIME:
0.179789
-- TEST CASE 1:
---- input:
11
---- correct output:
3.1415933
---- user output:
3.1415933
-- TEST CASE 2:
---- input:
15
---- correct output:
3.14159266
---- user output:
3.14159266
-- TEST CASE 3:
---- input:
8
---- correct output:
3.14156872
---- user output:
3.14156872
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
