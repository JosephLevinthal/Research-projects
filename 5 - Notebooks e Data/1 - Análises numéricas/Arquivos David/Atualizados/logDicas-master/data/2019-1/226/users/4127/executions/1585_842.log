== TEST (2019-03-23 17:26:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=int(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=(n//100)
print(x1,x2)
-- OUTPUT:
9 91
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:27:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=int(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
print(x1,x2)
-- OUTPUT:
9 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:28:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=int(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-x1)
print(x1,x2,x3)
-- OUTPUT:
9 1 908
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:28:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=int(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-x2)
print(x1,x2,x3)
-- OUTPUT:
9 1 916
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:29:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=float(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-)
print(x1,x2,x3)
-- ERROR:
File "XXXX", line 7
    x3=((n//10)-)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:29:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=float(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)

print(x1,x2,x3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(x1,x2,x3)
NameError: name 'x3' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:29:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=float(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)

print(x1,x2)
-- OUTPUT:
9.0 1.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:30:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=float(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-n*100)
print(x1,x2,x3)
-- OUTPUT:
9.0 1.0 -916383.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:30:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=float(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-x1*100)
print(x1,x2,x3)
-- OUTPUT:
9.0 1.0 17.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:30:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=float(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-x2*100)
print(x1,x2,x3)
-- OUTPUT:
9.0 1.0 817.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:31:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=float(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-x1*1000)
print(x1,x2,x3)
-- OUTPUT:
9.0 1.0 -8083.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:31:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=float(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-x1*10)
print(x1,x2,x3)
-- OUTPUT:
9.0 1.0 827.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:33:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=int(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-n//100)
print(x1,x2,x3)
-- OUTPUT:
9 1 826
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:34:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=int(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-(n//100)*10)
print(x1,x2,x3)
-- OUTPUT:
9 1 7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:36:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=int(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-(n//100)*10)
x4=(n-(n//10)*10)
print(x1,x2,x3)
-- OUTPUT:
9 1 7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:36:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=int(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-(n//100)*10)
x4=(n-(n//10)*10)
print(x1,x2,x3,x4)
-- OUTPUT:
9 1 7 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:36:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=int(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-(n//100)*10)
x4=(n-(n//10)*10)
print(x1,x2,x3,x4)
-- OUTPUT:
9 1 7 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 17:36:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=int(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-(n//100)*10)
x4=(n-(n//10)*10)
print(x1,x2,x3,x4)
-- EXECUTION TIME:
0.148461
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9 1 7 3
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1 0 1 0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 17:36:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n=int(input("escreva um numero inteiro de quatro digitos: "))
x1=(n//1000)
x2=((n//100)-x1*10)
x3=((n//10)-(n//100)*10)
x4=(n-(n//10)*10)
print(x1+x2+x3+x4)
-- EXECUTION TIME:
0.125854
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
