== TEST (2019-05-16 11:09:25) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=1
soma=0
while(i<k):
	soma=soma+1+x**i**2/factorial(i**2)
	i=i+1
print(soma)
-- OUTPUT:
6.668077604543213
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:10:52) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=0
while(i<k):
	soma=soma+x**(2*i-1)/factorial(i**2)
	i=i+1
print(soma)
-- OUTPUT:
2.833421516760968
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:11:41) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=0
while(i<k):
	soma=soma+x**(2*i-1)/factorial(2*i-1)
	i=i+1
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma=soma+x**(2*i-1)/factorial(2*i-1)
ValueError: factorial() not defined for negative values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:12:08) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=1
soma=0
while(i<k):
	soma=soma+x**(2*i-1)/factorial(2*i-1)
	i=i+1
print(soma)
-- OUTPUT:
3.625396825396825
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:12:41) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=1
soma=1
while(i<k):
	soma=soma+x**(2*i-1)/factorial(2*i-1)
	i=i+1
print(soma)
-- OUTPUT:
4.625396825396825
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:13:18) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=1
while(i<k):
	soma=soma+x**(2*i-1)/factorial(2*i-1)
	i=i+1
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma=soma+x**(2*i-1)/factorial(2*i-1)
ValueError: factorial() not defined for negative values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:13:47) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=1
while(i<k):
	soma=soma+x**(2*i-1)/factorial(i**2)
	i=i+1
print(soma)
-- OUTPUT:
3.833421516760968
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:14:36) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=1
while(i<k):
	soma=soma+x**(2*i-1)/factorial(i**2)
	i=i+1
print(round(soma,8)
-- ERROR:
File "XXXX", line 10
    
                       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:14:57) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=1
while(i<k):
	soma=soma+x**(2*i-1)/factorial(i**2)
	i=i+1
print(round(soma,8))
-- OUTPUT:
3.83342152
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:15:21) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=0
while(i<k):
	soma=soma+x**(2*i-1)/factorial(i**2)
	i=i+1
print(round(soma,8))
-- OUTPUT:
2.83342152
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:16:33) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=1
while(i<k):
	soma=soma+x**(i**2)/factorial(i**2)
	i=i+1
print(round(soma,8))
-- OUTPUT:
4.6680776
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:16:44) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=0
while(i<k):
	soma=soma+x**(i**2)/factorial(i**2)
	i=i+1
print(round(soma,8))
-- OUTPUT:
3.6680776
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:17:46) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=0
while(i<k):
	soma=soma+1*x**(i**2)/factorial(i**2)
	i=i+1
print(round(soma,8))
-- OUTPUT:
3.6680776
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:18:06) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=0
while(i<k):
	soma=soma+1*x**(i**2)/factorial(i**2)
	i=i+1
print(round(soma,8))
-- OUTPUT:
3.6680776
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:18:26) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=0
while(i<k):
	soma=soma+1*x**(i**2)/factorial(i**2)
	i=i+1
print(round(soma,8))
-- OUTPUT:
3.6680776
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:18:45) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=0
soma=0
while(i<k):
	soma=soma+1*x**(i**2)/factorial(i**2)
	i=i+1
print(round(soma,8))
-- OUTPUT:
3.6680776
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:19:20) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=1
soma=0
while(i<k):
	soma=soma+1*x**(i**2)/factorial(i**2)
	i=i+1
print(round(soma,8))
-- OUTPUT:
2.6680776
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:19:34) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=1
soma=1
while(i<k):
	soma=soma+1*x**(i**2)/factorial(i**2)
	i=i+1
print(round(soma,8))
-- OUTPUT:
3.6680776
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 11:20:22) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=1
soma=1
while(i<k):
	soma=soma+1*x**(2*i)/factorial(2*i)
	i=i+1
print(round(soma,8))
-- OUTPUT:
3.76190476
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 11:20:34) 
-- CODE:
from math import*
x=float(input("digite um numero: "))
k=int(input("digite um numero: "))
i=1
soma=1
while(i<k):
	soma=soma+1*x**(2*i)/factorial(2*i)
	i=i+1
print(round(soma,8))
-- EXECUTION TIME:
0.11607
-- TEST CASE 1:
---- input:
2.0
5
---- correct output:
3.76190476
---- user output:
3.76190476
-- TEST CASE 2:
---- input:
10.0
2
---- correct output:
51.0
---- user output:
51.0
-- TEST CASE 3:
---- input:
12.0
35
---- correct output:
81377.39571257
---- user output:
81377.39571257
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
