== TEST (2019-04-25 10:22:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a = b + c) and (b = c + a) and (c = a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a==b) or (b==c) or (c ==a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- ERROR:
File "XXXX", line 7
    if((a = b + c) and (b = c + a) and (c = a + b)):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:22:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) and (b == c + a) and (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a==b) or (b==c) or (c ==a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:22:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) and (b == c + a) and (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a==b) or (b==c) or (c ==a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- EXECUTION TIME:
0.134677
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:22:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) and (b == c + a) and (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a==b) or (b==c) or (c ==a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:23:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a==b) or (b==c) or (c ==a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:23:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a==b) or (b==c) or (c ==a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- EXECUTION TIME:
0.195035
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:25:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:25:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- EXECUTION TIME:
0.205525
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:25:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- EXECUTION TIME:
0.181798
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:25:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:25:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- EXECUTION TIME:
0.170647
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
lado a: lado b: lado c: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:25:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- EXECUTION TIME:
0.249998
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1674/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:25:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
	
elif((a == b) and (b==c)):
		print("equilatero")
	
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")

elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
	
	
-- EXECUTION TIME:
0.195292
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:29:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")
elif((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:30:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:30:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- EXECUTION TIME:
0.135294
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:31:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- OUTPUT:
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:31:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- EXECUTION TIME:
0.246501
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:32:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" + a , b , c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("Entradas:" + a , b , c)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:32:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" + a , b , c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("Entradas:" + a , b , c)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:32:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" + a, "," b,"," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" + a, "," b,"," c)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:33:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" a, "," b,"," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" a, "," b,"," c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:33:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" a, b, c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" a, b, c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:34:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" a "," b "," c ",")

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" a "," b "," c ",")
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:34:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("entradas:" a "," b "," c ",")

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("entradas:" a "," b "," c ",")
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:35:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" a "," b "," c ",")

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" a "," b "," c ",")
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:35:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas": a "," b "," c ",")

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas": a "," b "," c ",")
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:35:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c ",")

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c ",")
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, "," b, "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a, "," b, "," c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a "," b "," c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:37:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:")
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- OUTPUT:
Entradas:
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:37:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- OUTPUT:
Entradas: 2.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:37:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a "," b)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" , a "," b)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:37:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a ",")
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" , a ",")
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:38:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, )
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- OUTPUT:
Entradas: 2.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:38:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, b)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- OUTPUT:
Entradas: 2.0 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:38:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, ","b)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" , a, ","b)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:38:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, "," b)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" , a, "," b)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:38:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, "," b)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" , a, "," b)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:38:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, "," b)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" , a, "," b)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:38:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, "," b)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- ERROR:
File "XXXX", line 6
    print("Entradas:" , a, "," b)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:38:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, ",", b)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:38:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, ",", b, ",", c)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:38:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, ",", b, ",", c)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("invalido")
elif((a == b) and (b == c)):
	print("equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("escaleno")

-- EXECUTION TIME:
0.18371
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:39:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, ",", b, ",", c)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Tipo de triangiulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo : invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:39:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, ",", b, ",", c)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Tipo de triangiulo: escaleno")

-- EXECUTION TIME:
0.112376
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo : invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangiulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangiulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, ",", b, ",", c)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Tipo de triangiulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo : invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:41:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:" , a, ",", b, ",", c)
if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Tipo de triangiulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo : invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:42:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:" , a, ",", b, ",", c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Tipo de triangiulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo : invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:42:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:" , a, ",", b, ",", c)

if((a <= b + c) or (b <= c + a) or (c <= a + b)):
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Tipo de triangiulo: escaleno")

-- EXECUTION TIME:
0.169092
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo : invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangiulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangiulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:44:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:" , a, ",", b, ",", c)

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Tipo de triangiulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:44:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:" , a, ",", b, ",", c)

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Tipo de triangiulo: escaleno")

-- EXECUTION TIME:
0.177606
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangiulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangiulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:44:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:" , a, ",", b, ",", c)

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Tipo de triangiulo: escaleno")

-- EXECUTION TIME:
0.147944
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangiulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:44:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:" , a, ",", b, ",", c)

if((a == b + c) or (b == c + a) or (c == a + b)):
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Tipo de triangiulo: escaleno")

-- EXECUTION TIME:
0.193804
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangiulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangiulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:45:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))


if((a == b + c) or (b == c + a) or (c == a + b)):
	print("Entradas:" , a, ",", b, ",", c)
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Entradas:" , a, ",", b, ",", c)
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Entradas:" , a, ",", b, ",", c)
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Entradas:" , a, ",", b, ",", c)
	print("Tipo de triangiulo: escaleno")

-- EXECUTION TIME:
0.134823
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangiulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangiulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:45:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))


if((a == b + c) or (b == c + a) or (c == a + b)):
	print("Entradas:" , a, ",", b, ",", c)
	print("Tipo de triangiulo : invalido")
elif((a == b) and (b == c)):
	print("Entradas:" , a, ",", b, ",", c)
	print("Tipo de triangiulo: equilatero")
elif((a == b) or (b == c) or (c == a)):
	print("Entradas:" , a, ",", b, ",", c)
	print("Tipo de triangiulo: isosceles")
elif((a != b) and (b != c) and (a != c)):
	print("Entradas:" , a, ",", b, ",", c)
	print("Tipo de triangiulo: escaleno")

-- EXECUTION TIME:
0.167279
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangiulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangiulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangiulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:50:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:" , a, ",", b, ",", c)


if( a<b+c and b<c+a and c<b+a):
	if(a==b and b == c):
		print("Tipo de triangulo: equilatero")
	elif(a==b and b!=c or b==c and b!=a):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
		
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.203838
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
