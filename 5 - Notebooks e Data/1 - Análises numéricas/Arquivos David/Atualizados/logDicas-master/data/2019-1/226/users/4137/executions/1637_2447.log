== TEST (2019-04-06 20:09:38) 
-- CODE:
preco = float(input("Qual o valor do produto:"))
pagamento = float(input("Valor pago:"))

if (preco >= pagamento):
	msg = "Troco" + " " + "de" + " " + pagamento - preco
else:
	msg = "Falta" + " " + preco - pagamento
	
print(round(msg, 2))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    msg = "Troco" + " " + "de" + " " + pagamento - preco
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:10:29) 
-- CODE:
preco = float(input("Qual o valor do produto:"))
pagamento = float(input("Valor pago:"))

if (preco >= pagamento):
	msg = "Troco" + " " + "de" + " " + (pagamento - preco)
else:
	msg = "Falta" + " " + (preco - pagamento)
	
print(round(msg, 2))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    msg = "Troco" + " " + "de" + " " + (pagamento - preco)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:14:06) 
-- CODE:
preco = float(input("Qual o valor do produto:"))
pagamento = float(input("Valor pago:"))

if (pagamento >= preco):
	msg = "Troco" + " " + "de" + (pagamento - preco)
else:
	msg = "Falta" + " " + + (preco - pagamento)
print(round(msg, 2))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    msg = "Falta" + " " + + (preco - pagamento)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:15:35) 
-- CODE:
preco = float(input("Qual o valor do produto:"))
pagamento = float(input("Valor pago:"))
troco = pagamento - preco

if (pagamento >= preco):
	msg = "Troco" + " " + "de" + troco
else:
	msg = "Falta" + " " +  troco
print(round(msg, 2))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    msg = "Falta" + " " +  troco
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:15:42) 
-- CODE:
preco = float(input("Qual o valor do produto:"))
pagamento = float(input("Valor pago:"))
troco = pagamento - preco

if (pagamento >= preco):
	msg = "Troco" + " " + "de" + troco
else:
	msg = "Falta" + " " +  troco
print(round(msg, 2))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    msg = "Falta" + " " +  troco
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:18:47) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = "Falta" + " " + (pcr - pgm)
else:
	msg = "Troco" + " " + "de" + " " + (pcr - pgm)
print(msg)	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    msg = "Falta" + " " + (pcr - pgm)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:18:58) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = "Falta" + " " + (pcr - pgm)
else:
	
print(msg)	
-- ERROR:
File "XXXX", line 8
    print(msg)	
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:19:12) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = "Falta" + " " + (pcr - pgm)
else:
	msg = "FDS"
print(msg)	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    msg = "Falta" + " " + (pcr - pgm)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:19:34) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = "Falta" + " " + (pcr - pgm)
else:
	msg = "FDS"
print(msg)	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    msg = "Falta" + " " + (pcr - pgm)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:02:32) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = "Falta" + " " + (pcr - pgm)
else:
	msg = "FDS"
print(msg)	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    msg = "Falta" + " " + (pcr - pgm)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:03:52) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
else:
	msg = (pgm - pcr)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    msg = "Falta" + " " + (pcr - pgm)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:04:07) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
else:
	msg = (pgm - pcr)

print(msg)	
-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:04:16) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
else:
	msg = (pgm - pcr)

print(msg)	
-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:04:33) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = "Falta"(pcr - pgm)
else:
	msg = (pgm - pcr)

print(msg)	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    msg = "Falta"(pcr - pgm)
TypeError: 'str' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:04:49) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = "FALTA" + (pcr - pgm)
else:
	msg = (pgm - pcr)

print(msg)	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    msg = "FALTA" + (pcr - pgm)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:06:05) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
	msg = "flata" + msg
else:
	msg = (pgm - pcr)

print(msg)	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "flata" + msg
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:07:29) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
	print("Falta" + " " + msg)
else:
	msg = (pgm - pcr)
	print("Troco" + " " + "De" + msg)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("Falta" + " " + msg)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:08:07) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = ("falta" )+ (pcr - pgm)
	
else:
	msg = (pgm - pcr)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    msg = ("falta" )+ (pcr - pgm)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:08:19) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = int("falta" )+ (pcr - pgm)
	
else:
	msg = (pgm - pcr)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    msg = int("falta" )+ (pcr - pgm)
ValueError: invalid literal for int() with base 10: 'falta'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:11:05) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
	print("falta")
	
else:
	msg = (pgm - pcr)
	print("troco")

-- OUTPUT:
falta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:11:28) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
	print("falta")
	
else:
	msg = (pgm - pcr)
	print("troco")
	
print(msg)
-- OUTPUT:
falta
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 09:11:38) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
	print("falta")
	
else:
	msg = (pgm - pcr)
	print("troco")
	
print(msg)
-- EXECUTION TIME:
0.124629
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta
26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
troco
28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
falta
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 09:11:39) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
	print("falta")
	
else:
	msg = (pgm - pcr)
	print("troco")
	
print(msg)
-- EXECUTION TIME:
0.119739
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta
26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
troco
28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
falta
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:11:49) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
	print("falta")
	
else:
	msg = (pgm - pcr)
	print("troco" + "de" + msg)
	
print(msg)
-- OUTPUT:
falta
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:11:54) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
	print("falta")
	
else:
	msg = (pgm - pcr)
	print("troco" + "de" + msg)
	
print(msg)
-- OUTPUT:
falta
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:12:05) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
	print("falta")
	
else:
	msg = (pgm - pcr)
	print("troco" + "de" ) + msg
	
print(msg)
-- OUTPUT:
falta
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:12:29) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	msg = (pcr - pgm)
	print("falta")
	
else:
	msg = (pgm - pcr)
	print("troco" + "de" ) + (pgm - pcr)
	
print(msg)
-- OUTPUT:
falta
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:14:55) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + x
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + x
	
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "falta" + " " + x
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:15:13) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = float(pcr - pgm)
	msg = "falta" + " " + x
	
else:
	x = float(pgm - pcr)
	msg = "troco" + " " + "de" + " " + x
	
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "falta" + " " + x
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:15:49) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = float(pcr - pgm)
	msg = ("falta" + " " + x)
	
else:
	x = float(pgm - pcr)
	msg = "troco" + " " + "de" + " " + x
	
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = ("falta" + " " + x)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:22:09) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = int(pcr - pgm)
	msg = "falta" + " " + x
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + x
	
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "falta" + " " + x
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:22:32) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = int(pcr - pgm)
	msg = "falta" + " " + (x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + x
	
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "falta" + " " + (x)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:22:47) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + (x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + x
	
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "falta" + " " + (x)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:30:52) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + "x"
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + x
	
	
print(msg)
-- OUTPUT:
falta x
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:31:54) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = ("falta" + " ")
	
else:
	x = (pgm - pcr)
	msg = ("troco" + " " + "de" + " ")
	
	
print(msg + x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(msg + x)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:32:08) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = ("falta" + " ")
	
else:
	x = (pgm - pcr)
	msg = ("troco" + " " + "de" + " ")
	
	
print(msg)
-- OUTPUT:
falta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:32:16) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = ("falta" + " ")
	
else:
	x = (pgm - pcr)
	msg = ("troco" + " " + "de" + " ")
	
	
print(msg)
-- OUTPUT:
falta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:32:27) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = ("falta" + " ")
	
else:
	x = (pgm - pcr)
	msg = ("troco" + " " + "de" + " ")
	
	
print(msg) + x
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(msg) + x
TypeError: unsupported operand type(s) for +: 'NoneType' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 09:32:45) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = ("falta" + " ")
	
else:
	x = (pgm - pcr)
	msg = ("troco" + " " + "de" + " ")
	
	
print(msg + x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(msg + x)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:41:35) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = ("falta" + " " + x)
	
else:
	x = (pgm - pcr)
	msg = ("troco" + " " + "de" + " " + x)
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = ("falta" + " " + x)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:43:04) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = ("troco" + " " + "de" + " " + x)
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = ("falta" + " " + x)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:43:17) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = ("troco" + " " + "de" + " " + x)
	
print(msg)	
-- OUTPUT:
falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 10:43:28) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(msg)	
-- EXECUTION TIME:
0.112825
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
falta 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:43:28) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(msg)	
-- OUTPUT:
falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:43:38) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(msg)	
-- OUTPUT:
falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 10:43:55) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(msg)	
-- EXECUTION TIME:
0.138629
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
falta 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 10:43:57) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(msg)	
-- EXECUTION TIME:
0.126895
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
falta 26.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
falta 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 10:43:57) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(msg)	
-- EXECUTION TIME:
0.223724
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:

-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
falta 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 10:43:58) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(msg)	
-- EXECUTION TIME:
0.155027
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta 0.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
falta 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 10:44:07) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(round(msg, 2)	
-- EXECUTION TIME:
0.133144
-- ERROR:
  File "/home/codebench/codes/1637/2447/main.py", line 13
    
                        ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:44:12) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(round(msg, 2)	
-- ERROR:
File "XXXX", line 13
    
                        ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 10:44:21) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(round(msg, 2))	
-- EXECUTION TIME:
0.144814
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2447/main.py", line 12, in <module>
    print(round(msg, 2))	
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 10:44:22) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(round(msg, 2))	
-- EXECUTION TIME:
0.172739
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2447/main.py", line 12, in <module>
    print(round(msg, 2))	
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:44:22) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(round(msg, 2))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(msg, 2))	
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:44:32) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(round(msg, 2))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(msg, 2))	
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:44:58) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
round(print(msg, 2))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    round(print(msg, 2))	
TypeError: type NoneType doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:45:34) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(round(msg, 2))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(msg, 2))	
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:45:48) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr >= pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + x
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + x
	
print(round(msg, 2))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "falta" + " " + x
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 10:46:53) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + x
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + x
	
print(round(msg, 2))	
-- EXECUTION TIME:
0.146893
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2447/main.py", line 6, in <module>
    msg = "falta" + " " + x
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:47:04) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + x
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + x
	
print(round(msg, 2))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "falta" + " " + x
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 10:48:49) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
float(print(round(msg, 2)))	
-- EXECUTION TIME:
0.211261
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2447/main.py", line 12, in <module>
    float(print(round(msg, 2)))	
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:48:50) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
float(print(round(msg, 2)))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    float(print(round(msg, 2)))	
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 10:49:04) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(round(float(msg, 2)))	
-- EXECUTION TIME:
0.153482
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2447/main.py", line 12, in <module>
    print(round(float(msg, 2)))	
TypeError: float() takes at most 1 argument (2 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:49:07) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(round(float(msg, 2)))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(float(msg, 2)))	
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:49:20) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(round(float(msg, (2)))	
-- ERROR:
File "XXXX", line 13
    
                                 ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:49:24) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + str(x)
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(round(float(msg, (2))))	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(float(msg, (2))))	
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:50:41) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + x
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + x
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "falta" + " " + x
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:51:17) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + x
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + (pcr-pgm)
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "falta" + " " + x
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 10:51:29) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = (pcr - pgm)
	msg = "falta" + " " + x
	
else:
	x = (pgm - pcr)
	msg = "troco" + " " + "de" + " " + str(pcr-pgm)
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "falta" + " " + x
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 11:03:49) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = round(pcr - pgm, 2)
	msg = "falta" + " " + str(x)
	
else:
	x = round(pgm - pcr, 2)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(msg)
-- EXECUTION TIME:
0.183532
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
troco de 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 11:03:50) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = round(pcr - pgm, 2)
	msg = "falta" + " " + str(x)
	
else:
	x = round(pgm - pcr, 2)
	msg = "troco" + " " + "de" + " " + str(x)
	
print(msg)
-- OUTPUT:
falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 11:04:11) 
-- CODE:
pcr = float(input("Qual o valor do produto:"))
pgm = float(input("Valor pago:"))

if (pcr > pgm):
	x = round(pcr - pgm, 2)
	msg = "Falta" + " " + str(x)
	
else:
	x = round(pgm - pcr, 2)
	msg = "Troco" + " " + "de" + " " + str(x)
	
print(msg)
-- EXECUTION TIME:
0.117693
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de 0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
