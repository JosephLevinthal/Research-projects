== TEST (2019-05-01 23:02:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))


-- OUTPUT:
A entrada 9 eh invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:20:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))

print("Entradas:",H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r):
	if(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print=("Volume:",round(v*1000, 3),"litros")
	elif(r<h and h<H-r):
		v=(4*pi*(r**3)/6)+(pi*(r**2)*(h-r))
		print("Volume:",round(v*1000, 3), "litros")
	elif(h>H-r):
		v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2)
		print("Volume:",round(v*1000, 3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.313533
-- ERROR:
  File "/home/codebench/codes/1674/1102/main.py", line 20
    v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2)
                                               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:20:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))

print("Entradas:",H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r):
	if(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print=("Volume:",round(v*1000, 3),"litros")
	elif(r<h and h<H-r):
		v=(4*pi*(r**3)/6)+(pi*(r**2)*(h-r))
		print("Volume:",round(v*1000, 3), "litros")
	elif(h>H-r):
		v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2)
		print("Volume:",round(v*1000, 3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.195589
-- ERROR:
  File "/home/codebench/codes/1674/1102/main.py", line 20
    v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2)
                                               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 23:20:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))

print("Entradas:",H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r):
	if(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print=("Volume:",round(v*1000, 3),"litros")
	elif(r<h and h<H-r):
		v=(4*pi*(r**3)/6)+(pi*(r**2)*(h-r))
		print("Volume:",round(v*1000, 3), "litros")
	elif(h>H-r):
		v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2)
		print("Volume:",round(v*1000, 3), "litros")
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 20
    v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2)
                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 23:21:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))

print("Entradas:",H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r):
	if(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print=("Volume:",round(v*1000, 3),"litros")
	elif(r<h and h<H-r):
		v=(4*pi*(r**3)/6)+(pi*(r**2)*(h-r))
		print("Volume:",round(v*1000, 3), "litros")
	elif(h>H-r):
		v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2
		print("Volume:",round(v*1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 23:21:16) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))

print("Entradas:",H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r):
	if(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print=("Volume:",round(v*1000, 3),"litros")
	elif(r<h and h<H-r):
		v=(4*pi*(r**3)/6)+(pi*(r**2)*(h-r))
		print("Volume:",round(v*1000, 3), "litros")
	elif(h>H-r):
		v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2
		print("Volume:",round(v*1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 23:21:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))

print("Entradas:",H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r):
	if(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print=("Volume:",round(v*1000, 3),"litros")
	elif(r<h and h<H-r):
		v=(4*pi*(r**3)/6)+(pi*(r**2)*(h-r))
		print("Volume:",round(v*1000, 3), "litros")
	elif(h>H-r):
		v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2
		print("Volume:",round(v*1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 23:21:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))

print("Entradas:",H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r):
	if(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print=("Volume:",round(v*1000, 3),"litros")
	elif(r<h and h<H-r):
		v=(4*pi*(r**3)/6)+(pi*(r**2)*(h-r))
		print("Volume:",round(v*1000, 3), "litros")
	elif(h>H-r):
		v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2
		print("Volume:",round(v*1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 23:21:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))

print("Entradas:",H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r):
	if(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print=("Volume:",round(v*1000, 3),"litros")
	elif(r<h and h<H-r):
		v=(4*pi*(r**3)/6)+(pi*(r**2)*(h-r))
		print("Volume:",round(v*1000, 3), "litros")
	elif(h>H-r):
		v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2
		print("Volume:",round(v*1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 23:23:50) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))

print("Entradas:",H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r):
	if(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print=("Volume:",round(v*1000, 3),"litros")
	elif(r<h and h<H-r):
		#v=(pi*(r**2)*h)+((pi/3)*h**2)*(3*r-h))
		v=(4*pi*(r**3)/6)+(pi*(r**2)*(h-r))
		print("Volume:",round(v*1000, 3), "litros")
	elif(h>H-r):
		v=((4*pi*(r**3))/6)+(pi/3)*((r**2)*(h-r))*2
		print("Volume:",round(v*1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 23:26:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))

print("Entradas:",H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r):
	if(h<=r):
		v=(pi/3)*(h**2)*(3*r-h)
		print=("Volume:",round(v*1000, 3),"litros")
	elif(r<h and h<H-r):
		#v=(pi*(r**2)*h)+((pi/3)*(h**2)*(3*r-h))
		v=(4*pi*(r**3)/6)+(pi*(r**2)*(h-r))
		print("Volume:",round(v*1000, 3), "litros")
	elif(h>H-r):
		v=((4*pi*(r**3))/6)+((pi/3)*((r**2)*(h-r))*2)
		print("Volume:",round(v*1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 23:27:05) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H = float(input ("H: "))
h = float(input ("h: "))
r = float(input ("r: "))

print("Entradas:",H,",",h,",",r)
if(H>0 and h>0 and r>0 and H>h and H>2*r):
	if(h<=r):
		v=(pi/3)*(h**2)*(3*r-h)
		print=("Volume:",round(v*1000, 3),"litros")
	elif(r<h and h<H-r):
		#v=(pi*(r**2)*h)+((pi/3)*(h**2)*(3*r-h))
		v=(4*pi*(r**3)/6)+(pi*(r**2)*(h-r))
		print("Volume:",round(v*1000, 3), "litros")
	elif(h>H-r):
		v=((4*pi*(r**3))/6)+((pi/3)*((r**2)*(h-r))*2)
		print("Volume:",round(v*1000, 3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.15572
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
