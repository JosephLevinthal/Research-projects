== TEST (2019-04-25 11:59:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	elif (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		elif (consumo <= 1000):
			print((consumo*0.55)"kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60)"kWh e tipo", tipo)
	else:
		if (tipo.upper() == "I"):
			elif (consumo <= 5000):
				print((consumo*0.55)"kWh e tipo", tipo)
			elif (consumo > 5000):
				print((consumo*0.60)"kWh e tipo", tipo)
		else:
			print("Entradas: ", "kWh e tipo", tipo)
			print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 10
    elif (consumo <= 500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:00:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
elif (consumo <= 500):
	print((consumo*0.44), "kWh e tipo", tipo)
elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
	elif (consumo <= 1000):
		print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60)"kWh e tipo", tipo)
	else:
		if (tipo.upper() == "I"):
		elif (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
		elif (consumo > 5000):
			print((consumo*0.60)"kWh e tipo", tipo)
		else:
			print("Entradas: ", "kWh e tipo", tipo)
			print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 10
    elif (consumo <= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:00:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
elif (consumo <= 500):
	print((consumo*0.44), "kWh e tipo", tipo)
elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
	elif (consumo <= 1000):
		print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60)"kWh e tipo", tipo)
	else:
		if (tipo.upper() == "I"):
		elif (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
		elif (consumo > 5000):
			print((consumo*0.60)"kWh e tipo", tipo)
		else:
			print("Entradas: ", "kWh e tipo", tipo)
			print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 10
    elif (consumo <= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:01:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
	print((consumo*0.44), "kWh e tipo", tipo)
elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
	elif (consumo <= 1000):
		print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60)"kWh e tipo", tipo)
	else:
		if (tipo.upper() == "I"):
		elif (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
		elif (consumo > 5000):
			print((consumo*0.60)"kWh e tipo", tipo)
		else:
			print("Entradas: ", "kWh e tipo", tipo)
			print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 11
    print((consumo*0.44), "kWh e tipo", tipo)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:02:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
	elif (consumo <= 1000):
		print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60)"kWh e tipo", tipo)
	else:
		if (tipo.upper() == "I"):
		elif (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
		elif (consumo > 5000):
			print((consumo*0.60)"kWh e tipo", tipo)
		else:
			print("Entradas: ", "kWh e tipo", tipo)
			print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 16
    elif (consumo <= 1000):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:02:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
	elif (consumo <= 1000):
		print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60)"kWh e tipo", tipo)
	else:
		if (tipo.upper() == "I"):
		elif (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
		elif (consumo > 5000):
			print((consumo*0.60)"kWh e tipo", tipo)
		else:
			print("Entradas: ", "kWh e tipo", tipo)
			print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 16
    elif (consumo <= 1000):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:02:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60)"kWh e tipo", tipo)
	else:
		if (tipo.upper() == "I"):
		elif (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
		elif (consumo > 5000):
			print((consumo*0.60)"kWh e tipo", tipo)
		else:
			print("Entradas: ", "kWh e tipo", tipo)
			print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 17
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:02:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60)"kWh e tipo", tipo)
	else:
		if (tipo.upper() == "I"):
		elif (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
		elif (consumo > 5000):
			print((consumo*0.60)"kWh e tipo", tipo)
		else:
			print("Entradas: ", "kWh e tipo", tipo)
			print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 17
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:03:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60)"kWh e tipo", tipo)
	else:
		if (tipo.upper() == "I"):
		elif (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
		elif (consumo > 5000):
			print((consumo*0.60)"kWh e tipo", tipo)
		else:
			print("Entradas: ", "kWh e tipo", tipo)
			print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 17
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:03:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60)"kWh e tipo", tipo)
	else:
		if (tipo.upper() == "I"):
		elif (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
		elif (consumo > 5000):
			print((consumo*0.60)"kWh e tipo", tipo)
		else:
			print("Entradas: ", "kWh e tipo", tipo)
			print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 17
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:03:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60)"kWh e tipo", tipo)
	else:
		if (tipo.upper() == "I"):
		elif (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
		elif (consumo > 5000):
			print((consumo*0.60)"kWh e tipo", tipo)
		else:
			print("Entradas: ", "kWh e tipo", tipo)
			print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 19
    print((consumo*0.60)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:06:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:06:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:08:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 15
    if (tipo.upper() == "C"):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:08:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 15
    if (tipo.upper() == "C"):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:08:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
   if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 16
    if (consumo <= 1000):
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:08:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
   if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 16
    if (consumo <= 1000):
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:10:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
   if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 16
    if (consumo <= 1000):
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:11:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
if (tipo.upper() == "C"):
	if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 15
    if (tipo.upper() == "C"):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:11:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
if (tipo.upper() == "C"):
	if (consumo <= 1000):
		print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 15
    if (tipo.upper() == "C"):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:12:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:12:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
else:
if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:12:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
else:
if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:12:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:13:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
 else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:13:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
   else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:13:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:14:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
   else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:14:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:14:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:14:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
else:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)

			
-- OUTPUT:
Entradas:  -56.0 e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:15:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
elif:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 14
    elif:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:16:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
   elif:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 14
    elif:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:16:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
      elif:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 14
    elif:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:16:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
		elif:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 14
    elif:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:16:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif:
	if (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 14
    elif:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:16:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif: (tipo.upper() == "C"):
	if 
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 14
    elif: (tipo.upper() == "C"):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:16:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif: (tipo.upper() == "C"):
	if 
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 14
    elif: (tipo.upper() == "C"):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:16:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
	if 
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 15
    if 
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:17:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
		elif (consumo > 1000):
			print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 19
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:17:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
      else:
	if (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 19
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:17:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 21
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:17:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 21
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:20:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 21
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:20:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	   elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 21
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:20:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	   elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 21
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:20:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 21
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:21:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 21
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:21:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 21
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:21:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55)"kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 21
    print((consumo*0.55)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:23:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60)"kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- ERROR:
File "XXXX", line 23
    print((consumo*0.60)"kWh e tipo", tipo)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:23:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C)")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- OUTPUT:
Entradas:  -56.0 e tipo I
Entradas:  kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:23:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Entradas: ", "kWh e tipo", tipo)
	print("Dados invalidos")
			
-- OUTPUT:
Entradas:  -56.0 e tipo I
Entradas:  kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:25:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:26:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:19:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:19:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:20:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo)

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
	elif (tipo.upper() == "C"):
		if (consumo <= 1000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
	elif (tipo.upper() == "I"):
		if (consumo <= 5000):
			print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:27:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
elif (consumo <= 500):
	print((consumo*0.44), "kWh e tipo", tipo)
elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
elif (consumo <= 1000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 1000):
	print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
elif (consumo <= 5000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 5000):
	print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 10
    elif (consumo <= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:27:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	elif (consumo <= 500):
	print((consumo*0.44), "kWh e tipo", tipo)
elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
elif (consumo <= 1000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 1000):
	print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
elif (consumo <= 5000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 5000):
	print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 10
    elif (consumo <= 500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:28:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	elif (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
elif (consumo <= 1000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 1000):
	print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
elif (consumo <= 5000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 5000):
	print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 10
    elif (consumo <= 500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:28:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
elif (consumo <= 500):
	print((consumo*0.44), "kWh e tipo", tipo)
elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
elif (consumo <= 1000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 1000):
	print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
elif (consumo <= 5000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 5000):
	print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 10
    elif (consumo <= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:30:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	elif (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
elif (consumo <= 1000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 1000):
	print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
elif (consumo <= 5000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 5000):
	print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 10
    elif (consumo <= 500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:30:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
   elif (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
elif (consumo <= 1000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 1000):
	print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
elif (consumo <= 5000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 5000):
	print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 10
    elif (consumo <= 500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:32:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
elif (consumo <= 1000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 1000):
	print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
elif (consumo <= 5000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 5000):
	print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 15
    elif (consumo <= 1000):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:34:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
	print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
elif (consumo <= 1000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 1000):
	print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
elif (consumo <= 5000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 5000):
	print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 13
    print((consumo*0.65), "kWh e tipo", tipo)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:34:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
	if (consumo <= 1000):
		print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
elif (consumo <= 5000):
	print((consumo*0.55), "kWh e tipo", tipo)
elif (consumo > 5000):
	print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 20
    elif (consumo <= 5000):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:35:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo)
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
	if (consumo <= 1000):
		print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
	if (consumo <= 5000):
		print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.800000000000004 kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:35:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo.upper())
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
	if (consumo <= 1000):
		print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
	if (consumo <= 5000):
		print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.800000000000004 kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:36:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo.upper())
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo)
if (tipo.upper() == "C"):
	if (consumo <= 1000):
		print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
	if (consumo <= 5000):
		print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.800000000000004 kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:37:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		print((consumo*0.44), "kWh e tipo", tipo.upper())
	elif (consumo > 500):
		print((consumo*0.65), "kWh e tipo", tipo.upper())
if (tipo.upper() == "C"):
	if (consumo <= 1000):
		print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 1000):
		print((consumo*0.60), "kWh e tipo", tipo)
if (tipo.upper() == "I"):
	if (consumo <= 5000):
		print((consumo*0.55), "kWh e tipo", tipo)
	elif (consumo > 5000):
		print((consumo*0.60), "kWh e tipo", tipo)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.800000000000004 kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:43:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		r = ((consumo*0.44), "kWh e tipo", tipo)
		round(r, 2)
		print("Valor total: R$", r)
	elif (consumo > 500):
		R = ((consumo*0.65), "kWh e tipo", tipo)
		round(R, 2)
		print("Valor total: R$", R)
if (tipo.upper() == "C"):
	if (consumo <= 1000):
		c =((consumo*0.55), "kWh e tipo", tipo)
		round(c, 2)
		print("Valor total: R$", c)
	elif (consumo > 1000):
		C = ((consumo*0.60), "kWh e tipo", tipo)
		round(C, 2)
		print("Valor total: R$", C)
if (tipo.upper() == "I"):
	if (consumo <= 5000):
		i = ((consumo*0.55), "kWh e tipo", tipo)
		round(i, 2)
		print("Valor total: R$", i)
	elif (consumo > 5000):
		I = ((consumo*0.60), "kWh e tipo", tipo)
		round(I, 2)
		print("Valor total: R$", I)
else:
	print("Dados invalidos")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 30, in <module>
    round(i, 2)
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:14:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (consumo <= 500):
	print(round(consumo*0,44),2)
	

-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-0.0 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:15:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (consumo <= 500):
	print(round(consumo*0,44),2)
	

-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-0.0 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:29:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round(x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		print(round(x,2))
	else:
		x = consumo*0.60
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x,2))
	else:
		x = consumo*0.60
		print(round(x,2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:32:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round("Valor total: R$", x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		print(round(x,2))
	else:
		x = consumo*0.60
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x,2))
	else:
		x = consumo*0.60
		print(round(x,2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:33:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round("Valor total: R$", x, 2))
	else:
		x = consumo*0.65
		print(round("Valor total: R$", x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		print(round("Valor total: R$", x, 2))
	else:
		x = consumo*0.60
		print(round("Valor total: R$", x, 2))
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round("Valor total: R$", x, 2))
	else:
		x = consumo*0.60
		print(round("Valor total: R$", x, 2))
else:
	print("Dados invalidos")
		
		

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 26, in <module>
    print(round("Valor total: R$", x, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:34:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round(x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:35:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round(x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = round(consumo*0.55),2
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:35:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round(x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = round(consumo*0.55),2
		print("Valor total: R$", x)
	else:
		x = consumo*0.60
		print(round(x, 2))
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:36:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round(x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = round(consumo*0.55),2
		print("Valor total: R$", x)
	else:
		x = consumo*0.60
		print(round(x, 2))
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:36:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round(x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = round(consumo*0.55),3
		print("Valor total: R$", x)
	else:
		x = consumo*0.60
		print(round(x, 2))
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:37:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round(x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = round(consumo*0.55),2
		print("Valor total: R$", x)
	else:
		x = consumo*0.60
		print(round(x, 2))
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:38:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas: ", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round(x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:39:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round(x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		print(round("Valor total: R$",x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:39:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round(x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		print(round("Valor total: R$",x),2)
	else:
		x = consumo*0.60
		print(round(x, 2))
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:41:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		print(round(x, 2))
	else:
		x = consumo*0.65
		print(round(x, 2))
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		print(round(x, 2))
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		print(round(x, 2))
	else:
		x = consumo*0.60
		print(round(x, 2))
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
-30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:43:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:43:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
else:
	print("Dados invalidos")
		
		

-- EXECUTION TIME:
0.143369
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:43:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:55:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:07:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:08:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
else:
	print("Dados invalidos")
		
		

-- EXECUTION TIME:
0.144315
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:08:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:11:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
else:
	print("Dados invalidos")
		
		

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:14:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
else:
	if (consumo < 0)
	print("Dados invalidos")
		
		

-- ERROR:
File "XXXX", line 37
    if (consumo < 0)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:14:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
else:
	if (consumo < 0):
		print("Dados invalidos")
		
		

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:15:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (consumo < 0):
		print("Dados invalidos")
		
		

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:17:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
		
		

-- ERROR:
File "XXXX", line 36
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:19:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		print("Dados invalidos")


-- ERROR:
File "XXXX", line 36
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:19:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		print("Dados invalidos")


-- ERROR:
File "XXXX", line 36
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:20:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
	if (consumo < 0)
		print("Dados invalidos")


-- ERROR:
File "XXXX", line 36
    if (consumo < 0)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:20:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
	if (consumo < 0):
		print("Dados invalidos")


-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:20:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
	if (consumo < 0):
		print("Dados invalidos")


-- EXECUTION TIME:
0.135165
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:20:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
	if (consumo < 0):
		print("Dados invalidos")


-- EXECUTION TIME:
0.146596
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:20:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
	if (consumo < 0):
		print("Dados invalidos")


-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:23:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
elif (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 10
    elif (tipo.upper() == "R"):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:23:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	elif (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 10
    elif (tipo.upper() == "R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:23:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	elif (tipo.upper() == "R"):
		if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 10
    elif (tipo.upper() == "R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:24:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 10
    if (tipo.upper() == "R"):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:24:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	if (tipo.upper() == "R"):
	if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 11
    if (consumo <= 500):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:24:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	if (tipo.upper() == "R"):
		if (consumo <= 500):
		x = consumo*0.44
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 12
    x = consumo*0.44
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:24:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
		   y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 13
    y = round(x, 2)
                  ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:24:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -36.4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:25:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
Valor total: R$ -36.4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:25:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
Valor total: R$ -36.4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:25:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
Valor total: R$ -36.4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:26:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- EXECUTION TIME:
0.14529
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
Valor total: R$ -36.4
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:26:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
Valor total: R$ -36.4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:26:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
Valor total: R$ -36.4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:27:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
	else:
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 11
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:27:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
else:
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 21
    elif (tipo.upper() == "C"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:27:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
else:
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 21
    elif (tipo.upper() == "C"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:27:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
else:
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 21
    elif (tipo.upper() == "C"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:27:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
else:
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 21
    elif (tipo.upper() == "C"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:28:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
else:
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
   elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
   elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 21
    elif (tipo.upper() == "C"):
                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:28:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
else:
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
   elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
   elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 21
    elif (tipo.upper() == "C"):
                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:28:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
else:
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
   elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
   elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 21
    elif (tipo.upper() == "C"):
                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:28:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
else:
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
   elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
   elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 21
    elif (tipo.upper() == "C"):
                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:28:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
else:
	if (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 21
    elif (tipo.upper() == "C"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:29:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
elif (tipo.upper() == "R"):
		if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:29:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
elif (tipo.upper() == "R"):
	if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- ERROR:
File "XXXX", line 15
    print("Valor total: R$", y)
                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:29:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
elif (tipo.upper() == "R"):
	if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
			print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:29:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
elif (tipo.upper() == "R"):
	if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
			print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:29:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
elif (tipo.upper() == "R"):
	if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
			print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:29:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
consumo = float(input("digite o consumo: "))
tipo = input("tipo de instalacao: (R/I/C) ")

print("Entradas:", consumo, "kWh e tipo", tipo.upper())

if (consumo < 0):
	print("Dados invalidos")
elif (tipo.upper() == "R"):
	if (consumo <= 500):
			x = consumo*0.44
			y = round(x, 2)
			print("Valor total: R$", y)
	else:
		x = consumo*0.65
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "C"):
	if (consumo <= 1000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)
elif (tipo.upper() == "I"):
	if (consumo <= 5000):
		x = consumo*0.55
		y = round(x, 2)
		print("Valor total: R$", y)
	else:
		x = consumo*0.60
		y = round(x, 2)
		print("Valor total: R$", y)




-- EXECUTION TIME:
0.215735
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
