== TEST (2019-03-28 10:13:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio= input(int("raio do circulo:"))
from math import *
area= pi*(raio**2)
volume= 4/3*pi*(raio**3)
print(round(area,3))
print(round(volume,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio= input(int("raio do circulo:"))
ValueError: invalid literal for int() with base 10: 'raio do circulo:'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:13:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio= input(int("raio do circulo:"))
from math import *
area= pi*(raio**2)
volume= 4/3*pi*(raio**3)
print(round(area,3))
print(round(volume,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio= input(int("raio do circulo:"))
ValueError: invalid literal for int() with base 10: 'raio do circulo:'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:14:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio= int(input("raio do circulo:"))
from math import *
area= pi*(raio**2)
volume= 4/3*pi*(raio**3)
print(round(area,3))
print(round(volume,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio= int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:14:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio= int(input("raio do circulo:"))
from math import *
area= pi*(raio**2)
volume= 4/3*pi*(raio**3)
print(round(area,3))
print(round(volume,3))
-- EXECUTION TIME:
0.149156
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/825/main.py", line 4, in <module>
    raio= int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:14:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio= int(input("raio do circulo:"))
from math import *
area= pi*(raio**2)
volume= 4/3*pi*(raio**3)
print(round(area,3))
print(round(volume,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio= int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:14:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio= float(input("raio do circulo:"))
from math import *
area= pi*(raio**2)
volume= 4/3*pi*(raio**3)
print(round(area,3))
print(round(volume,3))
-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:14:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio= float(input("raio do circulo:"))
from math import *
area= pi*(raio**2)
volume= 4/3*pi*(raio**3)
print(round(area,3))
print(round(volume,3))
-- EXECUTION TIME:
0.194409
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
