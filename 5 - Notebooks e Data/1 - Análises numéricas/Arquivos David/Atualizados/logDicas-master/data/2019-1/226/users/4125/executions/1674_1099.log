== TEST (2019-04-25 10:58:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",b, ",",c)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			a = equilatero
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print("Entrada: ",x, ",",b, ",",c)
NameError: name 'b' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:58:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			a = equilatero
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:58:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			a = equilatero
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:59:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = equilatero
			print(a, "equilatero")
		elif()
-- ERROR:
File "XXXX", line 16
    elif()
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:00:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = equilatero
			print(a, "equilatero")
		
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:00:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = equilatero
			print(a, "equilatero")
		
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:00:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:02:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:03:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:03:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:07:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:07:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:07:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:08:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:08:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:10:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif(x>= y+ z)and(y = x+z)and(z= x+ y):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- ERROR:
File "XXXX", line 12
    elif(x>= y+ z)and(y = x+z)and(z= x+ y):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:10:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif(x>= y+ z)and(y >= x+z)and(z>= x+ y):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:10:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif(x>= y+ z)and(y >= x+z)and(z>= x+ y):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:11:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
else(x>= y+ z)and(y >= x+z)and(z>= x+ y):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- ERROR:
File "XXXX", line 12
    else(x>= y+ z)and(y >= x+z)and(z>= x+ y):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:12:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:13:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
-- EXECUTION TIME:
0.158458
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:19:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
elif(x> y + x)or (y> z + x) or (z>x+y):
	print(a,"invalido")
	triangulo
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:19:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
elif(x> y + x)or (y> z + x) or (z>x+y):
	print(a,"invalido")
	triangulo
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:19:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)and(y<0)and (z<0)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif(x!=y)and(y!=z)and(z!=x):
			es = "escaleno"
			print(a,es)
elif(x> y + x)or (y> z + x) or (z>x+y):
	print(a,"invalido")
	triangulo
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:26:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x> y + x)or (y> z + x) or (z>x+y)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:26:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:27:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z)and(z==x):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
			es = "escaleno"
			print(a,es)
-- EXECUTION TIME:
0.14575
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:27:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:27:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:27:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
			es = "escaleno"
			print(a,es)
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:27:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
			es = "escaleno"
			print(a,es)
-- EXECUTION TIME:
0.122787
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:28:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z):
			e = "equilatero"
			print(a, e)
		elif(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		elif:
			es = "escaleno"
			print(a,es)
-- ERROR:
File "XXXX", line 19
    elif:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:29:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
elif((x< y + z)and(y< x + z)and(z< x+ y)):
		if(x==y)and(y==z):
			e = "equilatero"
			print(a, e)
			else:(x==y)or(y==z)or(z==x):
				iso = "isosceles"
				print(a,iso)
				else:
					es = "escaleno"
					print(a,es)	
-- ERROR:
File "XXXX", line 16
    else:(x==y)or(y==z)or(z==x):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:30:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
else:
	if(x==y)and(y==z):
		e = "equilatero"
		print(a, e)
		else:(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
			else:
				es = "escaleno"
				print(a,es)	
-- ERROR:
File "XXXX", line 16
    else:(x==y)or(y==z)or(z==x):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:30:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
else:
	if(x==y)and(y==z):
		e = "equilatero"
		print(a, e)
		else:
			if(x==y)or(y==z)or(z==x):
				iso = "isosceles"
				print(a,iso)
				else:
					es = "escaleno"
					print(a,es)	
-- ERROR:
File "XXXX", line 16
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:31:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
else:
	if(x==y)and(y==z):
		e = "equilatero"
		print(a, e)
	else:
		if(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
				es = "escaleno"
				print(a,es)	
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:31:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
else:
	if(x==y)and(y==z):
		e = "equilatero"
		print(a, e)
	else:
		if(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
				es = "escaleno"
				print(a,es)	
-- EXECUTION TIME:
0.146378
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:31:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
else:
	if(x==y)and(y==z):
		e = "equilatero"
		print(a, e)
	else:
		if(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
				es = "escaleno"
				print(a,es)	
-- EXECUTION TIME:
0.13592
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:31:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
else:
	if(x==y)and(y==z):
		e = "equilatero"
		print(a, e)
	else:
		if(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
			es = "escaleno"
			print(a,es)	
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:31:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
else:
	if(x==y)and(y==z):
		e = "equilatero"
		print(a, e)
	else:
		if(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
			es = "escaleno"
			print(a,es)	
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:31:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
else:
	if(x==y)and(y==z):
		e = "equilatero"
		print(a, e)
	else:
		if(x==y)or(y==z)or(z==x):
			iso = "isosceles"
			print(a,iso)
		else:
			es = "escaleno"
			print(a,es)	
-- EXECUTION TIME:
0.189494
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:33:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
else:
	if(x==y)and(y==z):
		print(a, "equilatero")
	else:
		if(x==y)or(y==z)or(z==x):
			print(a,"isosceles")
		else:
			print(a,"escaleno")	
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:33:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("digite lado a: "))
y = float(input("digite lado b: "))
z = float(input("digite lado c: "))

print("Entrada: ",x, ",",y, ",",z)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((x<0)or(y<0)or (z<0)or(x>= y + x)or (y>= z + x) or (z>=x+y)):
	print(a,"invalido")
else:
	if(x==y)and(y==z):
		print(a, "equilatero")
	else:
		if(x==y)or(y==z)or(z==x):
			print(a,"isosceles")
		else:
			print(a,"escaleno")	
-- EXECUTION TIME:
0.137201
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:36:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite lado a: "))
b = float(input("digite lado b: "))
c = float(input("digite lado c: "))

print("Entrada: ",a, ", ",b, ", ",c)
a = "Tipo de triangulo: "
#condicoes para triangulo
if((a<0)or(b<0)or (c<0)or(a>= b + c)or (b>= c + a) or (c>=a+b)):
	print(x,"invalido")
else:
	if(a==b)and(b==c):
		print(x, "equilatero")
	else:
		if(a==b)or(b==c)or(c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if((a<0)or(b<0)or (c<0)or(a>= b + c)or (b>= c + a) or (c>=a+b)):
TypeError: '<' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:36:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite lado a: "))
b = float(input("digite lado b: "))
c = float(input("digite lado c: "))

print("Entrada: ",a, ", ",b, ", ",c)
x = "Tipo de triangulo: "
#condicoes para triangulo
if((a<0)or(b<0)or (c<0)or(a>= b + c)or (b>= c + a) or (c>=a+b)):
	print(x,"invalido")
else:
	if(a==b)and(b==c):
		print(x, "equilatero")
	else:
		if(a==b)or(b==c)or(c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")	
-- OUTPUT:
Entrada:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:37:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite lado a: "))
b = float(input("digite lado b: "))
c = float(input("digite lado c: "))

print("Entrada: ",a, ", ",b, ", ",c)
x = "Tipo de triangulo: "
#condicoes para triangulo
if((a<0)or(b<0)or (c<0)or(a>= b + c)or (b>= c + a) or (c>=a+b)):
	print(x,"invalido")
else:
	if(a==b)and(b==c):
		print(x, "equilatero")
	else:
		if(a==b)or(b==c)or(c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")	
-- EXECUTION TIME:
0.187922
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 ,  4.4 ,  5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 ,  2.0 ,  7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:37:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite lado a: "))
b = float(input("digite lado b: "))
c = float(input("digite lado c: "))

print("Entradas: ",a, ", ",b, ", ",c)
x = "Tipo de triangulo: "
#condicoes para triangulo
if((a<0)or(b<0)or (c<0)or(a>= b + c)or (b>= c + a) or (c>=a+b)):
	print(x,"invalido")
else:
	if(a==b)and(b==c):
		print(x, "equilatero")
	else:
		if(a==b)or(b==c)or(c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")	
-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:37:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite lado a: "))
b = float(input("digite lado b: "))
c = float(input("digite lado c: "))

print("Entradas: ",a, ", ",b, ", ",c)
x = "Tipo de triangulo: "
#condicoes para triangulo
if((a<0)or(b<0)or (c<0)or(a>= b + c)or (b>= c + a) or (c>=a+b)):
	print(x,"invalido")
else:
	if(a==b)and(b==c):
		print(x, "equilatero")
	else:
		if(a==b)or(b==c)or(c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")	
-- EXECUTION TIME:
0.114599
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 ,  4.4 ,  5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 ,  2.0 ,  7.0
Tipo de triangulo:  invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
