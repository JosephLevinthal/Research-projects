== TEST (2019-04-25 10:18:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado: "))
y = float(input("lado: "))
z = float(input("lado: "))

if((x>=y +z) or (y>=x+z)or(z >= y + x)):
	print("Nao eh triangulo")
else:
	if((x == y) and(y == z)):
		print("equilatero")
		if((x == y) or(y == z) or(z == x)):
			print("isosceles")
		else:
			print("escaleno")
-- OUTPUT:
Entrada: 100
Animal: Garoupa
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:27:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado: "))
y = float(input("lado: "))
z = float(input("lado: "))

if((x>=y +z) or (y>=x+z)or(z >= y + x)):
	print("invalido")
else:
	if((x == y) and(y == z)):
		print("equilatero")
		if((x == y) or(y == z) or(z == x)):
			print("isosceles")
		else:
			print("escaleno")
-- OUTPUT:
Entrada: 100
Animal: Garoupa
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:27:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado: "))
y = float(input("lado: "))
z = float(input("lado: "))

if((x>=y +z) or (y>=x+z)or(z >= y + x)):
	print("invalido")
else:
	if((x == y) and(y == z)):
		print("equilatero")
		if((x == y) or(y == z) or(z == x)):
			print("isosceles")
		else:
			print("escaleno")
-- EXECUTION TIME:
0.142192
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:

-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:27:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado: "))
y = float(input("lado: "))
z = float(input("lado: "))

if((x>=y +z) or (y>=x+z)or(z >= y + x)):
	print("invalido")
else:
	if((x == y) and(y == z)):
		print("equilatero")
		if((x == y) or(y == z) or(z == x)):
			print("isosceles")
		else:
			print("escaleno")
-- OUTPUT:
Entrada: 100
Animal: Garoupa
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:29:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado: "))
y = float(input("lado: "))
z = float(input("lado: "))
print("Entradas:", x, ",", y, ",", z)
if((x>=y +z) or (y>=x+z)or(z >= y + x)):
	print("invalido")
else:
	if((x == y) and(y == z)):
		print("equilatero")
		if((x == y) or(y == z) or(z == x)):
			print("isosceles")
		else:
			print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:29:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado: "))
y = float(input("lado: "))
z = float(input("lado: "))
print("Entradas:", x, ",", y, ",", z)
if((x>=y +z) or (y>=x+z)or(z >= y + x)):
	print("invalido")
else:
	if((x == y) and(y == z)):
		print("equilatero")
		if((x == y) or(y == z) or(z == x)):
			print("isosceles")
		else:
			print("escaleno")
-- EXECUTION TIME:
0.167258
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:29:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado: "))
y = float(input("lado: "))
z = float(input("lado: "))
print("Entradas:", x, ",", y, ",", z)
if((x>=y +z) or (y>=x+z)or(z >= y + x)):
	print("Tipo de triangulo: invalido")
else:
	if((x == y) and(y == z)):
		print("equilatero")
		if((x == y) or(y == z) or(z == x)):
			print("isosceles")
		else:
			print("escaleno")
-- EXECUTION TIME:
0.212024
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:33:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado: "))
B = float(input("lado: "))
C = float(input("lado: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C) or (B>=A+C) or (C >= B + A)):
	print("Tipo de triangulo: invalido")
else:
	if((A == B) and (B == C)):
		print("Tipo de triangulo: equilatero")
		if((A == B) or (B == C) or (C == A)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:33:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado: "))
B = float(input("lado: "))
C = float(input("lado: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C) or (B>=A+C) or (C >= B + A)):
	print("Tipo de triangulo: invalido")
else:
	if((A == B) and (B == C)):
		print("Tipo de triangulo: equilatero")
		if((A == B) or (B == C) or (C == A)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.14177
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:37:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado: "))
B = float(input("lado: "))
C = float(input("lado: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C) or (B>=A+C) or (C >= B + A)):
	x = "invalido"
else:
	if((A == B) and (B == C)):
			X = "equilatero"
		if((A == B) or (B == C) or (C == A)):
			x = "isosceles"	
		else:
			x = "escaleno"
print("Tipo de triangulo: "+ X)
-- EXECUTION TIME:
0.138734
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 12
    if((A == B) or (B == C) or (C == A)):
                                        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:44:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado: "))
B = float(input("lado: "))
C = float(input("lado: "))
print("Entradas:", A, ",", B, ",", C)
if ((A!=0)and(B!=0)and(C!=0)):
	if((A>=B+C) or (B>=A+C) or (C >= B + A)):
		x = "invalido"
	else:
		if((A == B) and (B == C)):
				x = "equilatero"
			if((A == B) or (B == C) or (C == A)):
				x = "isosceles"	
		else:
			x = "escaleno"
else:
	x="invalido"

print("Tipo de triangulo: "+ x)
-- ERROR:
File "XXXX", line 13
    if((A == B) or (B == C) or (C == A)):
                                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:45:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado: "))
B = float(input("lado: "))
C = float(input("lado: "))
print("Entradas:", A, ",", B, ",", C)
if ((A!=0)and(B!=0)and(C!=0)):
	if((A>=B+C) or (B>=A+C) or (C >= B + A)):
		x = "invalido"
	else:
		if((A == B) and (B == C)):
			x = "equilatero"
		if((A == B) or (B == C) or (C == A)):
			x = "isosceles"	
		else:
			x = "escaleno"
else:
	x="invalido"

print("Tipo de triangulo: "+ x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:45:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado: "))
B = float(input("lado: "))
C = float(input("lado: "))
print("Entradas:", A, ",", B, ",", C)
if ((A!=0)and(B!=0)and(C!=0)):
	if((A>=B+C) or (B>=A+C) or (C >= B + A)):
		x = "invalido"
	else:
		if((A == B) and (B == C)):
			x = "equilatero"
		if((A == B) or (B == C) or (C == A)):
			x = "isosceles"	
		else:
			x = "escaleno"
else:
	x="invalido"

print("Tipo de triangulo: "+ x)
-- EXECUTION TIME:
0.154381
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
