== TEST (2019-06-27 10:34:54) 
-- CODE:
from numpy import*
from numpy.linalg import* 

f = array(eval(input("funcionarios:")))
t = shape(f)[0]
mt = zeros(t,dtype=int)

for i in range(t):
	f1[i] = max(f[i])
print(f1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 10:35:16) 
-- CODE:
from numpy import*
from numpy.linalg import* 

f = array(eval(input("funcionarios:")))
t = shape(f)[0]
mt = zeros(t,dtype=int)

for i in range(t):
	f1[i] = max(f[i])
print(f1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 10:35:26) 
-- CODE:
from numpy import*
from numpy.linalg import* 

f = array(eval(input("funcionarios:")))
t = shape(f)[0]
mt = zeros(t,dtype=int)

for i in range(t):
	f1[i] = max(f[i])
print(f1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 10:35:38) 
-- CODE:
from numpy import*
from numpy.linalg import* 

f = array(eval(input("funcionarios:")))
t = shape(f)[0]
mt = zeros(t,dtype=int)

for i in range(t):
	f1[i] = max(f[i])
print(f1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 10:55:58) 
-- CODE:
from numpy import*
from numpy.linalg import* 

f = array(eval(input("funcionarios:")))
t = shape(f)[0]
mt = zeros(t,dtype=int)

for i in range(shape(f)[1]):
	mt[i] == sum(f[:,i])
		
for i in range(size(f))		
	if dias[i] == max(dias)
		print(i + 1)
-- ERROR:
File "XXXX", line 11
    for i in range(size(f))		
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 10:56:07) 
-- CODE:
from numpy import*
from numpy.linalg import* 

f = array(eval(input("funcionarios:")))
t = shape(f)[0]
mt = zeros(t,dtype=int)

for i in range(shape(f)[1]):
	mt[i] == sum(f[:,i])
		
for i in range(size(f)):	
	if dias[i] == max(dias)
		print(i + 1)
-- ERROR:
File "XXXX", line 12
    if dias[i] == max(dias)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 10:56:11) 
-- CODE:
from numpy import*
from numpy.linalg import* 

f = array(eval(input("funcionarios:")))
t = shape(f)[0]
mt = zeros(t,dtype=int)

for i in range(shape(f)[1]):
	mt[i] == sum(f[:,i])
		
for i in range(size(f)):	
	if dias[i] == max(dias):
		print(i + 1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-27 10:56:41) 
-- CODE:
from numpy import*
from numpy.linalg import* 

f = array(eval(input("funcionarios:")))
t = shape(f)[0]
mt = zeros(t,dtype=int)

for i in range(shape(f)[1]):
	mt[i] == sum(f[:,i])
		
for i in range(size(f)):	
	if dias[i] == max(dias):
		print(i + 1)
-- EXECUTION TIME:
1.19206
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1836/1276/main.py", line 12, in <module>
    if dias[i] == max(dias):
NameError: name 'dias' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 10:57:26) 
-- CODE:
from numpy import*
from numpy.linalg import* 

f = array(eval(input("funcionarios:")))
t = shape(f)[0]
mt = zeros(t,dtype=int)

for i in range(shape(f)[1]):
	mt[i] == sum(f[:,i])
		
for i in range(size(mt)):	
	if mt[i] == max(mt):
		print(i + 1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-27 10:57:39) 
-- CODE:
from numpy import*
from numpy.linalg import* 

f = array(eval(input("funcionarios:")))
t = shape(f)[0]
mt = zeros(t,dtype=int)

for i in range(shape(f)[1]):
	mt[i] == sum(f[:,i])
		
for i in range(size(mt)):	
	if mt[i] == max(mt):
		print(i + 1)
-- EXECUTION TIME:
1.20168
-- TEST CASE 1:
---- input:
[[4,4,4,4,4,4,4],[3,3,3,3,3,3,3],[6,6,6,6,6,6,6],[1,2,1,2,1,2,7],[9,8,9,3,4,6,8],[5,6,5,6,5,6,8],[2,1,2,3,6,5,2]]
---- correct output:
7
---- user output:
1
2
3
4
5
6
7
-- TEST CASE 2:
---- input:
[[9,8,8,5,3,2,4],[9,9,2,4,5,6,7],[7,8,6,4,3,5,6],[9,9,8,8,8,8,8],[6,6,1,2,1,2,1],[5,6,4,3,4,3,2],[5,9,3,4,5,6,8],[8,7,8,5,6,5,2],[4,9,5,6,8,7,2]]
---- correct output:
2
---- user output:
1
2
3
4
5
6
7
8
9
-- TEST CASE 3:
---- input:
[[1,1,7,9,9,9,9],[1,2,7,5,5,5,5],[2,3,7,4,4,4,4],[2,4,7,6,6,6,6],[2,6,6,3,4,3,2],[6,5,6,4,5,6,8],[8,7,7,5,6,5,2],[7,8,9,6,8,7,2]]
---- correct output:
3
---- user output:
1
2
3
4
5
6
7
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-27 10:59:09) 
-- CODE:
from numpy import*
from numpy.linalg import* 

mat = array(eval(input("funcionarios:")))

dias = zeros(shape(mat)[1],dtype=int)

for i in range(shape(mat)[1]):
	dias[i] == sum(mat[:,i])
		
for i in range(size(dias)):	
	if dias[i] == max(dias):
		print(i + 1)
-- EXECUTION TIME:
0.994678
-- TEST CASE 1:
---- input:
[[4,4,4,4,4,4,4],[3,3,3,3,3,3,3],[6,6,6,6,6,6,6],[1,2,1,2,1,2,7],[9,8,9,3,4,6,8],[5,6,5,6,5,6,8],[2,1,2,3,6,5,2]]
---- correct output:
7
---- user output:
1
2
3
4
5
6
7
-- TEST CASE 2:
---- input:
[[9,8,8,5,3,2,4],[9,9,2,4,5,6,7],[7,8,6,4,3,5,6],[9,9,8,8,8,8,8],[6,6,1,2,1,2,1],[5,6,4,3,4,3,2],[5,9,3,4,5,6,8],[8,7,8,5,6,5,2],[4,9,5,6,8,7,2]]
---- correct output:
2
---- user output:
1
2
3
4
5
6
7
-- TEST CASE 3:
---- input:
[[1,1,7,9,9,9,9],[1,2,7,5,5,5,5],[2,3,7,4,4,4,4],[2,4,7,6,6,6,6],[2,6,6,3,4,3,2],[6,5,6,4,5,6,8],[8,7,7,5,6,5,2],[7,8,9,6,8,7,2]]
---- correct output:
3
---- user output:
1
2
3
4
5
6
7
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 11:00:28) 
-- CODE:
from numpy import*
from numpy.linalg import* 

mat = array(eval(input("funcionarios:")))

dias = zeros(shape(mat)[1],dtype=int)

for i in range(shape(mat)[1]):
	dias[i] == sum(mat[:,i])
		
for i in range(size(dias)):	
	if dias[i] == max(dias):
		print(i + 1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 11:02:43) 
-- CODE:
from numpy import*
from numpy.linalg import* 

mat = array(eval(input("funcionarios:")))

dias = zeros(shape(mat)[1],dtype=int)

for i in range(shape(mat)[1]):
	dias[i] == sum(mat[:,i])
for i in range(size(dias)):
	if dias[i] == max(dias):
		print(i + 1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 11:03:14) 
-- CODE:
from numpy import*
from numpy.linalg import* 

mat = array(eval(input("funcionarios:")))

dias = zeros(shape(mat)[1],dtype=int)

for i in range(shape(mat)[1]):
	dias[i] = sum(mat[:,i])
for i in range(size(dias)):
	if dias[i] == max(dias):
		print(i + 1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-27 11:03:28) 
-- CODE:
from numpy import*
from numpy.linalg import* 

mat = array(eval(input("funcionarios:")))

dias = zeros(shape(mat)[1],dtype=int)

for i in range(shape(mat)[1]):
	dias[i] = sum(mat[:,i])
for i in range(size(dias)):
	if dias[i] == max(dias):
		print(i + 1)
-- EXECUTION TIME:
0.946254
-- TEST CASE 1:
---- input:
[[4,4,4,4,4,4,4],[3,3,3,3,3,3,3],[6,6,6,6,6,6,6],[1,2,1,2,1,2,7],[9,8,9,3,4,6,8],[5,6,5,6,5,6,8],[2,1,2,3,6,5,2]]
---- correct output:
7
---- user output:
7
-- TEST CASE 2:
---- input:
[[9,8,8,5,3,2,4],[9,9,2,4,5,6,7],[7,8,6,4,3,5,6],[9,9,8,8,8,8,8],[6,6,1,2,1,2,1],[5,6,4,3,4,3,2],[5,9,3,4,5,6,8],[8,7,8,5,6,5,2],[4,9,5,6,8,7,2]]
---- correct output:
2
---- user output:
2
-- TEST CASE 3:
---- input:
[[1,1,7,9,9,9,9],[1,2,7,5,5,5,5],[2,3,7,4,4,4,4],[2,4,7,6,6,6,6],[2,6,6,3,4,3,2],[6,5,6,4,5,6,8],[8,7,7,5,6,5,2],[7,8,9,6,8,7,2]]
---- correct output:
3
---- user output:
3
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
