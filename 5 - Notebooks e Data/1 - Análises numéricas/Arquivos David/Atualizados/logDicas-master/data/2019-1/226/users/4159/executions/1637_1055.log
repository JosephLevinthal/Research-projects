== TEST (2019-04-11 11:16:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(input("angulo: "))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = radians(input())
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:17:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = radians(input())
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:19:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g
if(abs(r-d)==0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:19:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g
if(abs(r-d)==0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.270492
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:20:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g
if(abs(d-r)==0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:20:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g
if(abs(d-r)==0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.172341
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:21:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g
if(abs(d-r)<=0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:21:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g
if(abs(d-r)<=0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.18416
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:21:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g
if(abs(d-r)<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:22:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g
if(abs(d-r)<0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.22408
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:24:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g
if(abs(r-d)<=0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.149544
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:25:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(a))/g
if(abs(d-r) <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.163995
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:27:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial: "))
a = radians(float(input("angulo: ")))
g = 9.8
d = float(input("porco: "))
r = (vo**2*sin(2*a))/g
if(abs(d-r) <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.217329
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
