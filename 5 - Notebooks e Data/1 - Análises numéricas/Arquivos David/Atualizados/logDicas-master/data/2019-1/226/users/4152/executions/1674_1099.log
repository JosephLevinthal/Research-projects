== TEST (2019-04-25 10:53:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if (a < b +c and b < a + b and c < a + b)
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif(a == b and (b != c) or (b == c) and (b != a):
		print("Tipo de triangulo:", "isoceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- ERROR:
File "XXXX", line 9
    if (a < b +c and b < a + b and c < a + b)
                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:53:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if (a < b + c and b < a + b and c < a + b)
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif(a == b and (b != c) or (b == c) and (b != a):
		print("Tipo de triangulo:", "isoceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- ERROR:
File "XXXX", line 9
    if (a < b + c and b < a + b and c < a + b)
                                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:54:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if ((a < b + c) and (b < a + b) and (c < a + b)):
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif(a == b and (b != c) or (b == c) and (b != a):
		print("Tipo de triangulo:", "isoceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- ERROR:
File "XXXX", line 12
    elif(a == b and (b != c) or (b == c) and (b != a):
                                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:55:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if ((a < b + c) and (b < a + b) and (c < a + b)):
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif((a == b) and (b != c) or (b == c) and (b != a):
		print("Tipo de triangulo:", "isoceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- ERROR:
File "XXXX", line 12
    elif((a == b) and (b != c) or (b == c) and (b != a):
                                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:55:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if ((a < b + c) and (b < a + b) and (c < a + b)):
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif ((a == b) and (b != c) or (b == c) and (b != a):
		print("Tipo de triangulo:", "isoceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- ERROR:
File "XXXX", line 12
    elif ((a == b) and (b != c) or (b == c) and (b != a):
                                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:57:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if ((a < b + c) and (b < a + b) and (c < a + b)):
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif ((a == b) and (b != c) or (b == c) and (c != a):
		print("Tipo de triangulo:", "isoceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- ERROR:
File "XXXX", line 12
    elif ((a == b) and (b != c) or (b == c) and (c != a):
                                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:58:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if ((a < b + c) and (b < a + b) and (c < a + b)):
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif ((a == b) and (a != c) or (b == c) and (b != a)):
		print("Tipo de triangulo:", "isoceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:58:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if ((a < b + c) and (b < a + b) and (c < a + b)):
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif ((a == b) and (a != c) or (b == c) and (b != a)):
		print("Tipo de triangulo:", "isoceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- EXECUTION TIME:
0.139358
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:59:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if ((a < b + c) and (b < a + b) and (c < a + b)):
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif ((a == b) and (a != c) or (b == c) and (b != a)):
		print("Tipo de triangulo:", "isoceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:59:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if ((a < b + c) and (b < a + b) and (c < a + b)):
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif ((a == b) and (a != c) or (b == c) and (b != a)):
		print("Tipo de triangulo:", "isoceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- EXECUTION TIME:
0.112754
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:00:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if ((a < b + c) and (b < a + b) and (c < a + b)):
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif ((a == b) and (a != c) or (b == c) and (b != a)):
		print("Tipo de triangulo:", "isosceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:00:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite o valor de a: "))
b = float(input("digite o valor de b: "))
c = float(input("digite o valor de c: "))

print("Entradas: ", a, ",", b, ",", c)

if ((a < b + c) and (b < a + b) and (c < a + b)):
	if ((a == b) and (b == c)):
		print("Tipo de triangulo:", "equilatero")
	elif ((a == b) and (a != c) or (b == c) and (b != a)):
		print("Tipo de triangulo:", "isosceles")
	else:
		print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- EXECUTION TIME:
0.204298
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
