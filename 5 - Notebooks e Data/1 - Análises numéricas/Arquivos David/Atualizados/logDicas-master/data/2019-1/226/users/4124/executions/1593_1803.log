== TEST (2019-03-28 10:27:54) 
-- CODE:
num = int(input("Digite um numero de quatro digitos: "))

num1  = num // 1000 
num1a = num % 1000
num2  = num1a // 100
num2a = num2 % 100
num3  = num2a // 10
num3a = num3 % 10
num4  = num3a

soma = (num1 * 5 + num2 * 4 + num3 * 3 + num4 * 2)
print(soma)
-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:28:50) 
-- CODE:
num = int(input("Digite um numero de quatro digitos: "))

num1  = num // 1000 
num1a = num % 1000
num2  = num1a // 100
num2a = num2 % 100
num3  = num2a // 10
num3a = num3 % 10
num4  = num3a

soma = (num1 * 5 + num2 * 4 + num3 * 3 + num4 * 2)
print(num1 num2 num3 num4)
-- ERROR:
File "XXXX", line 12
    print(num1 num2 num3 num4)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:29:03) 
-- CODE:
num = int(input("Digite um numero de quatro digitos: "))

num1  = num // 1000 
num1a = num % 1000
num2  = num1a // 100
num2a = num2 % 100
num3  = num2a // 10
num3a = num3 % 10
num4  = num3a

soma = (num1 * 5 + num2 * 4 + num3 * 3 + num4 * 2)
print(num1, num2, num3, num4)
-- OUTPUT:
2 0 0 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:32:39) 
-- CODE:
num = int(input("Digite um numero de quatro digitos: "))

num1  = num // 1000 
num1a = num1 % 1000
num2  = num1a // 100
num2a = num2 % 100
num3  = num2a // 10
num3a = num3 % 10
num4  = num3a

soma = (num1 * 5 + num2 * 4 + num3 * 3 + num4 * 2)
print(num1, num2, num3, num4)
-- OUTPUT:
2 0 0 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:34:14) 
-- CODE:
num = int(input("Digite um numero de quatro digitos: "))

num1  = num // 1000 
num1a = num % 1000
num2  = num1a // 100
num2a = num2 
num3  = num2a // 10
num3a = num3 % 10
num4  = num3a

soma = (num1 * 5 + num2 * 4 + num3 * 3 + num4 * 2)
print(num1, num2, num3, num4)
-- OUTPUT:
2 0 0 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:38:42) 
-- CODE:
num = int(input("Digite um numero de quatro digitos: "))

num1 = num // 1000
num1a = num1 % 1000
num2 = num1a // 100
num2a = num2 % 100
num3 = num2a // 10
num3a = num3 % 10
num4 = num3a

soma = (num1 * 5 + num2 * 4 + num3 * 3 + num4 * 2)
print(num1, num2, num3, num4)
-- OUTPUT:
2 0 0 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:40:39) 
-- CODE:
num = int(input("Digite um numero de quatro digitos: "))

num1 = num // 1000
num1a = num % 1000
num2 = num1a // 100
num2a = num1a % 100
num3 = num2a // 10
num3a = num2a % 10
num4 = num3a

soma = (num1 * 5 + num2 * 4 + num3 * 3 + num4 * 2)

-- OUTPUT:
2 0 0 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:41:22) 
-- CODE:
num = int(input("Digite um numero de quatro digitos: "))

num1 = num // 1000
num1a = num % 1000
num2 = num1a // 100
num2a = num1a % 100
num3 = num2a // 10
num3a = num2a % 10
num4 = num3a

soma = (num1 * 5 + num2 * 4 + num3 * 3 + num4 * 2)
print(num1, num2, num3, num4)
-- OUTPUT:
2 0 0 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:41:42) 
-- CODE:
num = int(input("Digite um numero de quatro digitos: "))

num1 = num // 1000
num1a = num % 1000
num2 = num1a // 100
num2a = num1a % 100
num3 = num2a // 10
num3a = num2a % 10
num4 = num3a

soma = (num1 * 5 + num2 * 4 + num3 * 3 + num4 * 2)
print(soma)
-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:42:04) 
-- CODE:
num = int(input("Digite um numero de quatro digitos: "))

num1 = num // 1000
num1a = num % 1000
num2 = num1a // 100
num2a = num1a % 100
num3 = num2a // 10
num3a = num2a % 10
num4 = num3a

soma = (num1 * 5 + num2 * 4 + num3 * 3 + num4 * 2)
print(soma % 11)
-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:42:13) 
-- CODE:
num = int(input("Digite um numero de quatro digitos: "))

num1 = num // 1000
num1a = num % 1000
num2 = num1a // 100
num2a = num1a % 100
num3 = num2a // 10
num3a = num2a % 10
num4 = num3a

soma = (num1 * 5 + num2 * 4 + num3 * 3 + num4 * 2)
print(soma % 11)
-- EXECUTION TIME:
0.224376
-- TEST CASE 1:
---- input:
2000
---- correct output:
10
---- user output:
10
-- TEST CASE 2:
---- input:
3550
---- correct output:
6
---- user output:
6
-- TEST CASE 3:
---- input:
0007
---- correct output:
3
---- user output:
3
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
