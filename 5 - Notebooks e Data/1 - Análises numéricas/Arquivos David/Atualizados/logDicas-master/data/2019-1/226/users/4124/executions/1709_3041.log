== TEST (2019-05-02 11:20:09) 
-- CODE:
x = float(input("Valor de x: "))
if(x != -2 and x != 2):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
	elif(x < 2 and x <= 1000):
		fx = 1 / (x - 2)
	print(fx)
elif(x < -1000 or (x >= -2 and <= 2) or x > 1000):
	print("entrada invalida")
-- ERROR:
File "XXXX", line 8
    elif(x < -1000 or (x >= -2 and <= 2) or x > 1000):
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:20:33) 
-- CODE:
x = float(input("Valor de x: "))
if(x != -2 and x != 2):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(fx)
	elif(x < 2 and x <= 1000):
		fx = 1 / (x - 2)
		print(fx)
elif(x < -1000 or (x >= -2 and <= 2) or x > 1000):
	print("entrada invalida")
-- ERROR:
File "XXXX", line 9
    elif(x < -1000 or (x >= -2 and <= 2) or x > 1000):
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:20:56) 
-- CODE:
x = float(input("Valor de x: "))
if(x != -2 and x != 2):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(fx)
	elif(x < 2 and x <= 1000):
		fx = 1 / (x - 2)
		print(fx)
elif(x < -1000 or (x >= -2 and x <= 2) or x > 1000):
	print("entrada invalida")
-- OUTPUT:
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:21:15) 
-- CODE:
x = float(input("Valor de x: "))
if(x != -2 and x != 2):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(fx)
	elif(x < 2 and x <= 1000):
		fx = 1 / (x - 2)
	print(fx)
elif(x < -1000 or (x >= -2 and x <= 2) or x > 1000):
	print("entrada invalida")
-- OUTPUT:
0.0010020140482369562
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:21:41) 
-- CODE:
x = float(input("Valor de x: "))
if(x != -2 and x != 2):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(fx)
	elif(x < 2 and x <= 1000):
		fx = 1 / (x - 2)
		print(fx)
elif(x < -1000 or (x >= -2 and x <= 2) or x > 1000):
	print("entrada invalida")
-- OUTPUT:
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:22:19) 
-- CODE:
x = float(input("Valor de x: "))
if(x != -2 and x != 2):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(fx)
	elif(x < 2 and x <= 1000):
		fx = 1 / (x - 2)
	print(fx)
elif(x < -1000 or (x >= -2 and x <= 2) or x > 1000):
	print("entrada invalida")
-- OUTPUT:
0.0010020140482369562
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:23:04) 
-- CODE:
x = float(input("Valor de x: "))
if(x != -2 and x != 2):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(fx)
	elif(x < 2 and x <= 1000):
		fx = 1 / (x - 2)
	print(fx)
elif(x < -1000 or (x >= -2 and x <= 2) or x > 1000):
	print("entrada invalida")
-- OUTPUT:
0.0010020140482369562
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:27:04) 
-- CODE:
x = float(input("Valor de x: "))
if(x >= - 1000 or x < -2 or x > 2 or x < 1000):
		if(x >= -1000 and x < -2)
		fx = -1 / (x + 2) 
		print(fx)
	elif(x > 2 and x <= 1000):
		fx = 1 / (x - 2)
		print(fx)
else:
	print("entrada invalida")
-- ERROR:
File "XXXX", line 3
    if(x >= -1000 and x < -2)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:27:09) 
-- CODE:
x = float(input("Valor de x: "))
if(x >= - 1000 or x < -2 or x > 2 or x < 1000):
		if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(fx)
	elif(x > 2 and x <= 1000):
		fx = 1 / (x - 2)
		print(fx)
else:
	print("entrada invalida")
-- ERROR:
File "XXXX", line 4
    fx = -1 / (x + 2) 
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:27:19) 
-- CODE:
x = float(input("Valor de x: "))
if(x >= - 1000 or x < -2 or x > 2 or x < 1000):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(fx)
	elif(x > 2 and x <= 1000):
		fx = 1 / (x - 2)
		print(fx)
else:
	print("entrada invalida")
-- OUTPUT:
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:28:00) 
-- CODE:
x = float(input("Valor de x: "))
if(x >= - 1000 or x < -2 or x > 2 or x < 1000):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(round(fx, 4))
	elif(x > 2 and x <= 1000):
		fx = 1 / (x - 2)
		print(round(fx, 4))
else:
	print("entrada invalida")
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:28:09) 
-- CODE:
x = float(input("Valor de x: "))
if(x >= - 1000 or x < -2 or x > 2 or x < 1000):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(round(fx, 4))
	elif(x > 2 and x <= 1000):
		fx = 1 / (x - 2)
		print(round(fx, 4))
else:
	print("entrada invalida")
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:29:18) 
-- CODE:
x = float(input("Valor de x: "))
if((x >= - 1000 and x < -2) or (x > 2 and x < 1000)):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(round(fx, 4))
	elif(x > 2 and x <= 1000):
		fx = 1 / (x - 2)
		print(round(fx, 4))
else:
	print("entrada invalida")
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:29:27) 
-- CODE:
x = float(input("Valor de x: "))
if((x >= - 1000 and x < -2) or (x > 2 and x < 1000)):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(round(fx, 4))
	elif(x > 2 and x <= 1000):
		fx = 1 / (x - 2)
		print(round(fx, 4))
else:
	print("entrada invalida")
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 11:29:33) 
-- CODE:
x = float(input("Valor de x: "))
if((x >= - 1000 and x < -2) or (x > 2 and x < 1000)):
	if(x >= -1000 and x < -2):
		fx = -1 / (x + 2) 
		print(round(fx, 4))
	elif(x > 2 and x <= 1000):
		fx = 1 / (x - 2)
		print(round(fx, 4))
else:
	print("entrada invalida")
-- EXECUTION TIME:
0.153061
-- TEST CASE 1:
---- input:
-999.99
---- correct output:
0.001
---- user output:
0.001
-- TEST CASE 2:
---- input:
1.5
---- correct output:
entrada invalida
---- user output:
entrada invalida
-- TEST CASE 3:
---- input:
-2.01
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
