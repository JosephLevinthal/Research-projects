== TEST (2019-04-25 10:31:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
elif( A == B == C ):
	tt = equilatero
elif((A==B)or(B==C)or(A==C)):
	tt = isosceles
elif(A!=B!=C):
	tt = escaleno
else:
	tt = "invalido"
print("entradas:" A, B, C)
print(tt)
-- ERROR:
File "XXXX", line 8
    elif( A == B == C ):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:31:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	elif( A == B == C ):
	tt = equilatero
	elif((A==B)or(B==C)or(A==C)):
	tt = isosceles
	elif(A!=B!=C):
	tt = escaleno
else:
	tt = "invalido"
print("entradas:" A, B, C)
print(tt)
-- ERROR:
File "XXXX", line 8
    elif( A == B == C ):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:31:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	elif( A == B == C ):
		tt = equilatero
	elif((A==B)or(B==C)or(A==C)):
		tt = isosceles
	elif(A!=B!=C):
		tt = escaleno
else:
	tt = "invalido"
print("entradas:" A, B, C)
print(tt)
-- ERROR:
File "XXXX", line 8
    elif( A == B == C ):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:34:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = equilatero
		if((A==B)or(B==C)or(A==C)):
			tt = isosceles
				if(A != B != C):
					tt = escaleno
else:
	tt = "invalido"
print("entradas:" A, B, C)
print(tt)
-- ERROR:
File "XXXX", line 12
    if(A != B != C):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:35:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = equilatero
		if((A==B)or(B==C)or(A==C)):
			tt = isosceles
					if(A != B != C):
						tt = escaleno
else:
	tt = "invalido"
print("entradas:" A, B, C)
print(tt)
-- ERROR:
File "XXXX", line 12
    if(A != B != C):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:35:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = equilatero
		if((A==B)or(B==C)or(A==C)):
			tt = isosceles
			if(A != B != C):
						tt = escaleno
else:
	tt = "invalido"
print("entradas:" A, B, C)
print(tt)
-- ERROR:
File "XXXX", line 16
    print("entradas:" A, B, C)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:35:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = equilatero
		if((A==B)or(B==C)or(A==C)):
			tt = isosceles
			if(A != B != C):
				tt = escaleno
else:
	tt = "invalido"
print("entradas:" A, B, C)
print(tt)
-- ERROR:
File "XXXX", line 16
    print("entradas:" A, B, C)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:36:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = equilatero
		if((A==B)or(B==C)or(A==C)):
			tt = isosceles
			if(A != B != C):
				tt = escaleno
else:
	tt = "invalido"
print("Entradas:" A"," B "," C)
print(tt)
-- ERROR:
File "XXXX", line 16
    print("Entradas:" A"," B "," C)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:37:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = equilatero
		if((A==B)or(B==C)or(A==C)):
			tt = isosceles
			if(A != B != C):
				tt = escaleno
else:
	tt = "invalido"
print("Entradas:" A,"," B ,"," C)
print(tt)
-- ERROR:
File "XXXX", line 16
    print("Entradas:" A,"," B ,"," C)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:39:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = equilatero
		if((A==B)or(B==C)or(A==C)):
			tt = isosceles
			if(A != B != C):
				tt = escaleno
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print("Entradas:", a, ",", b, ",", c)
print(tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Entradas:", a, ",", b, ",", c)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:39:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = equilatero
		if((A==B)or(B==C)or(A==C)):
			tt = isosceles
			if(A != B != C):
				tt = escaleno
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)

print(tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print(tt)
NameError: name 'tt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:39:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = equilatero
		if((A==B)or(B==C)or(A==C)):
			tt = isosceles
			if(A != B != C):
				tt = escaleno
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)

print(tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print(tt)
NameError: name 'tt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = equilatero
		if((A==B)or(B==C)or(A==C)):
			tt = isosceles
			if(A != B != C):
				tt = escaleno
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)

print(tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print(tt)
NameError: name 'tt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
		if((A==B)or(B==C)or(A==C)):
			tt = "isosceles"
			if(A != B != C):
				tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)

print(tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print(tt)
NameError: name 'tt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:41:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
		if((A==B!=C)or(B==C!=A)or(A==C!=B)):
			tt = "isosceles"
			if(A != B != C):
				tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)

print(tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print(tt)
NameError: name 'tt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:41:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
		if((A==B!=C)or(B==C!=A)or(A==C!=B)):
			tt = "isosceles"
			if(A != B != C):
				tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)

print(tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print(tt)
NameError: name 'tt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:42:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
		if((A==B!=C)or(B==C!=A)or(A==C!=B)):
			tt = "isosceles"
			if(A != B != C):
				tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print(tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(tt)
NameError: name 'tt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
		if((A==B!=C)or(B==C!=A)or(A==C!=B)):
			tt = "isosceles"
			if(A != B != C):
				tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print(tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(tt)
NameError: name 'tt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
		if((A==B!=C)or(B==C!=A)or(A==C!=B)):
			tt = "isosceles"
			if(A != B != C):
				tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print(tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(tt)
NameError: name 'tt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:45:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
		if((A==B!=C)or(B==C!=A)or(A==C!=B)):
			tt = "isosceles"
			if(A != B != C):
				tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print("Tipo de tiangulo:", tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Tipo de tiangulo:", tt)
NameError: name 'tt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:45:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
		if((A==B!=C)or(B==C!=A)or(A==C!=B)):
			tt = "isosceles"
			if(A != B != C):
				tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print("Tipo de tiangulo:", tt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Tipo de tiangulo:", tt)
NameError: name 'tt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:46:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
	elif((A==B!=C)or(B==C!=A)or(A==C!=B)):
		tt = "isosceles"
	elif(A != B != C):
		tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print("Tipo de triangulo:", tt)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:47:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
	elif((A==B!=C)or(B==C!=A)or(A==C!=B)):
		tt = "isosceles"
	elif(A != B != C):
		tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print("Tipo de triangulo:", tt)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:47:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
	elif((A==B!=C)or(B==C!=A)or(A==C!=B)):
		tt = "isosceles"
	elif(A != B != C):
		tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print("Tipo de triangulo:", tt)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:47:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
	elif((A==B!=C)or(B==C!=A)or(A==C!=B)):
		tt = "isosceles"
	elif(A != B != C):
		tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print("Tipo de triangulo:", tt)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:47:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
	elif((A==B!=C)or(B==C!=A)or(A==C!=B)):
		tt = "isosceles"
	elif(A != B != C):
		tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print("Tipo de triangulo:", tt)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:47:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
	elif((A==B!=C)or(B==C!=A)or(A==C!=B)):
		tt = "isosceles"
	elif(A != B != C):
		tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print("Tipo de triangulo:", tt)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:48:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
	elif((A==B!=C)or(B==C!=A)or(A==C!=B)):
		tt = "isosceles"
	elif(A != B != C):
		tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print("Tipo de triangulo:", tt)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:48:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("cumprimento de A:"))
B = float(input("cumprimento de B:"))
C = float(input("cumprimento de C:"))
if((A < B + C)and(C < A + B)and(B < A + C)):
	
	if( A == B == C ):
		tt = "equilatero"
	elif((A==B!=C)or(B==C!=A)or(A==C!=B)):
		tt = "isosceles"
	elif(A != B != C):
		tt = "escaleno"
else:
	tt = "invalido"
print("Entradas:" ,A,"," ,B ,",", C)
print("Tipo de triangulo:", tt)
-- EXECUTION TIME:
0.193415
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
