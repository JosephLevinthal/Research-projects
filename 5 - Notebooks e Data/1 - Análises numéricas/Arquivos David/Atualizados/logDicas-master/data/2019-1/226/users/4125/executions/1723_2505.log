== TEST (2019-05-11 20:36:53) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k": ))

senx = (x**2*k + 1)/factorial((2*k)+1)
while(-pi<=x)and(x<=pi):
	senx = (x**2*k + 1)/factorial((2*k)+1)
	print(round(senx,10))
-- ERROR:
File "XXXX", line 4
    k = float(input("digite o k": ))
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:37:22) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k": ))

senx = (x**2*k + 1)/factorial((2*k)+1)
while(-pi<=x)and(x<=pi):
	senx = (x**2*k + 1)/factorial((2*k)+1)
	print(round(senx,10))
-- ERROR:
File "XXXX", line 4
    k = float(input("digite o k": ))
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:37:39) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
#k = float(input("digite o k": ))

senx = (x**2*k + 1)/factorial((2*k)+1)
while(-pi<=x)and(x<=pi):
	senx = (x**2*k + 1)/factorial((2*k)+1)
	print(round(senx,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    senx = (x**2*k + 1)/factorial((2*k)+1)
NameError: name 'k' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:37:50) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k": ))

senx = (x**2*k + 1)/factorial((2*k)+1)
while(-pi<=x)and(x<=pi):
	senx = (x**2*k + 1)/factorial((2*k)+1)
	print(round(senx,10))
-- ERROR:
File "XXXX", line 4
    k = float(input("digite o k": ))
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:38:07) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

senx = (x**2*k + 1)/factorial((2*k)+1)
while(-pi<=x)and(x<=pi):
	senx = (x**2*k + 1)/factorial((2*k)+1)
	print(round(senx,10))
-- OUTPUT:
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
3.341e-07
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:41:22) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

senx = (x**2*k + 1)/factorial((2*k)+1)
x = 0 
while(-pi<=x)and(x<=pi):
	senx = (x**2*k + 1)/factorial((2*k)+1) - x
	x = x + 1
	print(round(senx,10))
-- OUTPUT:
2.51e-08
-0.9999998497
-1.9999994739
-2.9999988476
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 20:41:47) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

senx = (x**2*k + 1)/factorial((2*k)+1)
x = 0 
while(-pi<=x)and(x<=pi):
	senx = (x**2*k + 1)/factorial((2*k)+1) - x
	x = x + 1
	print(round(senx,10))
-- EXECUTION TIME:
0.151878
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
2.51e-08
-0.9999998497
-1.9999994739
-2.9999988476
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
2.7557e-06
-0.9999862213
-1.9999531526
-2.9998980379
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.0001984127
-0.9992063492
-1.9974206349
-2.9944444444
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:42:22) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

senx = (x**2*k + 1)/factorial((2*k)+1)
x = 0 
while(-pi<=x)and(x<=pi):
	senx = x - (x**2*k + 1)/factorial((2*k)+1)
	x = x + 1
	print(round(senx,10))
-- OUTPUT:
-2.51e-08
0.9999998497
1.9999994739
2.9999988476
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 20:42:38) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

senx = (x**2*k + 1)/factorial((2*k)+1)
x = 0 
while(-pi<=x)and(x<=pi):
	senx = x - (x**2*k + 1)/factorial((2*k)+1)
	x = x + 1
	print(round(senx,10))
-- EXECUTION TIME:
0.165294
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
-2.51e-08
0.9999998497
1.9999994739
2.9999988476
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-2.7557e-06
0.9999862213
1.9999531526
2.9998980379
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
-0.0001984127
0.9992063492
1.9974206349
2.9944444444
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:43:37) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

senx = (x**2*k + 1)/factorial((2*k)+1)
y = 0
while(-pi<=x)and(x<=pi):
	senx = senx - (x**2*k + 1)/factorial((2*k)+1)
	y = y + 1
	print(round(senx,10))
-- OUTPUT:
0.0
-3.341e-07
-6.682e-07
-1.0024e-06
-1.3365e-06
-1.6706e-06
-2.0047e-06
-2.3388e-06
-2.673e-06
-3.0071e-06
-3.3412e-06
-3.6753e-06
-4.0094e-06
-4.3436e-06
-4.6777e-06
-5.0118e-06
-5.3459e-06
-5.68e-06
-6.0142e-06
-6.3483e-06
-6.6824e-06
-7.0165e-06
-7.3506e-06
-7.6848e-06
-8.0189e-06
-8.353e-06
-8.6871e-06
-9.0212e-06
-9.3554e-06
-9.6895e-06
-1.00236e-05
-1.03577e-05
-1.06918e-05
-1.1026e-05
-1.13601e-05
-1.16942e-05
-1.20283e-05
-1.23624e-05
-1.26966e-05
-1.30307e-05
-1.33648e-05
-1.36989e-05
-1.4033e-05
-1.43672e-05
-1.47013e-05
-1.50354e-05
-1.53695e-05
-1.57036e-05
-1.60378e-05
-1.63719e-05
-1.6706e-05
-1.70401e-05
-1.73742e-05
-1.77084e-05
-1.80425e-05
-1.83766e-05
-1.87107e-05
-1.90448e-05
-1.9379e-05
-1.97131e-05
-2.00472e-05
-2.03813e-05
-2.07154e-05
-2.10496e-05
-2.13837e-05
-2.17178e-05
-2.20519e-05
-2.2386e-05
-2.27202e-05
-2.30543e-05
-2.33884e-05
-2.37225e-05
-2.40566e-05
-2.43908e-05
-2.47249e-05
-2.5059e-05
-2.53931e-05
-2.57272e-05
-2.60614e-05
-2.63955e-05
-2.67296e-
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:45:35) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

senx = (x**2*k + 1)/factorial((2*k)+1)
while(-pi<=x)and(x<=pi):
	senx = x - (x**2*k + 1)/factorial((2*k)+1)
	print(round(senx,10))
-- OUTPUT:
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
1.5707959927
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:48:07) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

senx = (x**2*k + 1)/factorial((2*k)+1)
while(-pi<=x)and(x<=pi):
	
	senx = x - ((x**2*k + 1)/factorial((2*k)+1))**k
	print(round(senx,10))
-- OUTPUT:
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:51:50) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

senx = (x**2*k + 1)/factorial((2*k)+1)
while(-pi<=x)and(x<=pi):
	
	senx = ((x**2*k + 1)/factorial((2*k)+1))**k
	print(round(senx,10)
-- ERROR:
File "XXXX", line 11
    
                         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:52:14) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

senx = (x**2*k + 1)/factorial((2*k)+1)
while(-pi<=x)and(x<=pi):
	
	senx = sin((x**2*k + 1)/factorial((2*k)+1))**k
	print(round(senx,10)
-- ERROR:
File "XXXX", line 11
    
                         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:53:05) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

while(-pi<=x)and(x<=pi):
	
	senx = ((x**2*k + 1)/factorial((2*k)+1))**k
	senx = sin(senx)
	print(round(senx,10)
-- ERROR:
File "XXXX", line 11
    
                         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:53:28) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

while(-pi<=x)and(x<=pi):
	
	y = ((x**2*k + 1)/factorial((2*k)+1))**k
	senx = sin(senx)
	print(round(senx,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    senx = sin(senx)
NameError: name 'senx' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:54:52) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

while(-pi<=x)and(x<=pi):
	
	y = ((x**2*k - 1)/factorial((2*k)-1))**k
	senx = sin(senx)
	print(round(senx,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    senx = sin(senx)
NameError: name 'senx' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:55:17) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

#while(-pi<=x)and(x<=pi):
	
	y = ((x**2*k - 1)/factorial((2*k)-1))**k
	senx = sin(senx)
	print(round(senx,10))
-- ERROR:
File "XXXX", line 8
    y = ((x**2*k - 1)/factorial((2*k)-1))**k
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:55:28) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

#while(-pi<=x)and(x<=pi):
	
y = ((x**2*k - 1)/factorial((2*k)-1))**k
senx = sin(senx)
print(round(senx,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    senx = sin(senx)
NameError: name 'senx' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:55:56) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

#while(-pi<=x)and(x<=pi):
	
y = ((x**2*k - 1)/factorial((2*k)-1))**k
senx = sin(y)
print(round(senx,10))
-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:56:34) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

#while(-pi<=x)and(x<=pi):
	
y = ((x**2*k + 1)/factorial((2*k)+1))**k
senx = sin(y)
print(round(senx,10))
-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:57:25) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

#while(-pi<=x)and(x<=pi):
	
y = (((x**2*k + 1)/factorial((2*k)+1))**k)*k
senx = sin(y)
print(round(senx,10))
-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:58:00) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

#while(-pi<=x)and(x<=pi):
	
y = (((x**(2*k + 1))/factorial((2*k)+1))**k)*k
senx = sin(y)
print(round(senx,10))
-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:58:33) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

while(-pi<=x)and(x<=pi):
	
	y = (((x**(2*k + 1))/factorial((2*k)+1))**k)*k
	senx = sin(y)
print(round(senx,10))
-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:59:41) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

while(-pi<=x)and(x<=pi):
	
	y = (((x**(2*k + 1))/factorial((2*k)+1))**k)+((((x**(2*k + 1))/factorial((2*k)+1))**k))*k
	senx = sin(y)
print(round(senx,10))
-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 20:59:48) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

while(-pi<=x)and(x<=pi):
	
	y = (((x**(2*k + 1))/factorial((2*k)+1))**k)+((((x**(2*k + 1))/factorial((2*k)+1))**k))*k
	senx = sin(y)
print(round(senx,10))
-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 21:00:49) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = float(input("digite o k: "))

while(-pi<=x)and(x<=pi):
	
	y = (((x**(2*k + 1))/factorial((2*k)+1))**k)+((((x**(2*k + 1))/factorial((2*k)+1))**k))*k
	senx = sin(y)-	y
	print(round(senx,10))
-- OUTPUT:
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 22:52:42) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = int(input("digite o k: "))
#criar variavel acumuladora e contadora
soma = 0
i = 0
while(k>i):
	tg = x**(2*(i + 1))
	tgd = factorial((2*i)+1)
	soma = soma + (((-1)**i)*tg)/tgd
	i = i + 1
print(round(soma,10))
-- OUTPUT:
1.5708018915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 22:54:40) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = int(input("digite o k: "))
#criar variavel acumuladora e contadora
soma = 0
i = 0
final = k - 1
while(k>i):
	tg = x**(2*(i + 1))
	tgd = factorial((2*i)+1)
	soma = soma + (((-1)**i)*tg)/tgd
	i = i + 1
print(round(soma,10))
-- EXECUTION TIME:
0.226192
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.5708018915
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
1.570549871
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.9071822998
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 22:55:33) 
-- CODE:
from math import*

x = eval(input("digite o x: "))
k = int(input("digite o k: "))
#criar variavel acumuladora e contadora
soma = 0
i = 0
final = k - 1
while(k>i):
	tg = x**(2*i + 1)
	tgd = factorial((2*i)+1)
	soma = soma + (((-1)**i)*tg)/tgd
	i = i + 1
print(round(soma,10))
-- EXECUTION TIME:
0.17839
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:48:36) 
-- CODE:
from math import*

x = eval(input("angulo em radianos: "))
k = int(input("numero de termos da série: "))
j = 0
i = 0
soma = 0
while(k>0):
	soma = soma + (x)*((-1)**j)*((x**2*i + 1)/(factorial(2*i+ 1)))
	j = j + 1
	i = i + 1
	k = k - 1
	
print(round(soma,10))
-- OUTPUT:
0.7381475912
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:49:07) 
-- CODE:
from math import*

x = eval(input("angulo em radianos: "))
k = int(input("numero de termos da serie: "))
j = 0
i = 0
soma = 0
while(k>0):
	soma = soma + (x)*((-1)**j)*((x**2*i + 1)/(factorial(2*i+ 1)))
	j = j + 1
	i = i + 1
	k = k - 1
	
print(round(soma,10))
-- OUTPUT:
0.7381475912
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:49:49) 
-- CODE:
from math import*

x = eval(input("angulo em radianos: "))
k = int(input("numero de termos da serie: "))
j = 0
i = 0
soma = 0
while(k>0):
	soma = soma + ((-1)**j)*((x**2*i + 1)/(factorial(2*i+ 1)))
	j = j + 1
	i = i + 1
	k = k - 1
	
print(round(soma,10))
-- OUTPUT:
0.4699193515
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:50:32) 
-- CODE:
from math import*

x = eval(input("angulo em radianos: "))
k = int(input("numero de termos da serie: "))
j = 0
i = 0
soma = 0
while(k>0):
	soma = soma + ((-1)**j)*((x**(2*i) + 1)/(factorial((2*i)+ 1)))
	j = j + 1
	i = i + 1
	k = k - 1
	
print(round(soma,10))
-- OUTPUT:
1.4780930373
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:50:49) 
-- CODE:
from math import*

x = eval(input("angulo em radianos: "))
k = int(input("numero de termos da serie: "))
j = 0
i = 0
soma = 0
while(k>0):
	soma = soma + ((-1)**j)*((x**(2*i) + 1)/(factorial((2*i)+ 1)))
	j = j + 1
	i = i + 1
	k = k - 1
	
print(round(soma,10))
-- OUTPUT:
1.4780930373
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:51:43) 
-- CODE:
from math import*

x = eval(input("angulo em radianos: "))
k = int(input("numero de termos da serie: "))
j = 0
i = 0
soma = 0
while(k>0):
	soma = soma + ((-1)**j)*((x**(2*i) + 1)/factorial((2*i)+ 1))
	j = j + 1
	i = i + 1
	k = k - 1
	
print(round(soma,10))
-- OUTPUT:
1.4780930373
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:52:25) 
-- CODE:
from math import*

x = eval(input("angulo em radianos: "))
k = int(input("numero de termos da serie: "))
j = 0
i = 0
soma = 0
while(k>1):
	soma = soma + ((-1)**j)*((x**(2*i) + 1)/factorial((2*i)+ 1))
	j = j + 1
	i = i + 1
	k = k - 1
	
print(round(soma,10))
-- OUTPUT:
1.4779881416
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:52:48) 
-- CODE:
from math import*

x = eval(input("angulo em radianos: "))
k = int(input("numero de termos da serie: "))
j = 0
i = 0
soma = 0
while(k>0):
	soma = soma + ((-1)**j)*((x**(2*i) + 1)/factorial((2*i)+ 1))
	j = j + 1
	i = i + 1
	k = k - 1
	
print(round(soma,10))
-- OUTPUT:
1.4780930373
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:53:27) 
-- CODE:
from math import*

x = eval(input("angulo em radianos: "))
k = int(input("numero de termos da serie: "))
j = 0
i = 0
soma = 0
while(k>0):
	soma = soma + ((-1)**j)*(((x)**((2*i) + 1))/factorial((2*i)+ 1))
	j = j + 1
	i = i + 1
	k = k - 1
	
print(round(soma,10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 21:53:45) 
-- CODE:
from math import*

x = eval(input("angulo em radianos: "))
k = int(input("numero de termos da serie: "))
j = 0
i = 0
soma = 0
while(k>0):
	soma = soma + ((-1)**j)*(((x)**((2*i) + 1))/factorial((2*i)+ 1))
	j = j + 1
	i = i + 1
	k = k - 1
	
print(round(soma,10))
-- EXECUTION TIME:
0.154223
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
