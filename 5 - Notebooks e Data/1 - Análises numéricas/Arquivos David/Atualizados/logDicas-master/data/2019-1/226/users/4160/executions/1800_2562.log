== TEST (2019-06-04 11:50:33) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0
	i = i +1
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(i)

   # No. total de elementos
print(soma)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 11
    i = i +1
           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:50:57) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0
	i = i +1
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(i)

   # No. total de elementos
	print(soma)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 11
    i = i +1
           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:51:04) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0
	i = i +1
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(i)

   # No. total de elementos
	print(soma)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 11
    i = i +1
           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:51:31) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(i)

   # No. total de elementos
	print(soma)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 11
    i = i +1
           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:51:47) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(i)

   # No. total de elementos
	print(soma)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 11
    i = i +1
           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:52:02) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(i)

   # No. total de elementos
	print(soma)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:14:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(i)

   # No. total de elementos
	print(soma)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:23:31) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:23:47) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:24:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(i)

   # No. total de elementos
	print(soma)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
550.692
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:24:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(i)

   # No. total de elementos
	print(soma)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
546.887
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:24:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(i)

   # No. total de elementos
	print(soma)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
547.219
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:24:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(i)

   # No. total de elementos
	print(soma)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
547.044
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:24:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(i)

   # No. total de elementos
	print(soma)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
546.731
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:

-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:26:18) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:26:53) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:26:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:26:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:26:59) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:01) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:01) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:02) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:02) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:03) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:07) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:29:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	
   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:31:02) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	
   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:31:08) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	
   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.03331
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:33:03) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	
   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
26.3784
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:

-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:33:15) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	
   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
23.5599
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:

-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:33:15) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	
   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
49.0563
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:33:15) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	
   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
80.1382
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:33:15) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	
   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
97.9374
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
8
10
18
2
2
4
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:37:49) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
11.3533
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1800/2562/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:37:49) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
824.15
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:37:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
621.513
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:37:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
855.813
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:37:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
622.047
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
task 9cca4462c3cf0e416fb3a5a68ae2eb3f789f98f7f49d60a0e50351b9dee7df97 not found: not found
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:37:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
824.194
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:37:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
824.073
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:37:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
824.669
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:37:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
621.679
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
task 9cca4462c3cf0e416fb3a5a68ae2eb3f789f98f7f49d60a0e50351b9dee7df97 not found: not found
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:37:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
622.518
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
task 9cca4462c3cf0e416fb3a5a68ae2eb3f789f98f7f49d60a0e50351b9dee7df97 not found: not found
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:37:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0
# Verifica se o programa vai terminar
while (size(vet) > 2):
   # Zera contador de elementos pares
	npar = 0
	i = i +1
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
621.553
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:

-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:

-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 11:45:35) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
	npar = 0
	
   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet) - npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.08462
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:07:50) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(v[i] % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))

	v = array(eval(input("Vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:08:31) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))

	v = array(eval(input("Vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:08:42) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))

	v = array(eval(input("Vetor: ")))

-- EXECUTION TIME:
1.01062
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:10:15) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:11:04) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))
	v = array(eval(input("Vetor: ")))

	

-- EXECUTION TIME:
8.43747
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
Vetor: 4
4
8
Vetor: 0
11
11
Vetor: 6
0
6
Vetor:
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:11:06) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))
	v = array(eval(input("Vetor: ")))

	

-- EXECUTION TIME:
6.62
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:11:34) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))
	v = array(eval(input("Vetor: ")))

	

-- EXECUTION TIME:
5.1774
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:11:40) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))
	v = array(eval(input("Vetor: ")))

	

-- EXECUTION TIME:
7.49031
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:13:14) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))
	v = array(eval(input("Vetor: ")))

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:14:02) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))
	v = array(eval(input("Vetor: ")))

	

-- EXECUTION TIME:
7.73587
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:37:16) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))



-- EXECUTION TIME:
1658.28
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:38:11) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))



-- EXECUTION TIME:
1709.38
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:40:11) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))



-- EXECUTION TIME:
1779.95
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:41:06) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))
	

	

-- EXECUTION TIME:
1728.24
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:41:06) 
-- CODE:
from numpy import*

v = array(eval(input("Vetor: ")))

while(size(v)>1):
	npar = 0
	for i in v:
		if(i % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(v)- npar)
	print(size(v))
	

	

-- EXECUTION TIME:
1706.67
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
