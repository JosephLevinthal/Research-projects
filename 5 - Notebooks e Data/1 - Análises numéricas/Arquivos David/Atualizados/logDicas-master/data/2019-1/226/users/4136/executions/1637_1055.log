== TEST (2019-04-11 10:30:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade: "))
a = radians(float(input("angulo: ")))
d = abs(float(input("distancia: ")))
g = 9.8
r = ((vo) ** 2 * sin(2 * a)) / g
if (r>= d- 0.1):
	mensagem = "sim"
	
else:
	mensagem = "nao"
-- OUTPUT:
INSUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade: "))
a = radians(float(input("angulo: ")))
d = abs(float(input("distancia: ")))
g = 9.8
r = ((vo) ** 2 * sin(2 * a)) / g
if (r>= d- 0.1):
	mensagem = "sim"
	
else:
	mensagem = "nao"
	
print(mensagem)
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade: "))
a = radians(float(input("angulo: ")))
d = abs(float(input("distancia: ")))
g = 9.8
r = ((vo) ** 2 * sin(2 * a)) / g
if (r>= d- 0.1):
	mensagem = "sim"
	
else:
	mensagem = "nao"
	
print(mensagem)
-- EXECUTION TIME:
0.220255
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
