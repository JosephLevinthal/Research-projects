== TEST (2019-07-02 11:05:24) 
-- CODE:
from numpy import *
from numpy.linalg import *

vet = array(eval(input("insira:")))

const = array([[4,5,2],
				  	[3,2,2],
					[2,3,3]])
r = dot(inv(const),vet.T)

print("grande:",round(r[0],0))
print("medio:",round(r[1],0))
print("pequeno:",round(r[2],0))

if(r[0] == max(r)):
	print("grande")
elif(r[1] == max(r)):
	print("medio")
elif(r[2] == max(r)):
	print("pequeno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:05:45) 
-- CODE:
from numpy import *
from numpy.linalg import *

vet = array(eval(input("insira:")))

const = array([[4,5,2],
				  	[3,2,2],
					[2,3,3]])
r = dot(inv(const),vet.T)

print("grande:",round(r[0],0))
print("medio:",round(r[1],0))
print("pequeno:",round(r[2],0))

if(r[0] == max(r)):
	print("grande")
elif(r[1] == max(r)):
	print("medio")
elif(r[2] == max(r)):
	print("pequeno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:06:06) 
-- CODE:
from numpy import *
from numpy.linalg import *

vet = array(eval(input("insira:")))

const = array([[4,5,2],
				  	[3,2,2],
					[2,3,3]])
r = dot(inv(const),vet.T)

print("grande:",round(r[0],0))
print("medio:",round(r[1],0))
print("pequeno:",round(r[2],0))

if(r[0] == max(r)):
	print("grande")
elif(r[1] == max(r)):
	print("medio")
elif(r[2] == max(r)):
	print("pequeno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-02 11:06:29) 
-- CODE:
from numpy import *
from numpy.linalg import *

vet = array(eval(input("insira:")))

const = array([[4,5,2],
				  	[3,2,2],
					[2,3,3]])
r = dot(inv(const),vet.T)

print("grande:",round(r[0],0))
print("medio:",round(r[1],0))
print("pequeno:",round(r[2],0))

if(r[0] == max(r)):
	print("grande")
elif(r[1] == max(r)):
	print("medio")
elif(r[2] == max(r)):
	print("pequeno")
-- EXECUTION TIME:
1.05408
-- TEST CASE 1:
---- input:
[2220,1443,1887]
---- correct output:
grande: 111.0
medio: 222.0
pequeno: 333.0
pequeno
---- user output:
grande: 111.0
medio: 222.0
pequeno: 333.0
pequeno
-- TEST CASE 2:
---- input:
[1340,840,760]
---- correct output:
grande: 200.0
medio: 100.0
pequeno: 20.0
grande
---- user output:
grande: 200.0
medio: 100.0
pequeno: 20.0
grande
-- TEST CASE 3:
---- input:
[1632,925,1120]
---- correct output:
grande: 107.0
medio: 200.0
pequeno: 102.0
medio
---- user output:
grande: 107.0
medio: 200.0
pequeno: 102.0
medio
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
