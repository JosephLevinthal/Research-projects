== TEST (2019-05-02 10:08:36) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == CAUDA):
	print("n")
	elif(x == CUSPE):
	print("2 * n")
-- ERROR:
File "XXXX", line 7
    elif(x == CUSPE):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:08:49) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print("n")
	elif(x == "CUSPE"):
	print("2 * n")
-- ERROR:
File "XXXX", line 7
    elif(x == "CUSPE"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:09:02) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print("n")
		elif(x == "CUSPE"):
		print("2 * n")
-- ERROR:
File "XXXX", line 7
    elif(x == "CUSPE"):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:09:13) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print("n")
	elif(x == "CUSPE"):
	print("2 * n")
-- ERROR:
File "XXXX", line 7
    elif(x == "CUSPE"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:09:27) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print("n")
	elif(x == "CUSPE"):
	print("2 * n")
-- ERROR:
File "XXXX", line 7
    elif(x == "CUSPE"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:09:43) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if("x" == "CAUDA"):
	print("n")
	elif("x" == "CUSPE"):
	print("2 * n")
-- ERROR:
File "XXXX", line 7
    elif("x" == "CUSPE"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:09:53) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if("x" == "CAUDA"):
	print("n")
	elif("x" == "CUSPE"):
		print("2 * n")
-- ERROR:
File "XXXX", line 7
    elif("x" == "CUSPE"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:10:08) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print("n")
	elif(x == "CUSPE"):
		print("2 * n")
-- ERROR:
File "XXXX", line 7
    elif(x == "CUSPE"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:10:20) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print("n")
	if(x == "CUSPE"):
		print("2 * n")
-- OUTPUT:
n
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:10:49) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n)
	if(x == "CUSPE"):
		print(2 * n)
-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:11:59) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
	if(x == "CUSPE"):
		print((2 * n) * z)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:12:14) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
	if(x == "CUSPE"):
		print((2 * n) * z)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:12:40) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
	if(x == "CUSPE"):
		print(2 * n * z)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:13:21) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
	if(x == "CUSPE"):
	print(2 * n * z)
-- ERROR:
File "XXXX", line 8
    print(2 * n * z)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:13:30) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
	if(x == "CUSPE"):
		print(2 * n * z)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:14:01) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
	if(x == "CUSPE"):
		print((n * 2) * z)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:14:38) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:14:58) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
	elif(x == "CUSPE"):
		p = n * 2 * z
		print(p)
-- ERROR:
File "XXXX", line 7
    elif(x == "CUSPE"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:15:06) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:15:19) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:15:35) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
else:
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:17:15) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
else:
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
	elif(x == "PATADA):
		print((2 * n) - 5)
-- ERROR:
File "XXXX", line 11
    elif(x == "PATADA):
                      ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:17:21) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
else:
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
	elif(x == "PATADA"):
		print((2 * n) - 5)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:19:02) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
else:
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
	elif(x == "PATADA"):
		print((2 * n) - 5)
	elif(n < 1 or n > 4):
		print("Entrada invalida")
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:19:13) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
else:
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
	elif(x == "PATADA"):
		print((2 * n) - 5)
	elif(n < 1 or n > 4):
		print("Entrada invalida")
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:19:25) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
else:
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
	elif(x == "PATADA"):
		print((2 * n) - 5)
	elif(n < 1 or n > 4):
		print("Entrada invalida")
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:19:36) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
else:
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
	elif(x == "PATADA"):
		print((2 * n) - 5)
	elif(n < 1 or n > 4):
		print("Entrada invalida")
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:20:16) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(x == "CAUDA"):
	print(n * z)
else:
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
	elif(x == "PATADA"):
		print((2 * n) - 5)
	elif(n < 1 or n > 4):
		print("Entrada invalida")
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:22:41) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(n < 1 or n > 4):
	print("Entrada invalida")
	
else:
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
	elif(x == "PATADA"):
		print((2 * n) - 5)
	elif(x == "CAUDA"):
		print(n * z)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 10:22:55) 
-- CODE:
x = input("tipo de ataque: ").upper()
n = int(input("valor sorteado: "))
z = int(input("numero de turnos: "))

if(n < 1 or n > 4):
	print("Entrada invalida")
	
else:
	if(x == "CUSPE"):
		p = n * 2 * z
		print(p)
	elif(x == "PATADA"):
		print((2 * n) - 5)
	elif(x == "CAUDA"):
		print(n * z)
-- EXECUTION TIME:
0.19189
-- TEST CASE 1:
---- input:
CAUDA
2
6
---- correct output:
12
---- user output:
12
-- TEST CASE 2:
---- input:
PATADA
5
5
---- correct output:
Entrada invalida
---- user output:
Entrada invalida
-- TEST CASE 3:
---- input:
CUSPE
3
2
---- correct output:
12
---- user output:
12
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
