== TEST (2019-04-25 11:38:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())
int1 = [a,b]
int2 = [c,d]

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if 
-- ERROR:
File "XXXX", line 14
    if 
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:39:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())
int1 = [a,b]
int2 = [c,d]

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if int1 in int2:
	print("ee")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:40:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())
int1 = [a,b]
int2 = [c,d]

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if int1 in range int2:
	print("ee")
-- ERROR:
File "XXXX", line 14
    if int1 in range int2:
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:40:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if (a,b) in range (c,d):
	print("ee")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    if (a,b) in range (c,d):
TypeError: 'float' object cannot be interpreted as an integer
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:50:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a<d and b>c:
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:51:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a<d and b>c:
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:51:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a<d and b>c:
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:51:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a<d and b>c and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:52:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a<d and b>c and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:52:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a<d and b>c and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- EXECUTION TIME:
0.167283
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 ,  5.0
Intervalo 1:  2.5 ,  3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 ,  -3.0
Intervalo 1:  1.0 ,  3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:52:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a<d and b>c and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:52:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a<=d and b>=c and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:52:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a<=d and b>=c and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- EXECUTION TIME:
0.157799
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 ,  5.0
Intervalo 1:  2.5 ,  3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 ,  -3.0
Intervalo 1:  1.0 ,  3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:53:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if (a<=d or d<=a) and (b>=c or c>=b) and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:54:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if (a<=d or d<=a) and (b>=c or c>=b) and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- EXECUTION TIME:
0.13566
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 ,  5.0
Intervalo 1:  2.5 ,  3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 ,  -3.0
Intervalo 1:  1.0 ,  3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:54:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if (a<=d or c>=b) and (b>=c or a>=d) and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:54:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if (a<=d or c>=b) and (b>=c or a>=d) and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- EXECUTION TIME:
0.17182
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 ,  5.0
Intervalo 1:  2.5 ,  3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 ,  -3.0
Intervalo 1:  1.0 ,  3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:55:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if (a<=d or a>=c) and (b>=c or b>=d) and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- EXECUTION TIME:
0.196199
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 ,  5.0
Intervalo 1:  2.5 ,  3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 ,  -3.0
Intervalo 1:  1.0 ,  3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 09:45:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if (a<=d or a>=c) and (b>=c or b>=d) and not(a>b or c>d):
	print("Ha intersecao")
elif a>b or c>d:
	print("Entradas invalidas")
else: 
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:01:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a>=b or c>=d:
	print("Entradas invalidas")
elif b<c:
	print("Nao ha intersecao")
else: 
	print("Ha intersecao")
-- EXECUTION TIME:
0.186671
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 ,  5.0
Intervalo 1:  2.5 ,  3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 ,  -3.0
Intervalo 1:  1.0 ,  3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:01:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a>=b or c>=d:
	print("Entradas invalidas")
elif b<c:
	print("Nao ha intersecao")
else: 
	print("Ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:02:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a>=b or c>=d:
	print("Entradas invalidas")
elif b<c:
	print("Nao ha intersecao")
else: 
	print("Ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:02:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 1: ",c,", ",d)

if a>=b or c>=d:
	print("Entradas invalidas")
elif b<c:
	print("Nao ha intersecao")
else: 
	print("Ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 ,  2.0
Intervalo 1:  4.0 ,  5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:02:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input())
b = float(input())
c = float(input())
d = float(input())

print("Intervalo 1: ",a,", ",b)
print("Intervalo 2: ",c,", ",d)

if a>=b or c>=d:
	print("Entradas invalidas")
elif b<c:
	print("Nao ha intersecao")
else: 
	print("Ha intersecao")
-- EXECUTION TIME:
0.230813
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 ,  2.0
Intervalo 2:  4.0 ,  5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 ,  5.0
Intervalo 2:  2.5 ,  3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 ,  -3.0
Intervalo 2:  1.0 ,  3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
