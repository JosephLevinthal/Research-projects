== TEST (2019-03-28 11:17:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
valor = int(input("valor a ser sacado: ")
notas100 = valor // 100
rest100 = valor % 100
notas50 = rest50 // 50
rest50 = rest50 % 50
notas10 = rest10 // 10
print(int(notas50))
print(int(notas10))
print(int(notas2))
-- ERROR:
File "XXXX", line 5
    notas100 = valor // 100
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 11:17:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
valor = int(input("valor a ser sacado: ")
notas100 = valor // 100
rest100 = valor % 100
notas50 = rest50 // 50
rest50 = rest50 % 50
notas10 = rest10 // 10
print(int(notas100))
print(int(notas50))
print(int(notas10))
-- ERROR:
File "XXXX", line 5
    notas100 = valor // 100
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 11:20:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
valor = int(input("valor a ser sacado: ")
notas100 = valor // 100
rest100 = valor % 100
notas50 = rest50 // 50
rest50 = rest50 % 50
notas10 = rest10 // 10
print(int(notas100))
print(int(notas50))
print(int(notas10))
-- ERROR:
File "XXXX", line 5
    notas100 = valor // 100
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 11:20:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
valor = int(input("valor a ser sacado: "))
notas100 = valor // 100
rest100 = valor % 100
notas50 = rest50 // 50
rest50 = rest50 % 50
notas10 = rest10 // 10
print(int(notas100))
print(int(notas50))
print(int(notas10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    notas50 = rest50 // 50
NameError: name 'rest50' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 11:20:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
valor = int(input("valor a ser sacado: "))
notas100 = valor // 100
rest100 = valor % 100
notas50 = rest100 // 50
rest50 = rest50 % 50
notas10 = rest10 // 10
print(int(notas100))
print(int(notas50))
print(int(notas10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    rest50 = rest50 % 50
NameError: name 'rest50' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 11:21:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
valor = int(input("valor a ser sacado: "))
notas100 = valor // 100
rest100 = valor % 100
notas50 = rest100 // 50
rest50 = notas50 % 50
notas10 = rest10 // 10
print(int(notas100))
print(int(notas50))
print(int(notas10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    notas10 = rest10 // 10
NameError: name 'rest10' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 11:21:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
valor = int(input("valor a ser sacado: "))
notas100 = valor // 100
rest100 = valor % 100
notas50 = rest100 // 50
rest50 = notas50 % 50
notas10 = rest50// 10
print(int(notas100))
print(int(notas50))
print(int(notas10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 11:21:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
valor = int(input("valor a ser sacado: "))
notas100 = valor // 100
rest100 = valor % 100
notas50 = rest100 // 50
rest50 = notas50 % 50
notas10 = rest50// 10
print(int(notas100))
print(int(notas50))
print(int(notas10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 11:23:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
valor = int(input("valor a ser sacado: "))
notas100 = valor // 100
rest100 = valor % 100
notas50 = rest100 // 50
rest50 = notas100 % 50
notas10 = rest50 // 10
print(int(notas100))
print(int(notas50))
print(int(notas10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 11:23:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
valor = int(input("valor a ser sacado: "))
notas100 = valor // 100
rest100 = valor % 100
notas50 = rest100 // 50
rest50 = rest100 % 50
notas10 = rest50 // 10
print(int(notas100))
print(int(notas50))
print(int(notas10))
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 11:24:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.
valor = int(input("valor a ser sacado: "))
notas100 = valor // 100
rest100 = valor % 100
notas50 = rest100 // 50
rest50 = rest100 % 50
notas10 = rest50 // 10
print(int(notas100))
print(int(notas50))
print(int(notas10))
-- EXECUTION TIME:
0.141459
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
