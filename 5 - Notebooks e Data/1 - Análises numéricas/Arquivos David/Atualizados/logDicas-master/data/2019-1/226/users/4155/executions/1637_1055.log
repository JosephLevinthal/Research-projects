== TEST (2019-04-09 11:01:01) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8

R = ((vo ** 2) * sin(radians(a))) / g
abs(d - R)

if (R == d):
	msg = "sim"
else:
	msg = "nao"
	
print(msg)


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:01:21) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8

R = ((vo ** 2) * sin(radians(a))) / g
abs(d - R)

if (R == d):
	msg = "sim"
else:
	msg = "nao"
	
print(msg)


-- EXECUTION TIME:
0.185553
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:02:18) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8

R = ((vo ** 2) * sin(radians(2 * a))) / g
abs(d - R)

if (R == d):
	msg = "sim"
else:
	msg = "nao"
	
print(msg)


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:02:35) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8

R = ((vo ** 2) * sin(radians(2 * a))) / g
abs(d - R)

if (R == d):
	msg = "sim"
else:
	msg = "nao"
	
print(msg)


-- EXECUTION TIME:
0.112812
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:03:25) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8

R = (((vo) ** 2) * sin(radians(2 * a))) / g
abs(d - R)

if (R == d):
	msg = "sim"
else:
	msg = "nao"
	
print(msg)


-- EXECUTION TIME:
0.157029
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:04:23) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8

R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)

if (R == x):
	msg = "sim"
else:
	msg = "nao"
	
print(msg)


-- EXECUTION TIME:
0.236191
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:08:56) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = R + 0,1
t = R - 0,1
if (R == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- EXECUTION TIME:
0.166149
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:08:59) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = R + 0,1
t = R - 0,1
if (R == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:09:53) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = x + 0,1
t = x - 0,1
if (R == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:10:10) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = x + 0,1
t = x - 0,1
if (R == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- EXECUTION TIME:
0.131402
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:11:28) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = x + 0,1
t = x - 0,1
if (R == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- EXECUTION TIME:
0.179353
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:12:37) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = x + 0.1
t = x - 0.1
if (R == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- EXECUTION TIME:
0.120084
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:13:03) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = d + 0.1
t = d - 0.1
if (R == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- EXECUTION TIME:
0.162086
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:13:49) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = R + 0.1
t = R - 0.1
if (R == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- EXECUTION TIME:
0.189481
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:16:50) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = x + 0.1
t = x - 0.1
if (R == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- EXECUTION TIME:
0.145294
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
velocidade inicial: angulo: distancia: nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
velocidade inicial: angulo: distancia: nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:18:50) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = x + 0.1
t = x - 0.1
if (x == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- EXECUTION TIME:
0.143377
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:19:57) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = x + 0.1
t = x - 0.1
if (R == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- EXECUTION TIME:
0.127605
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:19:58) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)
z = x + 0.1
t = x - 0.1
if (R == z == t):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:38:49) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)

if (x <= 0.1):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:39:02) 
-- CODE:
from math import *
vo = float(input("velocidade inicial: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
g = 9.8
R = (((vo) ** 2) * sin(radians(2 * a))) / g
x = abs(d - R)

if (x <= 0.1):
	msg = "sim"
else:
	msg = "nao"
print(msg)


-- EXECUTION TIME:
0.158454
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
