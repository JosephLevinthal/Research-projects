== TEST (2019-04-01 10:40:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input(a))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    n1 = int(input(a))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 10:40:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input(a))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    n1 = int(input(a))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 10:41:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    n1 = int(input(a))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 10:43:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(a//b//c//d))
s = a + b + c + d
print(s)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input(a//b//c//d))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 10:44:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input('a//b//c//d'))
s = a + b + c + d
print(s)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    s = a + b + c + d
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:56:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = input(a, b, c, d)
n2 = a + b + c + d
print(n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    n1 = input(a, b, c, d)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:56:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = input('a', 'b', 'c', 'd')
n2 = a + b + c + d
print(n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    n1 = input('a', 'b', 'c', 'd')
TypeError: input expected at most 1 arguments, got 4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:57:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = input('a, b, c, d')
n2 = a + b + c + d
print(n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    n2 = a + b + c + d
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:57:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = input('a, b, c, d')
n2 = a + b + c + d
print(n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    n2 = a + b + c + d
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:02:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input(a // b // c // d))
n2 = a + b + c + d
print(n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    n1 = int(input(a // b // c // d))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:02:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input(a // b // c // d))
n2 = 'a + b + c + d'
print(n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    n1 = int(input(a // b // c // d))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:05:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input({} {} {} {}))
n2 = {} + {} + {} + {}
print(n2)
-- ERROR:
File "XXXX", line 4
    n1 = int(input({} {} {} {}))
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:05:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input({} {} {} {}))
n2 = {} + {} + {} + {}
print(n2)
-- ERROR:
File "XXXX", line 4
    n1 = int(input({} {} {} {}))
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 16:06:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input(a % b % c % d))
n2 = a + b + c + d
print(n2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    n1 = int(input(a % b % c % d))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:36:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = input("Digite um número inteiro: ")

print(sum(int(i) for i in n))
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:36:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = input("Digite um número inteiro: ")
print(sum(int(i) for i in n))
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:38:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))
soma = 0
while (n > 0):              
resto = n % 10
n = (n - resto)/10
soma = soma + resto
print("A soma dos números é: ", n)
-- ERROR:
File "XXXX", line 7
    resto = n % 10
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:38:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))
soma = 0
while (n > 0):              
resto = n % '10'
n = (n - resto)/10
soma = soma + resto
print("A soma dos números é: ", n)
-- ERROR:
File "XXXX", line 7
    resto = n % '10'
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:41:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input("insira um numero"))
soma = n1 %
print(soma)
-- ERROR:
File "XXXX", line 5
    soma = n1 %
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:41:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input("insira um numero" n1, n2, n3, n4))
soma = n1 + n2 + n3 + n4
print(soma)
-- ERROR:
File "XXXX", line 4
    n1 = int(input("insira um numero" n1, n2, n3, n4))
                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:41:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input("insira um numero" 'n1, n2, n3, n4''))
soma = n1 + n2 + n3 + n4
print(soma)
-- ERROR:
File "XXXX", line 4
    n1 = int(input("insira um numero" 'n1, n2, n3, n4''))
                                                        ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:42:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input("insira um numero" "n1, n2, n3, n4"))
soma = n1 + n2 + n3 + n4
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma = n1 + n2 + n3 + n4
NameError: name 'n2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:43:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input("n1" "n2" "n3" "n4"))
soma = n1 + n2 + n3 + n4
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma = n1 + n2 + n3 + n4
NameError: name 'n2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:46:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input(""))
soma = (n // 4)
print  (soma)
-- OUTPUT:
2293
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:46:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input(""))
soma = (n // 4) % 4
print  (soma)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:51:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
def somardigitos (numero)
assert == somar digitos (abcd)
abcd = int(input(abcd))
print(assert)
-- ERROR:
File "XXXX", line 4
    def somardigitos (numero)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:52:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
def somardigitos (numero)
assert == somar digitos (abcd), "a soma dos digitos de abcd deve ser a + b + c + d"
abcd = int(input(abcd))
print(assert)
-- ERROR:
File "XXXX", line 4
    def somardigitos (numero)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:52:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
def somardigitos (abcd)
assert == somar digitos (abcd), "a soma dos digitos de abcd deve ser a + b + c + d"
abcd = int(input(abcd))
print(assert)
-- ERROR:
File "XXXX", line 4
    def somardigitos (abcd)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:52:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
def somardigitos ("abcd")
assert == somar digitos (abcd), "a soma dos digitos de abcd deve ser a + b + c + d"
abcd = int(input(abcd))
print(assert)
-- ERROR:
File "XXXX", line 4
    def somardigitos ("abcd")
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:53:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
def somardigitos 
assert == somar digitos (abcd), "a soma dos digitos de abcd deve ser a + b + c + d"
abcd = int(input(abcd))
print(assert)
-- ERROR:
File "XXXX", line 4
    def somardigitos 
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:53:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
def assert
assert == somar digitos (abcd), "a soma dos digitos de abcd deve ser a + b + c + d"
abcd = int(input(abcd))
print(assert)
-- ERROR:
File "XXXX", line 4
    def assert
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:53:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
assert == somar digitos (abcd), "a soma dos digitos de abcd deve ser a + b + c + d"
abcd = int(input(abcd))
print(assert)
-- ERROR:
File "XXXX", line 4
    assert == somar digitos (abcd), "a soma dos digitos de abcd deve ser a + b + c + d"
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:54:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
abcd = int(input(""))
soma = abcd == a + b + c + d
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma = abcd == a + b + c + d
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:56:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
abcd = int(input(""))
def somarDigitos
assert 10 = abcd == 10
print(soma)
-- ERROR:
File "XXXX", line 5
    def somarDigitos
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:00:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = input("Digite o numero")
lista = []
soma = 0
for i in num:
lista.append(i)
soma = soma + int(i)
print "A lista contem: ", lista
print "A soma eh: ", soma
-- ERROR:
File "XXXX", line 8
    lista.append(i)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:01:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
def somar_digitos(n):
r = 0
   while n:
       r, n = r + n % 10, n // 10
   return r
-- ERROR:
File "XXXX", line 5
    r = 0
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:06:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input"inserir numero")
sm = (n // n)
print(sm)
-- ERROR:
File "XXXX", line 4
    n = int(input"inserir numero")
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:06:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input"inserir numero")
sm = (n // n)
print(sm)
-- ERROR:
File "XXXX", line 4
    n = int(input"inserir numero")
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:06:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input"inserir numero")
sm = (n // 4)
print(sm)
-- ERROR:
File "XXXX", line 4
    n = int(input"inserir numero")
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:23:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input"insira um numero")
n2 = int(input"insira um numero")
n3 = int(input"insira um numero")
n4 = int(input"insira um numero")
s = n1 + n2 + n3 + n4
print("a soma vale" , s )
-- ERROR:
File "XXXX", line 4
    n1 = int(input"insira um numero")
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:24:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input "insira um numero")
n2 = int(input "insira um numero")
n3 = int(input "insira um numero")
n4 = int(input "insira um numero")
s = n1 + n2 + n3 + n4
print("a soma vale" , s )
-- ERROR:
File "XXXX", line 4
    n1 = int(input "insira um numero")
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:24:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int ( input "insira um numero" )
n2 = int ( input "insira um numero" )
n3 = int ( input "insira um numero" )
n4 = int ( input "insira um numero" )
s = n1 + n2 + n3 + n4
print("a soma vale" , s )
-- ERROR:
File "XXXX", line 4
    n1 = int ( input "insira um numero" )
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:25:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int ( input "insira um numero" )
n2 = int ( input "insira um numero" )
n3 = int ( input "insira um numero" )
n4 = int ( input "insira um numero" )
s = n1 + n2 + n3 + n4
print("a soma vale" , s )
-- ERROR:
File "XXXX", line 4
    n1 = int ( input "insira um numero" )
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:25:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int ( input "" )
n2 = int ( input "insira um numero" )
n3 = int ( input "insira um numero" )
n4 = int ( input "insira um numero" )
s = n1 + n2 + n3 + n4
print("a soma vale" , s )
-- ERROR:
File "XXXX", line 4
    n1 = int ( input "" )
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:26:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int ( input "" )
n2 = int ( input "insira um numero" )
n3 = int ( input "insira um numero" )
n4 = int ( input "insira um numero" )
s = n1 + n2 + n3 + n4
print("a soma vale" , s )
-- ERROR:
File "XXXX", line 4
    n1 = int ( input "" )
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:28:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = input("insira um numero")
n2 = input("insira um numero")
soma = n1 + n2 
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    n2 = input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:28:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = input(("insira um numero"))
n2 = int(input("insira um numero"))
soma = n1 + n2 
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    n2 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:29:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input("insira um numero"))
n2 = int(input("insira um numero"))
soma = n1 + n2 
print(soma)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    n2 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:31:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input(""))
n2 = int(input(""))
n3 = int(input(""))
n4 = int(input(""))
s = n1 + n2 + n3 + n4
print(s)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    n2 = int(input(""))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 09:31:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1 = int(input(""))
n2 = int(input(""))
n3 = int(input(""))
n4 = int(input(""))
s = n1 + n2 + n3 + n4
print(s)
-- EXECUTION TIME:
0.132589
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/842/main.py", line 5, in <module>
    n2 = int(input(""))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
