== TEST (2019-04-30 11:09:39) 
-- CODE:
from math import *

a = float(input("Altura do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ", a,",", h,",", r)

if(h < 0) or (a <= 0) or (r <= 0):
	print("Entradas invalidas")
elif(h > a) or (2 * r > a):
	print("Entradas invalidas")
else:
	if(h <= r):
		v = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume: ", round(v * 1000, 3), "litros")
	elif(h > r) and (h <= a - r):
		vse = (4 * pi * (r ** 3)) / 6
		vc = pi * (r ** 2) * (h - r)
		v = vse + vc
	elif(h > a - r):
		vse = (4 * pi * (r ** 3)) / 6
		vc = pi * (r ** 2) * (h - r)
		ve = vse - ((pi * ((a - h) ** 2) * (3 * r - (a - h))) / 3)
		v = vse + vc + ve
		print("Volume: ", round(v * 1000, 3), "litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:10:16) 
-- CODE:
from math import *

a = float(input("Altura do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ", a,",", h,",", r)

if(h < 0) or (a <= 0) or (r <= 0):
	print("Entradas invalidas")
elif(h > a) or (2 * r > a):
	print("Entradas invalidas")
else:
	if(h <= r):
		v = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume: ", round(v * 1000, 3), "litros")
	elif(h > r) and (h <= a - r):
		vse = (4 * pi * (r ** 3)) / 6
		vc = pi * (r ** 2) * (h - r)
		v = vse + vc
	elif(h > a - r):
		vse = (4 * pi * (r ** 3)) / 6
		vc = pi * (r ** 2) * (h - r)
		ve = vse - ((pi * ((a - h) ** 2) * (3 * r - (a - h))) / 3)
		v = vse + vc + ve
		print("Volume: ", round(v * 1000, 3), "litros")
-- EXECUTION TIME:
0.296038
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:10:24) 
-- CODE:
from math import *

a = float(input("Altura do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ", a,",", h,",", r)

if(h < 0) or (a <= 0) or (r <= 0):
	print("Entradas invalidas")
elif(h > a) or (2 * r > a):
	print("Entradas invalidas")
else:
	if(h <= r):
		v = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume: ", round(v * 1000, 3), "litros")
	elif(h > r) and (h <= a - r):
		vse = (4 * pi * (r ** 3)) / 6
		vc = pi * (r ** 2) * (h - r)
		v = vse + vc
	elif(h > a - r):
		vse = (4 * pi * (r ** 3)) / 6
		vc = pi * (r ** 2) * (h - r)
		ve = vse - ((pi * ((a - h) ** 2) * (3 * r - (a - h))) / 3)
		v = vse + vc + ve
		print("Volume: ", round(v * 1000, 3), "litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:11:18) 
-- CODE:
from math import *

a = float(input("Altura do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ", a,",", h,",", r)

if(h < 0) or (a <= 0) or (r <= 0):
	print("Entradas invalidas")
elif(h > a) or (2 * r > a):
	print("Entradas invalidas")
else:
	if(h <= r):
		v = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume: ", round(v * 1000, 3), "litros")
	elif(h > r) and (h <= a - r):
		vse = (4 * pi * (r ** 3)) / 6
		vc = pi * (r ** 2) * (h - r)
		v = vse + vc
		print("Volume: ", round(v * 1000, 3), "litros")
	elif(h > a - r):
		vse = (4 * pi * (r ** 3)) / 6
		vc = pi * (r ** 2) * (h - r)
		ve = vse - ((pi * ((a - h) ** 2) * (3 * r - (a - h))) / 3)
		v = vse + vc + ve
		print("Volume: ", round(v * 1000, 3), "litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:11:29) 
-- CODE:
from math import *

a = float(input("Altura do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ", a,",", h,",", r)

if(h < 0) or (a <= 0) or (r <= 0):
	print("Entradas invalidas")
elif(h > a) or (2 * r > a):
	print("Entradas invalidas")
else:
	if(h <= r):
		v = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume: ", round(v * 1000, 3), "litros")
	elif(h > r) and (h <= a - r):
		vse = (4 * pi * (r ** 3)) / 6
		vc = pi * (r ** 2) * (h - r)
		v = vse + vc
		print("Volume: ", round(v * 1000, 3), "litros")
	elif(h > a - r):
		vse = (4 * pi * (r ** 3)) / 6
		vc = pi * (r ** 2) * (h - r)
		ve = vse - ((pi * ((a - h) ** 2) * (3 * r - (a - h))) / 3)
		v = vse + vc + ve
		print("Volume: ", round(v * 1000, 3), "litros")
-- EXECUTION TIME:
0.199855
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:02:44) 
-- CODE:
from math import *

a = float(input("Altura do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ", a,",", h,",", r)

if(h < 0) or (a <= 0) or (r <= 0):
	print("Entradas invalidas")
elif(h > a) or (2 * r > a):
	print("Entradas invalidas")
elif(h <= r):
	v = (pi / 3) * (h ** 2) * (3 * r - h)
	print("Volume: ", round(v * 1000, 3), "litros")
elif(h > r) and (h <= a - r):
	vse = (4 * pi * (r ** 3)) / 6
	vc = pi * (r ** 2) * (h - r)
	v = vse + vc
	print("Volume: ", round(v * 1000, 3), "litros")
elif(h > a - r):
	vse = (4 * pi * (r ** 3)) / 6
	vc = pi * (r ** 2) * (h - r)
	ve = vse - ((pi * ((a - h) ** 2) * (3 * r - (a - h))) / 3)
	v = vse + vc + ve
	print("Volume: ", round(v * 1000, 3), "litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:02:59) 
-- CODE:
from math import *

a = float(input("Altura do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ", a,",", h,",", r)

if(h < 0) or (a <= 0) or (r <= 0):
	print("Entradas invalidas")
elif(h > a) or (2 * r > a):
	print("Entradas invalidas")
elif(h <= r):
	v = (pi / 3) * (h ** 2) * (3 * r - h)
	print("Volume: ", round(v * 1000, 3), "litros")
elif(h > r) and (h <= a - r):
	vse = (4 * pi * (r ** 3)) / 6
	vc = pi * (r ** 2) * (h - r)
	v = vse + vc
	print("Volume: ", round(v * 1000, 3), "litros")
elif(h > a - r):
	vse = (4 * pi * (r ** 3)) / 6
	vc = pi * (r ** 2) * (h - r)
	ve = vse - ((pi * ((a - h) ** 2) * (3 * r - (a - h))) / 3)
	v = vse + vc + ve
	print("Volume: ", round(v * 1000, 3), "litros")
-- EXECUTION TIME:
0.147052
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
