== TEST (2019-05-14 10:08:45) 
-- CODE:
from math import *

x = float(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))
soma = 0
i = 0
while (k > i):
	soma = soma + (x ** i)/factorial(i)
	i = 2*i + 1
print(round(soma, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = float(input())
ValueError: could not convert string to float: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 10:09:20) 
-- CODE:
from math import *

x = float(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))
soma = 0
i = 0
while (k > i):
	soma = soma + (x ** i)/factorial(i)
	i = 2*i + 1
print(round(soma, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = float(input())
ValueError: could not convert string to float: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 10:09:31) 
-- CODE:
from math import *

x = float(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))
soma = 0
i = 0
while (k > i):
	soma = soma + (x ** i)/factorial(i)
	i = 2*i + 1
print(round(soma, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = float(input())
ValueError: could not convert string to float: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 10:09:35) 
-- CODE:
from math import *

x = float(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))
soma = 0
i = 0
while (k > i):
	soma = soma + (x ** i)/factorial(i)
	i = 2*i + 1
print(round(soma, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    x = float(input())
ValueError: could not convert string to float: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 10:09:56) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))
soma = 0
i = 0
while (k > i):
	soma = soma + (x ** i)/factorial(i)
	i = 2*i + 1
print(round(soma, 10))
-- OUTPUT:
3.2167604243
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 10:11:04) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))
soma = 0
i = 0
while (k > i):
	soma = soma + (x ** i)/factorial(i)
	i = 2*i + 1
print(round(sin(soma, 10)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(round(sin(soma, 10)))
TypeError: sin() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 10:11:40) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))
soma = 0
i = 0
while (k > i):
	i = 2*i + 1
	soma = soma + (x ** i)/factorial(i)
print(round(soma, 10))
-- OUTPUT:
2.2214421784
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 10:13:04) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))
soma = 0
i = 0
while (k > i):
	i = 2*i + 1
	soma = soma +((-1 )** i)*(x ** (2*i + 1))/factorial(2*i + 1)
print(round(soma, 10))
-- OUTPUT:
-0.6506458523
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 10:13:25) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))
soma = 0
i = 0
while (k > i):
	soma = soma +((-1 )** i)*(x ** (2*i + 1))/factorial(2*i + 1)
	i = i + 1
print(round(soma, 10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 10:13:44) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))
soma = 0
i = 0
while (k > i):
	soma = soma +((-1 )** i)*(x ** (2*i + 1))/factorial(2*i + 1)
	i = i + 1
print(round(soma, 10))
-- EXECUTION TIME:
0.141428
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
