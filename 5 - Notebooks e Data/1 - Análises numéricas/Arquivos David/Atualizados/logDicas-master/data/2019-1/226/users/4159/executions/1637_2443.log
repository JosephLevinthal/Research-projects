== TEST (2019-04-11 11:38:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = float(input("escolha:(1/2)"))
from math import*
if(opcao==1):
	print(round((4*pi*r)/3, 4)
else(opcao==2):
	print(round((pi*h**2*(3r-h)/3, 4))
-- ERROR:
File "XXXX", line 10
    else(opcao==2):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:39:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = float(input("escolha:(1/2)"))
from math import*
if(opcao == 1):
	print(round((4*pi*r)/3, 4)
else(opcao == 2):
	print(round((pi*h**2*(3r-h)/3, 4))
-- EXECUTION TIME:
0.232838
-- ERROR:
  File "/home/codebench/codes/1637/2443/main.py", line 10
    else(opcao == 2):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:39:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = float(input("escolha:(1/2)"))
from math import*
if(opcao == 1):
	print(round((4*pi*r)/3, 4)
else(opcao == 2):
	print(round((pi*h**2*(3r-h)/3, 4))
-- ERROR:
File "XXXX", line 10
    else(opcao == 2):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:40:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = float(input("escolha:(1/2)"))
from math import*
if(opcao == 1):
	print(round((4*pi*r)/3, 4))
else(opcao==2):
	print(round(pi*h**2*(3r-h)/3, 4))
-- ERROR:
File "XXXX", line 10
    else(opcao==2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:41:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = int(input("escolha:(1/2)"))
from math import*
if(opcao == 1):
	print(round((4*pi*r)/3, 4))
else(opcao==2):
	print(round(pi*h**2*(3r-h)/3, 4))
-- ERROR:
File "XXXX", line 10
    else(opcao==2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:42:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = int(input("escolha:(1/2)"))
from math import*
if(opcao == 1):
	print(round((4*pi*r)/3, 4))
else:
	print(round(pi*h**2*(3r-h)/3, 4))
-- ERROR:
File "XXXX", line 11
    print(round(pi*h**2*(3r-h)/3, 4))
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:43:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = int(input("escolha:(1/2)"))
from math import*
if(opcao == 1):
	print(round((4*pi*r)/3, 4))
else:
	print(round(pi*h**2*(3*r-h)/3, 4))
-- OUTPUT:
14.6608
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:44:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = int(input("escolha:(1/2)"))
from math import*
if(opcao == 1):
	print(round((4*pi*r)/3, 4))
else:
	print(round((pi*h**2*(3*r-h))/3, 4))
-- OUTPUT:
14.6608
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:45:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = int(input("escolha:(1/2)"))
from math import*
if(opcao == 1):
	print(round((4*pi*r)/3, 4))
else:
	print(round(((pi*h**2)*(3*r-h))/3, 4))
-- OUTPUT:
14.6608
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:45:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = int(input("escolha:(1/2)"))
from math import*
if(opcao == 1):
	print(round((4*pi*r)/3, 4))
else:
	print(round(((pi*h**2)*(3*r-h))/3, 4))
-- EXECUTION TIME:
0.281762
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
14.6608
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:48:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = int(input("escolha:(1/2)"))
from math import*
vc=(4*pi*r)/3
ve=((pi*h**2)*(3*r-h))/3
if(opcao == 1):
	print(round(ve-vc, 4))
else:
	print(round(vc, 4))
-- OUTPUT:
-5.6351
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:48:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = int(input("escolha:(1/2)"))
from math import*
vc=(4*pi*r)/3
ve=((pi*h**2)*(3*r-h))/3
if(opcao == 1):
	print(round(vc, 4))
else:
	print(round(ve-vc, 4))
-- OUTPUT:
14.6608
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:49:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = int(input("escolha:(1/2)"))
from math import*
ve=(4*pi*r)/3
vc=((pi*h**2)*(3*r-h))/3
if(opcao == 1):
	print(round(vc, 4))
else:
	print(round(ve-vc, 4))
-- EXECUTION TIME:
0.161303
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
-2.4054
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:49:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = int(input("escolha:(1/2)"))
from math import*
ve=(4*pi*r)/3
vc=((pi*h**2)*(3*r-h))/3
if(opcao == 1):
	print(round(vc, 4))
else:
	print(round(ve-vc, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:50:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("variavel: "))
h = float(input("variavel: "))
opcao = int(input("escolha:(1/2)"))
from math import*
ve=(4*pi*r**3)/3
vc=((pi*h**2)*(3*r-h))/3
if(opcao == 1):
	print(round(vc, 4))
else:
	print(round(ve-vc, 4))
-- EXECUTION TIME:
0.298398
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
