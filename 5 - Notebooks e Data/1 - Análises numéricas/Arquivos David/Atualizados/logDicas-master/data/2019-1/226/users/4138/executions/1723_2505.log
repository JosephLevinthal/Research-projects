== TEST (2019-05-09 17:33:02) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
tg = x**(2*i + 1)/(factorial(2*i + 1))

while(x >= - pi and x <= pi ):
	soma = soma +  (x**(2*i + 1)/(factorial(2*i + 1)))
	i = i + 1
print(round(soma,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    soma = soma +  (x**(2*i + 1)/(factorial(2*i + 1)))
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:34:27) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
tg = x**(2*i + 1)/(factorial(2*i + 1))

while(x >= - pi and x <= pi ):
	tg = x**(2*i + 1)/(factorial(2*i + 1))
	soma = soma + tg
	i = i + 1
print(round(soma,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    tg = x**(2*i + 1)/(factorial(2*i + 1))
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:35:51) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
tg = x**(2*i + 1)
tg1 = (factorial(2*i + 1))
while(x >= - pi and x <= pi ):
	tg = x**(2*i + 1)/(factorial(2*i + 1))
	tg1 = (factorial(2*i + 1))
	soma = soma + (tg/tg1)
	i = i + 1
print(round(soma,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    tg = x**(2*i + 1)/(factorial(2*i + 1))
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:36:11) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
tg = x**(2*i + 1)
tg1 = (factorial(2*i + 1))
while(x >= - pi and x <= pi ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + (tg/tg1)
	i = i + 1
print(round(soma,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    soma = soma + (tg/tg1)
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:36:18) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
tg = x**(2*i + 1)
tg1 = (factorial(2*i + 1))
while(x >= - pi and x <= pi ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + (tg/tg1)
	i = i + 1
print(round(soma,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    soma = soma + (tg/tg1)
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:37:42) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))

while(x >= - pi and x <= pi ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + (tg/tg1) * (-1**i)
	i = i + 1
print(round(soma,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    soma = soma + (tg/tg1) * (-1**i)
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:38:30) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))

while(x >= - pi and x <= pi ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + (tg/tg1) * (-1**i)
	i = i + 1
print(round(soma,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    soma = soma + (tg/tg1) * (-1**i)
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:39:46) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))

while(x >= - pi and x <= pi ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + (tg/tg1) * (-1**i)
	i = i + 1
print(round(soma,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    soma = soma + (tg/tg1) * (-1**i)
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:40:06) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))

while(x >= - pi and x <= pi ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1) * (-1**i))
	i = i + 1
print(round(soma,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    soma = soma + ((tg/tg1) * (-1**i))
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:41:12) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))

while(i < k ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1) * (-1**i))
	i = i + 1
print(round(soma,10))
-- OUTPUT:
-2.3012952459
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:42:03) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))

while(i < k ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1) * (-1**i))
	i = i + 1
print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
-2.3012952459
58.22089713563711
362880
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:45:37) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
fnal = k - 1
while(i < final ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1) * (-1**i))
	i = i + 1
print(round(soma,10))
print(tg)
print(tg1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    while(i < final ):
NameError: name 'final' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:45:54) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
final = k - 1
while(i < final ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1) * (-1**i))
	i = i + 1
print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
-2.3011348047
23.596040842006182
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:46:18) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
final = k - 1
while(i < final ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1)
	i = i + 1
print(round(soma,10))
print(tg)
print(tg1)
-- ERROR:
File "XXXX", line 11
    i = i + 1
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:46:43) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
final = k - 1
while(i < final ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
2.3011348047
23.596040842006182
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 17:49:10) 
-- CODE:
from math import *
soma = 0
i = 0
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
final = k - 1
while(i < final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
-2.3011348047
-23.596040842006182
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:26:37) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
while(i < final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
-2.3011348047
-23.596040842006182
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:30:39) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(i < final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
-2.3011348047
-23.596040842006182
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:32:01) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(i <= final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
-2.3012952459
-58.22089713563711
362880
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:32:17) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(i <= final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
-2.3012952459
-58.22089713563711
362880
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:32:27) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(i < final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
-2.3011348047
-23.596040842006182
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:37:45) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(i < final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
if(x > pi or x < -pi):
	print(round(soma,10))
	print(tg)
	print(tg1)
-- OUTPUT:
-2.3011348047
-23.596040842006182
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:38:39) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(i < final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
if(eval(x > pi or x < -pi)):
	print(round(soma,10))
	print(tg)
	print(tg1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    if(eval(x > pi or x < -pi)):
TypeError: eval() arg 1 must be a string, bytes or code object
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:38:54) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(i < final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
if(eval(x > pi or x < -pi)):
	print(round(soma,10))
	print(tg)
	print(tg1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    if(eval(x > pi or x < -pi)):
TypeError: eval() arg 1 must be a string, bytes or code object
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:39:22) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(i < final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
if(x > eval(pi) or x < eval(-pi)):
	print(round(soma,10))
	print(tg)
	print(tg1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    if(x > eval(pi) or x < eval(-pi)):
TypeError: eval() arg 1 must be a string, bytes or code object
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:39:30) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(i < final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1
if(x > eval(pi) or x < eval(-pi)):
	print(round(soma,10))
	print(tg)
	print(tg1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    if(x > eval(pi) or x < eval(-pi)):
TypeError: eval() arg 1 must be a string, bytes or code object
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:40:25) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(i < final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1

print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
-2.3011348047
-23.596040842006182
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:40:55) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(i > final ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1

print(round(soma,10))
print(tg)
print(tg1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    print(tg)
NameError: name 'tg' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:41:22) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(k - 1 > i ):
	tg = x**(2*i + 1) * (-1**i)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((tg/tg1))
	i = i + 1

print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
-2.3011348047
-23.596040842006182
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:44:22) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(k - 1 > i ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + (-1)**i /((tg/tg1))
	i = i + 1

print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
-201.9583964473
23.596040842006182
5040
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:45:16) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(k > i ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + (-1)**i /((tg/tg1))
	i = i + 1

print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
6030.8552126354
58.22089713563711
362880
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:46:58) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(k > i ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((-1)**i * tg)/tg1
	i = i + 1

print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
1.0000035426
58.22089713563711
362880
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 10:47:05) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(k > i ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((-1)**i * tg)/tg1
	i = i + 1

print(round(soma,10))
print(tg)
print(tg1)
-- EXECUTION TIME:
0.141342
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
58.22089713563711
362880
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-23.596040842006182
5040
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
1.2593402666060958
120
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 10:47:08) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(k > i ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((-1)**i * tg)/tg1
	i = i + 1

print(round(soma,10))
print(tg)
print(tg1)
-- EXECUTION TIME:
0.148476
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
58.22089713563711
362880
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-23.596040842006182
5040
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
1.2593402666060958
120
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 10:47:08) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(k > i ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((-1)**i * tg)/tg1
	i = i + 1

print(round(soma,10))
print(tg)
print(tg1)
-- OUTPUT:
1.0000035426
58.22089713563711
362880
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 10:47:23) 
-- CODE:
from math import *
x = eval(input("insira o angulo:"))
k = int(input("insira o numero determos da serie:"))
soma = 0
i = 0
final = k - 1
#termo geral = x**(2*i + 1)/(factorial(2*i + 1))
while(k > i ):
	tg = x**(2*i + 1)
	tg1 = (factorial(2*i + 1))
	soma = soma + ((-1)**i * tg)/tg1
	i = i + 1

print(round(soma,10))

-- EXECUTION TIME:
0.133358
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
