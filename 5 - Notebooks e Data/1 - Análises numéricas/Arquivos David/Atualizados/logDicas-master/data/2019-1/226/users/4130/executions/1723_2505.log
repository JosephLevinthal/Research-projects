== TEST (2019-05-13 00:33:39) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos da serie: "))

soma = 0
i = 0
final = k - 1

while(k > 1):
	tg = x ** (2 * i + 1)
	tg1 = (factorial(2 * i + 1))
	soma = soma + ((-1) ** i * tg) / tg1
	i = i + 1
	
print(round(soma, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    soma = soma + ((-1) ** i * tg) / tg1
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 00:34:14) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos da serie: "))

soma = 0
i = 0
final = k - 1

while(k > 1):
	tg = x ** (2 * i + 1)
	tg1 = (factorial(2 * i + 1))
	soma = soma + ((-1) ** i * tg) / tg1
	i = i + 1
	
print(round(soma, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    soma = soma + ((-1) ** i * tg) / tg1
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 00:35:20) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos da serie: "))

soma = 0
i = 0
final = k - 1

while(k > 1):
	tg = x ** (2 * i + 1)
	tg1 = (factorial(2 * i + 1))
	soma = soma + ((-1) ** i * tg) / tg1
	i = i + 1
	
print(round(soma, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    soma = soma + ((-1) ** i * tg) / tg1
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 22:24:43) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos da serie: "))

soma = 0
i = 0
final = k - 1

while(k > i):
	tg = x ** (2 * i + 1)
	tg1 = (factorial(2 * i + 1))
	soma = soma + ((-1) ** i * tg) / tg1
	i = i + 1
	
print(round(soma, 10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 22:24:52) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos da serie: "))

soma = 0
i = 0
final = k - 1

while(k > i):
	tg = x ** (2 * i + 1)
	tg1 = (factorial(2 * i + 1))
	soma = soma + ((-1) ** i * tg) / tg1
	i = i + 1
	
print(round(soma, 10))
-- EXECUTION TIME:
0.158268
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:29:26) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))

soma = 0
i = 0
fim = k - 1

while(k > i):
	soma = soma + ((-1) ** i * (2 * i + 1)) / (factorial (2 * i + 1))
	i = i + 1
print(round(soma, 8))
-- OUTPUT:
0.54030258
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:30:28) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))

soma = 0
i = 0
fim = k - 1

while(k > i):
	soma = soma + ((-1) ** i * (x ** (2 * i + 1)) / (factorial (2 * i + 1))
	i = i + 1
print(round(soma, 8))
-- ERROR:
File "XXXX", line 12
    i = i + 1
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:30:34) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))

soma = 0
i = 0
fim = k - 1

while(k > i):
	soma = soma + ((-1) ** i * (x ** (2 * i + 1))) / (factorial (2 * i + 1))
	i = i + 1
print(round(soma, 8))
-- OUTPUT:
1.00000354
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 21:30:42) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))

soma = 0
i = 0
fim = k - 1

while(k > i):
	soma = soma + ((-1) ** i * (x ** (2 * i + 1))) / (factorial (2 * i + 1))
	i = i + 1
print(round(soma, 8))
-- EXECUTION TIME:
0.15834
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.00000354
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.86629528
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:31:14) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))

soma = 0
i = 0
fim = k - 1

while(k > i):
	soma = soma + ((-1) ** i * (x ** (2 * i + 1))) / (factorial (2 * i + 1))
	i = i + 1
print(round(soma, 8))
-- OUTPUT:
1.00000354
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 21:31:35) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))

soma = 0
i = 0
fim = k - 1

while(k > i):
	soma = soma + ((-1) ** i * (x ** (2 * i + 1))) / (factorial (2 * i + 1))
	i = i + 1
print(round(soma, 10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 21:31:42) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))

soma = 0
i = 0
fim = k - 1

while(k > i):
	soma = soma + ((-1) ** i * (x ** (2 * i + 1))) / (factorial (2 * i + 1))
	i = i + 1
print(round(soma, 10))
-- EXECUTION TIME:
0.305103
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 23:41:29) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))

soma = 0
i = 0

while(k > i):
	soma = soma + ((-1) ** i * (x ** (2 * i + 1))) / (factorial (2 * i + 1))
	i = i + 1
print(round(soma, 10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 23:41:41) 
-- CODE:
from math import *

x = eval(input("Insira o angulo: "))
k = int(input("Insira o numero de termos: "))

soma = 0
i = 0

while(k > i):
	soma = soma + ((-1) ** i * (x ** (2 * i + 1))) / (factorial (2 * i + 1))
	i = i + 1
print(round(soma, 10))
-- EXECUTION TIME:
0.188189
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
