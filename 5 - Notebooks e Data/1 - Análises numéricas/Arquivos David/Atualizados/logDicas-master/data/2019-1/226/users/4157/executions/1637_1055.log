== TEST (2019-04-09 11:23:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial":))
a = radians((input("angulo:"))
d = abs(input("distancia:"))

-- ERROR:
File "XXXX", line 5
    v0 = float(input("velocicade inicial":))
                                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:23:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians((input("angulo:"))
d = abs(input("distancia:"))

-- ERROR:
File "XXXX", line 7
    d = abs(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:24:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(input("angulo:"))
d = abs(input("distancia:"))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = radians(input())
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:25:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(input("distancia:"))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    d = abs(input())
TypeError: bad operand type for abs(): 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:25:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    d = abs(input())
TypeError: bad operand type for abs(): 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:33:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))
g = 9.8
r = ((v0)**2 * sen(2*a))/g
d = abs(d - r)
if(r <= d):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.186218
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/1055/main.py", line 9, in <module>
    r = ((v0)**2 * sen(2*a))/g
NameError: name 'sen' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:33:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))
g = 9.8
r = ((v0)**2 * sen(2*a))/g
d = abs(d - r)
if(r <= d):
	print("sim")
else:
	print("nao")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    r = ((v0)**2 * sen(2*a))/g
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:34:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))
g = 9.8
r = ((v0)**2 * sin(2*a))/g
d = abs(d - r)
if(r <= d):
	print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:36:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))
g = 9.8
r = ((v0)**2 * sin(2*a))/g
d = abs(d - r)
if(r <= d*0.1):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.174551
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:36:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))
g = 9.8
r = ((v0)**2 * sin(2*a))/g
d = abs(d - r)
if(r <= d*0.1):
	print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:36:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))
g = 9.8
r = ((v0)**2 * sin(2*a))/g
d = abs(d - r)
if(r <= d -0.1):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.219412
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:37:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))
g = 9.8
r = ((v0)**2 * sin(2*a))/g
d = abs(d - r)
if(r >= d -0.1):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.142195
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:37:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))
g = 9.8
r = ((v0)**2 * sin(2*a))/g
d = abs(d - r)
if(r >= d -0.1):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.148599
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:37:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))
g = 9.8
r = ((v0)**2 * sin(2*a))/g
d = abs(d - r)
if(r >= d -0.1):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.181807
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:37:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))
g = 9.8
r = ((v0)**2 * sin(2*a))/g
d = abs(d - r)
if(r >= d -0.1):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.18375
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:37:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocicade inicial:"))
a = radians(float(input("angulo:")))
d = abs(float(input("distancia:")))
g = 9.8
r = ((v0)**2 * sin(2*a))/g
if(r >= d -0.1):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.119758
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
