== TEST (2019-04-25 11:48:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
	elif (c<=500):
		x = c * 0.44
		print(h, x)
	elif (c>500):
		x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 8
    elif (c<=500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:48:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
	elif (c <= 500):
		x = c * 0.44
		print(h, x)
	elif (c>500):
		x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 8
    elif (c <= 500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:48:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
elif (c <= 500):
	x = c * 0.44
	print(h, x)
elif (c>500):
	x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 8
    elif (c <= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:49:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
elif (c <= 500):
	x = c * 0.44
	print(h, x)
elif (c>500):
	x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 8
    elif (c <= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:49:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
elif(c <= 500):
	x = c * 0.44
	print(h, x)
elif (c>500):
	x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 8
    elif(c <= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:49:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
elif(c <= 500):
	x = c * 0.44
	print(h, x)
elif (c>500):
	x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 8
    elif(c <= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:52:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
elif(c<= 500):
	x = c * 0.44
	print(h, x)
elif (c>=500):
	x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 8
    elif(c<= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:52:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
elif(c<= 500):
	x = c * 0.44
	print(h, x)
elif (c>=500):
	x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 8
    elif(c<= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:52:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):

	elif(c<= 500):
	x = c * 0.44
	print(h, x)
elif (c>=500):
	x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 9
    elif(c<= 500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:52:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
elif(c<= 500):
	x = c * 0.44
	print(h, x)
elif (c>=500):
	x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 8
    elif(c<= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:52:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
elif(c<= 500):
	x = c * 0.44
	print(h, x)
elif (c>=500):
	x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 8
    elif(c<= 500):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:54:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
	if(c<= 500):
		x = c * 0.44
		print(h, x)
	else(c>=500):
		x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 11
    else(c>=500):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:54:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
	if(c<= 500):
		x = c * 0.44
		print(h, x)
	else(c>= 500):
		x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 11
    else(c>= 500):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:54:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
	if(c<= 500):
		x = c * 0.44
		print(h, x)
	else:
		x = c * 0.65
		print(h, x)
		
		
		
-- ERROR:
File "XXXX", line 11
    else(c>= 500):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:02:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
if(t=="R"):
	if(c<= 500):
		x = c * 0.44 + c
		print(h, x)
	else:
		x = c * 0.65 + c
		print(h, x) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 + c
		print(h,x)
	else:
		x = c * 0.60 + c
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 + c
		print(h, x)
	else:
		x = c * 0.6 + c
		print(h,x)
		
-- OUTPUT:
Valor total: R$  -86.80000000000001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:04:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 + c
		print(h, x)
	else:
		x = c * 0.65 + c
		print(h, x) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 + c
		print(h,x)
	else:
		x = c * 0.60 + c
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 + c
		print(h, x)
	else:
		x = c * 0.6 + c
		print(h,x)
		
-- OUTPUT:
Entradas:  -56.0 kWh tipo  I
Valor total: R$  -86.80000000000001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:05:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h, x)
	else:
		x = c * 0.65 
		print(h, x) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,x)
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, x)
	else:
		x = c * 0.6 
		print(h,x)
		
-- OUTPUT:
Entradas:  -56.0 kWh tipo  I
Valor total: R$  -30.800000000000004
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:07:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h, x)
	else:
		x = c * 0.65 
		print(h, x) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,x)
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, x)
	else:
		x = c * 0.6 
		print(h,x)
if(c<0):
	print("Dados invalidos")



-- OUTPUT:
Entradas:  -56.0 kWh tipo  I
Valor total: R$  -30.800000000000004
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:10:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- OUTPUT:
Entradas:  -56.0 kWh tipo  I
Valor total: R$  -30.8
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:10:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- EXECUTION TIME:
0.202024
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kWh tipo  I
Valor total: R$  -30.8
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kWh tipo  R
Valor total: R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:10:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- OUTPUT:
Entradas:  -56.0 kWh tipo  I
Valor total: R$  -30.8
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:11:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"e" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- OUTPUT:
Entradas:  -56.0 kWh e tipo  I
Valor total: R$  -30.8
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:11:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"e" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- EXECUTION TIME:
0.209926
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kWh e tipo  I
Valor total: R$  -30.8
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kWh e tipo  R
Valor total: R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:11:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"e" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- OUTPUT:
Entradas:  -56.0 kWh e tipo  I
Valor total: R$  -30.8
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:11:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"e" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- OUTPUT:
Entradas:  -56.0 kWh e tipo  I
Valor total: R$  -30.8
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:12:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"e" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- OUTPUT:
Entradas:  -56.0 kWh e tipo  I
Valor total: R$  -30.8
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:12:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"e" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- OUTPUT:
Entradas:  -56.0 kWh e tipo  I
Valor total: R$  -30.8
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:12:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"e" ,"tipo " , t )

if(t=="R"):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C"):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I"):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- EXECUTION TIME:
0.271948
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kWh e tipo  I
Valor total: R$  -30.8
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kWh e tipo  R
Valor total: R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:14:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"e" ,"tipo " , t )

if(t=="R" and c>=0):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C" and c>=0):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I" and c>=0):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- OUTPUT:
Entradas:  -56.0 kWh e tipo  I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:14:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("consumo: "))
t = input("Tipo de instalacao (R para residencias, I para industrias, C para comercios): ").upper()
h = "Valor total: R$ "
print("Entradas: ", c , "kWh" ,"e" ,"tipo " , t )

if(t=="R" and c>=0):
	if(c<= 500):
		x = c * 0.44 
		print(h,round(x,2))
	else:
		x = c * 0.65 
		print(h, round(x,2)) 
elif(t=="C" and c>=0):
	if(c<=1000):
		x = c * 0.55 
		print(h,round(x,2))
	else:
		x = c * 0.60 
elif(t=="I" and c>=0):
	if(c<= 5000):
		x = c * 0.55 
		print(h, round(x,2))
	else:
		x = c * 0.6 
		print(h,round(x,2))
if(c<0):
	print("Dados invalidos")



-- EXECUTION TIME:
0.172673
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kWh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kWh e tipo  R
Valor total: R$  621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
