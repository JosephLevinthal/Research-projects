== TEST (2019-04-10 22:38:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import* 

r = float(input("raio: "))
h = float(input("altura: "))
num = int(input("opcao desejada 1 ou 2: "))

v1 = (4*pi*r***3)/3
v2 = (pi*(h**2)*(3*r - h))/3

if (num == 2):
	a = v1-v2
	print(a ,2)
else:
	print(v2)
	

-- ERROR:
File "XXXX", line 10
    v1 = (4*pi*r***3)/3
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:39:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import* 

r = float(input("raio: "))
h = float(input("altura: "))
num = int(input("opcao desejada 1 ou 2: "))

v1 = (4*pi*(r***3))/3
v2 = (pi*(h**2)*(3*r - h))/3

if (num == 2):
	a = v1-v2
	print(a ,2)
else:
	print(v2)
	

-- ERROR:
File "XXXX", line 10
    v1 = (4*pi*(r***3))/3
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:41:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import* 

r = float(input("raio: "))
h = float(input("altura: "))
num = int(input("opcao desejada 1 ou 2: "))

v1 = (4*(pi*(r***3)))/3
v2 = (pi*(h**2)*(3*r - h))/3

if (num == 2):
	a = v1-v2
	print(a ,2)
else:
	print(v2)
	

-- ERROR:
File "XXXX", line 10
    v1 = (4*(pi*(r***3)))/3
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:41:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import* 

r = float(input("raio: "))
h = float(input("altura: "))
num = int(input("opcao desejada 1 ou 2: "))

v1 = 4*pi*(r***3)/3
v2 = (pi*(h**2)*(3*r - h))/3

if (num == 2):
	a = v1-v2
	print(a ,2)
else:
	print(v2)
	

-- ERROR:
File "XXXX", line 10
    v1 = 4*pi*(r***3)/3
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:42:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import* 

r = float(input("raio: "))
h = float(input("altura: "))
num = int(input("opcao desejada 1 ou 2: "))

v1 = 4*pi*(r**3)/3
v2 = (pi*(h**2)*(3*r - h))/3

if (num == 2):
	a = v1-v2
	print(a ,2)
else:
	print(v2)
	

-- OUTPUT:
9.025664794069577
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:42:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import* 

r = float(input("raio: "))
h = float(input("altura: "))
num = int(input("opcao desejada 1 ou 2: "))

v1 = 4*pi*(r**3)/3
v2 = (pi*(h**2)*(3*r - h))/3

if (num == 2):
	a = v1-v2
	print((round(a ,2)
else:
	print(round(v2, 2))
	

-- ERROR:
File "XXXX", line 16
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:43:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import* 

r = float(input("raio: "))
h = float(input("altura: "))
num = int(input("opcao desejada 1 ou 2: "))

v1 = 4*pi*(r**3)/3
v2 = (pi*(h**2)*(3*r - h))/3

if (num == 2):
	a = v1-v2
	print((round(a ,2)
else:
	print((round(v2, 2))
	

-- ERROR:
File "XXXX", line 16
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:43:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import* 

r = float(input("raio: "))
h = float(input("altura: "))
num = int(input("opcao desejada 1 ou 2: "))

v1 = 4*pi*(r**3)/3
v2 = (pi*(h**2)*(3*r - h))/3

if (num == 2):
	a = v1-v2
	print((round(a ,2))
else:
	print((round(v2, 2))
	

-- ERROR:
File "XXXX", line 16
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:43:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import* 

r = float(input("raio: "))
h = float(input("altura: "))
num = int(input("opcao desejada 1 ou 2: "))

v1 = 4*pi*(r**3)/3
v2 = (pi*(h**2)*(3*r - h))/3

if (num == 2):
	a = v1-v2
	print(round(a ,2))
else:
	print(round(v2, 2))
	

-- OUTPUT:
9.03
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 22:44:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import* 

r = float(input("raio: "))
h = float(input("altura: "))
num = int(input("opcao desejada 1 ou 2: "))

v1 = 4*pi*(r**3)/3
v2 = (pi*(h**2)*(3*r - h))/3

if (num == 2):
	a = v1-v2
	print(round(a ,2))
else:
	print(round(v2, 2))
	

-- EXECUTION TIME:
0.201867
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.03
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.34
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 22:44:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import* 

r = float(input("raio: "))
h = float(input("altura: "))
num = int(input("opcao desejada 1 ou 2: "))

v1 = 4*pi*(r**3)/3
v2 = (pi*(h**2)*(3*r - h))/3

if (num == 2):
	a = v1-v2
	print(round(a ,4))
else:
	print(round(v2, 4))
	

-- EXECUTION TIME:
0.148484
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
