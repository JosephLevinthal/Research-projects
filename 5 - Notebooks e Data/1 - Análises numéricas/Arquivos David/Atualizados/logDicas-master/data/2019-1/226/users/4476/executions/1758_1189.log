== TEST (2019-05-29 22:25:51) 
-- CODE:
from numpy import *

s = input("digite: ")
n = s.replace( ", "")
inv = ""
i = -1
while (i >= -len(n)):
	inv = inv + n[i]
	i = i - 1
print(n.upper())
if(inv == n):
	print(1)
else:
	print(0)

-- ERROR:
File "XXXX", line 4
    n = s.replace( ", "")
                        ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:26:12) 
-- CODE:
from numpy import *

s = input("digite: ")
n = s.replace( ", "")
inv = ""
i = -1
while (i >= -len(n)):
	inv = inv + n[i]
	i = i - 1
print(n.upper())
if(inv == n):
	print(1)
else:
	print(0)

-- ERROR:
File "XXXX", line 4
    n = s.replace( ", "")
                        ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:26:56) 
-- CODE:
from numpy import *

s = input("digite: ")
n = s.replace( "" , "")
inv = ""
i = -1
while (i >= -len(n)):
	inv = inv + n[i]
	i = i - 1
print(n.upper())
if(inv == n):
	print(1)
else:
	print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:26:56) 
-- CODE:
from numpy import *

s = input("digite: ")
n = s.replace( "" , "")
inv = ""
i = -1
while (i >= -len(n)):
	inv = inv + n[i]
	i = i - 1
print(n.upper())
if(inv == n):
	print(1)
else:
	print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:32:30) 
-- CODE:
from numpy import *

s = input("digite: ")
n = s.replace( "" , "")
inv = ""
i = -1
while (i >= -len(n)):
	inv = inv + n[i]
	i = i - 1
print(n.upper())
if(inv == n):
	print(1)
else:
	print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:32:43) 
-- CODE:
from numpy import *

s = input("digite: ")
n = s.replace( "" , "")
inv = ""
i = -1
while (i >= -len(n)):
	inv = inv + n[i]
	i = i - 1
print(n.upper())
if(inv == n):
	print(1)
else:
	print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:32:48) 
-- CODE:
from numpy import *

s = input("digite: ")
n = s.replace( "" , "")
inv = ""
i = -1
while (i >= -len(n)):
	inv = inv + n[i]
	i = i - 1
print(n.upper())
if(inv == n):
	print(1)
else:
	print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:32:53) 
-- CODE:
from numpy import *

s = input("digite: ")
n = s.replace( "" , "")
inv = ""
i = -1
while (i >= -len(n)):
	inv = inv + n[i]
	i = i - 1
print(n.upper())
if(inv == n):
	print(1)
else:
	print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:34:46) 
-- CODE:
from numpy import *

s = input("digite: ")
n = s.replace( " ", "")
inv = ""
i = -1
while (i >= -len(n)):
	inv = inv + n[i]
	i = i - 1
print(n.upper())
if(inv == n):
	print(1)
else:
	print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-29 22:35:02) 
-- CODE:
from numpy import *

s = input("digite: ")
n = s.replace( " ", "")
inv = ""
i = -1
while (i >= -len(n)):
	inv = inv + n[i]
	i = i - 1
print(n.upper())
if(inv == n):
	print(1)
else:
	print(0)

-- EXECUTION TIME:
0.51882
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
