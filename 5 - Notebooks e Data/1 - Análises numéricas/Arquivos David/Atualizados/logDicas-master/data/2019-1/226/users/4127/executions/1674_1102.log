== SUBMITION (2019-04-30 11:31:15) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))


print("Entradas:", hh,"," h,"," r)

if(hh<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- EXECUTION TIME:
0.213377
-- ERROR:
  File "/home/codebench/codes/1674/1102/main.py", line 12
    print("Entradas:", hh,"," h,"," r)
                              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:31:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))


print("Entradas:", hh,"," h,"," r)

if(hh<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- ERROR:
File "XXXX", line 12
    print("Entradas:", hh,"," h,"," r)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:31:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))


print("Entradas:", a,"," h,"," r)

if(hh<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- EXECUTION TIME:
0.192933
-- ERROR:
  File "/home/codebench/codes/1674/1102/main.py", line 12
    print("Entradas:", a,"," h,"," r)
                             ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:31:26) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))


print("Entradas:", a,"," h,"," r)

if(hh<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- ERROR:
File "XXXX", line 12
    print("Entradas:", a,"," h,"," r)
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:31:40) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))


print("Entradas:", a,"," h,"," r)

if(a<0) or (h<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- EXECUTION TIME:
0.13393
-- ERROR:
  File "/home/codebench/codes/1674/1102/main.py", line 12
    print("Entradas:", a,"," h,"," r)
                             ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:31:41) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))


print("Entradas:", a,"," h,"," r)

if(a<0) or (h<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- ERROR:
File "XXXX", line 12
    print("Entradas:", a,"," h,"," r)
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:32:12) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))


print("Entradas:", a,"," h,"," r)

if(a<0) or (h<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- ERROR:
File "XXXX", line 12
    print("Entradas:", a,"," h,"," r)
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:32:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,"," h,"," r)

if(a<0) or (h<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- ERROR:
File "XXXX", line 10
    print("Entradas:", a,"," h,"," r)
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:33:01) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,"," h,"," r)

if(a<0) or (h<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- ERROR:
File "XXXX", line 5
    print("Entradas:", a,"," h,"," r)
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:33:25) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,"," r)

if(a<0) or (h<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- ERROR:
File "XXXX", line 5
    print("Entradas:", a,",", h,"," r)
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:33:34) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(a<0) or (h<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:33:38) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(a<0) or (h<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- EXECUTION TIME:
0.147297
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Volume:  98985.301 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Volume: 234572.251 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:33:38) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(a<0) or (h<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) and (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:34:21) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) or (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- EXECUTION TIME:
0.164607
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:35:23) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) or (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:35:27) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) or (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- EXECUTION TIME:
0.18138
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:35:28) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) or (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:36:52) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) or (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		vse=(4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		v= vse+vc
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- EXECUTION TIME:
0.141533
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:37:21) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) or (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		vse=(4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		v= vse+vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- EXECUTION TIME:
0.181085
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  136829.974 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:37:25) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) or (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		vse=(4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		v= vse+vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  136829.974 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:37:38) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) or (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		vse=(4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		v= vse+vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- EXECUTION TIME:
0.238128
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  136829.974 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:38:48) 
-- CODE:
from math import*
a= float(input("qual a altura total do tanque? "))
h= float(input("qual o nivel de combustivel no tanque? "))
r= float(input("qual o raio dos bojos? "))
print("Entradas:", a,",", h,",", r)

if(h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif (h>a) or (h<2*r):
	print("Entradas invalidas")
else:
	if (h<=r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		vse=(4*pi*(r**3))/6
		vc= pi*(r**2)*(h-r)
		v= vse+vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif(h>a-r):
		vse= (4*pi*(r**3))/6
		vc= pi*(r**2)*(a-2*r)
		ve= vse -((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v= vse + vc + ve
		print("Volume: ", round(v*1000,3), "litros")
		
	
-- EXECUTION TIME:
0.165182
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
