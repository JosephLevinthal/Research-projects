== TEST (2019-05-01 19:33:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de enegia ""kwh"))
-- OUTPUT:
consumo de enegia kwh
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:34:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia ""kwh"))
-- OUTPUT:
consumo de energia kwh
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:34:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: ""kwh"))
-- OUTPUT:
consumo de energia: kwh
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:34:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "("kwh")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a = float(input("consumo de energia: "("kwh")))
TypeError: 'str' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:41:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ".upper())
print("Entradas: ", a, "kwh e tipo ", b)
s = "Valor Total"
if(b=="R" and a<500):
	print(s, "R$", a*0,44)
	
-- OUTPUT:
TIPO DE INSTALACAO: Entradas:  -56.0 kwh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:42:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input(("tipo de instalacao: ").upper())
print("Entradas: ", a, "kwh e tipo ", b)
s = "Valor Total"
if(b=="R" and a<500):
	print(s, "R$", a*0,44)
	
-- OUTPUT:
TIPO DE INSTALACAO: Entradas:  -56.0 kwh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:42:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input(("tipo de instalacao: ").upper())
print("Entradas: ", a, "kwh e tipo ", b)
s = "Valor Total"
if(b=="R" and a<500):
	print(s, "R$", a*(0,44)
	
-- ERROR:
File "XXXX", line 11
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:42:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input(("tipo de instalacao: ").upper())
print("Entradas: ", a, "kwh e tipo ", b)
s = "Valor Total"
if(b=="R" and a<500):
	print(s, "R$", a*(0,44)
	
-- ERROR:
File "XXXX", line 11
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:43:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input(("tipo de instalacao: ").upper())
print("Entradas: ", a, "kwh e tipo ", b)
s = "Valor Total"
if(b=="R" and a<500):
	print(s, "R$", a*(0,44))
	
-- OUTPUT:
TIPO DE INSTALACAO: Entradas:  -56.0 kwh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:44:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input(("tipo de instalacao: ").upper())
print("Entradas: ", a, "kwh e tipo ", b)
s = "Valor Total"
if(b=="R" and a<500):
	print(s, "R$", a*(0,44))
	
-- OUTPUT:
TIPO DE INSTALACAO: Entradas:  -56.0 kwh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:45:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input(("tipo de instalacao: ").upper())
print("Entradas: ", a, "kwh e tipo ", b)
s = "Valor Total"
if(b=="R" and a<500):
	print(s, "R$", (a*(0,44))
	
-- ERROR:
File "XXXX", line 11
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:45:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input(("tipo de instalacao: ").upper())
print("Entradas: ", a, "kwh e tipo ", b)
s = "Valor Total"
if(b=="R" and a<500):
	print(s, "R$", (a*(0,44)))
	
-- OUTPUT:
TIPO DE INSTALACAO: Entradas:  -56.0 kwh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:52:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<500 and b=="R"):
	print(s, r1, b)
	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:58:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<500 and b=="R"):
	print(s,"R$ ", r1, b)
else:
	if(a>500 and b=="R"):
		print(s, "R$ ", r2, b)
	else:
		if(a<1000 and b=="C"):
			print(s, "R$ ", c1, b)
		else:
			if(a<1000 and b=="C"):
				print(s, "R$ ", c2, b)
	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:59:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
else:
	if(a>500 and b=="R"):
		print(s, "R$ ", r2, b)
	else:
		if(a<=1000 and b=="C"):
			print(s, "R$ ", c1, b)
		else:
			if(a<1000 and b=="C"):
				print(s, "R$ ", c2, b)
	
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:02:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
else:
	if(a>500 and b=="R"):
		print(s, "R$ ", r2, b)
	else:
		if(a<=1000 and b=="C"):
			print(s, "R$ ", c1, b)
		else:
			if(a<1000 and b=="C"):
				print(s, "R$ ", c2, b)
			else:
				if(a<=5000 and b=="I"):
					print(s, "R$ ", i1, b)
				else:
					print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.190116
-- ERROR:
  File "/home/codebench/codes/1674/1101/main.py", line 31
    else:
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:02:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
else:
	if(a>500 and b=="R"):
		print(s, "R$ ", r2, b)
	else:
		if(a<=1000 and b=="C"):
			print(s, "R$ ", c1, b)
		else:
			if(a<1000 and b=="C"):
				print(s, "R$ ", c2, b)
			else:
				if(a<=5000 and b=="I"):
					print(s, "R$ ", i1, b)
				else:
					print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.1891
-- ERROR:
  File "/home/codebench/codes/1674/1101/main.py", line 31
    else:
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:02:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
else:
	if(a>500 and b=="R"):
		print(s, "R$ ", r2, b)
	else:
		if(a<=1000 and b=="C"):
			print(s, "R$ ", c1, b)
		else:
			if(a<1000 and b=="C"):
				print(s, "R$ ", c2, b)
			else:
				if(a<=5000 and b=="I"):
					print(s, "R$ ", i1, b)
				else:
					print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.13647
-- ERROR:
  File "/home/codebench/codes/1674/1101/main.py", line 31
    else:
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:02:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
else:
	if(a>500 and b=="R"):
		print(s, "R$ ", r2, b)
	else:
		if(a<=1000 and b=="C"):
			print(s, "R$ ", c1, b)
		else:
			if(a<1000 and b=="C"):
				print(s, "R$ ", c2, b)
			else:
				if(a<=5000 and b=="I"):
					print(s, "R$ ", i1, b)
				else:
					print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 31
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:04:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
   if:
	   if(a>500 and b=="R"):
		   print(s, "R$ ", r2, b)
	   else:
		   if(a<=1000 and b=="C"):
			   print(s, "R$ ", c1, b)
		   else:
		      if(a<1000 and b=="C"):
				   print(s, "R$ ", c2, b)
			   else:
				   if(a<=5000 and b=="I"):
					   print(s, "R$ ", i1, b)
				   else:
					   print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 17
    if:
      ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:04:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
   if(a>500 and b=="R"):
		   print(s, "R$ ", r2, b)
   else:
		   if(a<=1000 and b=="C"):
			   print(s, "R$ ", c1, b)
		   else:
		      if(a<1000 and b=="C"):
				   print(s, "R$ ", c2, b)
			   else:
				   if(a<=5000 and b=="I"):
					   print(s, "R$ ", i1, b)
				   else:
					   print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 17
    if(a>500 and b=="R"):
                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:05:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
   if(a>500 and b=="R"):
	   print(s, "R$ ", r2, b)
   else:
		   if(a<=1000 and b=="C"):
			   print(s, "R$ ", c1, b)
		   else:
		      if(a<1000 and b=="C"):
				   print(s, "R$ ", c2, b)
			   else:
				   if(a<=5000 and b=="I"):
					   print(s, "R$ ", i1, b)
				   else:
					   print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 17
    if(a>500 and b=="R"):
                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:05:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
   if(a>500 and b=="R"):
	   print(s, "R$ ", r2, b)
   else:
		if(a<=1000 and b=="C"):
			   print(s, "R$ ", c1, b)
		   else:
		      if(a<1000 and b=="C"):
				   print(s, "R$ ", c2, b)
			   else:
				   if(a<=5000 and b=="I"):
					   print(s, "R$ ", i1, b)
				   else:
					   print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 17
    if(a>500 and b=="R"):
                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:06:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
	
   if(a>500 and b=="R"):
	   print(s, "R$ ", r2, b)
   else:
		if(a<=1000 and b=="C"):
			   print(s, "R$ ", c1, b)
		   else:
		      if(a<1000 and b=="C"):
				   print(s, "R$ ", c2, b)
			   else:
				   if(a<=5000 and b=="I"):
					   print(s, "R$ ", i1, b)
				   else:
					   print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 18
    if(a>500 and b=="R"):
                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:06:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
	
     if(a>500 and b=="R"):
			print(s, "R$ ", r2, b)
      else:
		   if(a<=1000 and b=="C"):
			      print(s, "R$ ", c1, b)
		   else:
		         if(a<1000 and b=="C"):
				      print(s, "R$ ", c2, b)
			      else:
				      if(a<=5000 and b=="I"):
					      print(s, "R$ ", i1, b)
				      else:
					      print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 18
    if(a>500 and b=="R"):
                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:07:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
	print(s,"R$ ", r1, b)
	
     if(a>500 and b=="R"):
			print(s, "R$ ", r2, b)
      else:
		   if(a<=1000 and b=="C"):
			      print(s, "R$ ", c1, b)
		   else:
		         if(a<1000 and b=="C"):
				      print(s, "R$ ", c2, b)
			      else:
				      if(a<=5000 and b=="I"):
					      print(s, "R$ ", i1, b)
				      else:
					      print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 18
    if(a>500 and b=="R"):
                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:07:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
		print(s,"R$ ", r1, b)
	
	if(a>500 and b=="R"):
			print(s, "R$ ", r2, b)
      else:
		   if(a<=1000 and b=="C"):
			      print(s, "R$ ", c1, b)
		   else:
		         if(a<1000 and b=="C"):
				      print(s, "R$ ", c2, b)
			      else:
				      if(a<=5000 and b=="I"):
					      print(s, "R$ ", i1, b)
				      else:
					      print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 18
    if(a>500 and b=="R"):
                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:08:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
		print(s,"R$ ", r1, b)
else:	
	if(a>500 and b=="R"):
			print(s, "R$ ", r2, b)
      else:
		   if(a<=1000 and b=="C"):
			      print(s, "R$ ", c1, b)
		   else:
		         if(a<1000 and b=="C"):
				      print(s, "R$ ", c2, b)
			      else:
				      if(a<=5000 and b=="I"):
					      print(s, "R$ ", i1, b)
				      else:
					      print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:08:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
		print(s,"R$ ", r1, b)
else:	
	   if(a>500 and b=="R"):
			print(s, "R$ ", r2, b)
      else:
		   if(a<=1000 and b=="C"):
			      print(s, "R$ ", c1, b)
		   else:
		         if(a<1000 and b=="C"):
				      print(s, "R$ ", c2, b)
			      else:
				      if(a<=5000 and b=="I"):
					      print(s, "R$ ", i1, b)
				      else:
					      print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 19
    print(s, "R$ ", r2, b)
                         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:13:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	
if (a<=500 and b=="R"):
		print(s,"R$ ", r1, b)
else:	
	if(a>500 and b=="R"):
	   print(s, "R$ ", r2, b)
   else:
	   if(a<=1000 and b=="C"):
			print(s, "R$ ", c1, b)
		else:
		   if(a<1000 and b=="C"):
				print(s, "R$ ", c2, b)
		   else:
				if(a<=5000 and b=="I"):
					print(s, "R$ ", i1, b)
				else:
					print(s, "R$ ", i2, b)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:42:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500 and b=="R"):
		print(s,"R$ ", r1)
   elif(a>500 and b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
-- ERROR:
File "XXXX", line 19
    elif(a>500 and b=="R"):
                          ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:43:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500 and b=="R"):
		print(s,"R$ ", r1)
   elif(a>500 and b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
-- ERROR:
File "XXXX", line 19
    elif(a>500 and b=="R"):
                          ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:43:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500 and b=="R"):
		print(s,"R$ ", r1)
   elif(a>500 and b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
-- ERROR:
File "XXXX", line 19
    elif(a>500 and b=="R"):
                          ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:43:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500 and b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:43:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:44:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:44:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:44:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:44:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:45:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:46:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:46:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:47:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:47:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
  
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
fds
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:48:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- EXECUTION TIME:
0.250358
-- ERROR:
  File "/home/codebench/codes/1674/1101/main.py", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:48:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
   elif(a>500) and (b=="R"):
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:48:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
		
   elif(a>500) and (b=="R"):
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 20
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:48:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
		
   elif(a>500) and (b=="R"):
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 20
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:49:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
		
   elif(a>500) and (b=="R"):
		print(s, "R$", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 20
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:49:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
		
   elif(a>500) and (b=="R"):
		print(s, "R$", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 20
    elif(a>500) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:49:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
		
   elif(500>a) and (b=="R"):
		print(s, "R$", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 20
    elif(500>a) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:49:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
		
   elif(500>a) and (b=="R"):
		print(s, "R$", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 20
    elif(500>a) and (b=="R"):
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:50:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
		
   
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
fds
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:50:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
		
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
fds
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:51:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif	
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 19
    elif	
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:51:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R")	
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 19
    elif(a>500) and (b=="R")	
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:51:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- ERROR:
File "XXXX", line 20
    elif(a<=1000 and b=="C"):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:52:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
else:
	print("fds")
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
fds
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:54:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
else:
	print("fds")
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
fds
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:54:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.122435
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor Total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:55:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:56:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:56:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.233205
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor Total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:56:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor Total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:57:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.185882
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:57:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.167182
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:57:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:57:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.166014
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:59:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total:"	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.158485
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total: R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:59:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total:"	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.146688
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total: R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:00:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:01:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.229804
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:01:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.167663
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:01:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.152197
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:01:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.16871
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:01:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.144277
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:01:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.204223
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:01:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.145348
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:01:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.129907
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:01:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.109407
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:01:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1= round(a*(0.44), 2)
r2= round(a*(0.65), 2)
c1= round(a*(0.55), 2)
c2= round(a*(0.60), 2)
i1= round(a*(0.55), 2)
i2= round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.167928
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:02:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1 = round(a*(0.44), 2)
r2 = round(a*(0.65), 2)
c1 = round(a*(0.55), 2)
c2 = round(a*(0.60), 2)
i1 = round(a*(0.55), 2)
i2 = round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.244901
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:02:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1 = round(a*(0.44), 2)
r2 = round(a*(0.65), 2)
c1 = round(a*(0.55), 2)
c2 = round(a*(0.60), 2)
i1 = round(a*(0.55), 2)
i2 = round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.145462
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:02:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1 = round(a*(0.44), 2)
r2 = round(a*(0.65), 2)
c1 = round(a*(0.55), 2)
c2 = round(a*(0.60), 2)
i1 = round(a*(0.55), 2)
i2 = round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.18537
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:02:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1 = round(a*(0.44), 2)
r2 = round(a*(0.65), 2)
c1 = round(a*(0.55), 2)
c2 = round(a*(0.60), 2)
i1 = round(a*(0.55), 2)
i2 = round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.202886
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:02:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1 = round(a*(0.44), 2)
r2 = round(a*(0.65), 2)
c1 = round(a*(0.55), 2)
c2 = round(a*(0.60), 2)
i1 = round(a*(0.55), 2)
i2 = round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.193541
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:02:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1 = round(a*(0.44), 2)
r2 = round(a*(0.65), 2)
c1 = round(a*(0.55), 2)
c2 = round(a*(0.60), 2)
i1 = round(a*(0.55), 2)
i2 = round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.229917
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:02:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1 = round(a*(0.44), 2)
r2 = round(a*(0.65), 2)
c1 = round(a*(0.55), 2)
c2 = round(a*(0.60), 2)
i1 = round(a*(0.55), 2)
i2 = round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s,"R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.132676
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:02:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1 = round(a*(0.44), 2)
r2 = round(a*(0.65), 2)
c1 = round(a*(0.55), 2)
c2 = round(a*(0.60), 2)
i1 = round(a*(0.55), 2)
i2 = round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s, "R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.169556
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:02:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1 = round(a*(0.44), 2)
r2 = round(a*(0.65), 2)
c1 = round(a*(0.55), 2)
c2 = round(a*(0.60), 2)
i1 = round(a*(0.55), 2)
i2 = round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s, "R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.146298
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:02:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1 = round(a*(0.44), 2)
r2 = round(a*(0.65), 2)
c1 = round(a*(0.55), 2)
c2 = round(a*(0.60), 2)
i1 = round(a*(0.55), 2)
i2 = round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s, "R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.124665
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:02:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("consumo de energia: "))
b = input("tipo de instalacao: r, i ou c").upper()
print("Entradas: ", a, "kwh e tipo ", b)

r1 = round(a*(0.44), 2)
r2 = round(a*(0.65), 2)
c1 = round(a*(0.55), 2)
c2 = round(a*(0.60), 2)
i1 = round(a*(0.55), 2)
i2 = round(a*(0.60), 2)
s = "Valor total: "	

if(a>0):
	if(a<=500) and (b=="R"):
		print(s, "R$ ", r1)
	elif(a>500) and (b=="R"):
		print(s, "R$ ", r2)
	elif(a<=1000 and b=="C"):
		print(s, "R$ ", c1)
	elif(a>1000 and b=="C"):
		print(s, "R$ ", c2)
	elif(a<=5000) and (b=="I"):
		print(s, "R$ ", i1)
	elif(a>5000) and (b=="I"):
		print(s, "R$ ", i2)
	else:
		print("Dados invalidos")
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.149949
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kwh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kwh e tipo  R
Valor total:  R$  621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
