== TEST (2019-03-26 10:59:32) 
-- CODE:
# Teste seu codigo aos poucos.
input(float("total de vendas"))
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    input(float("total de vendas"))
ValueError: could not convert string to float: 'total de vendas'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:00:48) 
-- CODE:
# Teste seu codigo aos poucos.
t = input(float("total de vendas"))
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    t = input(float("total de vendas"))
ValueError: could not convert string to float: 'total de vendas'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:02:35) 
-- CODE:
# Teste seu codigo aos poucos.
x = float(input("total"))
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    t = input(float("total de vendas"))
ValueError: could not convert string to float: 'total de vendas'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:05:24) 
-- CODE:
# Teste seu codigo aos poucos.
x = float(input("total"))
# Nao teste tudo no final, pois fica mais dificil de identificar erros
print(round(x / 100 * 30))
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
210
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:06:11) 
-- CODE:
# Teste seu codigo aos poucos.
x = float(input("total"))
# Nao teste tudo no final, pois fica mais dificil de identificar erros
print(round(x / 100 * 30),2)
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
210 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:07:13) 
-- CODE:
# Teste seu codigo aos poucos.
x = float(input("total"))
# Nao teste tudo no final, pois fica mais dificil de identificar erros
print(round(x / 100 * 30,2))
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:07:36) 
-- CODE:
# Teste seu codigo aos poucos.
x = float(input("total"))
# Nao teste tudo no final, pois fica mais dificil de identificar erros
print(round(x / 100 * 30,2))
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:07:49) 
-- CODE:
# Teste seu codigo aos poucos.
x = float(input("total"))
# Nao teste tudo no final, pois fica mais dificil de identificar erros
print(round(x / 100 * 30,2))
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.191205
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.15
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
