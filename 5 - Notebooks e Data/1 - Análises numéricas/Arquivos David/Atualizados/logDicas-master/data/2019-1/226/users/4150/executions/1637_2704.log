== TEST (2019-04-09 11:18:02) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == S )
	nota1 = acrecimo + nota
	print(nota1)
else :
	(nota)
-- ERROR:
File "XXXX", line 6
    if (mensagem.upper() == S )
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:18:13) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == S ) :
	nota1 = acrecimo + nota
	print(nota1)
else :
	(nota)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:21:45) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == S  ) :
	nota1 = acrecimo + nota
	print(nota1)
else :
	(nota)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:22:43) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() != S  ) :
	nota1 = acrecimo + nota
	print(nota1)
else :
	(nota)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:23:12) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() != "S" ) :
	nota1 = acrecimo + nota
	print(nota1)
else :
	(nota)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:23:47) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == "S" ) :
	nota1 = acrecimo + nota
	print(nota1)
else :
	(nota)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:24:17) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == "S" ) :
	nota1 = acrescimo + nota
	print(nota1)
else :
	(nota)
-- EXECUTION TIME:
0.133143
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2704/main.py", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:24:23) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == "S" ) :
	nota1 = acrescimo + nota
	print(nota1)
else :
	(nota)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:24:32) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == "S" ) :
	nota1 = acrescimo + nota
	print(nota1)
else :
	print(nota)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:24:42) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == "S" ) :
	nota1 = acrescimo + nota
	print(nota1)
else :
	print(nota)
-- EXECUTION TIME:
0.306057
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2704/main.py", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:24:51) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == "S" ) :
	nota1 = acrescimo + nota
	print(nota1)
else :
	print(nota)
-- EXECUTION TIME:
0.15051
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2704/main.py", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:25:30) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == "S" ) :
	nota1 = acrescimo + nota
	print(nota1)
else :
	print(nota)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:27:25) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (nota <=10 ) :
	(mensagem.upper() == "S" )
	nota1 = acrescimo + nota
	print(nota1)
else : ( nota <= 10 )
	print(nota)
-- ERROR:
File "XXXX", line 11
    print(nota)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:27:43) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (nota <=10 ) :
	(mensagem.upper() == "S" )
	nota1 = acrescimo + nota
	print(nota1)
else :
	( nota <= 10 )
	print(nota)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:27:53) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (nota <=10 ) :
	(mensagem.upper() == "S" )
	nota1 = acrescimo + nota
	print(nota1)
else :
	( nota <= 10 )
	print(nota)
-- EXECUTION TIME:
0.270372
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2704/main.py", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:28:16) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (nota <=10 ) :
	(mensagem.upper() == "S" )
	nota1 = acrescimo + nota
	print(nota1)
else :
	( nota <= 10 )
	print(nota)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:28:30) 
-- CODE:
nota = int(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (nota <=10 ) :
	(mensagem.upper() == "S" )
	nota1 = acrescimo + nota
	print(nota1)
else :
	( nota <= 10 )
	print(nota)
-- EXECUTION TIME:
0.165316
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2704/main.py", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:28:48) 
-- CODE:
nota = float(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (nota <=10 ) :
	(mensagem.upper() == "S" )
	nota1 = acrescimo + nota
	print(nota1)
else :
	( nota <= 10 )
	print(nota)
-- EXECUTION TIME:
0.132853
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:29:41) 
-- CODE:
nota = float(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == "S" ) :
	nota1 = acrescimo + nota
	print(nota1)
else :
	print(nota)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:29:53) 
-- CODE:
nota = float(input("digite sua nota: "))
mensagem = input("vai receber bonificacao S/N: ")

acrescimo = nota * 0.1

if (mensagem.upper() == "S" ) :
	nota1 = acrescimo + nota
	print(nota1)
else :
	print(nota)
-- EXECUTION TIME:
0.153263
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
