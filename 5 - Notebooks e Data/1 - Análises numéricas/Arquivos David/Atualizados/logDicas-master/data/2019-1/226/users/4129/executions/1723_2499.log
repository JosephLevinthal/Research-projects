== TEST (2019-05-09 10:46:43) 
-- CODE:
from math import*
print(pi)
-- OUTPUT:
3.141592653589793
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:52:43) 
-- CODE:
from math import*

k = int(float("Valor de k"))

s = 0
x = 0

while(s < k):
	x = x + 1
	s = k/factorial(x)
print(s)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    k = int(float("Valor de k"))
ValueError: could not convert string to float: 'Valor de k'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:53:45) 
-- CODE:
from math import*

k = int(input("Valor de k")

s = 0
x = 0

while(s < k):
	x = x + 1
	s = k/factorial(x)
print(s)
-- ERROR:
File "XXXX", line 5
    s = 0
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:54:00) 
-- CODE:
from math import*

k = int(input("Valor de k")

d = 0
x = 0

while(d < k):
	x = x + 1
d = k/factorial(x)
print(s)
-- ERROR:
File "XXXX", line 5
    d = 0
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:54:18) 
-- CODE:
from math import*

k = int(input("Valor de k")

x = 0

while(d < k):
	x = x + 1
	d = k/factorial(x)
print(s)
-- ERROR:
File "XXXX", line 5
    x = 0
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:54:24) 
-- CODE:
from math import*

k = int(input("Valor de k")



while(d < k):
	x = x + 1
	d = k/factorial(x)
print(s)
-- ERROR:
File "XXXX", line 7
    while(d < k):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:54:37) 
-- CODE:
from math import*

k = int(input("Valor de k")

s = 0
-- ERROR:
File "XXXX", line 5
    s = 0
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:54:53) 
-- CODE:
from math import*

k = int(input("Valor de k")

s =  "i"
-- ERROR:
File "XXXX", line 5
    s =  "i"
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:55:08) 
-- CODE:
from math import*

k = int(input("Valor de k")

k = 0
-- ERROR:
File "XXXX", line 5
    k = 0
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:55:15) 
-- CODE:
from math import*

k = int(input("Valor de k")

k = 0
-- ERROR:
File "XXXX", line 5
    k = 0
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:55:29) 
-- CODE:
from math import*

k = int(input("Valor de k")

x = 1
-- ERROR:
File "XXXX", line 5
    x = 1
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:55:44) 
-- CODE:
from math import*



x = 1
-- ERROR:
File "XXXX", line 5
    x = 1
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:56:38) 
-- CODE:
from math import*

k = int(input("Valor de k"))

d = 0
x = 0

while(d < k):
	x = x + 1
	d = k/factorial(x)
print(s)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(s)
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:56:43) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	x = x + 1
	d = k/factorial(x)
print(s)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(s)
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:56:53) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	x = x + 1
	d = k/factorial(x)
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:56:59) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	x = x + 1
	d = k/factorial(x)
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:57:04) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	x = x + 1
	d = k/factorial(x)
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:57:19) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	x = x + 1
	d = k/factorial(x)
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:57:31) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	x = x + 1
	d = 1/factorial(x)
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:57:36) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	x = x + 1
	d = 1/factorial(x)
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:57:47) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	x = x + 1
	d = 1/factorial(x)
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:58:22) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	d = k/ factorial(x)
	x = x + 1
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:58:26) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	d = k/ factorial(x)
	x = x + 1
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:58:28) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	d = k/ factorial(x)
	x = x + 1
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:58:35) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 0

while(d < k):
	d = k/ factorial(x)
	x = x + 1
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:58:49) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 1

while(d < k):
	d = k/ factorial(x)
	x = x + 1
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:58:54) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 1

while(d < k):
	d = k/ factorial(x)
	x = x + 1
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:58:57) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 1

while(d < k):
	d = k/ factorial(x)
	x = x + 1
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:58:59) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 1

while(d < k):
	d = k/ factorial(x)
	x = x + 1
print(d)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:59:16) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
x = 1

while(d < k):
	d = k/ factorial(x)
	x = x + 1
	k = int(input("Valor de k:"))
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    k = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:00:48) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0


while(d <= k):
	d = k/ factorial(d)
	d = d + 1
print(d)
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:00:57) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0


while(d <= k):
	d = k/ factorial(d)
	d = d + 1
print(d)
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:00:59) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0


while(d <= k):
	d = k/ factorial(d)
	d = d + 1
print(d)
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:01:09) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0


while(d <= k):
	d = k/ factorial(d)
	
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    d = k/ factorial(d)
ValueError: factorial() only accepts integral values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:01:32) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0


while(d <= k):
	d = d+1
	d = k/ factorial(d)
	
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    d = k/ factorial(d)
ValueError: factorial() only accepts integral values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:01:56) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0


while(d <= k):
	d = 1/ factorial(d)
	d = d + 1
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    d = 1/ factorial(d)
ValueError: factorial() only accepts integral values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:02:31) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0


while(d <= k):
	d = d + 1
	d = 1/ factorial(d)
	
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    d = 1/ factorial(d)
ValueError: factorial() only accepts integral values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:03:06) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1


while(d <= k):
	k = 1/ factorial(d)
	d = d + 1
print(d)
-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:04:24) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1


while(d <= k):
	k = 1/ factorial(d + 1)
	
print(d)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:04:27) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1


while(d <= k):
	k = 1/ factorial(d + 1)
	
print(d)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:04:31) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1


while(d <= k):
	k = 1/ factorial(d + 1)
	
print(d)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:06:06) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1


while(d <= k):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    r = s + r
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:06:08) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1


while(d <= k):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    r = s + r
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:06:19) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1
r = 0

while(d <= k):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- OUTPUT:
2.7182539682539684
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:06:43) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
r = 0

while(d <= k):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- OUTPUT:
3.7182539682539684
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:06:50) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 2
r = 0

while(d <= k):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- OUTPUT:
1.7182539682539681
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:06:54) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 2
r = 0

while(d <= k):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- OUTPUT:
1.7182539682539681
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:07:26) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 0
r = 0

while(d <= k):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- OUTPUT:
3.7182539682539684
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:07:38) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1.5
r = 0

while(d <= k):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    s = 1/(factorial(d))
ValueError: factorial() only accepts integral values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:08:15) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1
r = 0

while(d <= k - 1):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- OUTPUT:
2.718055555555556
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:08:21) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1
r = 0

while(d <= k - 1):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- OUTPUT:
2.718055555555556
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:08:23) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1
r = 0

while(d <= k - 1):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- OUTPUT:
2.718055555555556
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:08:27) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1
r = 0

while(d <= k - 1):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(r)
-- OUTPUT:
2.718055555555556
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:08:41) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1
r = 0

while(d <= k - 1):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(round(r, 8)
-- ERROR:
File "XXXX", line 15
    
                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-09 11:08:45) 
-- CODE:
from math import*

k = int(input("Valor de k:"))

d = 1
r = 0

while(d <= k - 1):
	s = 1/(factorial(d))
	r = s + r
	d = d + 1
r = r + 1
	
print(round(r, 8))
-- EXECUTION TIME:
0.14883
-- TEST CASE 1:
---- input:
7
---- correct output:
2.71805556
---- user output:
2.71805556
-- TEST CASE 2:
---- input:
15
---- correct output:
2.71828183
---- user output:
2.71828183
-- TEST CASE 3:
---- input:
6
---- correct output:
2.71666667
---- user output:
2.71666667
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
