== TEST (2019-06-11 11:32:57) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(0,size(cont)):
	soma=soma+cont[i]
	if(cont[0]=cont[0]+1):
		cont[0]=cont[0]/soma
	elif(cont[1]=cont[1]+1):
		cont[1]=cont[1]/soma
	elif(cont[2]=cont[2]+1):
		cont[2]=cont[2]/soma
	elif(cont[3]=cont[3]+1):
		cont[3]=cont[3]/soma
	elif(cont[4]=cont[4]+1):
		cont[4]=cont[4]/soma
	elif(cont[5]=cont[5]+1):	
		cont[5]=cont[5]soma	  
			  
print(round(cont,1))
			  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 22
    if(cont[0]=cont[0]+1):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:33:16) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(0,size(cont)):
	soma=soma+cont[i]
	if(cont[0]=cont[0]+1):
		cont[0]=cont[0]/soma
	elif(cont[1]=cont[1]+1):
		cont[1]=cont[1]/soma
	elif(cont[2]=cont[2]+1):
		cont[2]=cont[2]/soma
	elif(cont[3]=cont[3]+1):
		cont[3]=cont[3]/soma
	elif(cont[4]=cont[4]+1):
		cont[4]=cont[4]/soma
	elif(cont[5]=cont[5]+1):	
		cont[5]=cont[5]soma	  
			  
print(round(cont,1))
			  
			  

			  

			  
			  
-- EXECUTION TIME:
0.587051
-- ERROR:
  File "/home/codebench/codes/1800/2566/main.py", line 22
    if(cont[0]=cont[0]+1):
              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:33:21) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(0,size(cont)):
	soma=soma+cont[i]
	if(cont[0]=cont[0]+1):
		cont[0]=cont[0]/soma
	elif(cont[1]=cont[1]+1):
		cont[1]=cont[1]/soma
	elif(cont[2]=cont[2]+1):
		cont[2]=cont[2]/soma
	elif(cont[3]=cont[3]+1):
		cont[3]=cont[3]/soma
	elif(cont[4]=cont[4]+1):
		cont[4]=cont[4]/soma
	elif(cont[5]=cont[5]+1):	
		cont[5]=cont[5]soma	  
			  
print(round(cont,1))
			  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 22
    if(cont[0]=cont[0]+1):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:33:33) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(0,size(cont)):
	soma=soma+cont[i]
	if(cont[0]=cont[0]+1):
		cont[0]=cont[0]/soma
	elif(cont[1]=cont[1]+1):
		cont[1]=cont[1]/soma
	elif(cont[2]=cont[2]+1):
		cont[2]=cont[2]/soma
	elif(cont[3]=cont[3]+1):
		cont[3]=cont[3]/soma
	elif(cont[4]=cont[4]+1):
		cont[4]=cont[4]/soma
	elif(cont[5]=cont[5]+1):	
		cont[5]=cont[5]/soma	  
			  
print(round(cont,1))
			  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 22
    if(cont[0]=cont[0]+1):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:37:57) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(0,size(cont)):
	soma=soma+cont[i]
cont=cont/soma	
print(round(cont,1))			  
			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:38:58) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(0,size(cont)):
	soma=soma+cont[i]
cont=cont/soma	
print(cont)	  
			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:39:37) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(0,size(cont)):
	soma=soma+cont[i]
print(soma)	
cont=cont/soma	
print(cont)	  
			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:41:09) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(size(cont)):
	soma=soma+cont[i]
print(soma)	
cont=cont/soma	
print(cont)	  
			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:42:03) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(size(vet)):
	soma=soma+vet[i]
print(soma)	
cont=cont/soma	
print(cont)	  
			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:42:46) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(size(vet)):
	soma=soma+vet[i]
print(soma)	
cont[i]=cont[i]/soma	
print(cont)	  
			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 22:45:47) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(size(vet)):
	soma=soma+vet[i]
	if(cont[0]=cont[0]+1):
		cont[0]=cont[0]/soma
	elif(cont[1]=cont[1]+1):
		cont[1]=cont[1]/soma
	elif(cont[2]=cont[2]+1):
		cont[2]=cont[2]/soma
	elif(cont[3]=cont[3]+1):
		cont[3]=cont[3]/soma
	elif(cont[4]=cont[4]+1):
		cont[4]=cont[4]/soma
	elif(cont[5]=cont[5]+1):
		cont[5]=cont[5]/soma

print(round(cont,1))		
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 22
    if(cont[0]=cont[0]+1):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 22:46:37) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(size(cont)):
	soma=soma+vet[i]
	if(cont[0]=cont[0]+1):
		cont[0]=cont[0]/soma
	elif(cont[1]=cont[1]+1):
		cont[1]=cont[1]/soma
	elif(cont[2]=cont[2]+1):
		cont[2]=cont[2]/soma
	elif(cont[3]=cont[3]+1):
		cont[3]=cont[3]/soma
	elif(cont[4]=cont[4]+1):
		cont[4]=cont[4]/soma
	elif(cont[5]=cont[5]+1):
		cont[5]=cont[5]/soma

print(round(cont,1))		
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 22
    if(cont[0]=cont[0]+1):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 22:48:04) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(size(cont)):
	soma=soma+vet[i]
print(round(cont/soma))
			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 22:49:07) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
print(cont)			  

			  

			  
			  
-- EXECUTION TIME:
1.09901
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[3 0 0 3 4 6]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[1 2 4 5 5 8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[2 1 3 1 2 4]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 22:49:08) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
print(cont)			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 22:52:38) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=(cont[0]+1)/soma
	elif(vet[i]==3):
		cont[1]=(cont[1]+1)/soma
	elif(vet[i]==4):
		cont[2]=(cont[2]+1)/soma
	elif(vet[i]==5):
		cont[3]=(cont[3]+1)/soma
	elif(vet[i]==6):
		cont[4]=(cont[4]+1)/soma
	elif(vet[i]==7):
		cont[5]=(cont[5]+1)/soma
			
print(cont)			
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 22:56:37) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(size(cont)):
	soma=soma+cont[i]
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 22:57:00) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(size(cont)):
	soma=soma+cont[i]
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 22:57:21) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
print(cont)			
soma=0			
for i in range(size(cont)):
	soma=soma+cont[i]
print(soma)	
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 22:58:19) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
print(cont)			

print(soma)	
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:00:54) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
print(cont)			
print(soma)	
for i in range(size(cont)):
	if(cont[i]==cont[i]+1):
		cont=(cont/soma)*100
print(cround(cont,2))		
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:01:05) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
print(cont)			
print(soma)	
for i in range(size(cont)):
	if(cont[i]==cont[i]+1):
		cont=(cont/soma)*100
print(round(cont,2))		
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:02:09) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
print(soma)	
for i in range(size(cont)):
	if(cont[i]==cont[i]+1):
		cont=(cont/soma)*100
print(cont)		
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:05:18) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
for i in range(size(cont)):
	cont=(cont/soma)/100
		
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:05:28) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
for i in range(size(cont)):
	cont=(cont/soma)/100
print(cont)	
		
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:06:00) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
for i in range(size(cont)):
	cont[i]=(cont[i]/soma)/100
print(cont)	
		
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:07:23) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
for i in range(size(cont)):
	if(cont[0]=cont[0]+1):
		cont[0]=(cont[0]/soma)*100
		
	
	

			  

			  

			  
			  
-- ERROR:
File "XXXX", line 21
    if(cont[0]=cont[0]+1):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:07:37) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
for i in range(0,size(cont)):
	
		
	
	

			  

			  

			  
			  
-- ERROR:
File "XXXX", line 32
    
         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:10:16) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
soma=0			
for i in range(0,size(cont)):
	soma = soma+cont[i]
print(cont)	
		
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:11:59) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
for i in range(0,size(cont)):
	cont=cont/soma
print(cont)	
		
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:12:50) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1/soma
print(cont[0])		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
			
for i in range(0,size(cont)):
		
		
	
	

			  

			  

			  
			  
-- ERROR:
File "XXXX", line 10
    elif(vet[i]==3):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:12:59) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1/soma
print(cont[0])		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1

		
		
	
	

			  

			  

			  
			  
-- ERROR:
File "XXXX", line 10
    elif(vet[i]==3):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:13:18) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1/soma		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
print(cont)
		
		
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:13:39) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
print(cont)
		
		
	
	

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:16:57) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
for i in range(0,size(cont)):
cont[0]=cont[0]/soma
cont[1]=cont[1]/soma	
cont[2]=cont[2]/soma		
cont[3]=cont[3]/soma	
cont[4]=cont[4]/soma	
cont[5]=cont[5]/soma
print(cont)

			  

			  

			  
			  
-- ERROR:
File "XXXX", line 20
    cont[0]=cont[0]/soma
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:17:20) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
for i in range(0,size(cont)):
	cont[0]=cont[0]/soma
   cont[1]=cont[1]/soma	
   cont[2]=cont[2]/soma		
   cont[3]=cont[3]/soma	
   cont[4]=cont[4]/soma	
   cont[5]=cont[5]/soma

print(cont)

			  

			  

			  
			  
-- ERROR:
File "XXXX", line 21
    cont[1]=cont[1]/soma	
                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:31:13) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
for i in range(size(cont)):
	cont[i]=(cont[i]/soma)/100
	print(round(cont,1))

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:31:31) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
for i in range(size(cont)):
	cont[i]=(cont[i]/soma)/100
	print(cont)

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:31:57) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
for i in range(size(cont)):
	cont[i]=(cont[i]/soma)*100
	print(cont)

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:32:30) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
for i in range(0,size(cont)):
	cont[i]=(cont[i]/soma)*100
	print(cont)

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:32:34) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
for i in range(0,size(cont)):
	cont[i]=(cont[i]/soma)*100
	print(cont)

			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:34:36) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
for i in range(0,size(cont)):
	pflts=(cont/soma)*100
	print(round(pflts,1))


			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:35:09) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
for i in range(0,size(cont)):
	pflts=(cont/soma)*100
	print(pflts)


			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 23:37:21) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
soma1=0		
for i in range(size(cont)):
	soma1=soma1+cont[i]
	pflts=(cont/soma)*100
	print(pflts)


			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 14:44:56) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1	

soma1=0		
for i in range(size(cont)):
	soma1=soma1+cont[i]
	
pflts=soma1/size(cont)
print(round(pflts,1))


			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 14:45:29) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1	

soma1=0		
for i in range(size(cont)):
	soma1=soma1+cont[i]
	print(soma1)
pflts=soma1/size(cont)
print(round(pflts,1))


			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 14:46:47) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1	

		
for i in range(size(cont)):
	soma1=soma1+cont[i]
	print(soma1)
pflts=size(cont)/size(vet)
print(round(pflts,1))


			  

			  

			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 14:47:12) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1	

		
for i in range(size(cont)):
	
pflts=size(cont)/size(vet)
print(round(pflts,1))


			  

			  

			  
			  
-- EXECUTION TIME:
0.737056
-- ERROR:
  File "/home/codebench/codes/1800/2566/main.py", line 23
    pflts=size(cont)/size(vet)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 14:47:12) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1	

		
for i in range(size(cont)):
	
pflts=size(cont)/size(vet)
print(round(pflts,1))


			  

			  

			  
			  
-- ERROR:
File "XXXX", line 23
    pflts=size(cont)/size(vet)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 14:50:38) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
soma=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1	



			  

			  

			  
			  
-- EXECUTION TIME:
1.09047
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:

-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:

-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 17:58:13) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))

for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		cont[0]=cont[0]+1		
	elif(vet[i]==3):
		cont[1]=cont[1]+1
	elif(vet[i]==4):
		cont[2]=cont[2]+1
	elif(vet[i]==5):
		cont[3]=cont[3]+1
	elif(vet[i]==6):
		cont[4]=cont[4]+1
	elif(vet[i]==7):
		cont[5]=cont[5]+1
		
cont[0]=round((cont[0]/size(vet)*100,1)
cont[1]=round((cont[1]/size(vet)*100,1)				  
cont[2]=round((cont[2]/size(vet)*100,1)	
cont[3]=round((cont[3]/size(vet)*100,1)
cont[4]=round((cont[4]/size(vet)*100,1)
cont[5]=round((cont[5]/size(vet)*100,1)

print(cont)				  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 21
    cont[1]=round((cont[1]/size(vet)*100,1)				  
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 18:01:07) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
seg=0
ter=0
qua=0
qui=0
sex=0
sab=0
for i in range(0,size(vet)):
	soma=soma+vet[i]
	if(vet[i]==2):
		seg=seg+1	
	elif(vet[i]==3):
		ter=ter+1
	elif(vet[i]==4):
		qua=qua+1
	elif(vet[i]==5):
		qui=qui+1
	elif(vet[i]==6):
		sex=sex+1
	elif(vet[i]==7):
		sab=sab+1
		
cont[0]=round((seg/size(vet)*100,1)
cont[1]=round((ter/size(vet)*100,1)				  
cont[2]=round((qua/size(vet)*100,1)	
cont[3]=round((qui/size(vet)*100,1)
cont[4]=round((sex/size(vet)*100,1)
cont[5]=round((sab/size(vet)*100,1)

print(cont)				  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 26
    cont[1]=round((ter/size(vet)*100,1)				  
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 18:03:24) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=int)
vet=array(eval(input("Digite o vetor de faltas: ")))
seg=0
ter=0
qua=0
qui=0
sex=0
sab=0
for i in range(0,size(vet)):
	if(vet[i]==2):
		seg=seg+1	
	elif(vet[i]==3):
		ter=ter+1
	elif(vet[i]==4):
		qua=qua+1
	elif(vet[i]==5):
		qui=qui+1
	elif(vet[i]==6):
		sex=sex+1
	elif(vet[i]==7):
		sab=sab+1
		
cont[0]=round(((seg/size(vet)*100),1)
cont[1]=round(((ter/size(vet)*100),1)				  
cont[2]=round(((qua/size(vet)*100),1)	
cont[3]=round(((qui/size(vet)*100),1)
cont[4]=round(((sex/size(vet)*100),1)
cont[5]=round(((sab/size(vet)*100),1)

print(cont)				  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 25
    cont[1]=round(((ter/size(vet)*100),1)				  
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 18:03:52) 
-- CODE:
from numpy import*
cont=zeros(6, dtype=float)
vet=array(eval(input("Digite o vetor de faltas: ")))
seg=0
ter=0
qua=0
qui=0
sex=0
sab=0
for i in range(0,size(vet)):
	if(vet[i]==2):
		seg=seg+1	
	elif(vet[i]==3):
		ter=ter+1
	elif(vet[i]==4):
		qua=qua+1
	elif(vet[i]==5):
		qui=qui+1
	elif(vet[i]==6):
		sex=sex+1
	elif(vet[i]==7):
		sab=sab+1
		
cont[0]=round(((seg/size(vet)*100),1)
cont[1]=round(((ter/size(vet)*100),1)				  
cont[2]=round(((qua/size(vet)*100),1)	
cont[3]=round(((qui/size(vet)*100),1)
cont[4]=round(((sex/size(vet)*100),1)
cont[5]=round(((sab/size(vet)*100),1)

print(cont)				  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 25
    cont[1]=round(((ter/size(vet)*100),1)				  
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 18:05:15) 
-- CODE:
from numpy import*

vet=array(eval(input("Digite o vetor de faltas: ")))
seg=0
ter=0
qua=0
qui=0
sex=0
sab=0
cont=zeros(6, dtype=float)

for i in range(0,size(vet)):
	if(vet[i]==2):
		seg=seg+1	
	elif(vet[i]==3):
		ter=ter+1
	elif(vet[i]==4):
		qua=qua+1
	elif(vet[i]==5):
		qui=qui+1
	elif(vet[i]==6):
		sex=sex+1
	elif(vet[i]==7):
		sab=sab+1
		
cont[0]=round(((seg/size(vet)*100),1)
cont[1]=round(((ter/size(vet)*100),1)				  
cont[2]=round(((qua/size(vet)*100),1)	
cont[3]=round(((qui/size(vet)*100),1)
cont[4]=round(((sex/size(vet)*100),1)
cont[5]=round(((sab/size(vet)*100),1)

print(cont)				  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 27
    cont[1]=round(((ter/size(vet)*100),1)				  
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 18:05:57) 
-- CODE:
from numpy import*

vet=array(eval(input("Digite o vetor de faltas: ")))
seg=0
ter=0
qua=0
qui=0
sex=0
sab=0
n=zeros(6, dtype=float)

for i in range(0,size(vet)):
	if(vet[i]==2):
		seg=seg+1	
	elif(vet[i]==3):
		ter=ter+1
	elif(vet[i]==4):
		qua=qua+1
	elif(vet[i]==5):
		qui=qui+1
	elif(vet[i]==6):
		sex=sex+1
	elif(vet[i]==7):
		sab=sab+1
		
n[0]=round(((seg/size(vet)*100),1)
n[1]=round(((ter/size(vet)*100),1)				  
n[2]=round(((qua/size(vet)*100),1)	
n[3]=round(((qui/size(vet)*100),1)
n[4]=round(((sex/size(vet)*100),1)
n[5]=round(((sab/size(vet)*100),1)

print(n)				  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 27
    n[1]=round(((ter/size(vet)*100),1)				  
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 18:20:07) 
-- CODE:
from numpy import*

vet=array(eval(input("Digite o vetor de faltas: ")))
seg=0
ter=0
qua=0
qui=0
sex=0
sab=0
n=zeros(6, dtype=float)

for i in range(size(vet)):
	if(vet[i]==2):
		seg=seg+1	
	elif(vet[i]==3):
		ter=ter+1
	elif(vet[i]==4):
		qua=qua+1
	elif(vet[i]==5):
		qui=qui+1
	elif(vet[i]==6):
		sex=sex+1
	elif(vet[i]==7):
		sab=sab+1
		
n[0]=round(((seg/size(vet)*100),1)
n[1]=round(((ter/size(vet)*100),1)				  
n[2]=round(((qua/size(vet)*100),1)	
n[3]=round(((qui/size(vet)*100),1)
n[4]=round(((sex/size(vet)*100),1)
n[5]=round(((sab/size(vet)*100),1)

print(n)				  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 27
    n[1]=round(((ter/size(vet)*100),1)				  
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 18:23:14) 
-- CODE:
from numpy import*

vet=array(eval(input("Digite o vetor de faltas: ")))
seg=0
ter=0
qua=0
qui=0
sex=0
sab=0
n=zeros(6, dtype=float)

for i in range(size(vet)):
	if(vet[i]==2):
		seg=seg+1	
	elif(vet[i]==3):
		ter=ter+1
	elif(vet[i]==4):
		qua=qua+1
	elif(vet[i]==5):
		qui=qui+1
	elif(vet[i]==6):
		sex=sex+1
	elif(vet[i]==7):
		sab=sab+1
		
seg=round(((seg/size(vet)*100),1)
ter=round(((ter/size(vet)*100),1)				  
qua=round(((qua/size(vet)*100),1)	
qui=round(((qui/size(vet)*100),1)
sex=round(((sex/size(vet)*100),1)
sab=round(((sab/size(vet)*100),1)
			 
n[0]=seg			 
n[1]=ter
n[2]=qua			 
n[3]=qui			 
n[4]=sex			 
n[5]=sab			 
			 
print(n)				  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 27
    ter=round(((ter/size(vet)*100),1)				  
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 18:23:44) 
-- CODE:
from numpy import*

vet=array(eval(input("Digite o vetor de faltas: ")))
seg=0
ter=0
qua=0
qui=0
sex=0
sab=0
n=zeros(6, dtype=float)

for i in range(size(vet)):
	if(vet[i]==2):
		seg=seg+1	
	elif(vet[i]==3):
		ter=ter+1
	elif(vet[i]==4):
		qua=qua+1
	elif(vet[i]==5):
		qui=qui+1
	elif(vet[i]==6):
		sex=sex+1
	elif(vet[i]==7):
		sab=sab+1
		
seg=round(((seg/size(vet)*100),1)
#ter=round(((ter/size(vet)*100),1)				  
qua=round(((qua/size(vet)*100),1)	
qui=round(((qui/size(vet)*100),1)
sex=round(((sex/size(vet)*100),1)
sab=round(((sab/size(vet)*100),1)
			 
n[0]=seg			 
n[1]=ter
n[2]=qua			 
n[3]=qui			 
n[4]=sex			 
n[5]=sab			 
			 
print(n)				  
			  

			  

			  
			  
-- ERROR:
File "XXXX", line 28
    qua=round(((qua/size(vet)*100),1)	
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 18:30:57) 
-- CODE:
from numpy import*
v=array(eval(input("Digite o vetor faltas: ")))

c=zeros(6, dtype=float)
seg=0
ter=0
qua=0
qui=0
sex=0
sab=0

for i in range(size(v)):
	if(v[i]==2):
		seg=seg+1
	elif(v[i]==3):
		ter=ter+1
	elif(v[i]==4):
		qua=qua+1
	elif(v[i]==5):
		qui=qui+1
	elif(v[i]==6):
		sex=sex+1
	elif(v[i]==7):
		sab=sab+1
		
c[0]=round(seg/size(v)*100,1)
c[1]=round(ter/size(v)*100,1)
c[2]=round(qua/size(v)*100,1)
c[3]=round(qui/size(v)*100,1)
c[4]=round(sex/size(v)*100,1)
c[5]=round(sab/size(v)*100,1)
			  
print(c)
			  
			  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 18:31:14) 
-- CODE:
from numpy import*
v=array(eval(input("Digite o vetor faltas: ")))

c=zeros(6, dtype=float)
seg=0
ter=0
qua=0
qui=0
sex=0
sab=0

for i in range(size(v)):
	if(v[i]==2):
		seg=seg+1
	elif(v[i]==3):
		ter=ter+1
	elif(v[i]==4):
		qua=qua+1
	elif(v[i]==5):
		qui=qui+1
	elif(v[i]==6):
		sex=sex+1
	elif(v[i]==7):
		sab=sab+1
		
c[0]=round(seg/size(v)*100,1)
c[1]=round(ter/size(v)*100,1)
c[2]=round(qua/size(v)*100,1)
c[3]=round(qui/size(v)*100,1)
c[4]=round(sex/size(v)*100,1)
c[5]=round(sab/size(v)*100,1)
			  
print(c)
			  
			  
-- EXECUTION TIME:
1.21399
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
