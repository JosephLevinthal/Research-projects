== TEST (2019-03-24 13:52:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1: input(int("Dividendo: "))
var2: input(int("Divisor: "))
print(va1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1: input(int("Dividendo: "))
ValueError: invalid literal for int() with base 10: 'Dividendo: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 13:53:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1: input(int("Dividendo: "))
var2: input(int("Divisor: "))
print(va1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1: input(int("Dividendo: "))
ValueError: invalid literal for int() with base 10: 'Dividendo: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 13:53:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1: int(input("Dividendo: "))
var2: int(input("Divisor: "))
print(va1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(va1)
NameError: name 'va1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 13:54:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1:int(input("Dividendo: "))
var2:int(input("Divisor: "))
print(va1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(va1)
NameError: name 'va1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 13:55:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1: float(input("Dividendo: "))
var2: int(input("Divisor: "))
print(va1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(va1)
NameError: name 'va1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 13:55:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1: int(input("Dividendo: "))
var2: int(input("Divisor: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(va1)
NameError: name 'va1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 13:56:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1 = int(input("Dividendo: "))
var2: int(input("Divisor: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(va1)
NameError: name 'va1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 13:56:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
int(input("Dividendo: "))
var2: int(input("Divisor: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(va1)
NameError: name 'va1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 13:57:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
int(input("Dividendo: "))
int(input("Divisor: "))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(va1)
NameError: name 'va1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 13:57:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
int(input("Dividendo: "))
int(input("Divisor: "))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(va1)
NameError: name 'va1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 13:58:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1 = int(input("Dividendo: "))
int(input("Divisor: "))



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(va1)
NameError: name 'va1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 13:58:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1 = int(input("Dividendo: "))
var2 = int(input("Divisor: "))



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(va1)
NameError: name 'va1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 14:00:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1 = int(input("Dividendo: "))
var2 = int(input("Divisor: "))
print(var1)
print(var2)
print(var1 / var2)
print(var1 % var2)



-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 14:00:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1 = int(input("Dividendo: "))
var2 = int(input("Divisor: "))
print(var1)
print(var2)
print(var1 / var2)
print(var1 % var2)



-- EXECUTION TIME:
0.186528
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1.6
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7.0
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173.5
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 14:01:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1 = int(input("Dividendo: "))
var2 = int(input("Divisor: "))
print(var1)
print(var2)
print(var1 / var2)
print(var1 % var2)



-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 14:01:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1 = int(input("Dividendo: "))
var2 = int(input("Divisor: "))
print(var1)
print(var2)
print(var1 / var2)
print(var1 % var2)



-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 14:01:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1 = int(input("Dividendo: "))
var2 = int(input("Divisor: "))
print(var1)
print(var2)
print(var1 / var2)
print(var1 % var2)



-- EXECUTION TIME:
0.290836
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1.6
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7.0
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173.5
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 14:01:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1 = int(input("Dividendo: "))
var2 = int(input("Divisor: "))
print(var1)
print(var2)
print(var1 / var2)
print(var1 % var2)



-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 14:02:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1 = int(input("Dividendo: "))
var2 = int(input("Divisor: "))
print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)



-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 14:02:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corri
var1 = int(input("Dividendo: "))
var2 = int(input("Divisor: "))
print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)



-- EXECUTION TIME:
0.151792
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
