== TEST (2019-07-02 11:17:37) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
for i in k:
	for j in k:
		if(i > j):
			soma = soma + v[i,j]
			c = c + 1
print(soma/c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:18:38) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
print(k)
#for i in k:
#	for j in k:
	#	if(i > j):
#			soma = soma + v[i,j]
#			c = c + 1
#print(soma/c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:19:04) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
print(k)
for i in range(k):
	for j in k:
		if(i > j):
			soma = soma + v[i,j]
			c = c + 1
#print(soma/c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:20:02) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
for i in range(k):
	for j in range(k):
		if(i > j):
			soma = soma + v[i,j]
			c = c + 1
#print(soma/c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:20:19) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
for i in range(k):
	for j in range(k):
		if(i > j):
			soma = soma + m[i,j]
			c = c + 1
#print(soma/c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:20:34) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
for i in range(k):
	for j in range(k):
		if(i > j):
			soma = soma + m[i,j]
			c = c + 1
print(soma/c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:20:57) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
for i in range(k):
	for j in range(k):
		if(i > j):
			soma = soma + m[i,j]
			c = c + 1
print(round((soma/c),0)
-- ERROR:
File "XXXX", line 15
    
                           ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:21:07) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
for i in range(k):
	for j in range(k):
		if(i > j):
			soma = soma + m[i,j]
			c = c + 1
print(round((soma/c),0))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:21:21) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
for i in range(k):
	for j in range(k):
		if(i > j):
			soma = soma + m[i,j]
			c = c + 1
print(round((soma/c),0))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:21:55) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
for i in range(k):
	for j in range(k):
		if(i > j):
			soma = soma + m[i,j]
			c = c + 1
print(round((soma/c),2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:22:05) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
for i in range(k):
	for j in range(k):
		if(i > j):
			soma = soma + m[i,j]
			c = c + 1
print(round((soma/c),2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 11:22:23) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
for i in range(k):
	for j in range(k):
		if(i > j):
			soma = soma + m[i,j]
			c = c + 1
print(round((soma/c),2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-02 11:22:31) 
-- CODE:
from numpy import *
from numpy.linalg import *

m = array(eval(input("Insira uma matriz quadrada: ")))

k = shape(m)[0]
soma = 0
c = 0
for i in range(k):
	for j in range(k):
		if(i > j):
			soma = soma + m[i,j]
			c = c + 1
print(round((soma/c),2))
-- EXECUTION TIME:
1.09053
-- TEST CASE 1:
---- input:
[[10,8,2],[20,16,4],[40,32,8]]
---- correct output:
30.67
---- user output:
30.67
-- TEST CASE 2:
---- input:
[[0.32,0.48,0.56],[0.12,0.54,0.34],[0.67,0.89,0.76]]
---- correct output:
0.56
---- user output:
0.56
-- TEST CASE 3:
---- input:
[[34.5,66.7,89.7,65.8,34.6],[77.8,65.7,89.7,23.4,45.9],[12.3,98.9,23.4,67.7,55.5],[33.3,44.4,56.8,91.3,51.9],[11.1,22.2,34.5,66.5,15.9]]
---- correct output:
45.78
---- user output:
45.78
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
