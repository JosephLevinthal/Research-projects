== TEST (2019-06-11 10:45:12) 
-- CODE:
from numpy import *
med = array(eval(input("Vetor de Medias dos alunos: ")))
fre = array(eval(input("Vetor de Frequencias: ")))
car = int(input("Carga Horaria: "))
vet = zeros(3, dtype=int)
soma1 = 0
soma2 = 0
soma3 = 0
while (size(med) > 1):
	for i in med:
		if (i == 5,0) or (i > 5,0):
			soma1 = soma1 + 1
		else:
			soma2 = soma2 + 1
while (size(fre) > 1):
	for a in fre:
		if (a == (car * 75) / 100) or (a > (car * 75) / 100):
			soma3 = soma3 + 1
vet[0] = soma1
vet[1] = soma2
vet[3] = soma3
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:50:45) 
-- CODE:
from numpy import *
med = array(eval(input("Vetor de Medias dos alunos: ")))
fre = array(eval(input("Vetor de Frequencias: ")))
car = int(input("Carga Horaria: "))
vet = zeros(3, dtype=int)
soma1 = 0
soma2 = 0
soma3 = 0
	for i in range(size(med)):
		if(med[i] >= 5 and fre[i] >= (car * 75) / 100):
			soma1 = soma1 + 1
		elif(med[i] < 5):
			soma2 = soma2 + 1
		elif(fre < (car * 75) / 100):
			soma3 = soma3 + 1
vet[0] = soma1
vet[1] = soma2
vet[3] = soma3
print(vet)
-- ERROR:
File "XXXX", line 9
    for i in range(size(med)):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:51:07) 
-- CODE:
from numpy import *
med = array(eval(input("Vetor de Medias dos alunos: ")))
fre = array(eval(input("Vetor de Frequencias: ")))
car = int(input("Carga Horaria: "))
vet = zeros(3, dtype=int)
soma1 = 0
soma2 = 0
soma3 = 0
for i in range(size(med)):
	if(med[i] >= 5 and fre[i] >= (car * 75) / 100):
			soma1 = soma1 + 1
	elif(med[i] < 5):
			soma2 = soma2 + 1
	elif(fre < (car * 75) / 100):
			soma3 = soma3 + 1
vet[0] = soma1
vet[1] = soma2
vet[3] = soma3
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:04:20) 
-- CODE:
from numpy import *
med = array(eval(input("Vetor de Medias dos alunos: ")))
fre = array(eval(input("Vetor de Frequencias: ")))
car = int(input("Carga Horaria: "))
vet = zeros(3, dtype=int)
soma1 = 0
soma2 = 0
soma3 = 0
for i in range(size(med)):
	if(med[i] >= 5 and fre[i] >= car * (75 / 100):
			soma1 = soma1 + 1
	elif(med[i] < 5):
			soma2 = soma2 + 1
	elif(fre < car * (75 / 100):
			soma3 = soma3 + 1
vet[0] = soma1
vet[1] = soma2
vet[3] = soma3
print(vet)
-- ERROR:
File "XXXX", line 10
    if(med[i] >= 5 and fre[i] >= car * (75 / 100):
                                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:04:32) 
-- CODE:
from numpy import *
med = array(eval(input("Vetor de Medias dos alunos: ")))
fre = array(eval(input("Vetor de Frequencias: ")))
car = int(input("Carga Horaria: "))
vet = zeros(3, dtype=int)
soma1 = 0
soma2 = 0
soma3 = 0
for i in range(size(med)):
	if med[i] >= 5 and fre[i] >= car * (75 / 100):
			soma1 = soma1 + 1
	elif med[i] < 5):
			soma2 = soma2 + 1
	elif fre < car * (75 / 100):
			soma3 = soma3 + 1
vet[0] = soma1
vet[1] = soma2
vet[3] = soma3
print(vet)
-- ERROR:
File "XXXX", line 12
    elif med[i] < 5):
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:04:42) 
-- CODE:
from numpy import *
med = array(eval(input("Vetor de Medias dos alunos: ")))
fre = array(eval(input("Vetor de Frequencias: ")))
car = int(input("Carga Horaria: "))
vet = zeros(3, dtype=int)
soma1 = 0
soma2 = 0
soma3 = 0
for i in range(size(med)):
	if med[i] >= 5 and fre[i] >= car * (75 / 100):
			soma1 = soma1 + 1
	elif med[i] < 5:
			soma2 = soma2 + 1
	elif fre < car * (75 / 100):
			soma3 = soma3 + 1
vet[0] = soma1
vet[1] = soma2
vet[3] = soma3
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:07:07) 
-- CODE:
from numpy import *
med = array(eval(input("Vetor de Medias dos alunos: ")))
fre = array(eval(input("Vetor de Frequencias: ")))
car = int(input("Carga Horaria: "))
vet = zeros(3, dtype=int)
soma1 = 0
soma2 = 0
soma3 = 0
for i in range(size(med)):
	if med[i] >= 5 and fre[i] >= car * (75 / 100):
			soma1 = soma1 + 1
	elif med[i] < 5:
			soma2 = soma2 + 1
	elif fre[i]< car * (75 / 100):
			soma3 = soma3 + 1
vet[0] = soma1
vet[1] = soma2
vet[3] = soma3
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:07:48) 
-- CODE:
from numpy import *
med = array(eval(input("Vetor de Medias dos alunos: ")))
fre = array(eval(input("Vetor de Frequencias: ")))
car = int(input("Carga Horaria: "))
vet = zeros(3, dtype=int)
soma1 = 0
soma2 = 0
soma3 = 0
for i in range(size(med)):
	if med[i] >= 5 and fre[i] >= car * (75 / 100):
			soma1 = soma1 + 1
	elif med[i] < 5:
			soma2 = soma2 + 1
	elif fre[i]< car * (75 / 100):
			soma3 = soma3 + 1
vet[0] = soma1
vet[1] = soma2
vet[2]= soma3
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:08:22) 
-- CODE:
from numpy import *
med = array(eval(input("Vetor de Medias dos alunos: ")))
fre = array(eval(input("Vetor de Frequencias: ")))
car = int(input("Carga Horaria: "))
vet = zeros(3, dtype=int)
soma1 = 0
soma2 = 0
soma3 = 0
for i in range(size(med)):
	if med[i] >= 5 and fre[i] >= car * (75 / 100):
			soma1 = soma1 + 1
	elif med[i] < 5:
			soma2 = soma2 + 1
	elif fre[i]< car * (75 / 100):
			soma3 = soma3 + 1
vet[0] = soma1
vet[1] = soma2
vet[2]= soma3
print(vet)
-- EXECUTION TIME:
0.942381
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
