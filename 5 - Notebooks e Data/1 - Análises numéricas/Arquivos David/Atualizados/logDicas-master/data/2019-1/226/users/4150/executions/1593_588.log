== TEST (2019-03-31 18:51:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valor = int(input("digite o valor: "))

notas_de100 = (valor//100)

resto_de100 = (valor % 100)

notas_de50 = (resto_de100 // 50)

resto_de50 = (resto_de50 % 50)

notas_de10 = (resto_de100 // 10)

print(notas_de100)
print(notas_de50)
print(notas_de10)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    resto_de50 = (resto_de50 % 50)
NameError: name 'resto_de50' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:52:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valor = int(input("digite o valor: "))

notas_de100 = (valor//100)

resto_de100 = (valor % 100)

notas_de50 = (resto_de100 // 50)

resto_de50 = (notas_de50 % 50)

notas_de10 = (resto_de100 // 10)

print(notas_de100)
print(notas_de50)
print(notas_de10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:53:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valor = int(input("digite o valor: "))

notas_de100 = (valor//100)

resto_de100 = (valor % 100)

notas_de50 = (resto_de100 // 50)

resto_de50 = (notas_de50 % 50)

notas_de10 = (resto_de100 // 10)

print(notas_de100)
print(notas_de50)
print(notas_de10)
-- EXECUTION TIME:
0.125233
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:53:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valor = int(input("digite o valor: "))

notas_de100 = (valor//100)

resto_de100 = (valor % 100)

notas_de50 = (resto_de100 // 50)

resto_de50 = (notas_de50 % 50)

notas_de10 = (resto_de100 // 10)

print(notas_de100)
print(notas_de50)
print(notas_de10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:53:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valor = int(input("digite o valor: "))

notas_de100 = (valor//100)

resto_de100 = (valor % 100)

notas_de50 = (resto_de100 // 50)

resto_de50 = (notas_de50 % 50)

notas_de10 = (resto_de100 // 10)

print(notas_de100)
print(notas_de50)
print(notas_de10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:54:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valor = int(input("digite o valor: "))

notas_de100 = (valor//100)

resto_de100 = (valor % 100)

notas_de50 = (resto_de100 // 50)

resto_de50 = (notas_de50 % 50)

notas_de10 = (resto_de100 // 10)

print(notas_de100)
print(notas_de50)
print(notas_de10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:54:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valor = int(input("digite o valor: "))

notas_de100 = (valor//100)

resto_de100 = (valor % 100)

notas_de50 = (resto_de100 // 50)

resto_de50 = (notas_de50 % 50)

notas_de10 = (resto_de100 // 10)

print(notas_de100)
print(notas_de50)
print(notas_de10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:54:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valor = int(input("digite o valor: "))

notas_de100 = (valor//100)

resto_de100 = (valor % 100)

notas_de50 = (resto_de100 // 50)

resto_de50 = (notas_de50 % 50)

notas_de10 = (resto_de100 // 10)

print(notas_de100)
print(notas_de50)
print(notas_de10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:55:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valor = int(input("valor a ser sacado: "))

notas_de100 = (valor//100)

resto_de100 = (valor % 100)

notas_de50 = (resto_de100 // 50)

resto_de50 = (notas_de50 % 50)

notas_de10 = (resto_de100 // 10)

print(notas_de100)
print(notas_de50)
print(notas_de10)
-- EXECUTION TIME:
0.187201
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:55:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valor = int(input("valor a ser sacado: "))

notas_de100 = (valor//100)

resto_de100 = (valor % 100)

notas_de50 = (resto_de100 // 50)

resto_de50 = (notas_de50 % 50)

notas_de10 = (resto_de100 // 10)

print(notas_de100)
print(notas_de50)
print(notas_de10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:56:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- EXECUTION TIME:
0.152942
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:56:40) 
-- CODE:


valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- EXECUTION TIME:
0.161103
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:56:43) 
-- CODE:


valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:57:11) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- EXECUTION TIME:
0.177801
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:57:13) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:57:21) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:59:56) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde100 % 50)

notasde10 = (restode50 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:01:05) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode50 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:02:02) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:02:08) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:02:32) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:03:20) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

restode10 = (notasde10 % 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:03:33) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

restode10 = (notasde10 % 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:03:46) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

restode10 = (notasde10 % 10)

print(notasde100)
print(notasde50)
print(restode10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:03:52) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (notasde50 % 50)

notasde10 = (restode100 // 10)

restode10 = (notasde10 % 10)

print(notasde100)
print(notasde50)
print(restode10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:10:06) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (restode100 % 50)

notasde10 = (restode50 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:10:11) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (restode100 % 50)

notasde10 = (restode50 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 19:10:17) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (restode100 % 50)

notasde10 = (restode50 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- EXECUTION TIME:
0.171803
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:12:21) 
-- CODE:

valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (restode100 % 50)

notasde10 = (restode50 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:18:25) 
-- CODE:
valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (restode100 % 50)

notasde10 = (restode50 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:19:03) 
-- CODE:
valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (restode100 % 50)

notasde10 = (restode50 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:19:15) 
-- CODE:
valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (restode100 % 50)

notasde10 = (restode50 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 22:18:53) 
-- CODE:
valor = int(input("valor a ser sacado: "))

notasde100 = (valor//100)

restode100 = (valor % 100)

notasde50 = (restode100 // 50)

restode50 = (restode100 % 50)

notasde10 = (restode50 // 10)

print(notasde100)
print(notasde50)
print(notasde10)
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
