== TEST (2019-04-11 10:12:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero:5 ")

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:13:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: 2 ")

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:14:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero:5 ")

if (4 % 2 == 0)
	mensagem = "par"
else
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (4 % 2 == 0)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:14:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero:5 ")

if (4 % 2 == 0)
	mensagem = "par"
else
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (4 % 2 == 0)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:14:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero:5 ")

if (4  2 == 0)
	mensagem = "par"
else
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (4  2 == 0)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:15:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero:5 ")

if (10 % 2 == 0)
	mensagem = "par"
else
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (10 % 2 == 0)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:15:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero:5 ")

if (10 % 2 = 0)
	mensagem = "par"
else
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (10 % 2 = 0)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:16:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero:5 ")

if (10 % 2 = 0):
	mensagem = "par"
else
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (10 % 2 = 0):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:18:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("5 ")

if (10 % 2 = 0)
	mensagem = "par"
else
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (10 % 2 = 0)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:21:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(" ")

if (10 % 2 == 0)
	mensagem = "par"
else
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (10 % 2 == 0)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(" 5 ")

if (10 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(" 5 ")

if (10 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(round(mensagem))

-- EXECUTION TIME:
0.202069
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2442/main.py", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(" 5 ")

if (10 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:33:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("numero: 5 ")

if (10 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(round(mensagem))

-- ERROR:
File "XXXX", line 7
    if (10 % 2 == 0):
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:34:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("numero: 5 ")

if (x % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(round(mensagem))

-- ERROR:
File "XXXX", line 7
    if (x % 2 == 0):
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:34:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("numero: 5 ")

if ( % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(round(mensagem))

-- ERROR:
File "XXXX", line 7
    if ( % 2 == 0):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:34:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("numero: 5 ")

if (5 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(round(mensagem))

-- ERROR:
File "XXXX", line 7
    if (5 % 2 == 0):
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:34:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("numero: 5 ")

if	(5 % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
File "XXXX", line 7
    if	(5 % 2 == 0):
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:34:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("numero: 5 ")

if	(5 % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
File "XXXX", line 7
    if	(5 % 2 == 0):
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:35:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("numero: 5 ")

if	(num % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
File "XXXX", line 7
    if	(num % 2 == 0):
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:35:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("numero: 5 ")

if	(numero % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
File "XXXX", line 7
    if	(numero % 2 == 0):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:35:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 ")

if	(a % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
File "XXXX", line 7
    if	(a % 2 == 0):
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:36:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(a % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:36:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(a % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- EXECUTION TIME:
0.156128
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2442/main.py", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:36:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(a % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:36:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(a % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:47:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(a % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:47:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(a % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- EXECUTION TIME:
0.200034
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2442/main.py", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:47:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(a % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:48:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(10 % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:48:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(10 % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- EXECUTION TIME:
0.115716
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2442/main.py", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:48:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(10 % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:48:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(10 % 2 = 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
File "XXXX", line 7
    if	(10 % 2 = 0):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:48:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(10 % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:48:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("numero: 5 "))

if	(10 % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- EXECUTION TIME:
0.161305
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2442/main.py", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:48:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

 = float(input("numero: 5 "))

if	(10 % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
File "XXXX", line 5
    = float(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:49:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("numero: 5 "))

if	(10 % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:51:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = int(input("Digite um numero: "))

if	(x % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(round(mensagem))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:52:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = int(input("Digite um numero: "))

if	(x % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:52:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = int(input("Digite um numero: "))

if	(x % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.185884
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:52:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = int(input("Digite um numero: "))

if	(x % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:52:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = int(input("Digite um numero: "))

if	(x % 2 == 0):
		mensagem = "par"
else:
		mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.168108
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
