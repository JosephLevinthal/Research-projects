== TEST (2019-03-22 17:59:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Logintude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
r = float(6371.01)
d = r * acos( (sin(t1) * sin(t2)) + (cos(t1) * cos(t2) * cos(g1 - g2)) )
print(round(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    t1 = radians(float(input()))
NameError: name 'radians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 18:00:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Logintude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
r = float(6371.01)
d = r * acos( (sin(t1) * sin(t2)) + (cos(t1) * cos(t2) * cos(g1 - g2)) )
print(round(d, 2))

-- EXECUTION TIME:
0.126597
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 18:01:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Logintude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
raio = float(6371.01)
d = raio * acos( (sin(t1) * sin(t2)) + (cos(t1) * cos(t2) * cos(g1 - g2) ) )
print(round(d, 2))

-- EXECUTION TIME:
0.167091
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 18:01:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Logintude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
raio = float(6371.01)
d = raio * acos( (sin(t1) * sin(t2)) + (cos(t1) * cos(t2) * cos(g1 - g2) ) )
print(round(d, 2))

-- EXECUTION TIME:
0.167258
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:01:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Logintude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
raio = float(6371.01)
d = raio * acos( (sin(t1) * sin(t2)) + (cos(t1) * cos(t2) * cos(g1 - g2) ) )
print(round(d, 2))

-- OUTPUT:
50.44
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 18:01:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Logintude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
raio = float(6371.01)
d = raio * acos( (sin(t1) * sin(t2)) + (cos(t1) * cos(t2) * cos(g1 - g2) ) )
print(round(d, 2))

-- EXECUTION TIME:
0.192979
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:44:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Logintude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
raio = float(6371.01)
d = raio * acos( (sin*(t1) * sin*(t2)) + (cos*(t1) * cos*(t2) * cos*(g1 - g2) ) )
print(round(d, 2))

-- EXECUTION TIME:
0.125464
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1017/main.py", line 11, in <module>
    d = raio * acos( (sin*(t1) * sin*(t2)) + (cos*(t1) * cos*(t2) * cos*(g1 - g2) ) )
TypeError: unsupported operand type(s) for *: 'builtin_function_or_method' and 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:44:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Logintude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
raio = float(6371.01)
d = raio * acos( (sin*(t1) * sin*(t2)) + (cos*(t1) * cos*(t2) * cos*(g1 - g2) ) )
print(round(d, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    d = raio * acos( (sin*(t1) * sin*(t2)) + (cos*(t1) * cos*(t2) * cos*(g1 - g2) ) )
TypeError: unsupported operand type(s) for *: 'builtin_function_or_method' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:44:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Logintude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
raio = float(6371.01)
d = raio * acos( (sin(t1) * sin(t2)) + (cos(t1) * cos(t2) * cos(g1 - g2) ) )
print(round(d, 2))

-- EXECUTION TIME:
0.188911
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
