== TEST (2019-04-24 22:53:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
	print("Tipo de trianguilo: invalido")
	else:
		if ((a==b) and (b==a))
		print("equilatero")
		else:
			if ((a==b) or (b==c) or (c==a))
			print("isosceles")
			else:
				print("escaleno")
-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 22:54:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
	print("Tipo de trianguilo: invalido")
else:
	if ((a==b) and (b==a))
	print("equilatero")
	else:
		if ((a==b) or (b==c) or (c==a))
		print("isosceles")
		else:
			print("escaleno")
-- EXECUTION TIME:
0.147848
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 10
    if ((a==b) and (b==a))
                         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 22:54:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
	print("Tipo de trianguilo: invalido")
else:
	if ((a==b) and (b==a))
	print("equilatero")
	else:
		if ((a==b) or (b==c) or (c==a))
		print("isosceles")
		else:
			print("escaleno")
-- ERROR:
File "XXXX", line 10
    if ((a==b) and (b==a))
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 22:55:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
	print("Tipo de trianguilo: invalido")
else:
	if ((a==b) and (b==a)):
	print("equilatero")
	else:
		if ((a==b) or (b==c) or (c==a)):
		print("isosceles")
		else:
			print("escaleno")
-- ERROR:
File "XXXX", line 11
    print("equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 22:56:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
	print("Tipo de trianguilo: invalido")
else:
	if ((a==b) and (b==a)):
		print("equilatero")
	else:
		if ((a==b) or (b==c) or (c==a)):
		print("isosceles")
		else:
			print("escaleno")
-- ERROR:
File "XXXX", line 14
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 22:56:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
	print("Tipo de trianguilo: invalido")
else:
	if ((a==b) and (b==a)):
		print("equilatero")
	else:
		if ((a==b) or (b==c) or (c==a)):
			print("isosceles")
		else:
			print("escaleno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 22:57:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((a >= b + c) or(b >= a + c) or(c >= b + a)):
	print("Tipo de trianguilo: invalido")
else:
	if ((a==b) and (b==a)):
		print("equilatero")
	else:
		if ((a==b) or (b==c) or (c==a)):
			print("isosceles")
		else:
			print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 22:57:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((a >= b + c) or(b >= a + c) or(c >= b + a)):
	print("Tipo de trianguilo: invalido")
else:
	if ((a==b) and (b==a)):
		print("equilatero")
	else:
		if ((a==b) or (b==c) or (c==a)):
			print("isosceles")
		else:
			print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 22:57:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((a >= b + c) or(b >= a + c) or(c >= b + a)):
	print("Tipo de trianguilo: invalido")
else:
	if ((a==b) and (b==a)):
		print("equilatero")
	else:
		if ((a==b) or (b==c) or (c==a)):
			print("isosceles")
		else:
			print("escaleno")
-- EXECUTION TIME:
0.147301
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de trianguilo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:05:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((a==b) and (b==a)):
	print("equilatero")
else:
	if ((a==b) or (b==c) or (c==a)):
		print("isosceles")
	else:
		print("escaleno")
		if ((a >= b + c) or(b >= a + c) or(c >= b + a)):
			print("Tipo de triangulo: invalido")

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:06:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((a==b) and (b==a)):
	print("equilatero")
else:
	if ((a==b) or (b==c) or (c==a)):
		print("isosceles")
	else:
		print("escaleno")
		if ((a >= b + c) or(b >= a + c) or(c >= b + a)):
			print("Tipo de triangulo: invalido")

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:29:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or (a >= b + c) or ((b >= c + a) or (c >= a + b)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:29:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or (a >= b + c) or ((b >= c + a) or (c >= a + b)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:32:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or (a >= b + c) or ((b >= c + a) or (c >= a + b)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:42:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((a>0) and (b>0) and (c>0)) or ((a > b+c) and (b > c+a) and (c > a+b)):
	print("Tipo de triangulo: invalido")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if (a == b) and (b == c):
				print("equilatero")

-- OUTPUT:
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 23:42:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((a>0) and (b>0) and (c>0)) or ((a > b+c) and (b > c+a) and (c > a+b)):
	print("Tipo de triangulo: invalido")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if (a == b) and (b == c):
				print("equilatero")

-- EXECUTION TIME:
0.167174
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:42:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((a>0) and (b>0) and (c>0)) or ((a > b+c) and (b > c+a) and (c > a+b)):
	print("Tipo de triangulo: invalido")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if (a == b) and (b == c):
				print("equilatero")

-- OUTPUT:
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:42:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if ((a>0) and (b>0) and (c>0)) or ((a > b+c) and (b > c+a) and (c > a+b)):
	print("Tipo de triangulo: invalido")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if (a == b) and (b == c):
				print("equilatero")

-- OUTPUT:
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:43:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if ((a>0) and (b>0) and (c>0)) or ((a > b+c) and (b > c+a) and (c > a+b)):
	print("Tipo de triangulo: invalido")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if (a == b) and (b == c):
				print("equilatero")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 23:43:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if ((a>0) and (b>0) and (c>0)) or ((a > b+c) and (b > c+a) and (c > a+b)):
	print("Tipo de triangulo: invalido")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if (a == b) and (b == c):
				print("equilatero")

-- EXECUTION TIME:
0.19102
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:43:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if ((a>0) and (b>0) and (c>0)) or ((a > b+c) and (b > c+a) and (c > a+b)):
	print("Tipo de triangulo: invalido")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if (a == b) and (b == c):
				print("equilatero")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:46:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or ((a < a+b) and (b < a+c) and (c < b+a))
				print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 16
    if ((a>0) and (b>0) and (c>0)) or ((a < a+b) and (b < a+c) and (c < b+a))
                                                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:48:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a))
				print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 16
    if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a))
                                                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:48:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:49:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:51:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a,b) != (b,c):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:54:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
			print("Tipo de triangulo: invalido")
		else:
			if (a != b) and (b != c) and (c != a):
				print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:54:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
			print("Tipo de triangulo: invalido")
		else:
			if (a != b) and (b != c) and (c != a):
				print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:54:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
			print("Tipo de triangulo: invalido")
		else:
			if (a != b) and (b != c) and (c != a):
				print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:55:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
			print("Tipo de triangulo: invalido")
		else:
			if (a != b) and (b != c) and (c != a):
				print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 23:55:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
			print("Tipo de triangulo: invalido")
		else:
			if (a != b) and (b != c) and (c != a):
				print("escaleno")
-- EXECUTION TIME:
0.194287
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:57:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 23:57:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:00:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 00:00:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
				print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.137423
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:00:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:02:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
else:
	if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
		print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 17
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:02:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:04:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)


if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 11
    if (a == b) and (b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:05:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)


if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
	if (a == b) and (b == c):
		print("equilatero")
		else:
			if (a == b) or (b == c) or (c == a):
				print("isosceles")
				else:
					if (a != b) and (b != c) and (c != a):
						print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:05:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)


if ((a>0) and (b>0) and (c>0)) or ((a < c+b) and (b < a+c) and (c < b+a)):
	if (a == b) and (b == c):
		print("equilatero")
	else:
			if (a == b) or (b == c) or (c == a):
				print("isosceles")
			else:
					if (a != b) and (b != c) and (c != a):
						print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:06:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)


if ((a>0) and (b>0) and (c>0)) or ((a < b + c) and(b < a + c) and(c < b + a)):
	if (a == b) and (b == c):
		print("equilatero")
	else:
			if (a == b) or (b == c) or (c == a):
				print("isosceles")
			else:
					if (a != b) and (b != c) and (c != a):
						print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:06:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)


if ((a>0) and (b>0) and (c>0)) or ((a < b + c) and(b < a + c) and(c < b + a)):
	if (a == b) and (b == c):
		print("equilatero")
	else:
			if (a == b) or (b == c) or (c == a):
				print("isosceles")
			else:
					if (a != b) and (b != c) and (c != a):
						print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
else:
	if (a == b) or (b == c) or (c == a):
		print("isosceles")
	else:
		if (a != b) and (b != c) and (c != a):
			print("escaleno")
		else:
			if ((a>0) and (b>0) and (c>0)) or ((a < c+b) or (b < a+c) or (c < b+a)):
				print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:42:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
elif (a == b) or (b == c) or (c == a):
	print("isosceles")
elif (a != b) and (b != c) and (c != a):
	print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:43:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
elif (a == b) or (b == c) or (c == a):
	print("isosceles")
elif (a != b) and (b != c) and (c != a):
	print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.181622
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	print("equilatero")
elif (a == b) or (b == c) or (c == a):
	print("isosceles")
elif (a != b) and (b != c) and (c != a):
	print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:49:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)
if ((a+b >c) and (b+c > a) and (c+a > b)):
	if (a == b) and (b == c):
	print("Tipo de triangulo: equilatero")
	elif (a == b) or (b == c) or (c == a):
	print("Tipo de triangulo: isosceles")
	else:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 10
    print("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:50:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)
if ((a+b >c) and (b+c > a) and (c+a > b)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero")
	elif (a == b) or (b == c) or (c == a):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:50:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1:"))
b = float(input("lado 2:"))
c = float(input("lado 3:"))

print("Entradas:", a, ",", b, ",", c)
if ((a+b >c) and (b+c > a) and (c+a > b)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero")
	elif (a == b) or (b == c) or (c == a):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.182557
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
