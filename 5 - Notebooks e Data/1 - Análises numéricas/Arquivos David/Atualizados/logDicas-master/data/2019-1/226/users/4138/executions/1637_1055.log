== TEST (2019-04-06 20:22:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = int(input("insira o angulo: "))
D = int(iput("insiran a distancia: "))
g = 9,8

A = radians(a)

R = (sqrt(vo) * sen(2*a))/g
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensangem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:23:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(iput("insiran a distancia: "))
g = 9,8

A = radians(a)

R = (sqrt(vo) * sen(2*a))/g
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensangem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(iput("insiran a distancia: "))
NameError: name 'iput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:23:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insiran a distancia: "))
g = 9,8

A = radians(a)

R = (sqrt(vo) * sen(2*a))/g
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensangem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:24:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = radians(a)

R = (sqrt(vo) * sen(2*a))/g
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensangem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:24:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = radians(a)

R = (sqrt(vo) * sin(2*a))/g
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensangem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:26:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = radians(a)

R1 = (sqrt(vo)
R2 = sin(2 * A)
Rf = (R1 * R2)/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensangem = "nao"
	
print(mensagem)

-- ERROR:
File "XXXX", line 13
    R2 = sin(2 * A)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:27:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = radians(2a)

R1 = (sqrt(vo)
R2 = sin(A)
Rf = (R1 * R2)/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensangem = "nao"
	
print(mensagem)

-- ERROR:
File "XXXX", line 10
    A = radians(2a)
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:27:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

R1 = (sqrt(vo)
R2 = sin(A)
Rf = (R1 * R2)/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensangem = "nao"
	
print(mensagem)

-- ERROR:
File "XXXX", line 13
    R2 = sin(A)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:28:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

R1 = (sqrt(vo)
R2 = sin(A)
Rf = (R1 * R2)/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensangem = "nao"
	
print(mensagem)

-- ERROR:
File "XXXX", line 13
    R2 = sin(A)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:31:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

R1 = (sqrt(vo)
R2 = sin(A)
Rf = (R1 * R2)/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
File "XXXX", line 13
    R2 = sin(A)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:31:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

R1 = (sqrt(vo)
R2 = sinA
Rf = (R1 * R2)/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
File "XXXX", line 13
    R2 = sinA
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:31:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

R1 = (sqrt(vo)
R2 = sin(A)
Rf = (R1 * R2)/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
File "XXXX", line 13
    R2 = sin(A)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:32:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

R1 = sqrt(vo)
R2 = sin(A)
Rf = (R1 * R2)/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:33:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

R1 = sqrt(vo)
R2 = sin(A)
Rf = (R1 * R2)
rg = Rf/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:35:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (sqrt(vo) * sin(A))/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:36:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = input("insira o angulo: ")
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (sqrt(vo) * sin(A))/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:37:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (sqrt(vo) * sin(A))/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 20:37:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (sqrt(vo) * sin(A))/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.112701
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/1055/main.py", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:37:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (sqrt(vo) * sin(A))/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:38:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (sqrt(vo))/g
RF1 = sin(A)/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:39:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (vo**2)/g
RF1 = sin(A)/g
	
r = abs(D - Rf)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:40:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (vo**2)
Rf1 = (Rf * sin(A))/g
	
r = abs(D - Rf1)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:41:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (vo**2)
Rf1 = sin(A)
Rff = (Rf * Rf1)/g
	
r = abs(D - Rf1)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:43:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (vo**2)
Rf1 = sin(A)
Rff = (Rf * Rf1)
	
r = abs(D - Rff)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:43:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (vo**2)
Rf1 = sin(A)
Rff = (Rf * Rf1)
Rff1 = Rff/g
	
r = abs(D - Rff)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:44:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)

Rf = (vo**2)
Rf1 = sin(A)
Rff = (Rf * Rf1)
Rff1 = Rff * 1/g
	
r = abs(D - Rff)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:46:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)
F = ((vo**2) * sin(A))/g
	
r = abs(D - F)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:47:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9,8

A = 2 * radians(a)
F = ((vo ** 2) * sin(A))/g
	
r = abs(D - F)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 20:49:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9.8

A = 2 * radians(a)
F = ((vo ** 2) * sin(A))/g
	
r = abs(D - F)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.118375
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/1055/main.py", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:49:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9.8

A = 2 * radians(a)
F = ((vo ** 2) * sin(A))/g
	
r = abs(D - F)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 20:49:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9.8

A = 2 * radians(a)
F = ((vo ** 2) * sin(A))/g
	
r = abs(D - F)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.196737
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/1055/main.py", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:49:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9.8

A = radians(2 * a)
F = ((vo ** 2) * sin(A))/g
	
r = abs(D - F)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 20:50:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9.8

A = radians(2 * a)
F = ((vo ** 2) * sin(A))/g
	
r = abs(D - F)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.1483
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/1055/main.py", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 20:52:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9.8

A = radians(2 * a)
R = ((vo ** 2) * sin(A))/g
	
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.200452
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/1055/main.py", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:52:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9.8

A = radians(2 * a)
R = ((vo ** 2) * sin(A))/g
	
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 20:52:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial:"))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9.8

A = radians(2 * a)
R = ((vo ** 2) * sin(A))/g
	
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.178996
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/1055/main.py", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:53:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial: "))
a = float(input("insira o angulo: "))
D = int(input("insira a distancia: "))
g = 9.8

A = radians(2 * a)
R = ((vo ** 2) * sin(A))/g
	
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 20:53:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial: "))
a = float(input("insira o angulo: "))
D = float(input("insira a distancia: "))
g = 9.8

A = radians(2 * a)
R = ((vo ** 2) * sin(A))/g
	
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.129549
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
insira velocidade inicial: insira o angulo: insira a distancia: sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
insira velocidade inicial: insira o angulo: insira a distancia: nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:53:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial: "))
a = float(input("insira o angulo: "))
D = float(input("insira a distancia: "))
g = 9.8

A = radians(2 * a)
R = ((vo ** 2) * sin(A))/g
	
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 20:53:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("insira velocidade inicial: "))
a = float(input("insira o angulo: "))
D = float(input("insira a distancia: "))
g = 9.8

A = radians(2 * a)
R = ((vo ** 2) * sin(A))/g
	
r = abs(D - R)
if (r < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.138568
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
