== TEST (2019-03-28 10:20:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input="digite o total")

lucro=200*30//100

print(round(lucro,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    total=float(input="digite o total")
TypeError: 'input' is an invalid keyword argument for this function
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:20:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*30//100

print(round(lucro,2))
-- OUTPUT:
60
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:20:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*30//100

print(round(lucro,2))
-- EXECUTION TIME:
0.191604
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
60
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:21:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*30//100

print(round(lucro,2))
-- OUTPUT:
60
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:21:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*30//100

print(round(lucro, 2))
-- OUTPUT:
60
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:21:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*30//100

print(round(lucro, 2))
-- OUTPUT:
60
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:21:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.137038
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
digite o total60
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:21:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.158012
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
60
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:23:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*(30//100)

print(round(lucro, 2))
-- OUTPUT:
60
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:23:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*(30//100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.14735
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:23:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*(30//100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.166045
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:23:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*(30//100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.122616
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:23:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*(30//100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.110652
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:23:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*(30//100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.120842
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:23:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*(30//100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.1108
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:23:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*(30/100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.174338
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
60.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:23:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*(30/100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.181788
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
60.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:23:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*(30/100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.123257
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
60.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:23:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=200*(30/100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.136698
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
60.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:24:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=200*(30//100)

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:24:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:24:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.136408
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:24:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.121594
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:24:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.117933
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:24:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.155145
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:24:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.122372
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:24:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.10223
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:24:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.163097
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:25:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*(30//100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.137008
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:25:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*(30//100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.131439
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:25:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*(30//100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.133817
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:25:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*(30//100)

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:25:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*(30//100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.1188
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:25:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*(30//100)

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:25:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*(30//100)

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:25:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=int(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    total=int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:27:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porgentagem=float(input("digite o porcentagem"))
porcentagem=30//100

lucro=total*porcentagem

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porgentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:28:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porgentagem=float(input("digite o porcentagem"))


lucro=total*(porcentagem//100)

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porgentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:29:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porgentagem=float(input("digite o porcentagem"))


lucro=total*porcentagem//100

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porgentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:29:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porgentagem=float(input("digite o porcentagem"))


lucro=total*porcentagem//100

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porgentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:30:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porgentagem=float(input("digite o porcentagem"))

porcento=porcentagem=30//100
lucro=total*porcento

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porgentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:30:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porgentagem=float(input("digite o porcentagem"))

porcento=30//100
lucro=total*porcento

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porgentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:31:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porgentagem=float(input("digite o porcentagem"))

porcentagem=30//100
lucro=total*porcenttagem

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porgentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:31:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porgentagem=float(input("digite o porcentagem"))

porcentagem=30//100
lucro=total*porcentagem

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porgentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:32:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porgentagem=float(input("digite o porcentagem"))

lucro=(total*porcentagem//100)

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porgentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:32:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porgentagem=float(input("digite o porcentagem"))

lucro=(total*porcentagem//100)

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porgentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:33:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porgentagem=float(input("digite o porcentagem"))

lucro=(total*(porcentagem//100))

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porgentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:33:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porcentagem=float(input("digite o porcentagem"))

lucro=(total*(porcentagem//100))

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porcentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:33:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porcentagem=float(input("digite o porcentagem"))

lucro=total*(porcentagem//100)

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porcentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:33:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porcentagem=float(input("digite o porcentagem"))

lucro=total*(porcentagem//100)

print(round(lucro, 2))
-- EXECUTION TIME:
0.225264
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 5, in <module>
    porcentagem=float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:34:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porcentagem=float(input("digite o porcentagem"))

lucro=total*(porcentagem//100)

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porcentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:34:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porcentagem=float(input("digite o porcentagem"))


lucro=total*(porcentagem//100)

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porcentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:35:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porcentagem=float(input("digite o porcentagem"))


x=total*porcentagem
lucro=x//100

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porcentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:35:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porcentagem=float(input("digite o porcentagem"))


x=total*porcentagem
lucro=x//100

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porcentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:35:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porcentagem=float(input("digite o porcentagem"))


x=total*porcentagem
lucro=x//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.163673
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 5, in <module>
    porcentagem=float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:36:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))
porcentagem=float(input("digite o porcentagem"))


x=porcentagem//100
lucro=x*total

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    porcentagem=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:36:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

porcentagem=float(input("digite o porcentagem"))
total=float(input("digite o total"))

x=porcentagem//100
lucro=x*total

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    total=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:36:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

porcentagem=float(input("digite o porcentagem"))
total=float(input("digite o total"))

x=porcentagem//100
lucro=x*total

print(round(lucro, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    total=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:36:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

porcentagem=float(input("digite o porcentagem"))
total=float(input("digite o total"))

x=porcentagem//100
lucro=x*total

print(round(lucro, 2))
-- EXECUTION TIME:
0.144483
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 6, in <module>
    total=float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:36:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

porcentagem=float(input("digite o porcentagem"))
total=float(input("digite o total"))

x=porcentagem//100
lucro=x*total

print(round(lucro, 2))
-- EXECUTION TIME:
0.181743
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 6, in <module>
    total=float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:36:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

porcentagem=float(input("digite o porcentagem"))
total=float(input("digite o total"))

x=porcentagem//100
lucro=x*total

print(round(lucro, 2))
-- EXECUTION TIME:
0.122453
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1585/1014/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:36:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

porcentagem=float(input("digite o porcentagem"))
total=float(input("digite o total"))

x=porcentagem//100
lucro=x*total

print(round(lucro, 2))
-- EXECUTION TIME:
0.163998
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/1014/main.py", line 6, in <module>
    total=float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:38:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- OUTPUT:
210.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:38:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- OUTPUT:
210.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:38:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.190185
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:38:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.149756
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:38:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.118499
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:38:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=total*30//100

print(round(lucro, 2))
-- EXECUTION TIME:
0.212682
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:38:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=total*30/100

print(round(lucro, 2))
-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:38:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
total=float(input("digite o total"))

lucro=total*30/100

print(round(lucro, 2))
-- EXECUTION TIME:
0.174354
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.15
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
