== TEST (2019-03-26 10:51:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("Digite o numero: "))

mil = num//1000
cem = num//100 - mil
dez = num//10 - (mil + cem)
print(mil + cem + dez)

-- OUTPUT:
917
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:52:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("Digite o numero: "))

mil = num//1000
print(mil)



-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:55:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("Digite o numero: "))

mil = num//1000
cem = num//100 - (mil*10)
dez = num//10 - (mil*100 + cem*10)



-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:55:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("Digite o numero: "))

mil = num//1000
cem = num//100 - (mil*10)
dez = num//10 - (mil*100 + cem*10)

print(mil + cem + dez)


-- OUTPUT:
17
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:57:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("Digite o numero: "))

mil = num//1000
cem = num//100 - (mil*10)
dez = num//10 - (mil*100 + cem*10)
uni = num%3140
print(mil + cem + dez + uni)




-- OUTPUT:
2910
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:57:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("Digite o numero: "))

mil = num//1000
cem = num//100 - (mil*10)
dez = num//10 - (mil*100 + cem*10)
uni = num%3140
print(mil + cem + dez + uni)




-- EXECUTION TIME:
0.144637
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
2910
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1012
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:57:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("Digite o numero: "))

mil = num//1000
cem = num//100 - (mil*10)
dez = num//10 - (mil*100 + cem*10)
uni = num%3140
print(mil + cem + dez + uni)




-- OUTPUT:
2910
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:57:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("Digite o numero: "))

mil = num//1000
cem = num//100 - (mil*10)
dez = num//10 - (mil*100 + cem*10)
uni = num%dez
print(mil + cem + dez + uni)




-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:57:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("Digite o numero: "))

mil = num//1000
cem = num//100 - (mil*10)
dez = num//10 - (mil*100 + cem*10)
uni = num%dez
print(mil + cem + dez + uni)




-- EXECUTION TIME:
0.113057
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
