== TEST (2019-04-04 22:18:45) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if (n == S):
	a = (n+(n*0.1))
else:
	a = n

print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if (n == S):
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:23:44) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if (b == S):
	a = (n+(n*0.1))
else:
	a = n

print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if (b == S):
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:24:26) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if (b == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:24:46) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if (b == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:26:30) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if (upper.(b) == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
-- ERROR:
File "XXXX", line 4
    if (upper.(b) == "S"):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:26:57) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if ((upper.b) == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if ((upper.b) == "S"):
NameError: name 'upper' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:28:03) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if ((upper.(b)) == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
-- ERROR:
File "XXXX", line 4
    if ((upper.(b)) == "S"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:29:42) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if (b == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(upper.b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(upper.b)
NameError: name 'upper' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:30:58) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao s ou n?:")

if (b == "s"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(upper.b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(upper.b)
NameError: name 'upper' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:31:41) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao s ou n?:")

if (b == "s"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(upper. b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(upper. b)
NameError: name 'upper' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:32:27) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao s ou n?:")

if (b == "s"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(upper,b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(upper,b)
NameError: name 'upper' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:34:01) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao s ou n?:")

if (b == "s"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(.upper(b))
-- ERROR:
File "XXXX", line 10
    print(.upper(b))
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:34:19) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao s ou n?:")

if (b == "s"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print.upper(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print.upper(b)
AttributeError: 'builtin_function_or_method' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:36:06) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if (b.upper() == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(b)
-- OUTPUT:
5.5
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:36:40) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if (b.upper() == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(b.upper())
-- OUTPUT:
5.5
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 22:36:57) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if (b.upper() == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(b.upper())
-- EXECUTION TIME:
0.220891
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
S
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
S
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
N
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:37:54) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if (b == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(b)
-- OUTPUT:
5.5
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 22:38:06) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")

if (b == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(b)
-- EXECUTION TIME:
0.159752
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
S
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
S
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
N
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:40:27) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")
b = b.upper()
if (b == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(b)
-- OUTPUT:
5.5
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:40:39) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")
b = b.upper()
if (b == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(b)
-- OUTPUT:
5.5
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:40:51) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")
b = b.upper()
if (b == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(b)
-- OUTPUT:
5.5
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 22:41:07) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")
b = b.upper()
if (b == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
print(b)
-- EXECUTION TIME:
0.149276
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
S
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
S
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
N
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 23:10:16) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")
b = b.upper()
if (b == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
-- EXECUTION TIME:
0.124848
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 22:37:24) 
-- CODE:
n = float(input("nota do aluno:"))
b = input("bonificacao S ou N?:")
b = b.upper()
if (b == "S"):
	a = (n+(n*0.1))
else:
	a = n

print(a)
-- EXECUTION TIME:
0.14286
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
