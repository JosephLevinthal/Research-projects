== TEST (2019-03-21 21:17:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

ordem crescente = int(input(max(6,4,3))
-- ERROR:
File "XXXX", line 5
    ordem crescente = int(input(max(6,4,3))
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:18:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

crescente = int(input(max(6,4,3))
-- ERROR:
File "XXXX", line 6
    
                                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:18:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

n = int(input(max(6,4,3))
-- ERROR:
File "XXXX", line 6
    
                             ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:20:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

-- ERROR:
File "XXXX", line 6
    
                             ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:21:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

int(input(min(c,n,m)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    int(input(min(c,n,m)))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:23:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

int(input(min(c,n,m)))
print (n)
int(input(max(c,m,n)))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    int(input(min(c,n,m)))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:26:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

int(min(c,n,m))
print (n)
int(input(max(c,m,n)))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    int(input(max(c,m,n)))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:27:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

int(min(c,n,m))
print (n)
int(max(c,m,n))


-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:28:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

print(int(min(c,n,m)))
print (n)
print(int(max(c,m,n)))


-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 21:31:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

print(int(min(c,n,m)))
print (n)
print(int(max(c,m,n)))


-- EXECUTION TIME:
0.157041
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:31:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

print(int(min(c,n,m)))
print (n)
print(int(max(c,m,n)))


-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 21:32:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

print(int(min(c,n,m)))
print (n)
print(int(max(c,m,n)))


-- EXECUTION TIME:
0.224746
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:32:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

print(int(min(c,n,m)))
print (m)
print(int(max(c,m,n)))


-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 21:33:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

print(int(min(c,n,m)))
print (m)
print(int(max(c,m,n)))


-- EXECUTION TIME:
0.180042
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:27:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

print(int(min(c,n,m)))
print (m)
print(int(max(c,m,n)))


-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:27:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))

print(int(min(c,n,m)))
print (m)
print(int(max(c,m,n)))


-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 11:29:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))
d = (c + n + m) - (min(c,n,m) + max (c, n ,m ))
print(int(min(c,n,m)))
print (d)
print(int(max(c,m,n)))


-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:29:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

c = int(input(" Digite um numero inteiro: "))
n = int(input(" Digite um numero inteiro: "))
m = int(input(" Digite um numero inteiro: "))
d = (c + n + m) - (min(c,n,m) + max (c, n ,m ))
print(int(min(c,n,m)))
print (d)
print(int(max(c,m,n)))


-- EXECUTION TIME:
0.168484
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:46:18) 
-- CODE:
a = int(input(" Digite um numero: "))
b = int(input(" Digite um numero: "))
c = int(input(" Digite um numero: "))



-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:46:46) 
-- CODE:
a = int(input(" Digite um numero: "))
b = int(input(" Digite um numero: "))
c = int(input(" Digite um numero: "))

print(min(a,b,c))

-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:47:02) 
-- CODE:
a = int(input(" Digite um numero: "))
b = int(input(" Digite um numero: "))
c = int(input(" Digite um numero: "))

print(min(a,b,c))

print(max(a,b,c))

-- OUTPUT:
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:49:21) 
-- CODE:
a = int(input(" Digite um numero: "))
b = int(input(" Digite um numero: "))
c = int(input(" Digite um numero: "))

print(min(a,b,c))
print(a + b + c - (min(a,b,c,) + max(a,b,c))
print(max(a,b,c))

-- ERROR:
File "XXXX", line 7
    print(max(a,b,c))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:49:55) 
-- CODE:
a = int(input(" Digite um numero: "))
b = int(input(" Digite um numero: "))
c = int(input(" Digite um numero: "))

print(min(a,b,c))
print((a + b + c) - (min(a,b,c,) + max(a,b,c)))
print(max(a,b,c))

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:50:07) 
-- CODE:
a = int(input(" Digite um numero: "))
b = int(input(" Digite um numero: "))
c = int(input(" Digite um numero: "))

print(min(a,b,c))
print((a + b + c) - (min(a,b,c,) + max(a,b,c)))
print(max(a,b,c))

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:50:18) 
-- CODE:
a = int(input(" Digite um numero: "))
b = int(input(" Digite um numero: "))
c = int(input(" Digite um numero: "))

print(min(a,b,c))
print((a + b + c) - (min(a,b,c,) + max(a,b,c)))
print(max(a,b,c))

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 21:50:42) 
-- CODE:
a = int(input(" Digite um numero: "))
b = int(input(" Digite um numero: "))
c = int(input(" Digite um numero: "))

print(min(a,b,c))
print((a + b + c) - (min(a,b,c,) + max(a,b,c)))
print(max(a,b,c))

-- EXECUTION TIME:
0.200963
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
