== SUBMITION (2019-04-09 11:40:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

V = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2a)) / 9.8

if ( abs(d - r) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.180667
-- ERROR:
  File "/home/codebench/codes/1637/1055/main.py", line 10
    r = (v*v) * radians(sin(2a)) / 9.8
                             ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:40:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

V = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2a)) / 9.8

if ( abs(d - r) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- ERROR:
File "XXXX", line 10
    r = (v*v) * radians(sin(2a)) / 9.8
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:40:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

V = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2*a)) / 9.8

if ( abs(d - r) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    r = (v*v) * radians(sin(2*a)) / 9.8
NameError: name 'v' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:40:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2*a)) / 9.8

if ( abs(d - r) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:41:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2*a)) / 9.8

if ( abs(d - r) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.258007
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:42:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2*a)) / 9.8

if ( abs(d - r) <= 0.1 or ):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.158221
-- ERROR:
  File "/home/codebench/codes/1637/1055/main.py", line 12
    if ( abs(d - r) <= 0.1 or ):
                              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:42:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2*a)) / 9.8

if ( abs(d - r) <= 0.1 or ):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.150524
-- ERROR:
  File "/home/codebench/codes/1637/1055/main.py", line 12
    if ( abs(d - r) <= 0.1 or ):
                              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:43:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2*a)) / 9.8

if ( abs(d - r) <= 0.1 ):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.174112
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:43:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2*a)) / 9.8

if ( abs(d - r) <= 0.1 ):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:43:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2*a)) / 9.8

if ( abs(d - r) <= 0.1 ):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.155964
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:45:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2*a)) / 9.8

if ( abs(d - r) < 0.1 or d-r == 0):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.227173
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:46:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v*v) * radians(sin(2*a)) / 9.8

if ( abs(d - r) <= 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.202014
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:48:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = (v**2) * radians(sin(2*a)) / 9.8

if ( abs(d - r) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.201681
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:49:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = ((v**2) * (radians(sin(2*a)))) / 9.8

if ( abs(d - r) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.127423
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:49:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = ((v**2) * (radians(sin(2*a)))) / 9.8

if ( abs(d - r) <= 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.180732
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:51:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = ((v**2) * (radians(sin(2*a)))) / 9.8

if ( abs(d - r) <= 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:51:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
d = float(input("Distancia: ")) 

r = ((v**2) * (radians(sin(2*a)))) / 9.8

if ( abs(d - r) <= 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.141514
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:53:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
D = float(input("Distancia: ")) 

R = ((v**2) * (radians(sin(2*a)))) / 9.8

if ( abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.148987
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:09:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
D = float(input("Distancia: ")) 
a = 2*a
R = ((v**2) * (radians(sin(a)))) / 9.8

if ( abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:09:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
D = float(input("Distancia: ")) 
a = 2*a
R = ((v**2) * (radians(sin(a)))) / 9.8

if ( abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.127892
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:11:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
D = float(input("Distancia: ")) 

a = 2*a

R = ((v**2) * (radians(sin(a)))) / 9.8

if ( abs(D - R) <= 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.291263
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:13:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
D = float(input("Distancia: ")) 

a = radinas(a)

R = ((v**2) * sin(a)) / 9.8

if ( abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.198844
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/1055/main.py", line 10, in <module>
    a = radinas(a)
NameError: name 'radinas' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:14:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
D = float(input("Distancia: ")) 

a = radinas(a)

R = ((v**2) * sin(2*a)) / 9.8

if ( abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.249126
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/1055/main.py", line 10, in <module>
    a = radinas(a)
NameError: name 'radinas' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:14:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v = float(input("Velocidade: "))
a = float(input("Angulo: "))
D = float(input("Distancia: ")) 

a = radians(a)

R = ((v**2) * sin(2*a)) / 9.8

if ( abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)
	
-- EXECUTION TIME:
0.137917
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
