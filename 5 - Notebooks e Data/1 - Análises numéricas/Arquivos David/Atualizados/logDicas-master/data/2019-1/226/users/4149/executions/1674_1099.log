== TEST (2019-04-25 10:43:23) 
-- CODE:
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("escaleno")
			
	else:
	print("invalido")
	
else:
	print("invalido")

-- ERROR:
File "XXXX", line 24
    print("invalido")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:44:09) 
-- CODE:
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("escaleno")
			
	else:
	 print("invalido")
	
else:
	print("invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:44:24) 
-- CODE:
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("escaleno")
			
	else:
	 print("invalido")
	
else:
	print("invalido")

-- EXECUTION TIME:
0.180893
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:44:40) 
-- CODE:
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("escaleno")
			
	else:
	 print("invalido")
	
else:
	print("invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:44:49) 
-- CODE:
from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("escaleno")
			
	else:
	 print("invalido")
	
else:
	print("invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:45:23) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("escaleno")
			
	else:
	 print("invalido")
	
else:
	print("invalido")

-- EXECUTION TIME:
0.164986
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:45:35) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("escaleno")
			
	else:
	   print("invalido")
	
else:
	print("invalido")

-- EXECUTION TIME:
0.214696
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:47:12) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("escaleno")
			   else:
					print()
	else:
	   print("invalido")
	
else:
	print("invalido")

-- EXECUTION TIME:
0.145415
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 21
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:47:36) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("escaleno")
					
	else:
	   print("invalido")
	
else:
	print("invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:49:12) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("Tipo de triangulo: isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.156316
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:49:52) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("Tipo de triangulo:equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("Tipo de triangulo:isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("Tipo de triangulo:escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.133425
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:49:56) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("Tipo de triangulo:equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("Tipo de triangulo:isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("Tipo de triangulo:escaleno")
					
	else:
	   print("Tipo de triangulo:invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.197025
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:50:02) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("Tipo de triangulo:equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("Tipo de triangulo:isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("Tipo de triangulo:escaleno")
					
	else:
	   print("Tipo de triangulo:invalido")
	
else:
	print("Tipo de triangulo:invalido")

-- EXECUTION TIME:
0.158466
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:50:03) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("Tipo de triangulo:equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("Tipo de triangulo:isoceles")
			else:
				if((a!=b)and(a!=c)and(b!=c)):
					print("Tipo de triangulo:escaleno")
					
	else:
	   print("Tipo de triangulo:invalido")
	
else:
	print("Tipo de triangulo:invalido")

-- EXECUTION TIME:
0.185614
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:51:29) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("Tipo de triangulo: isoceles")
			else:
				print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.146306
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:51:32) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("Tipo de triangulo: isoceles")
			else:
				print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.183205
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:51:33) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("Tipo de triangulo: isoceles")
			else:
				print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:51:39) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("Tipo de triangulo: isoceles")
			else:
				print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:51:57) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("Tipo de triangulo: isoceles")
			else:
				print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:52:07) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and (b==c)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			
				print("Tipo de triangulo: isoceles")
			else:
				print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.214786
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:55:15) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print("Tipo de triangulo: isoceles")
			else:
				print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.148506
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 16
    else:
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:55:35) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print("Tipo de triangulo: isoceles")
			
			else:
				print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- ERROR:
File "XXXX", line 17
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:55:45) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print("Tipo de triangulo: isoceles")
			
		else:
			print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.147671
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:55:47) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print("Tipo de triangulo: isoceles")
			
		else:
			print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:55:59) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print("Tipo de triangulo: isoceles")
			
		else:
			print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:56:29) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print("Tipo de triangulo: isoceles")
			
		else:
			print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:56:48) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print("Tipo de triangulo: isoceles")
			
		else:
			print("Tipo de triangulo: escaleno")
					
	else:
	   print("Tipo de triangulo: invalido")
	
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:59:41) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo: "
print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isoceles")
			
		else:
			print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- EXECUTION TIME:
0.224791
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:59:44) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo: "
print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isoceles")
			
		else:
			print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:59:51) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo: "
print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isoceles")
			
		else:
			print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:00:10) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isoceles")
			
		else:
			print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- EXECUTION TIME:
0.192276
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:00:11) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isoceles")
			
		else:
			print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- EXECUTION TIME:
0.118281
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:00:23) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<b+c)and(b<a+c)and(c<a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isoceles")
			
		else:
			print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:03:47) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isoceles")
			
		else:
			print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- EXECUTION TIME:
0.129933
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:03:56) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isoceles")
			
		else:
			print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- EXECUTION TIME:
0.134692
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:04:13) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isoceles")
			
		else:
			print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:04:19) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isoceles")
			
		else:
			print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:04:50) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isoceles")
			
		else:
			print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:06:35) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		elif((a==b)or(b==c)or(a==c)):
			print(x,"isosceles")
			
		   else:
			   print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- ERROR:
File "XXXX", line 17
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:07:38) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		else:
			if:((a==b)or(b==c)or(a==c)):
			   print(x,"isosceles")
			
		   else:
		      print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- ERROR:
File "XXXX", line 15
    if:((a==b)or(b==c)or(a==c)):
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:08:05) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			   print(x,"isosceles")
			
		   else:
		      print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- ERROR:
File "XXXX", line 18
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:08:34) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			   print(x,"isosceles")
			
		    else:
		      print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- ERROR:
File "XXXX", line 18
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:08:42) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			   print(x,"isosceles")
			
		       else:
		      print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- ERROR:
File "XXXX", line 18
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:09:03) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			   print(x,"isosceles")
			
		   else:
		      print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- ERROR:
File "XXXX", line 18
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:09:18) 
-- CODE:

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x="Tipo de triangulo:"
print("Entradas:", a, ",", b, ",", c)

if(a<=b+c)and(b<=a+c)and(c<=a+b):
	if ((a>0)and(b>0)and(c>0)):
	# Testa se medidas correspondem aas de um triangulo
		if ((a==b)and(b==c)):
			print(x,"equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
			   print(x,"isosceles")
			
		   else:
				
		      print(x,"escaleno")
					
	else:
	   print(x,"invalido")
	
else:
	print(x,"invalido")

-- ERROR:
File "XXXX", line 18
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:14:43) 
-- CODE:
x=float(input("ladoX "))
y=float(input("lado y "))
z=float(input("ladoz "))
t= "Tipo de triangulo: "
if(a>0)and(b>0)and(c>0):
	if ((x>=y+z) or (y>=x+z) or (z>=y+x)):
		print(x,"invalido")
	else:
		if((x==y)and (y==z)):
			print(x,"equilatero")
		else:
			if((x==y)or(x==z)or(y==z)):
				print(x,"isosceles")
			else:
				print(x,"escaleno")
else:
	print(x,"invalido")
			
			
-- EXECUTION TIME:
0.158689
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1674/1099/main.py", line 5, in <module>
    if(a>0)and(b>0)and(c>0):
NameError: name 'a' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:14:46) 
-- CODE:
x=float(input("ladoX "))
y=float(input("lado y "))
z=float(input("ladoz "))
t= "Tipo de triangulo: "
if(a>0)and(b>0)and(c>0):
	if ((x>=y+z) or (y>=x+z) or (z>=y+x)):
		print(x,"invalido")
	else:
		if((x==y)and (y==z)):
			print(x,"equilatero")
		else:
			if((x==y)or(x==z)or(y==z)):
				print(x,"isosceles")
			else:
				print(x,"escaleno")
else:
	print(x,"invalido")
			
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(a>0)and(b>0)and(c>0):
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:15:15) 
-- CODE:
x=float(input("ladoX "))
y=float(input("lado y "))
z=float(input("ladoz "))
t= "Tipo de triangulo: "
if(a>0)and(b>0)and(c>0):
	if ((x>=y+z) or (y>=x+z) or (z>=y+x)):
		print(t,"invalido")
	else:
		if((x==y)and (y==z)):
			print(t,"equilatero")
		else:
			if((x==y)or(x==z)or(y==z)):
				print(t,"isosceles")
			else:
				print(t,"escaleno")
else:
	print(t,"invalido")
			
			
-- EXECUTION TIME:
0.153623
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1674/1099/main.py", line 5, in <module>
    if(a>0)and(b>0)and(c>0):
NameError: name 'a' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:15:25) 
-- CODE:
x=float(input("ladoX "))
y=float(input("lado y "))
z=float(input("ladoz "))
t= "Tipo de triangulo: "
if(a>0)and(b>0)and(c>0):
	if ((x>=y+z) or (y>=x+z) or (z>=y+x)):
		print(t,"invalido")
	else:
		if((x==y)and (y==z)):
			print(t,"equilatero")
		else:
			if((x==y)or(x==z)or(y==z)):
				print(t,"isosceles")
			else:
				print(t,"escaleno")
else:
	print(t,"invalido")
			
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(a>0)and(b>0)and(c>0):
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:15:52) 
-- CODE:
x=float(input("ladoX "))
y=float(input("lado y "))
z=float(input("ladoz "))
t= "Tipo de triangulo: "
if(x>0)and(y>0)and(z>0):
	if ((x>=y+z) or (y>=x+z) or (z>=y+x)):
		print(t,"invalido")
	else:
		if((x==y)and (y==z)):
			print(t,"equilatero")
		else:
			if((x==y)or(x==z)or(y==z)):
				print(t,"isosceles")
			else:
				print(t,"escaleno")
else:
	print(t,"invalido")
			
			
-- OUTPUT:
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:15:58) 
-- CODE:
x=float(input("ladoX "))
y=float(input("lado y "))
z=float(input("ladoz "))
t= "Tipo de triangulo: "
if(x>0)and(y>0)and(z>0):
	if ((x>=y+z) or (y>=x+z) or (z>=y+x)):
		print(t,"invalido")
	else:
		if((x==y)and (y==z)):
			print(t,"equilatero")
		else:
			if((x==y)or(x==z)or(y==z)):
				print(t,"isosceles")
			else:
				print(t,"escaleno")
else:
	print(t,"invalido")
			
			
-- EXECUTION TIME:
0.281712
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:16:08) 
-- CODE:
x=float(input("ladoX "))
y=float(input("lado y "))
z=float(input("ladoz "))
t= "Tipo de triangulo: "
if(x>0)and(y>0)and(z>0):
	if ((x>=y+z) or (y>=x+z) or (z>=y+x)):
		print(t,"invalido")
	else:
		if((x==y)and (y==z)):
			print(t,"equilatero")
		else:
			if((x==y)or(x==z)or(y==z)):
				print(t,"isosceles")
			else:
				print(t,"escaleno")
else:
	print(t,"invalido")
			
			
-- OUTPUT:
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:18:47) 
-- CODE:
a=float(input("ladoX "))
b=float(input("lado y "))
c=float(input("ladoz "))
t= "Tipo de triangulo: "
if(a>0)and(b>0)and(c>0):
	if ((a>=b+c) or (b>=a+c) or (a>=b+c)):
		print(t,"invalido")
	else:
		if((a==b)and (b==c)):
			print(t,"equilatero")
		else:
			if((a==b)or(a==c)or(b==c)):
				print(t,"isosceles")
			else:
				print(t,"escaleno")
else:
	print(t,"invalido")
			
			
-- OUTPUT:
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:19:29) 
-- CODE:
a=float(input("ladoX "))
b=float(input("lado y "))
c=float(input("ladoz "))
t= "Tipo de triangulo: "
if(a>0)and(b>0)and(c>0):
if ((a>=b+c) or (b>=a+c) or (a>=b+c)):
	print(t,"invalido")
else:
	if((a==b)and (b==c)):
			print(t,"equilatero")
	else:
		if((a==b)or(a==c)or(b==c)):
				print(t,"isosceles")
		else:
				print(t,"escaleno")
else:
	print(t,"invalido")
			
			
-- EXECUTION TIME:
0.163182
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 6
    if ((a>=b+c) or (b>=a+c) or (a>=b+c)):
     ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:28:28) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
	
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(a==c)or(b==c)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print("escaleno")
else:
	print(t,"invalido")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:28:37) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
	
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(a==c)or(b==c)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print("escaleno")
else:
	print(t,"invalido")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 14:29:22) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
	
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(a==c)or(b==c)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print("escaleno")
else:
	print(t,"invalido")
			
-- EXECUTION TIME:
0.132226
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:29:31) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
	
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(a==c)or(b==c)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print("escaleno")
else:
	print(t,"invalido")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:32:25) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
	
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(a==c)or(b==c)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print(t,"escaleno")
elif((a+b<c)or(a+c<b)or(c+b<a)):
	print(t,"invalido")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:32:51) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
	
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(a==c)or(b==c)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print(t,"escaleno")
elif((a+b>c)or(a+c>b)or(c+b>a)):
	print(t,"invalido")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:34:41) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if((a+b>c)or(a+c>b)or(c+b>a)):
	print(t,"invalido")
elif(a<0)or(b<0)or(c<0):
	print(t,"invalido")
	
	elif((a==b)and(b==c)):
		print(t,"equilatero")
	elif((a==b)or(a==c)or(b==c)):
		print(t,"isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		7print(t,"escaleno")

			
-- ERROR:
File "XXXX", line 11
    elif((a==b)and(b==c)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:35:53) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)

			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:42:37) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
elif((a+b<=c)or(a+c<=b)or(b+c<=a)):
	print(t,"invalido")
elif((a==b)and(b==c)):
	print(t,"equilatero")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:45:07) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
elif((a+b<=c)or(a+c<=b)or(b+c<=a)):
	print(t,"invalido")
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(b==c)or(c==a)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print(t,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:45:15) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
elif((a+b<=c)or(a+c<=b)or(b+c<=a)):
	print(t,"invalido")
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(b==c)or(c==a)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print(t,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:45:25) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
elif((a+b<=c)or(a+c<=b)or(b+c<=a)):
	print(t,"invalido")
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(b==c)or(c==a)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print(t,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 14:45:38) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
elif((a+b<=c)or(a+c<=b)or(b+c<=a)):
	print(t,"invalido")
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(b==c)or(c==a)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print(t,"escaleno")
			
-- EXECUTION TIME:
0.190202
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:45:50) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
elif((a+b<=c)or(a+c<=b)or(b+c<=a)):
	print(t,"invalido")
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(b==c)or(c==a)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print(t,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:46:54) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,",",b,",",c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
elif((a+b<=c)or(a+c<=b)or(b+c<=a)):
	print(t,"invalido")
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(b==c)or(c==a)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print(t,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 14:47:01) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,",",b,",",c)
if(a<0)or(b<0)or(c<0):
	print(t,"invalido")
elif((a+b<=c)or(a+c<=b)or(b+c<=a)):
	print(t,"invalido")
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(b==c)or(c==a)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print(t,"escaleno")
			
-- EXECUTION TIME:
0.149916
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:06:20) 
-- CODE:
a=float(input("ladoa "))
b=float(input("lado b "))
c=float(input("ladoc "))
t= "Tipo de triangulo:"
print("Entradas:",a,",",b,",",c)
if(a<0)and(b<0)and(c<0):
	print(t,"invalido")
elif((a+b<=c)or(a+c<=b)or(b+c<=a)):
	print(t,"invalido")
elif((a==b)and(b==c)):
	print(t,"equilatero")
elif((a==b)or(b==c)or(c==a)):
	print(t,"isosceles")
elif((a!=b)and(a!=c)and(b!=c)):
	print(t,"escaleno")
			
-- EXECUTION TIME:
0.143158
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
