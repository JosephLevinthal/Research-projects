== TEST (2019-04-06 18:33:09) 
-- CODE:
# Teste seu código aos poucos.
x = float(input())
y = float(input())

if 2*x+y=3:
	msg = "ponto pertence a reta"
else:
	msg "ponto nao pertence a reta"
	
print(mag=sg)
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

-- ERROR:
File "XXXX", line 5
    if 2*x+y=3:
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 18:33:54) 
-- CODE:
# Teste seu código aos poucos.
x = float(input())
y = float(input())

if (2*x)+y=3:
	msg = "ponto pertence a reta"
else:
	msg "ponto nao pertence a reta"
	
print(mag=sg)
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

-- ERROR:
File "XXXX", line 5
    if (2*x)+y=3:
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 18:34:33) 
-- CODE:
# Teste seu código aos poucos.
x = float(input())
y = float(input())

if (( 2 * x ) + y == 3):
	msg = "ponto pertence a reta"
else:
	msg "ponto nao pertence a reta"
	
print(mag=sg)
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

-- ERROR:
File "XXXX", line 8
    msg "ponto nao pertence a reta"
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 18:35:59) 
-- CODE:
# Teste seu código aos poucos.
x = float(input())
y = float(input())

if (( 2 * x ) + y == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:05:11) 
-- CODE:
# Teste seu código aos poucos.
x = float(input())
y = float(input())

if (( 2 * x ) + y == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:06:13) 
-- CODE:
# Teste seu código aos poucos.
x = float(input())
y = float(input())

if (( 2 * x ) + y == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:11:27) 
-- CODE:
# Teste seu código aos poucos.
x = float(input())
y = float(input())

if (( 2 * x ) + y == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:11:39) 
-- CODE:
# Teste seu código aos poucos.
x = float(input())
y = float(input())

if (( 2 * x ) + y == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

-- EXECUTION TIME:
0.182508
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
