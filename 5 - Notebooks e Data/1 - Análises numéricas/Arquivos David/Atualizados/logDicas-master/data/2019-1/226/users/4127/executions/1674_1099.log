== TEST (2019-04-24 21:13:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

if (a+b>c and b+c>a and a+c>b):
	if(a==b and b==c and a==c):
		print("equilatero")
	else:
		if(a==b and b==c or a==c):
			print("isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print(escaleno)
			else:
				if(a<0 or b<0 or c<0 or a>b+c or b>a+c or c>a+b):
					print("invalido")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:14:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

if (a+b>c and b+c>a and a+c>b):
	if(a==b and b==c and a==c):
		print("equilatero")
	else:
		if(a==b and b==c or a==c):
			print("isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print(escaleno)
			else:
				if(a<0 or b<0 or c<0 or a>b+c or b>a+c or c>a+b):
					print("invalido")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:15:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

if (a+b>c and b+c>a and a+c>b):
	if(a==b and b==c and a==c):
		print("equilatero")
	else:
		if(a==b and b==c or a==c):
			print("isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print("escaleno")
			else:
				if(a<0 or b<0 or c<0 or a>b+c or b>a+c or c>a+b):
					print("invalido")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:16:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

if (a+b>c and b+c>a and a+c>b):
	if(a==b and b==c and a==c):
		print("equilatero")
	else:
		if(a==b and b==c or a==c):
			print("isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print("escaleno")
			else:
				if(a<0 or b<0 or c<0 or a>b+c or b>a+c or c>a+b):
					print("invalido")
-- EXECUTION TIME:
0.134841
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:

-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:17:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

print("Entradas:",a,b,c)
if (a+b>c and b+c>a and a+c>b):
	if(a==b and b==c and a==c):
		print("equilatero")
	else:
		if(a==b and b==c or a==c):
			print("isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print("escaleno")
			else:
				if(a<0 or b<0 or c<0 or a>b+c or b>a+c or c>a+b):
					print("invalido")
-- OUTPUT:
Entradas: 2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:20:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print("invalido")
else:
	if(a==b and b==c and a==c):
		print("equilatero")
	else:
		if(a==b and b==c or a==c):
			print("isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print("escaleno")
			else:
				if(a<0 or b<0 or c<0 or a>b+c or b>a+c or c>a+b):
					print("invalido")
-- OUTPUT:
Entradas: 2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:20:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print("invalido")
else:
	if(a==b and b==c and a==c):
		print("equilatero")
	else:
		if(a==b and b==c or a==c):
			print("isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print("escaleno")
			else:
				if(a<0 or b<0 or c<0 or a>b+c or b>a+c or c>a+b):
					print("invalido")
-- EXECUTION TIME:
0.195799
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:21:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print("invalido")
else:
	if(a==b and b==c and a==c):
		print("equilatero")
	else:
		if(a==b and b==c or a==c):
			print("isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print("escaleno")
			
-- EXECUTION TIME:
0.163373
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:21:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print("invalido")
else:
	if(a==b and b==c and a==c):
		print("equilatero")
	else:
		if(a==b and b==c or a==c):
			print("isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print("escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:22:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c and a==c):
		print(x,"equilatero")
	else:
		if(a==b and b==c or a==c):
			print(x,"isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:22:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c and a==c):
		print(x,"equilatero")
	else:
		if(a==b and b==c or a==c):
			print(x,"isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print(x,"escaleno")
			
-- EXECUTION TIME:
0.140374
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:22:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c and a==c):
		print(x,"equilatero")
	else:
		if(a==b and b==c or a==c):
			print(x,"isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:23:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c and a==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c):
			print(x,"isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print(x,"escaleno")
			
-- EXECUTION TIME:
0.219305
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:23:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c and a==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c):
			print(x,"isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:23:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c and a==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c):
			print(x,"isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:23:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c and a==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c):
			print(x,"isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print(x,"escaleno")
			
-- EXECUTION TIME:
0.222712
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:25:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			if(a!=b and a!=c and b!=c):
				print(x,"escaleno")
			
-- EXECUTION TIME:
0.174024
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:25:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- EXECUTION TIME:
0.15244
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
lado1lado2lado3Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
lado1lado2lado3Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
lado1lado2lado3Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:25:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:26:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:26:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:26:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- EXECUTION TIME:
0.123969
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:27:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b or c<0 or b<0 or a<0):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:27:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b or c<0 or b<0 or a<0):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- EXECUTION TIME:
0.147022
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:03:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b or c<0 or b<0 or a<0):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- EXECUTION TIME:
0.142975
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:04:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b or c<0 or b<0 or a<0):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- EXECUTION TIME:
0.132247
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:04:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1"))
b=float(input("lado2"))
c=float(input("lado3"))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b or c<0 or b<0 or a<0):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:05:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b or c<0 or b<0 or a<0):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- EXECUTION TIME:
0.175142
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:06:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))

x= "Tipo de triangulo:"
print("Entradas:",a,b,c)
if (a>=b+c or b>=a+c or c>=a+b or c<0 or b<0 or a<0):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:07:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))

x= "Tipo de triangulo:"
print("Entradas:",a, ",",b,",",c)
if (a>=b+c or b>=a+c or c>=a+b or c<0 or b<0 or a<0):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:07:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))

x= "Tipo de triangulo:"
print("Entradas:",a, ",",b,",",c)
if (a>=b+c or b>=a+c or c>=a+b or c<0 or b<0 or a<0):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:07:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))

x= "Tipo de triangulo:"
print("Entradas:",a, ",",b,",",c)
if (a>=b+c or b>=a+c or c>=a+b or c<0 or b<0 or a<0):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- EXECUTION TIME:
0.177475
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:53:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado1: "))
b=float(input("lado2: "))
c=float(input("lado3: "))

x= "Tipo de triangulo:"
print("Entradas:",a, ",",b,",",c)
if (a>=b+c or b>=a+c or c>=a+b or c<0 or b<0 or a<0):
	print(x,"invalido")
else:
	if(a==b and b==c):
		print(x,"equilatero")
	else:
		if(a==b or b==c or c==a):
			print(x,"isosceles")
		else:
			print(x,"escaleno")
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
