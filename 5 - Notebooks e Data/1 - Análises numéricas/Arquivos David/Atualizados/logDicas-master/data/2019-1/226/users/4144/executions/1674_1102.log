== SUBMITION (2019-05-01 20:33:07) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import from math *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio dos bojos semiesféricos inferior e superior: "))
print("Entradas", H, ",", h, ",", r)
volc= pi*(r**2)*H
vole= (4/3)*pi*(r**3)
volcal= ((pi/3)*(h**2))*((3*r)-h)


if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		print("Volume; ", round(colcal *1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
-- EXECUTION TIME:
0.178001
-- ERROR:
  File "/home/codebench/codes/1674/1102/main.py", line 6
    import from math *
              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:34:06) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import from math *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio dos bojos semiesféricos inferior e superior: "))
print("Entradas", H, ",", h, ",", r)
volc= pi*(r**2)*H
vole= (4/3)*pi*(r**3)
volcal= ((pi/3)*(h**2))*((3*r)-h)


if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		print("Volume; ", round(colcal *1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.140694
-- ERROR:
  File "/home/codebench/codes/1674/1102/main.py", line 6
    import from math *
              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:40:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import from math *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio dos bojos semiesféricos inferior e superior: "))
print("Entradas", H, ",", h, ",", r)
colcal= ((pi/3)*(h**2))*((3*r)-h)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		print("Volume; ", round(colcal *1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.16822
-- ERROR:
  File "/home/codebench/codes/1674/1102/main.py", line 6
    import from math *
              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:43:05) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import from math*
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio dos bojos semiesféricos inferior e superior: "))
print("Entradas", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.116184
-- ERROR:
  File "/home/codebench/codes/1674/1102/main.py", line 6
    import from math*
              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:43:09) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import from math *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio dos bojos semiesféricos inferior e superior: "))
print("Entradas", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.185601
-- ERROR:
  File "/home/codebench/codes/1674/1102/main.py", line 6
    import from math *
              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:43:26) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import from math *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio dos bojos semiesféricos inferior e superior: "))
print("Entradas", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 6
    import from math *
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:43:48) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio dos bojos semiesféricos inferior e superior: "))
print("Entradas", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:43:50) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio dos bojos semiesféricos inferior e superior: "))
print("Entradas", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.149154
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:43:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio dos bojos semiesféricos inferior e superior: "))
print("Entradas", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.207114
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:44:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio dos bojos semiesféricos inferior e superior: "))
print("Entradas", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:44:42) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio: "))
print("Entradas", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:44:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio: "))
print("Entradas", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:45:12) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio: "))
print("Entradas", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.174344
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:50:39) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio: "))
print("Entradas", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:51:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
H= float(input("altura total do tanque: "))
h= float(input("nivel de combustivel: "))
r= float(input("raio: "))
print("Entradas: ", H, ",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>(2*r))):
	if(h<=r):
		v= ((pi/3)*(h**2))*((3*r)-h)
		print("Volume; ", round(v*1000, 3), "litros")
	elif(r<h and h<=H-r):
		v= (4 * pi * (r**3)/6) + (pi * (r**2) * (h-r))
		print("Volume: ", round(v*1000,3), "litros")
	elif(h>H-r):
		v= ((4 * pi * (r**3)/6) + ((pi/3) * (r**2) * (h-r)) * 2)
		print("Volume: ", round(v*1000,3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.151193
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
