== TEST (2019-04-25 11:06:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
	elif(A==B) or (A==C) or (B==C):
		print("Tipo de triangulo:","isosceles")
		elif(A!=B) or (A!=C) or (B!=C):
			print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- ERROR:
File "XXXX", line 9
    elif(A==B) or (A==C) or (B==C):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:08:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
	elif(A==B) or (A==C) or (B==C):
		print("Tipo de triangulo:","isosceles")
	elif(A!=B) or (A!=C) or (B!=C):
		print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- ERROR:
File "XXXX", line 9
    elif(A==B) or (A==C) or (B==C):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:08:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B) or (A!=C) or (B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:08:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B) or (A!=C) or (B!=C):
	print("Tipo de triangulo:","invalido")
else:
	print("Tipo de triangulo:","invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:09:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B) or (A!=C) or (B!=C):
	print("Tipo de triangulo:","invalido")
else:
	print("Tipo de triangulo:","invalido")
-- EXECUTION TIME:
0.132359
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5 ,
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0 ,
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:10:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:11:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:12:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:12:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:12:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:12:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:12:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if(A==B==C):
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:15:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if (A > 0) and (B > 0) and (C > 0):
		if(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- ERROR:
File "XXXX", line 10
    print("Tipo de triangulo:","equilatero")
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:17:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	print("Tipo de triangulo:","invalido")
elif (A > 0) and (B > 0) and (C > 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- EXECUTION TIME:
0.211047
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5 ,
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0 ,
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:17:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	print("Tipo de triangulo:","invalido")
elif (A > 0) and (B > 0) and (C > 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:17:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	print("Tipo de triangulo:","invalido")
elif (A > 0) and (B > 0) and (C > 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo:","invalido")
-- EXECUTION TIME:
0.211284
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5 ,
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0 ,
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:17:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	print("Tipo de triangulo:","invalido")
elif (A > 0) and (B > 0) and (C > 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")

-- EXECUTION TIME:
0.203741
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5 ,
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0 ,
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:19:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A > B + C) and (B > A + C) and (C > A + B):
	print("Tipo de triangulo:","invalido")
elif (A < 0) and (B < 0) and (C < 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:20:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A > B + C) or (B > A + C) or (C > A + B):
	print("Tipo de triangulo:","invalido")
elif (A < 0) or (B < 0) or (C < 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:20:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A > B + C) or (B > A + C) or (C > A + B):
	print("Tipo de triangulo:","invalido")
elif (A < 0) or (B < 0) or (C < 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")

-- EXECUTION TIME:
0.233215
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5 ,
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0 ,
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:20:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A > B + C) or (B > A + C) or (C > A + B):
	print("Tipo de triangulo:","invalido")
elif (A < 0) or (B < 0) or (C < 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 12:04:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A > B + C) or (B > A + C) or (C > A + B):
	print("Tipo de triangulo:","invalido")
elif (A < 0) or (B < 0) or (C < 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 12:05:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A > B + C) or (B > A + C) or (C > A + B):
	print("Tipo de triangulo:","invalido")
elif (A < 0) or (B < 0) or (C < 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 12:06:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A > B + C) or (B > A + C) or (C > A + B):
	print("Tipo de triangulo:","invalido")
elif (A < 0) or (B < 0) or (C < 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 12:08:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A > B + C) or (B > A + C) or (C > A + B):
	print("Tipo de triangulo:","invalido")
elif (A < 0) or (B < 0) or (C < 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 12:08:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A > B + C) or (B > A + C) or (C > A + B):
	print("Tipo de triangulo:","invalido")
elif (A < 0) or (B < 0) or (C < 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 12:08:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A > B + C) or (B > A + C) or (C > A + B):
	print("Tipo de triangulo:","invalido")
elif (A < 0) or (B < 0) or (C < 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:49:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A > B + C) or (B > A + C) or (C > A + B):
	print("Tipo de triangulo:","invalido")
elif (A < 0) or (B < 0) or (C < 0):
	print("Tipo de triangulo:","invalido")
elif(A==B==C) :
	print("Tipo de triangulo:","equilatero")
elif(A==B) or (A==C) or (B==C):
	print("Tipo de triangulo:","isosceles")
elif(A!=B!=C):
	print("Tipo de triangulo:","escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:57:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(a==b) and (b ==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b and b!=c or b==c and b!=a):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- EXECUTION TIME:
0.201713
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1674/1099/main.py", line 8, in <module>
    if(a==b) and (b ==c):
NameError: name 'a' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:57:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B and B!=C or B==C and B!=A):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:58:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B and B!=C or B==C and B!=A):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- EXECUTION TIME:
0.186506
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5 ,
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0 ,
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:58:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B and B!=C or B==C and B!=A):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:59:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:59:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- EXECUTION TIME:
0.172843
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5 ,
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0 ,
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:00:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:01:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:01:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:01:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- EXECUTION TIME:
0.175977
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5 ,
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0 ,
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:02:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:03:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A) or (A==C) and (C!=B):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- EXECUTION TIME:
0.176532
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5 ,
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0 ,
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:03:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A) or (A==C) and (C!=B):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:03:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A) or (A==C) and (C!=B):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:03:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A) or (A==C) and (C!=B):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:03:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A) or (A==C) and (C!=B):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:03:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A) or (A==C) and (C!=B):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:04:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A) or (A==C) and (C!=B):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:04:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A) or (A==C) and (C!=B):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- EXECUTION TIME:
0.182684
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5 ,
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0 ,
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:04:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C , ",")
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A) or (A==C) and (C!=B):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0 ,
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:05:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sa
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
print("Entradas:", A , ",", B ,",", C )
if (A < B + C) and (B < A + C) and (C < A + B):
	if(A==B) and (B==C):
		print("Tipo de triangulo: equilatero")
	elif(A==B) and (B!=C) or (B==C) and (B!=A) or (A==C) and (C!=B):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")			
-- EXECUTION TIME:
0.217128
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
