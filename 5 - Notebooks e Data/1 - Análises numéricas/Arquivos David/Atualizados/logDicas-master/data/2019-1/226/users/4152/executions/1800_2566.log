== TEST (2019-06-11 17:19:48) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = (seg * size(vet)) / 100
perc2 = (ter * size(vet)) / 100
perc3 = (qua * size(vet)) / 100
perc4 = (qui * size(vet)) / 100
perc5 = (sex * size(vet)) / 100
perc6 = (sab * size(vet)) / 100
vet1[0] = perc1
vet1[1] = perc2
vet1[2] = perc3
vet1[3] = perc4
vet1[4] = perc5
vet1[5] = perc6
print(vet1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:20:49) 
-- CODE:
from numpy import *
vet = array(eval(int(input("Vetor: "))))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = (seg * size(vet)) / 100
perc2 = (ter * size(vet)) / 100
perc3 = (qua * size(vet)) / 100
perc4 = (qui * size(vet)) / 100
perc5 = (sex * size(vet)) / 100
perc6 = (sab * size(vet)) / 100
vet1[0] = perc1
vet1[1] = perc2
vet1[2] = perc3
vet1[3] = perc4
vet1[4] = perc5
vet1[5] = perc6
print(vet1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:21:14) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = (seg * size(vet)) / 100
perc2 = (ter * size(vet)) / 100
perc3 = (qua * size(vet)) / 100
perc4 = (qui * size(vet)) / 100
perc5 = (sex * size(vet)) / 100
perc6 = (sab * size(vet)) / 100
vet1[0] = perc1
vet1[1] = perc2
vet1[2] = perc3
vet1[3] = perc4
vet1[4] = perc5
vet1[5] = perc6
print(vet1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:23:35) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = ((seg * size(vet)) / 100)*100
perc2 = ((ter * size(vet)) / 100)*100
perc3 = ((qua * size(vet)) / 100)*100
perc4 = ((qui * size(vet)) / 100)*100
perc5 = ((sex * size(vet)) / 100)*100
perc6 = ((sab * size(vet)) / 100)*100
vet1[0] = perc1
vet1[1] = perc2
vet1[2] = perc3
vet1[3] = perc4
vet1[4] = perc5
vet1[5] = perc6
print(vet1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 17:23:49) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = ((seg * size(vet)) / 100)*100
perc2 = ((ter * size(vet)) / 100)*100
perc3 = ((qua * size(vet)) / 100)*100
perc4 = ((qui * size(vet)) / 100)*100
perc5 = ((sex * size(vet)) / 100)*100
perc6 = ((sab * size(vet)) / 100)*100
vet1[0] = perc1
vet1[1] = perc2
vet1[2] = perc3
vet1[3] = perc4
vet1[4] = perc5
vet1[5] = perc6
print(vet1)
-- EXECUTION TIME:
1.03731
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[48.  0.  0. 48. 64. 96.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 25.  50. 100. 125. 125. 200.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[26. 13. 39. 13. 26. 52.]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:23:58) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = ((seg * size(vet)) / 100)*100
perc2 = ((ter * size(vet)) / 100)*100
perc3 = ((qua * size(vet)) / 100)*100
perc4 = ((qui * size(vet)) / 100)*100
perc5 = ((sex * size(vet)) / 100)*100
perc6 = ((sab * size(vet)) / 100)*100
vet1[0] = perc1
vet1[1] = perc2
vet1[2] = perc3
vet1[3] = perc4
vet1[4] = perc5
vet1[5] = perc6
print(vet1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:25:20) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = seg * (size(vet) / 100)
perc2 = ter * (size(vet) / 100)
perc3 = qua * (size(vet) / 100)
perc4 = qui * (size(vet) / 100)
perc5 = sex * (size(vet) / 100)
perc6 = sab * (size(vet) / 100)
vet1[0] = perc1
vet1[1] = perc2
vet1[2] = perc3
vet1[3] = perc4
vet1[4] = perc5
vet1[5] = perc6
print(vet1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:26:23) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = seg * (size(vet) / 100)
perc2 = ter * (size(vet) / 100)
perc3 = qua * (size(vet) / 100)
perc4 = qui * (size(vet) / 100)
perc5 = sex * (size(vet) / 100)
perc6 = sab * (size(vet) / 100)
vet1[0] = perc1 * 100
vet1[1] = perc2 * 100
vet1[2] = perc3 * 100
vet1[3] = perc4 * 100
vet1[4] = perc5 * 100
vet1[5] = perc6 * 100
print(vet1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 17:26:41) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = seg * (size(vet) / 100)
perc2 = ter * (size(vet) / 100)
perc3 = qua * (size(vet) / 100)
perc4 = qui * (size(vet) / 100)
perc5 = sex * (size(vet) / 100)
perc6 = sab * (size(vet) / 100)
vet1[0] = perc1 * 100
vet1[1] = perc2 * 100
vet1[2] = perc3 * 100
vet1[3] = perc4 * 100
vet1[4] = perc5 * 100
vet1[5] = perc6 * 100
print(vet1)
-- EXECUTION TIME:
1.17036
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[48.  0.  0. 48. 64. 96.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 25.  50. 100. 125. 125. 200.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[26. 13. 39. 13. 26. 52.]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:29:41) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = round((seg * 100) size(vet), 1)
perc2 = round((ter * 100) size(vet), 1)
perc3 = round((qua * 100) size(vet), 1)
perc4 = round((qui * 100) size(vet), 1)
perc5 = round((sex * 100) size(vet), 1)
perc6 = round((sab * 100) size(vet), 1)
vet1[0] = perc1 * 100
vet1[1] = perc2 * 100
vet1[2] = perc3 * 100
vet1[3] = perc4 * 100
vet1[4] = perc5 * 100
vet1[5] = perc6 * 100
print(vet1)
-- ERROR:
File "XXXX", line 23
    perc1 = round((seg * 100) size(vet), 1)
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:30:22) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = round((seg * 100) / size(vet), 1)
perc2 = round((ter * 100) / size(vet), 1)
perc3 = round((qua * 100) / size(vet), 1)
perc4 = round((qui * 100) / size(vet), 1)
perc5 = round((sex * 100) / size(vet), 1)
perc6 = round((sab * 100) / size(vet), 1)
vet1[0] = perc1 * 100
vet1[1] = perc2 * 100
vet1[2] = perc3 * 100
vet1[3] = perc4 * 100
vet1[4] = perc5 * 100
vet1[5] = perc6 * 100
print(vet1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 17:31:14) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = round((seg * 100) / size(vet), 1)
perc2 = round((ter * 100) / size(vet), 1)
perc3 = round((qua * 100) / size(vet), 1)
perc4 = round((qui * 100) / size(vet), 1)
perc5 = round((sex * 100) / size(vet), 1)
perc6 = round((sab * 100) / size(vet), 1)
vet1[0] = perc1 * 100
vet1[1] = perc2 * 100
vet1[2] = perc3 * 100
vet1[3] = perc4 * 100
vet1[4] = perc5 * 100
vet1[5] = perc6 * 100
print(vet1)
-- EXECUTION TIME:
1.10342
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[1880.    0.    0. 1880. 2500. 3750.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 400.  800. 1600. 2000. 2000. 3200.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[1540.  770. 2310.  770. 1540. 3080.]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 17:31:46) 
-- CODE:
from numpy import *
vet = array(eval(input("Vetor: ")))
vet1 = zeros(6, dtype=float)
seg = 0
ter = 0
qua = 0
qui = 0
sex = 0
sab = 0
for i in range(size(vet)):
	if (vet[i] == 2):
		seg = seg + 1
	elif (vet[i] == 3):
		ter = ter + 1
	elif (vet[i] == 4):
		qua = qua + 1
	elif (vet[i] == 5):
		qui = qui + 1
	elif (vet[i] == 6):
		sex = sex + 1
	elif ( vet[i] == 7):
		sab = sab + 1
perc1 = round((seg * 100) / size(vet), 1)
perc2 = round((ter * 100) / size(vet), 1)
perc3 = round((qua * 100) / size(vet), 1)
perc4 = round((qui * 100) / size(vet), 1)
perc5 = round((sex * 100) / size(vet), 1)
perc6 = round((sab * 100) / size(vet), 1)
vet1[0] = perc1
vet1[1] = perc2
vet1[2] = perc3
vet1[3] = perc4
vet1[4] = perc5
vet1[5] = perc6
print(vet1)
-- EXECUTION TIME:
1.0245
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
