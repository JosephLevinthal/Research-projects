== TEST (2019-04-01 20:13:28) 
-- CODE:
1 = input("nome do objeto: ")
2 = input("numero de repetições do feitiço: ")
print("Abra" + 1*2)

-- ERROR:
File "XXXX", line 1
    1 = input()
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:19:50) 
-- CODE:
a = input("nome do objeto: ")
b = input("numero de repetições do feitiço: ")
print("Abra" + (a*b))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print("Abra" + (a*b))
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:20:40) 
-- CODE:
a = input("nome do objeto: ")
b = input("numero de repeticoes do feitico: ")
print("Abra" + (a*b))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print("Abra" + (a*b))
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:23:33) 
-- CODE:
a = input("nome do objeto: ")
b = input("numero de repeticoes do feitico: ")
print("Abra" + a*b)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print("Abra" + a*b)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:24:29) 
-- CODE:
a = input("nome do objeto: ")
b = input("numero de repeticoes do feitico: ")
print("Abra" + a)

-- OUTPUT:
Abralivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:29:14) 
-- CODE:
a = input("nome do objeto: ")
b = input("numero de repeticoes do feitico: ")
print("Abra porta" *b)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print("Abra porta" *b)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:38:27) 
-- CODE:
a = input("nome do objeto: ")
b = input("numero de repeticoes do feitico: ")
print("Abra " + a*b)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print("Abra " + a*b)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:39:40) 
-- CODE:
a = input("nome do objeto: ")
b = input("numero de repeticoes do feitico: ")
print(("Abra " + a)*b)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(("Abra " + a)*b)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:42:47) 
-- CODE:
a = input("nome do objeto: ")
b = input("numero de repeticoes do feitico: ")
print("Abra " + a)

-- OUTPUT:
Abra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:43:41) 
-- CODE:
a = input("nome do objeto: ")
b = input("numero de repeticoes do feitico: ")
print("Abra " + a)*b

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print("Abra " + a)*b
TypeError: can't multiply sequence by non-int of type 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:49:23) 
-- CODE:
a = input("nome do objeto: ")
b = int(input("numero de repeticoes do feitico: "))
print("Abra " + a)*b

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print("Abra " + a)*b
TypeError: unsupported operand type(s) for *: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:50:13) 
-- CODE:
a = input("nome do objeto: ")
b = int(input("numero de repeticoes do feitico: "))
print("Abra " + a)

-- OUTPUT:
Abra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:50:47) 
-- CODE:
a = input("nome do objeto: ")
b = int(input("numero de repeticoes do feitico: "))
print("Abra " + a(*b))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print("Abra " + a(*b))
TypeError: str object argument after * must be an iterable, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:51:28) 
-- CODE:
a = input("nome do objeto: ")
b = int(input("numero de repeticoes do feitico: "))
print("Abra " + a*b)

-- OUTPUT:
Abra livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:52:03) 
-- CODE:
a = input("nome do objeto: ")
b = int(input("numero de repeticoes do feitico: "))
print("Abra "*b + a*b)

-- OUTPUT:
Abra Abra Abra Abra Abra Abra Abra Abra livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:54:24) 
-- CODE:
a = input("nome do objeto: ")
b = int(input("numero de repeticoes do feitico: "))
print(("Abra " + a)*b)

-- OUTPUT:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:54:53) 
-- CODE:
a = input("nome do objeto: ")
b = int(input("numero de repeticoes do feitico: "))
print(("Abra " + a )*b)

-- OUTPUT:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:55:09) 
-- CODE:
a = input("nome do objeto: ")
b = int(input("numero de repeticoes do feitico: "))
print((" Abra " + a )*b)

-- OUTPUT:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 20:55:27) 
-- CODE:
a = input("nome do objeto: ")
b = int(input("numero de repeticoes do feitico: "))
print((" Abra " + a )*b)

-- EXECUTION TIME:
0.164428
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
Abra carro Abra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
Abra caixa
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
