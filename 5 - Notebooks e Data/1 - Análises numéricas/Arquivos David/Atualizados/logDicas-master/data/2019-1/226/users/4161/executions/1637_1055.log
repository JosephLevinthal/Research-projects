== TEST (2019-04-04 13:18:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 =  float(input("velocidade inicial: "))
a = abs(radians(float(input("angulo em graus: "))))
d = float(input("distancia horizantal: "))
if ((v0**2)*sin(2a) + 0.1>= d >= (v0**2)*sin(2a) - 0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 8
    if ((v0**2)*sin(2a) + 0.1>= d >= (v0**2)*sin(2a) - 0.1):
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:23:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 =  float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
if (abs((((v0**2)*sin(2x))/9,8) - d) <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 8
    if (abs((((v0**2)*sin(2x))/9,8) - d) <= 0.1): 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:24:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 =  float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = abs( (v0**2) * sin(2x) /9,8)
if (r - d <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 8
    r = abs( (v0**2) * sin(2x) /9,8)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:25:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 =  float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = abs( (v0**2) * sin(2x) /9.8)
if (r - d <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 8
    r = abs( (v0**2) * sin(2x) /9.8)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:25:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 =  float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = abs( (v0**2) * sin(2x) /9.8)
if (r - d <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 8
    r = abs( (v0**2) * sin(2x) /9.8)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:25:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 =  float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = abs( (v0**2) * sin(2x) /9.8)
if (r - d <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 8
    r = abs( (v0**2) * sin(2x) /9.8)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:26:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 =  float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = (v0**2) * sin(2x) /9.8
if (r - d <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 8
    r = (v0**2) * sin(2x) /9.8
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:26:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = (v0**2) * sin(2x) /9.8
if (r - d <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 8
    r = (v0**2) * sin(2x) /9.8
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:26:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v = float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = (v**2) * sin(2x) /9.8
if (r - d <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 8
    r = (v**2) * sin(2x) /9.8
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:27:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v = float(input("velocidade inicial: "))
a = (float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = (v**2) * sin(2x) /9.8
if (r - d <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 8
    r = (v**2) * sin(2x) /9.8
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:27:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v = float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
#r = (v**2) * sin(2x) /9.8
if (r - d <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if (r - d <= 0.1): 
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:28:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v = float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = (v**2) * sin(2*x) /9.8
if (r - d <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    r = (v**2) * sin(2*x) /9.8
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:28:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v = float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = (v**2) * sin(2*x) /9.8
if (abs(r - d) <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    r = (v**2) * sin(2*x) /9.8
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:28:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v = float(input("velocidade inicial: "))
a = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = (v**2) * sin(2*x) /9.8
if (abs(r - d) <= 0.1): 
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    r = (v**2) * sin(2*x) /9.8
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:29:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v = float(input("velocidade inicial: "))
x = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = (v**2) * sin(2*x) /9.8
if (abs(r - d) <= 0.1): 
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:30:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v = float(input("velocidade inicial: "))
x = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = (v**2) * sin(2*x) /9.8
if (abs(r - d) <= 0.1): 
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 13:30:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v = float(input("velocidade inicial: "))
x = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = (v**2) * sin(2*x) /9.8
if (abs(r - d) <= 0.1): 
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.149941
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:14:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v = float(input("velocidade inicial: "))
x = radians(float(input("angulo em graus: ")))
d = float(input("distancia horizantal: "))
r = (v**2) * sin(2*x) /9.8
if (abs(r - d) <= 0.1): 
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.14151
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
