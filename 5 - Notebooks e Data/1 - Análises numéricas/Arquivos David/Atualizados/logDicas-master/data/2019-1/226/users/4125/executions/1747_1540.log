== TEST (2019-05-16 10:10:24) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
i1 = 0
j = 0
soma = 0
while(k>0):
	soma = soma + (((x)**j)/(factorial(i*2)))*((-1)**j)
	i = i + 2
	j = j + 1
	k = k - 1
print(round(soma,6))
-- OUTPUT:
0.948634
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:11:36) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
i1 = 0
j = 0
soma = 0
while(k>0):
	soma = soma + (((x)**j)/(factorial(i*2)))*((-1)**j)
	i = i + 2
	j = j + 1
	k = k - 1
print(round(soma,6))
-- OUTPUT:
0.948634
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:12:09) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
i1 = 0
j = 0
soma = 0
while(k>0):
	soma = soma + (((x)**j)/(factorial(i*2)))*((-1)**j)
	i = i + 2
	j = j + 1
	k = k - 1
print(round(soma,6))
-- OUTPUT:
0.948634
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:12:48) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0):
	soma = soma + (((x)**j)/(factorial(i*2 + 2)))*((-1)**j)
	i = i + 1
	j = j + 1
	k = k - 1
print(round(soma,6))
-- OUTPUT:
0.45071
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:13:34) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0):
	soma = soma + (((x)**j)/(factorial(i*2 - 2)))*((-1)**j)
	i = i + 2
	j = j + 1
	k = k - 1
print(round(soma,6))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    soma = soma + (((x)**j)/(factorial(i*2 - 2)))*((-1)**j)
ValueError: factorial() not defined for negative values
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:13:55) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0):
	soma = soma + (((x)**j)/(factorial(i*2 - 2)))*((-1)**j)
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6))
-- ERROR:
File "XXXX", line 14
    
                            ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:14:05) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0):
	soma = soma + (((x)**j)/(factorial(i*2)))*((-1)**j)
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6))
-- ERROR:
File "XXXX", line 14
    
                            ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:14:10) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0):
	soma = soma + (((x)**j)/(factorial(i*2)))*((-1)**j)
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- OUTPUT:
0.948634
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:14:21) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0):
	soma = soma + (((x)**j)/(factorial(i*2)))*((-1)**j)
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- OUTPUT:
0.948634
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:15:09) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + (((x)**j)/(factorial(i*2)))*((-1)**j)
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- OUTPUT:
0.948634
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:15:24) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + (((x)**j)/(factorial(i*2)))*((-1)**j)
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- OUTPUT:
0.948634
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:16:32) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i*2)))*((-1)**j))**0.5
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(abs(round(soma,6)))
TypeError: type complex doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:16:42) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i*2)))*((-1)**j))**0.5
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(abs(round(soma,6)))
TypeError: type complex doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:17:05) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i*2)))*((-1)**j))
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- OUTPUT:
0.948634
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 10:17:22) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i*2)))*((-1)**j))
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- EXECUTION TIME:
0.228002
-- TEST CASE 1:
---- input:
pi**2/8
3

---- correct output:
0.446567
---- user output:
0.948634
-- TEST CASE 2:
---- input:
pi**4/15
3
---- correct output:
-0.489834
---- user output:
0.730465
-- TEST CASE 3:
---- input:
pi**1/2
6
---- correct output:
0.312176
---- user output:
0.934611
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:18:28) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i*2)))*((-1)**j))
	i = i + 2
	j = j + 1
	k = k - 1
	print(abs(round(soma,6)))
-- OUTPUT:
1.0
0.948596
0.948634
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:18:40) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i*2)))*((-1)**j))
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- OUTPUT:
0.948634
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:19:04) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i)))*((-1)**j))
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- OUTPUT:
0.446567
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 10:19:24) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i)))*((-1)**j))
	i = i + 1
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- EXECUTION TIME:
0.185121
-- TEST CASE 1:
---- input:
pi**2/8
3

---- correct output:
0.446567
---- user output:
0.527308
-- TEST CASE 2:
---- input:
pi**4/15
3
---- correct output:
-0.489834
---- user output:
15.591685
-- TEST CASE 3:
---- input:
pi**1/2
6
---- correct output:
0.312176
---- user output:
0.190917
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:19:35) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i)))*((-1)**j))
	i = i + 1
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- OUTPUT:
0.527308
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:20:47) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i)))*((-1)**j))
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- OUTPUT:
0.446567
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 10:20:57) 
-- CODE:
from math import*

x = eval(input("digite o angulo em radianos: "))
k = int(input("digite o numero de termos da serie: "))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i)))*((-1)**j))
	i = i + 2
	j = j + 1
	k = k - 1
print(abs(round(soma,6)))
-- EXECUTION TIME:
0.147246
-- TEST CASE 1:
---- input:
pi**2/8
3

---- correct output:
0.446567
---- user output:
0.446567
-- TEST CASE 2:
---- input:
pi**4/15
3
---- correct output:
-0.489834
---- user output:
0.489834
-- TEST CASE 3:
---- input:
pi**1/2
6
---- correct output:
0.312176
---- user output:
0.312176
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 10:22:29) 
-- CODE:
from math import*

x = abs(eval(input("digite o angulo em radianos: ")))
k = abs(int(input("digite o numero de termos da serie: ")))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i)))*((-1)**j))
	i = i + 2
	j = j + 1
	k = k - 1
print(round(soma,6))
-- OUTPUT:
0.446567
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 10:22:40) 
-- CODE:
from math import*

x = abs(eval(input("digite o angulo em radianos: ")))
k = abs(int(input("digite o numero de termos da serie: ")))
i = 0
j = 0
soma = 0
while(k>0)and(x>=0):
	soma = soma + ((((x)**j)/(factorial(i)))*((-1)**j))
	i = i + 2
	j = j + 1
	k = k - 1
print(round(soma,6))
-- EXECUTION TIME:
0.247626
-- TEST CASE 1:
---- input:
pi**2/8
3

---- correct output:
0.446567
---- user output:
0.446567
-- TEST CASE 2:
---- input:
pi**4/15
3
---- correct output:
-0.489834
---- user output:
-0.489834
-- TEST CASE 3:
---- input:
pi**1/2
6
---- correct output:
0.312176
---- user output:
0.312176
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
