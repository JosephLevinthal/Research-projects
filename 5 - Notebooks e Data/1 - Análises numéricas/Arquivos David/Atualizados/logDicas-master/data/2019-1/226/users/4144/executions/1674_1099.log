== TEST (2019-04-25 10:42:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite um valor: "))
b = float(input("digite um valor: "))
c = float(input("digite um valor: "))
print("Entradas:", a, ",", b, ",", c)
if ((a>0) and (b>0) and (c>0)):
	if((a < b+c) and (b < c+a) and (c < b+a)):
		if((a==b) and (b==c) (c==a)):
			print("Tipo de triangulo: equilatero")
			elif:
				(a==b) and (b==c):
					print("Tipo de triangulo: isosceles")
				else:
					print("Tipo de triangulo: escaleno")
else:
	("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 11
    elif:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite um valor: "))
b = float(input("digite um valor: "))
c = float(input("digite um valor: "))
print("Entradas:", a, ",", b, ",", c)
if ((a>0) and (b>0) and (c>0)):
	if((a < b+c) and (b < c+a) and (c < b+a)):
		if((a==b) and (b==c) (c==a)):
			print("Tipo de triangulo: equilatero")
			else:
				if((a==b) and (b==c)):
					print("Tipo de triangulo: isosceles")
				else:
					print("Tipo de triangulo: escaleno")
else:
	("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 11
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite um valor: "))
b = float(input("digite um valor: "))
c = float(input("digite um valor: "))
print("Entradas:", a, ",", b, ",", c)
if ((a>0) and (b>0) and (c>0)):
	if((a < b+c) and (b < c+a) and (c < b+a)):
		if((a==b) and (b==c) (c==a)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b) and (b==c)):
					print("Tipo de triangulo: isosceles")
				else:
					print("Tipo de triangulo: escaleno")
else:
	("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite um valor: "))
b = float(input("digite um valor: "))
c = float(input("digite um valor: "))
print("Entradas:", a, ",", b, ",", c)
if ((a>0) and (b>0) and (c>0)):
	if((a < b+c) and (b < c+a) and (c < b+a)):
		if((a==b) and (b==c) (c==a)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b) and (b==c)):
					print("Tipo de triangulo: isosceles")
			else:
				print("Tipo de triangulo: escaleno")
else:
	("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:44:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite um valor: "))
b = float(input("digite um valor: "))
c = float(input("digite um valor: "))
print("Entradas:", a, ",", b, ",", c)
if ((a>0) and (b>0) and (c>0)):
	if((a < b+c) and (b < c+a) and (c < b+a)):
		if((a==b) and (b==c) (c==a)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b) and (b==c)):
					print("Tipo de triangulo: isosceles")
			else:
				print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:44:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite um valor: "))
b = float(input("digite um valor: "))
c = float(input("digite um valor: "))
print("Entradas:", a, ",", b, ",", c)
if ((a>0) and (b>0) and (c>0)):
	if((a < b+c) and (b < c+a) and (c < b+a)):
		if((a==b) and (b==c) (c==a)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b) and (b==c)):
					print("Tipo de triangulo: isosceles")
			else:
				print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:44:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite um valor: "))
b = float(input("digite um valor: "))
c = float(input("digite um valor: "))
print("Entradas:", a, ",", b, ",", c)
if ((a>0) and (b>0) and (c>0)):
	if((a < b+c) and (b < c+a) and (c < b+a)):
		if((a==b) and (b==c) (c==a)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b) and (b==c)):
					print("Tipo de triangulo: isosceles")
			else:
				print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.153773
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:49:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite um valor: "))
b = float(input("digite um valor: "))
c = float(input("digite um valor: "))
print("Entradas:", a, ",", b, ",", c)
if ((a>0) and (b>0) and (c>0)):
	if((a < b+c) and (b < c+a) and (c < b+a)):
		if((a==b) and (b==c) and (c==a)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b) or (b==c) or (c==a)):
				print("Tipo de triangulo: isosceles")
			else:
				print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:50:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("digite um valor: "))
b = float(input("digite um valor: "))
c = float(input("digite um valor: "))
print("Entradas:", a, ",", b, ",", c)
if ((a>0) and (b>0) and (c>0)):
	if((a < b+c) and (b < c+a) and (c < b+a)):
		if((a==b) and (b==c) and (c==a)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b) or (b==c) or (c==a)):
				print("Tipo de triangulo: isosceles")
			else:
				print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.156683
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
