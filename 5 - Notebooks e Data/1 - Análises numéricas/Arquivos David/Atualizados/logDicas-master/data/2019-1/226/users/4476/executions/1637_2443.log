== TEST (2019-04-10 20:16:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio: "))
x = float(input("altura: "))
n = int(input("opcao desejada? (1/2) "))

from math import

if (n == 1):
	v = (pi*x**2 * (3*r - x)) / 3
	
else (n == 2):
	v = (4*pi*(r**3)) / 3
-- ERROR:
File "XXXX", line 8
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 20:17:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio: "))
x = float(input("altura: "))
n = int(input("opcao desejada? (1/2) "))

from math import *

if (n == 1):
	v = (pi*x**2 * (3*r - x)) / 3
	print(round(v, 2))
	
else (n == 2):
	v = (4*pi*(r**3)) / 3
	print(round(v, 2))
-- ERROR:
File "XXXX", line 14
    else (n == 2):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 20:18:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio: "))
x = float(input("altura: "))
n = int(input("opcao desejada? (1/2) "))

from math import *

if (n == 1):
	v = (pi*x**2 * (3*r - x)) / 3
	print(round(v, 2))
	
else:
	v = (4*pi*(r**3)) / 3
	print(round(v, 2))
-- OUTPUT:
9.03
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 20:19:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio: "))
x = float(input("altura: "))
n = int(input("opcao desejada? (1/2) "))

from math import *

if (n == 1):
	v = (pi*x**2 * (3*r - x)) / 3
	print(round(v, 4))
	
else:
	v = (4*pi*(r**3)) / 3
	print(round(v, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 20:19:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio: "))
x = float(input("altura: "))
n = int(input("opcao desejada? (1/2) "))

from math import *

if (n == 1):
	v = (pi*x**2 * (3*r - x)) / 3
	print(round(v, 3))
	
else:
	v = (4*pi*(r**3)) / 3
	print(round(v, 3))
-- OUTPUT:
9.026
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 20:20:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio: "))
x = float(input("altura: "))
n = int(input("opcao desejada? (1/2) "))

from math import *

if (n == 1):
	v = (pi*x**2 * (3*r - x)) / 3
	print(round(v, 4))
	
else:
	v = (4*pi*(r**3)) / 3
	print(round(v, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 20:24:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio: "))
x = float(input("altura: "))
n = int(input("opcao desejada? (1/2) "))

from math import *
vt = (4*pi*(r**3)) / 3

va = (pi*x**2 * (3*r - x)) / 3

vc = vt - va


if (n == 1):
	print(round(va, 4))
	
else:
	print(round(vc, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 20:24:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio: "))
x = float(input("altura: "))
n = int(input("opcao desejada? (1/2) "))

from math import *
vt = (4*pi*(r**3)) / 3

va = (pi*x**2 * (3*r - x)) / 3

vc = vt - va


if (n == 1):
	print(round(va, 4))
	
else:
	print(round(vc, 4))
-- EXECUTION TIME:
0.126463
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
