== TEST (2019-04-11 10:43:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(x**2)*(3*r - x))/3
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    v2 = (pi*(x**2)*(3*r - x))/3
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:44:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    v2 = (pi*(x**2)*(3*r - x))/3
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:45:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
print(round(v1,4))
print(round(v2,4))
-- OUTPUT:
179.5944
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:45:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
print(round(v1,4))
print(round(v2,4))
-- EXECUTION TIME:
0.238875
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
310.3391
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:48:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = input("digite a opcao: ")
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
if (x == "opcao 1"):
	print(round(v1,4))
if (x == "opcao 2"):
	print(round(v2,4))
-- OUTPUT:
179.5944
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:49:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = input("digite a opcao: ")
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
if (x == "opcao 1"):
	print(round(v1,4))
if (x == "opcao 2"):
	print(round(v2,4))
-- EXECUTION TIME:
0.131717
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:

-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:49:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = input("digite a opcao: ")
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
if (x == "opcao 1"):
	print(round(v2,4))
if (x == "opcao 2"):
	print(round(v1,4))
-- OUTPUT:
179.5944
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:49:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = input("digite a opcao: ")
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
if (x == "opcao 1"):
	print(round(v2,4))
if (x == "opcao 2"):
	print(round(v1,4))
-- EXECUTION TIME:
0.236015
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:

-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:51:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = input("digite a opcao: ")
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
if (x == "opcao 1"):
	print(round(v1,4))
if (x == "opcao 2"):
	print(round(v2,4))
-- OUTPUT:
179.5944
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:51:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = input("digite a opcao: ")
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
if (x == "opcao 1"):
	print(round(v1,4))
if (x == "opcao 2"):
	print(round(v2,4))
-- OUTPUT:
179.5944
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:52:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = int(input("digite a opcao: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
if (x == 1):
	print(round(v1,4))
if (x == 2):
	print(round(v2,4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:53:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = int(input("digite a opcao: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
if (x == 1):
	print(round(v1,4))
if (x == 2):
	print(round(v2,4))
-- EXECUTION TIME:
0.297981
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:53:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = int(input("digite a opcao: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
if (x == 1):
	print(round(v1,4))
if (x == 2):
	print(round(v2,4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:54:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = radians(float(input(" digite r: "))
h = float(input("digite h: "))
x = int(input("digite a opcao: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
if (x == 1):
	print(round(v1,4))
if (x == 2):
	print(round(v2,4))
-- ERROR:
File "XXXX", line 6
    h = float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:54:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = int(input("digite a opcao: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
if (x == 1):
	print(round(v1,4))
if (x == 2):
	print(round(v2,4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:55:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = int(input("digite a opcao: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
v3  = v2 - v1
if (x == 1):
	print(round(v1,4))
if (x == 2):
	print(round(v3,4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:56:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = int(input("digite a opcao: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
v3  = v1 - v2
if (x == 1):
	print(round(v1,4))
if (x == 2):
	print(round(v3,4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:56:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = int(input("digite a opcao: "))
v1 = (4*pi*(r**3))/3
v2 = (pi*(h**2)*(3*r - h))/3
v3  = v1 - v2
if (x == 1):
	print(round(v1,4))
if (x == 2):
	print(round(v3,4))
-- EXECUTION TIME:
0.170314
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:57:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = int(input("digite a opcao: "))
v2 = (4*pi*(r**3))/3
v1 = (pi*(h**2)*(3*r - h))/3
v3  = v2-v1
if (x == 1):
	print(round(v1,4))
if (x == 2):
	print(round(v3,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:57:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input(" digite r: "))
h = float(input("digite h: "))
x = int(input("digite a opcao: "))
v2 = (4*pi*(r**3))/3
v1 = (pi*(h**2)*(3*r - h))/3
v3  = v2-v1
if (x == 1):
	print(round(v1,4))
if (x == 2):
	print(round(v3,4))
-- EXECUTION TIME:
0.145355
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
