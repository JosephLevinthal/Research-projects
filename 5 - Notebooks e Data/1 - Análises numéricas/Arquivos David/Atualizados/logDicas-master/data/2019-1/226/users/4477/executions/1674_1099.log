== TEST (2019-04-30 10:25:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas: a , b , c")
-- OUTPUT:
Entradas: a , b , c
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:25:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas: (a , b , c)")
-- OUTPUT:
Entradas: (a , b , c)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:26:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:" a , b , c)
-- ERROR:
File "XXXX", line 7
    print ("Entradas:" a , b , c)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:26:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas: " (a , b , c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print ("Entradas: " (a , b , c))
TypeError: 'str' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:26:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas: ", a , b , c
-- ERROR:
File "XXXX", line 8
    
                                  ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:27:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas: "), a , b , c
-- OUTPUT:
Entradas:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:27:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas: ", a , b , c)
-- OUTPUT:
Entradas:  2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:48:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas: ", a, ",", b, ",", c )


-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:49:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:53:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + y) and (b < a + c) and (c > b + a)):
	if (a != y) and (y != z) and (z != a)
	print("Tipo de triangulo: escaleno")
	
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isociles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 10
    if (a != y) and (y != z) and (z != a)
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:53:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + y) and (b < a + c) and (c > b + a)):
	if (a != y) and (y != z) and (z != a):
	print("Tipo de triangulo: escaleno")
	
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isociles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 11
    print("Tipo de triangulo: escaleno")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:53:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + y) and (b < a + c) and (c > b + a)):
	if (a != y) and (y != z) and (z != a):
		print("Tipo de triangulo: escaleno")
	
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isociles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if ((a < c + y) and (b < a + c) and (c > b + a)):
NameError: name 'y' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:54:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + y) and (b < a + c) and (c < b + a)):
	if (a != y) and (y != z) and (z != a):
		print("Tipo de triangulo: escaleno")
	
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isociles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if ((a < c + y) and (b < a + c) and (c < b + a)):
NameError: name 'y' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:54:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a != y) and (y != z) and (z != a):
		print("Tipo de triangulo: escaleno")
	
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isociles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (a != y) and (y != z) and (z != a):
NameError: name 'y' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:54:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a != y) and (y != z) and (z != a):
		print("Tipo de triangulo: escaleno")
	
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isociles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.236903
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1674/1099/main.py", line 10, in <module>
    if (a != y) and (y != z) and (z != a):
NameError: name 'y' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:55:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a != y) and (y != z) and (z != a):
		print("Tipo de triangulo: escaleno")
	
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isociles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (a != y) and (y != z) and (z != a):
NameError: name 'y' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:58:44) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a != b) and (b != c) and (c != a):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isociles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isociles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:58:48) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a != b) and (b != c) and (c != a):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isociles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.115026
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isociles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:01:11) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero)
	else:
		if ((a == b) and (b != c) or (b == c) and (c != a):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.155466
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 9
    print("Tipo de triangulo: equilatero)
                                        ^
SyntaxError: EOL while scanning string literal

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:02:27) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero)
	else:
		if ((a == b) and (b != c) or (b == c) and (c != a):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 9
    print("Tipo de triangulo: equilatero)
                                        ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:03:05) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) and (b != c) or (b == c) and (c != a):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.202337
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 11
    if ((a == b) and (b != c) or (b == c) and (c != a):
                                                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:03:05) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) and (b != c) or (b == c) and (c != a):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 11
    if ((a == b) and (b != c) or (b == c) and (c != a):
                                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:03:58) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) and (b != c) or (b == c) and (c != a)):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.16758
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:03:58) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) and (b != c) or (b == c) and (c != a)):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 10:01:18) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b and b != c) or (b == c and c != a)):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.13759
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 10:01:29) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b and b != c or b == c and c != a)):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.132513
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 10:01:38) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero")
	else:
		if (a == b and b != c or b == c and c != a):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 10:02:54) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if ((a < c + b) and (b < a + c) and (c < b + a)):
	if (a == b) and (b == c):
		print("Tipo de triangulo: equilatero")
	elif (a == b and b != c or b == c and c != a):
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.258076
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 10:04:50) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if (a < c + b and b < a + c and c < b + a):
	if (a == b and b == c):
		print("Tipo de triangulo: equilatero")
	elif (a == b and b != c or b == c and b != a):
		print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.115566
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 10:05:06) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if (a < c + b and b < a + c and c < b + a):
	if (a == b and b == c):
		print("Tipo de triangulo: equilatero")
	elif (a == b and b != c or b == c and b != a):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.172951
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 10:05:06) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if (a < c + b and b < a + c and c < b + a):
	if (a == b and b == c):
		print("Tipo de triangulo: equilatero")
	elif (a == b and b != c or b == c and b != a):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.229151
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 10:05:06) 
-- CODE:
a = float(input("lado x: "))
b = float(input("lado y: "))
c = float(input("lado z: "))

print ("Entradas:", a, ",", b, ",", c )

if (a < c + b and b < a + c and c < b + a):
	if (a == b and b == c):
		print("Tipo de triangulo: equilatero")
	elif (a == b and b != c or b == c and b != a):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
