== TEST (2019-04-30 10:23:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
	elif(a==b=!c)and(a==c=!b)and(b==c=!a):
		print("tipo de triangulo:isosceles")
		elif(a!=b!=c):
			print("tipo de triangulo:escaleno")
		else:
			print("tipos de triangulo:invalido")
			
		


-- ERROR:
File "XXXX", line 9
    elif(a==b=!c)and(a==c=!b)and(b==c=!a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:24:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
	elif(a==b!=c)and(a==c!=b)and(b==c!=a):
		print("tipo de triangulo:isosceles")
		elif(a!=b!=c):
			print("tipo de triangulo:escaleno")
		else:
			print("tipos de triangulo:invalido")
			
		


-- ERROR:
File "XXXX", line 9
    elif(a==b!=c)and(a==c!=b)and(b==c!=a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:25:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)and(a==c!=b)and(b==c!=a):
	print("tipo de triangulo:isosceles")
elif(a!=b!=c):
	print("tipo de triangulo:escaleno")
else:
	print("tipos de triangulo:invalido")
			
		


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipos de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:25:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)and(a==c!=b)and(b==c!=a):
	print("Tipo de triangulo:isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo:escaleno")
else:
	print("Tipos de triangulo:invalido")
			
		


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipos de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:28:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)and(b<a+c)and(c<a+b):
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)and(a==c!=b)and(b==c!=a):
	print("Tipo de triangulo:isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo:escaleno")
else:
	print("Tipos de triangulo:invalido")
			
		


-- ERROR:
File "XXXX", line 8
    elif(a==b)and(b==c)and(a==c):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:30:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)and(b<a+c)and(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)and(a==c!=b)and(b==c!=a):
	print("Tipo de triangulo:isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo:escaleno")
else:
	print("Tipos de triangulo:invalido")
			
		


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:31:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)or(b<a+c)or(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)and(a==c!=b)and(b==c!=a):
	print("Tipo de triangulo:isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo:escaleno")
else:
	print("Tipos de triangulo:invalido")
			
		


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:32:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)or(b<a+c)or(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)and(a==c!=b)and(b==c!=a):
	print("Tipo de triangulo:isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo:escaleno")
else:
	print("Tipos de triangulo:invalido")
			
		


-- EXECUTION TIME:
0.156998
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:33:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)or(b<a+c)or(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)or(a==c!=b)or(b==c!=a):
	print("Tipo de triangulo:isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo:escaleno")
else:
	print("Tipos de triangulo:invalido")
			
		


-- EXECUTION TIME:
0.183129
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:33:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)or(b<a+c)or(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)or(a==c!=b)or(b==c!=a):
	print("Tipo de triangulo:isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo:escaleno")
else:
	print("Tipos de triangulo:invalido")
			
		


-- EXECUTION TIME:
0.140265
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:33:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)or(b<a+c)or(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)or(a==c!=b)or(b==c!=a):
	print("Tipo de triangulo:isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo:escaleno")
else:
	print("Tipos de triangulo:invalido")
			
		


-- EXECUTION TIME:
0.192232
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:34:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)or(b<a+c)or(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)or(a==c!=b)or(b==c!=a):
	print("Tipo de triangulo: isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipos de triangulo: invalido")
			
		


-- EXECUTION TIME:
0.151961
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:34:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)or(b<a+c)or(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)or(a==c!=b)or(b==c!=a):
	print("Tipo de triangulo: isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipos de triangulo: invalido")
			
		


-- EXECUTION TIME:
0.171729
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:34:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)or(b<a+c)or(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)or(a==c!=b)or(b==c!=a):
	print("Tipo de triangulo: isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipos de triangulo: invalido")
			
		


-- EXECUTION TIME:
0.248124
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:35:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)or(b<a+c)or(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)or(a==c!=b)or(b==c!=a):
	print("Tipo de triangulo: isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo: escaleno")

			
		


-- EXECUTION TIME:
0.15944
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:35:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)or(b<a+c)or(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)or(a==c!=b)or(b==c!=a):
	print("Tipo de triangulo: isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo: escaleno")

			
		


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:35:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c)or(b<a+c)or(c<a+b):
	print("Tipo de triangulo: invalido ")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b!=c)or(a==c!=b)or(b==c!=a):
	print("Tipo de triangulo: isosceles")
elif(a!=b!=c):
	print("Tipo de triangulo: escaleno")

			
		


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:35:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	prin("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.146775
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triamgulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
valor de a:valor de b:valor de c:Entradas: 1.0 , 2.0 , 7.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:35:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	prin("Tipo de triangulo: invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:36:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.199028
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triamgulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:36:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:36:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.236302
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:36:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.138226
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:36:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.293269
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triamgulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:36:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.54961
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:36:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.556747
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triamgulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:36:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.555701
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triamgulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:36:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.471027
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:36:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.582054
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1674/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:36:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:36:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triamgulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:39:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a:"))
b = float(input("valor de b:"))
c = float(input("valor de c:"))
print("Entradas:",a,",",b,",",c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if(a==b==c):
		print("Tipo de triangulo: equilatero")
	elif(a==b)or(a==c)or(b==c):
		print("Tipo de triangulo: isosceles")
	elif(a!=b!=c):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.288698
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
