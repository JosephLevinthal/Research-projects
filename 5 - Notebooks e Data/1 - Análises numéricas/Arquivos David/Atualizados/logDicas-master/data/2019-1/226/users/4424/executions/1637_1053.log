== TEST (2019-04-09 10:40:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
cervo=input("digite")
if(cervo % 2 == 0):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = "nao eh patrono do Harry Potter"
	
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(cervo % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:40:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
cervo=input("digite")
if(cervo == cervo):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = "nao eh patrono do Harry Potter"
	
print(mensagem)
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:43:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite")
if(x == cervo):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = "nao eh patrono do Harry Potter"
	
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(x == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:44:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite")
if(x == cervo):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = "nao eh patrono do Harry Potter"
	
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(x == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:45:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite:")
if(x == cervo):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = x +"nao eh patrono do Harry Potter"
	
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(x == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:45:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite:")
if(x = cervo):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = x +"nao eh patrono do Harry Potter"
	
print(mensagem)
-- ERROR:
File "XXXX", line 5
    if(x = cervo):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:45:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite:")
if(x == cervo):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = x , "nao eh patrono do Harry Potter"
	
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(x == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:46:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite:")
if (x == cervo):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = x + "nao eh patrono do Harry Potter"
	
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if (x == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:46:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite:")
if (x == cervo):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = x + "nao eh patrono do Harry Potter"
	
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if (x == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:46:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite:")
if (x == "cervo"):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = x + "nao eh patrono do Harry Potter"
	
print(mensagem)
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:46:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite:")
if (x == "cervo"):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = x + "nao eh patrono do Harry Potter"
	
print(mensagem)
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:46:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite:")
if (x == "cervo"):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = x + "nao eh patrono do Harry Potter"
	
print(mensagem)
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:47:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite:")
if (x == "cervo"):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = x + "nao eh patrono do Harry Potter"
	
print(mensagem)
-- EXECUTION TIME:
0.160961
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
bodenao eh patrono do Harry Potter
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:47:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.cervo = input("Digite um numero: "))
x=input("digite:")
if (x == "cervo"):
	mensagem = "cervo eh patrono do Harry Potter"
else:
	mensagem = x + " nao eh patrono do Harry Potter"
	
print(mensagem)
-- EXECUTION TIME:
0.136575
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
bode nao eh patrono do Harry Potter
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
