== TEST (2019-04-09 11:30:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

vi = float(input("Velocidade inicial: "))
a = int(input("Angulo : "))
b = m/s
g = 9.8

from math import*

R = ((vi**2) * sin(2*a)) / g

print(r)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:31:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

vi = float(input("Velocidade inicial: "))
a = int(input("Angulo : "))
g = 9.8

from math import*

R = ((vi**2) * sin(2*a)) / g

print(r)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:31:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

vi = float(input("Velocidade inicial: "))
a = int(input("Angulo : "))
g = 9.8

from math import*

R = ((vi**2) * sin(2*a)) / g

print(R)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:32:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

vi = float(input("Velocidade inicial: "))
a = int(input("Angulo : "))
g = 9.8

from math import*

R = ((vi**2) * sin(2*a)) / (g)

print(R)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 16:59:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v0 = float(input("Velocidade inicial: "))
a= radians(float(input("Angulo: ")))
d = abs(float(input("Distancia: ")))
g = 9.8

r = ((v0)**2) * sin(2*a)/g

if(r >= d -0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.178713
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:59:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v0 = float(input("Velocidade inicial: "))
a= radians(float(input("Angulo: ")))
d = abs(float(input("Distancia: ")))
g = 9.8

r = ((v0)**2) * sin(2*a)/g

if(r >= d -0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
