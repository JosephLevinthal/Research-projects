== TEST (2019-04-09 10:52:08) 
-- CODE:
#Preço = a
#Pagamento = b

a = float(input("Preco: "))
b = float(input("Pagamento: "))

eq = a - b
eq2 = b - a

if (a > b):
	msg = ("Falta" " " + eq)
else:
	msg = ("Troco de" " " + eq2)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    msg = ("Falta" " " + eq)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:52:14) 
-- CODE:
#Preço = a
#Pagamento = b

a = float(input("Preco: "))
b = float(input("Pagamento: "))

eq = a - b
eq2 = b - a

if (a > b):
	msg = ("Falta" " " + eq)
else:
	msg = ("Troco de" " " + eq2)
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    msg = ("Falta" " " + eq)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:52:34) 
-- CODE:
#Preço = a
#Pagamento = b

a = float(input("Preco: "))
b = float(input("Pagamento: "))

eq = a - b
eq2 = b - a

if (a > b):
	msg = ("Falta" " " + eq)
else:
	msg = ("Troco de" " " + eq2)
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    msg = ("Falta" " " + eq)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:53:29) 
-- CODE:
#Preço = a
#Pagamento = b

a = float(input("Preco: "))
b = float(input("Pagamento: "))

eq = a - b
eq2 = b - a

if (a > b):
	msg = ("Falta" " " + eq)
else:
	msg = ("Troco de" " " + eq2)
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    msg = ("Falta" " " + eq)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:54:12) 
-- CODE:
#Preço = a
#Pagamento = b

a = float(input("Preco: "))
b = float(input("Pagamento: "))

eq = a - b
eq2 = b - a

if (a > b):
	msg = float("Falta" " " + eq)
else:
	msg = float("Troco de" " " + eq2)
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    msg = float("Falta" " " + eq)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:54:49) 
-- CODE:
#Preço = a
#Pagamento = b

a = float(input("Preco: "))
b = float(input("Pagamento: "))

eq = a - b
eq2 = b - a

if (a > b):
	msg = ("Falta" " " + eq)
else:
	msg = ("Troco de" " " + eq2)
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    msg = ("Falta" " " + eq)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:55:18) 
-- CODE:
#Preço = a
#Pagamento = b

a = float(input("Preco: "))
b = float(input("Pagamento: "))

eq = a - b
eq2 = b - a

if (a > b):
	msg = ("Falta" " " + eq)
else:
	msg = ("Troco de"  eq2)
print(round(msg, 2))
-- EXECUTION TIME:
0.15111
-- ERROR:
  File "/home/codebench/codes/1637/2447/main.py", line 13
    msg = ("Troco de"  eq2)
                         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:57:38) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

eq = a - b
eq2 = b - a

if (a > b):
	msg = ("Falta" " " eq)
else:
	msg = ("Troco de" eq2)
print(round(msg, 2))
-- ERROR:
File "XXXX", line 11
    msg = ("Falta" " " eq)
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:58:03) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

eq = a - b
eq2 = b - a

if (a > b):
	msg = ("Falta" " " + eq)
else:
	msg = ("Troco de" + eq2)

print(round(msg, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    eq = a - b
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:01:11) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = float(preco - pagamento)
troco = float(pagamento - preco)

if (a > b):
	msg = ("Falta" " " + resto)
else:
	msg = ("Troco de" + troco)

print(round(msg, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (a > b):
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:01:32) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = float(preco - pagamento)
troco = float(pagamento - preco)

if (preco > pagamento):
	msg = ("Falta" " " + resto)
else:
	msg = ("Troco de" + troco)

print(round(msg, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    msg = ("Falta" " " + resto)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:03:19) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = (preco - pagamento)
troco = (pagamento - preco)

if (preco > pagamento):
	print("Falta" , resto)
else:
	print("Troco de" , troco)

print(round(msg, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    print(round(msg, 2))
NameError: name 'msg' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:03:41) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = (preco - pagamento)
troco = (pagamento - preco)

if (preco > pagamento):
	msg = ("Falta" , resto)
else:
	msg = ("Troco de" , troco)

print(round(msg, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    print(round(msg, 2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:04:24) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = (preco - pagamento)
troco = (pagamento - preco)

if (preco > pagamento):
	msg = ("Falta" + resto)
else:
	msg = ("Troco de" + troco)

print(round(msg, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    msg = ("Falta" + resto)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:04:57) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = (preco - pagamento)
troco = (pagamento - preco)

if (preco > pagamento):
	msg = ("Falta",resto)
else:
	msg = ("Troco de",troco)

print(round(msg, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    print(round(msg, 2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:05:40) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = (preco - pagamento)
troco = (pagamento - preco)

if (preco > pagamento):
	msg = ("Falta",resto)
else:
	msg = ("Troco de",troco)

print(msg, 2)

-- OUTPUT:
('Falta', 26.0) 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:06:10) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = (preco - pagamento)
troco = (pagamento - preco)

if (preco > pagamento):
	msg = "Falta",resto
else:
	msg = "Troco de",troco

print(msg, 2)

-- OUTPUT:
('Falta', 26.0) 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:06:31) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = (preco - pagamento)
troco = (pagamento - preco)

if (preco > pagamento):
	msg = "Falta"+resto
else:
	msg = "Troco de"+troco

print(msg, 2)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    msg = "Falta"+resto
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:07:32) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = (preco - pagamento)
troco = (pagamento - preco)

if (preco > pagamento):
	print(round("Falta"+resto, 2)
else:
	print(round("Troco de"+troco, 2)


-- ERROR:
File "XXXX", line 12
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:07:46) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = (preco - pagamento)
troco = (pagamento - preco)

if (preco > pagamento):
	print(round("Falta"+resto, 2)
else:
	print(round("Troco de"+troco, 2)

-- ERROR:
File "XXXX", line 12
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:08:00) 
-- CODE:
#Preço = a
#Pagamento = b

preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

resto = (preco - pagamento)
troco = (pagamento - preco)

if (preco > pagamento):
	print(round("Falta"+resto, 2)

else:

	print(round("Troco de"+troco, 2)

-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:13:59) 
-- CODE:
#Preço = a
#Pagamento = b

a = float(input("Preco sugerido: "))
b = float(input("Pagamento proposto: "))

if (a > b):
	x = a - b
	round(x, 2)
	msg = "Falta "
else: 
	x = b - a 
	round(x, 2)
	msg = "Troco de "
	
print(msg, x)	
-- OUTPUT:
Falta  26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:14:06) 
-- CODE:
#Preço = a
#Pagamento = b

a = float(input("Preco sugerido: "))
b = float(input("Pagamento proposto: "))

if (a > b):
	x = a - b
	round(x, 2)
	msg = "Falta "
else: 
	x = b - a 
	round(x, 2)
	msg = "Troco de "
	
print(msg, x)	
-- EXECUTION TIME:
0.144768
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta  26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de  28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de  0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
