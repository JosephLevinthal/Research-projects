== TEST (2019-04-09 11:41:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
 from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
c = float(input("distancia horizontal D: "))
g = 9.8**2
r= ((a)**2* sin(2*b))/g
-- ERROR:
File "XXXX", line 4
    from math import*
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:41:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
c = float(input("distancia horizontal D: "))
g = 9.8**2
r= ((a)**2* sin(2*b))/g
-- ERROR:
File "XXXX", line 4
    from math import*
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:42:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
c = float(input("distancia horizontal D: "))
g = 9.8**2
r= ((a)**2* sin(2*b))/g
print(r)
-- OUTPUT:
0.12166933746944023
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:44:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
c = float(input("distancia horizontal D: "))
g = 9.8**2
r= ((a)**2* radians(sin(2*b))/g
print(r)
-- ERROR:
File "XXXX", line 11
    print(r)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:45:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
c = float(input("distancia horizontal D: "))
g = 9.8**2
r = ((a)**2* radians(sin(2*b)))/g
print(r)
-- OUTPUT:
0.0021235305375618377
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:49:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
c = float(input("distancia horizontal D: "))
g = 9.8**2
r = ((a)**2* radians(sin(2*b)))/g
if abs(c-r)< 0.1
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- ERROR:
File "XXXX", line 11
    if abs(c-r)< 0.1
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:49:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
c = float(input("distancia horizontal D: "))
g = 9.8**2
r = ((a)**2* radians(sin(2*b)))/g
if abs(c-r)< 0.1:
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:49:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
c = float(input("distancia horizontal D: "))
g = 9.8**2
r = ((a)**2* radians(sin(2*b)))/g
if abs(c-r)< 0.1:
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- EXECUTION TIME:
0.212007
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:52:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
c = float(input("distancia horizontal D: "))
g = 9.8**2
r = ((a)**2* radians(sin(2*b)))/g
if abs(c-r) <= 0.1:
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:52:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
c = float(input("distancia horizontal D: "))
g = 9.8**2
r = ((a)**2* radians(sin(2*b)))/g
if abs(c-r) <= 0.1:
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- EXECUTION TIME:
0.153914
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:54:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
d = float(input("distancia horizontal D: "))
g = 9.8**2
r = ((a)**2* radians(sin(2*b)))/g
if abs(d-r) < 0.1:
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:58:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
d = float(input("distancia horizontal D: "))
g = 9.8
r = ((a)**2* radians(sin(2*b)))/g
if abs(d-r) < 0.1:
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:59:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
d = float(input("distancia horizontal D: "))
g = 9.8
r = ((a)**2* radians(sin(2*b)))/g
if abs(d-r) < 0.1:
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- EXECUTION TIME:
0.164256
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:08:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = float(input("angulo de alfa: "))
d = float(input("distancia horizontal D: "))
g = 9.8
r = ((a)**2* radians(sin(2*b)))/g
if abs(d-r) < 0.1:
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:10:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = radians(float(input("angulo de alfa: ")))
d = float(input("distancia horizontal D: "))
g = 9.8
r = ((a)**2)*(sin(2*b))/g
if abs(d-r) < 0.1:
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:11:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = radians(float(input("angulo de alfa: ")))
d = abs(float(input("distancia horizontal D: ")))
g = 9.8
r = ((a)**2)*(sin(2*b))/g
if abs(d-r) < 0.1:
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:11:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

a = float(input("velocidade inicial: "))
b = radians(float(input("angulo de alfa: ")))
d = abs(float(input("distancia horizontal D: ")))
g = 9.8
r = ((a)**2)*(sin(2*b))/g
if abs(d-r) < 0.1:
	msg = "sim"
else:
	msg = "nao"
	
print(msg)	
-- EXECUTION TIME:
0.166362
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
