== TEST (2019-05-09 11:12:17) 
-- CODE:
# Instituto de Computacao - UFAM
# Lab 04 - Ex 04
# 20 / 06 / 2016

qi = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0 / 100
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (tempo > 1) and (tempo < t):
	rend = (saldo * juros)
	saldo = saldo + rend
	t = t + 1

print(round(saldo, 2)) # Exibicao de resultados

	

-- OUTPUT:
575.25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:12:55) 
-- CODE:
# Instituto de Computacao - UFAM
# Lab 04 - Ex 04
# 20 / 06 / 2016

qi = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0 
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (tempo > 1) and (tempo < t):
	rend = (saldo * juros) / 100
	saldo = saldo + rend
	t = t + 1

print(round(saldo, 2)) # Exibicao de resultados

	

-- OUTPUT:
575.25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:13:33) 
-- CODE:
# Instituto de Computacao - UFAM
# Lab 04 - Ex 04
# 20 / 06 / 2016

qi = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0 
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (tempo > 1) and (tempo < t):
	rend = saldo * (juros / 100)
	saldo = saldo + rend
	t = t + 1

print(round(saldo, 2)) # Exibicao de resultados

	

-- OUTPUT:
575.25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-09 11:14:24) 
-- CODE:
# Instituto de Computacao - UFAM
# Lab 04 - Ex 04
# 20 / 06 / 2016

qi = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0 
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (tempo > 1) and (tempo < t):
	rend = saldo * (juros / 100)
	saldo = saldo + rend
	t = t + 1

print(round(saldo, 2)) # Exibicao de resultados

	

-- EXECUTION TIME:
0.108668
-- TEST CASE 1:
---- input:
575.25
6
---- correct output:
598.26
622.19
647.08
672.96
699.88
727.87
---- user output:
575.25
-- TEST CASE 2:
---- input:
825.4
3

---- correct output:
858.42
892.75
928.46
---- user output:
825.4
-- TEST CASE 3:
---- input:
1275.65
5
---- correct output:
1326.68
1379.74
1434.93
1492.33
1552.02
---- user output:
1275.65
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:15:14) 
-- CODE:
# Instituto de Computacao - UFAM
# Lab 04 - Ex 04
# 20 / 06 / 2016

qi = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0 
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (tempo > 1 and tempo < t):
	rend = saldo * (juros / 100)
	saldo = saldo + rend
	t = t + 1

	print(round(saldo, 2)) # Exibicao de resultados

	

-- OUTPUT:
575.25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:16:09) 
-- CODE:
# Instituto de Computacao - UFAM
# Lab 04 - Ex 04
# 20 / 06 / 2016

qi = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0 
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (tempo > 1 and t < tempo):
	rend = saldo * (juros / 100)
	saldo = saldo + rend
	t = t + 1

	print(round(saldo, 2)) # Exibicao de resultados

	

-- OUTPUT:
598.26
622.19
647.08
672.96
699.88
727.87
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-09 11:16:16) 
-- CODE:
# Instituto de Computacao - UFAM
# Lab 04 - Ex 04
# 20 / 06 / 2016

qi = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0 
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (tempo > 1 and t < tempo):
	rend = saldo * (juros / 100)
	saldo = saldo + rend
	t = t + 1

	print(round(saldo, 2)) # Exibicao de resultados

	

-- EXECUTION TIME:
0.154448
-- TEST CASE 1:
---- input:
575.25
6
---- correct output:
598.26
622.19
647.08
672.96
699.88
727.87
---- user output:
598.26
622.19
647.08
672.96
699.88
727.87
-- TEST CASE 2:
---- input:
825.4
3

---- correct output:
858.42
892.75
928.46
---- user output:
858.42
892.75
928.46
-- TEST CASE 3:
---- input:
1275.65
5
---- correct output:
1326.68
1379.74
1434.93
1492.33
1552.02
---- user output:
1326.68
1379.74
1434.93
1492.33
1552.02
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
