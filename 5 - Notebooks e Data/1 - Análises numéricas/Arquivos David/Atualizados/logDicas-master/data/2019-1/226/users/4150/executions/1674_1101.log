== TEST (2019-04-25 11:42:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ")

print("Entradas:" a "kwh",  b ,)
-- ERROR:
File "XXXX", line 8
    print("Entradas:" a "kwh",  b ,)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:42:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ")

print("Entradas:" a "kwh",  b )
-- ERROR:
File "XXXX", line 8
    print("Entradas:" a "kwh",  b )
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:43:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ")

print("Entradas:" a "kwh", "e tipo" " ,b " )
-- ERROR:
File "XXXX", line 8
    print("Entradas:" a "kwh", "e tipo" " ,b " )
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:43:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ")

print("Entradas:" a "kwh" "e tipo" b )
-- ERROR:
File "XXXX", line 8
    print("Entradas:" a "kwh" "e tipo" b )
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:44:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ")

print("Entradas:", a , "kwh" "e tipo" , b , )
-- OUTPUT:
Entradas: -56.0 kwhe tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:44:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ")

print("Entradas:", a , "kwh" " e tipo" , b , )
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:46:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ")

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:47:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:47:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:47:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:51:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
elif (a <= 500) and (b == "r" ):
	print("Valor total: R$" a * 0.44 )
	
	
-- ERROR:
File "XXXX", line 13
    print("Valor total: R$" a * 0.44 )
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:52:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
elif (a <= 500) and (b == "r" ):
	print("Valor total: R$" (a * 0.44)) 
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:53:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
elif (a <= 500) and (b == "r" ):
	print("Valor total: R$" (a * 0.44)) 
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:54:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
	if (a <= 500) and (b == "r" ):
		print("Valor total: R$" (a * 0.44)) 
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:54:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
	if (a <= 500) and (b == "r" ):
		print("Valor total: R$" (a * 0.44)) 
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:55:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
else: (a <= 500) and (b == "r" ):
	print("Valor total: R$" (a * 0.44)) 
	
	
-- ERROR:
File "XXXX", line 12
    else: (a <= 500) and (b == "r" ):
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:55:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
else: 
	if (a <= 500) and (b == "r" ):
	print("Valor total: R$" (a * 0.44)) 
	
	
-- ERROR:
File "XXXX", line 14
    print("Valor total: R$" (a * 0.44)) 
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:55:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos")
else: 
	if (a <= 500) and (b == "r" ):
		print("Valor total: R$" (a * 0.44)) 
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:56:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
	if (a <= 500) and (b == "r" ):
		print("Valor total: R$" (a * 0.44)) 
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:57:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
	if (a <= 500) and (b == "R" ):
		print("Valor total: R$" (a * 0.44)) 
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:58:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
	if (a <= 500) and (b == "C" ):
		print("Valor total: R$" (a * 0.65)) 
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:59:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
else:	
	if (a <= 500) and (b == "C" ):
		print("Valor total: R$" (a * 0.65)) 
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:00:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
else:	
	if (a <= 500) and (b == "C" ):
		print("Valor total: R$" 
	
	
-- ERROR:
File "XXXX", line 17
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:00:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
else:	
	if (a <= 500) and (b == "C" ):
		print("Valor total: R$" )
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:01:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
else:	
	if (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$" x )
		
	
	
-- ERROR:
File "XXXX", line 15
    print("Valor total: R$" x )
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:01:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
else:	
	if (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$",x, )
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:10:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$",x, )
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$" ,y,)
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$" ,u,)
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$" ,i,)
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$",p,)
elif(a>5000) and (b=="I"):
		q = a*0.60
		print("Valor total: R$",q,)
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:11:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$",x, )
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$" ,y,)
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$" ,u,)
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$" ,i,)
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$",p,)
elif(a>5000) and (b=="I"):
		q = a*0.60
		print("Valor total: R$",q,)
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:11:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$",x, )
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$" ,y,)
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$" ,u,)
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$" ,i,)
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$",p,)
elif(a>5000) and (b=="I"):
		q = a*0.60
		print("Valor total: R$",q,)
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:15:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print(round("Valor total: R$",x, ,2))
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		print((round("Valor total: R$" ,y, ,2))
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		print((round("Valor total: R$" ,u, ,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print((round("Valor total: R$" ,i, ,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print(round("Valor total: R$",p, ,2))
elif(a>5000) and (b=="I"):
		q = a*0.60
		print(round("Valor total: R$",q, ,2))
		
		
	
	
-- ERROR:
File "XXXX", line 14
    print(round("Valor total: R$",x, ,2))
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:15:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print(round("Valor total: R$",x, 2))
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		print((round("Valor total: R$" ,y, 2))
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		print((round("Valor total: R$" ,u, 2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print((round("Valor total: R$" ,i, 2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print(round("Valor total: R$",p, 2))
elif(a>5000) and (b=="I"):
		q = a*0.60
		print(round("Valor total: R$",q, 2))
		
		
	
	
-- ERROR:
File "XXXX", line 18
    elif (a>=1000) and (b == "C"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:15:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print(round("Valor total: R$",x, 2))
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		print((round("Valor total: R$" ,y, 2))
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		print((round("Valor total: R$" ,u, 2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print((round("Valor total: R$" ,i, 2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print(round("Valor total: R$",p, 2))
elif(a>5000) and (b=="I"):
		q = a*0.60
		print(round("Valor total: R$",q, 2))
		
		
	
	
-- ERROR:
File "XXXX", line 18
    elif (a>=1000) and (b == "C"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:18:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		mensagem = q
print("Valor total: R$" round(mensagem, 2))
		
		
	
	
-- ERROR:
File "XXXX", line 30
    print("Valor total: R$" round(mensagem, 2))
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:18:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		mensagem = q
	print("Valor total: R$" round(mensagem, 2))
		
		
	
	
-- ERROR:
File "XXXX", line 30
    print("Valor total: R$" round(mensagem, 2))
                                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:18:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		mensagem = q
		print("Valor total: R$" round(mensagem, 2))
		
		
	
	
-- ERROR:
File "XXXX", line 30
    print("Valor total: R$" round(mensagem, 2))
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:19:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		mensagem = q
		print(round("Valor total: R$" + mensagem, 2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:19:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		mensagem = q
print(round("Valor total: R$" + mensagem, 2))
		
		
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 30, in <module>
    print(round("Valor total: R$" + mensagem, 2))
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:20:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		mensagem = q
	print(round("Valor total: R$" + mensagem, 2))
		
		
	
	
-- ERROR:
File "XXXX", line 30
    print(round("Valor total: R$" + mensagem, 2))
                                                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:20:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		mensagem = q
		print(round("Valor total: R$" + mensagem, 2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:20:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		print(round("Valor total: R$" + q, 2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:21:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		print(round("Valor total: R$" , q, 2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:21:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		print(round("Valor total: R$" ,q,  , 2))
		
		
	
	
-- ERROR:
File "XXXX", line 29
    print(round("Valor total: R$" ,q,  , 2))
                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:21:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		print(round("Valor total: R$" ,q,  ,2))
		
		
	
	
-- ERROR:
File "XXXX", line 29
    print(round("Valor total: R$" ,q,  ,2))
                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:22:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		print(round("Valor total: R$" q,  ,2))
		
		
	
	
-- ERROR:
File "XXXX", line 29
    print(round("Valor total: R$" q,  ,2))
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:22:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60
		print(round("Valor total: R$" ,q  ,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:22:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = round(a*0.60 ,2)
		print(round("Valor total: R$",q,)
		
		
	
	
-- ERROR:
File "XXXX", line 34
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:24:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = (a*0.60 ,2)
		print(round("Valor total: R$", + q, ,2)
		
		
	
	
-- ERROR:
File "XXXX", line 29
    print(round("Valor total: R$", + q, ,2)
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:24:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = (a*0.60 ,2)
		print(round("Valor total: R$", + q ,2)
		
		
	
	
-- EXECUTION TIME:
0.210795
-- ERROR:
  File "/home/codebench/codes/1674/1101/main.py", line 34
    
     ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:24:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = (a*0.60 ,2)
		print(round("Valor total: R$", + q ,2)
		
		
	
	
-- ERROR:
File "XXXX", line 34
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:24:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print(round("Valor total: R$", round(q,2))
		
		
	
	
-- ERROR:
File "XXXX", line 34
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:25:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:25:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60 
		mensagem = q
print("Valor total: R$", round(mensagem,2))
		
		
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 30, in <module>
    print("Valor total: R$", round(mensagem,2))
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:26:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60 
		mensagem = q
print("Valor total: R$", round(mensagem,2))
		
		
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 30, in <module>
    print("Valor total: R$", round(mensagem,2))
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:26:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60 
		mensagem = q
	print("Valor total: R$", round(mensagem,2))
		
		
	
	
-- ERROR:
File "XXXX", line 30
    print("Valor total: R$", round(mensagem,2))
                                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:26:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		mensagem = x
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		mensagem = y
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		mensagem = u
elif (a>1000) and (b =="C"):
		i = a*0.60
		mensagem = i
elif (a<=5000) and (b=="I"):
		p = a*0.55
		mensagem = p
elif(a>5000) and (b=="I"):
		q = a*0.60 
		mensagem = q
		print("Valor total: R$", round(mensagem,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:27:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:28:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:29:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a>=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a<1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:29:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:29:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (a < 1000) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- EXECUTION TIME:
0.143233
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kwh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kwh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:30:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- EXECUTION TIME:
0.206876
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kwh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kwh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:30:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:31:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:33:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b =! "I") or (b!="I") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- ERROR:
File "XXXX", line 10
    if (a < 0) or (b =! "I") or (b!="I") or (b!="R"):
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:33:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="I") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:34:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="I") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- EXECUTION TIME:
0.0971899
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kwh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kwh e tipo R
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:34:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="I") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:34:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- EXECUTION TIME:
0.179463
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kwh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kwh e tipo R
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:35:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:35:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- EXECUTION TIME:
0.209728
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kwh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kwh e tipo R
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:35:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
		
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:36:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else;
	print("Dados invalidos")
		
	
	
-- ERROR:
File "XXXX", line 30
    else;
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:36:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:37:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(1000<a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:38:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:13:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:14:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:16:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:16:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:17:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )

if (a < 0) or (b != "I") or (b!="C") or (b!="R"):
	print("Dados invalidos") 
elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))

		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:19:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


elif (a <= 500) and (b == "R" ):
		x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))

		
	
	
-- ERROR:
File "XXXX", line 11
    elif (a <= 500) and (b == "R" ):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:19:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))

		
	
	
-- EXECUTION TIME:
0.125061
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kwh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:19:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))

		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:20:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:20:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:20:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- EXECUTION TIME:
0.265647
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kwh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:20:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:20:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:21:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:22:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:22:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- EXECUTION TIME:
0.18987
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kwh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:23:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:26:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:26:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:27:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:28:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	print("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:33:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
		print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))

		
	
	
-- ERROR:
File "XXXX", line 13
    print("Valor total: R$", round(x,2))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:33:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kwh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:35:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:35:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	("Dados invalidos")
		
	
	
-- EXECUTION TIME:
0.135106
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:35:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	("Dados invalidos")
		
	
	
-- EXECUTION TIME:
0.150158
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:35:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:36:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )


if (a <= 500) and (b == "R" ):
	x = a * 0.44
	print("Valor total: R$", round(x,2))
elif (a >500) and (b=="R"):
		y = a * 0.65
		print("Valor total: R$", round(y,2))
elif (a<=1000) and (b == "C"):
		u = a * 0.55
		print("Valor total: R$", round(u,2))
elif (a>1000) and (b =="C"):
		i = a*0.60
		print("Valor total: R$", round(i,2))
elif (a<=5000) and (b=="I"):
		p = a*0.55
		print("Valor total: R$", round(p,2))
elif(a>5000) and (b=="I"):
		q = a*0.60 
		print("Valor total: R$", round(q,2))
else:
	("Dados invalidos")
		
	
	
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:57:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = print(round(a*0.44), 2)
r1	= print(round(a*0.65), 2)	
c =print(round(a*0.55), 2)
c1 = print(round(a*0.60), 2)
i = print(round(a*0.55), 2)
i1 = print(round(a*0.60), 2)

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R")
			print("Valor total: R$", r1)
-- ERROR:
File "XXXX", line 21
    if(a >= 500) and (b=="R")
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:57:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = print(round(a*0.44), 2)
r1	= print(round(a*0.65), 2)	
c =print(round(a*0.55), 2)
c1 = print(round(a*0.60), 2)
i = print(round(a*0.55), 2)
i1 = print(round(a*0.60), 2)

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
-25 2
-36 2
-31 2
-34 2
-31 2
-34 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:59:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = print(round(a*0.44, 2))
r1	= print(round(a*0.65, 2))	
c =print(round(a*0.55, 2))
c1 = print(round(a*0.60, 2))
i = print(round(a*0.55, 2))
i1 = print(round(a*0.60, 2))

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
-24.64
-36.4
-30.8
-33.6
-30.8
-33.6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:59:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:04:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:05:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:07:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or ((a!="R") and (a!="I") and (a!="C")):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:07:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or ((a!="R") and (a!="I") and (a!="C")):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 14:07:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or ((a!="R") and (a!="I") and (a!="C")):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.13412
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:07:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or ((a!="R") and (a!="I") and (a!="C")):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:09:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or ((a!="R") and (a!="I") and (a!="C")):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:09:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or ((a!="R") and (a!="I") and (a!="C")):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:12:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a >0) :
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:12:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a >0) :
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:14:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a >0) :
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	if (a!="R") or (a!="C")  or (a!="I")
		print("Dados invalidos")
-- ERROR:
File "XXXX", line 36
    if (a!="R") or (a!="C")  or (a!="I")
                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:14:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a >0) :
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	if (a!="R") or (a!="C")  or (a!="I"):
		print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:14:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a >0) :
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	if (b!="R") or (b!="C")  or (b!="I"):
		print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:15:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a >0) :
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	(b!="R") or (b!="C")  or (b!="I"):
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 36
    (b!="R") or (b!="C")  or (b!="I"):
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:15:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a >0) :
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	(b!="R") or (b!="C")  or (b!="I")
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:16:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or (b!="R") or (b!="C")  or (b!="I"):
	print("Dados invalidos") 
else:	
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:17:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or (b!="R") or (b!="C")  or (b!="I"):
	print("Dados invalidos") 
else:	
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:17:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or (b!="R") or (b!="C")  or (b!="I"):
	print("Dados invalidos") 
else:	
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 14:17:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or (b!="R") or (b!="C")  or (b!="I"):
	print("Dados invalidos") 
else:	
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)

-- EXECUTION TIME:
0.132017
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:17:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or (b!="R") or (b!="C")  or (b!="I"):
	print("Dados invalidos") 
else:	
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:20:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a < 0) or (b!="R") or (b!="C")  or (b!="I"):
	print("Dados invalidos") 
else:	
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:23:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:26:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	if(b =! "R"):
		print("Dados invalidos")
	else:
		if(b != "C"):
			print("Dados invalidos")
		else:
			if(b != "I"):
				print("Dados invalidos")
-- ERROR:
File "XXXX", line 36
    if(b =! "R"):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:26:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	if(b != "R"):
		print("Dados invalidos")
	else:
		if(b != "C"):
			print("Dados invalidos")
		else:
			if(b != "I"):
				print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:26:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	if(b != "R"):
		print("Dados invalidos")
	else:
		if(b != "C"):
			print("Dados invalidos")
		else:
			if(b != "I"):
				print("Dados invalidos")
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:28:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	(b != "R"):
	print("Dados invalidos")
	
-- ERROR:
File "XXXX", line 36
    (b != "R"):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:29:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (a > 0):
	if(a<500) and (b =="R"):
		print("Valor total: R$", r)
	else:
		if(a >= 500) and (b=="R"):
			print("Valor total: R$", r1)
		else:
			if(a <= 1000) and(b=="C"):
				print("Valor total: R$", c)
			else:
				if(a>1000) and (b=="C"):
					print("Valor total: R$", c1)
				else:
					if(a<=5000) and (b == "I"):
						print("Valor total: R$", i)
					else:
						if(a>5000) and( b=="C"):
							print("Valor total: R$", i1)
else:
	(b != "R") and (b != "I") and (b != "R")  
	print("Dados invalidos")
	
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:33:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (b != "R") and (b != "I") and (b != "C"):
	print("Dados invalidos")
else:
	if (a > 0):
		if(a<500) and (b =="R"):
			print("Valor total: R$", r)
		else:
			if(a >= 500) and (b=="R"):
				print("Valor total: R$", r1)
			else:
				if(a <= 1000) and(b=="C"):
					print("Valor total: R$", c)
				else:
					if(a>1000) and (b=="C"):
						print("Valor total: R$", c1)
					else:
						if(a<=5000) and (b == "I"):
							print("Valor total: R$", i)
						else:
							if(a>5000) and( b=="C"):
								print("Valor total: R$", i1)
	else:
		print("Dados invalidos")
	
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:33:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (b != "R") and (b != "I") and (b != "C"):
	print("Dados invalidos")
else:
	if (a > 0):
		if(a<500) and (b =="R"):
			print("Valor total: R$", r)
		else:
			if(a >= 500) and (b=="R"):
				print("Valor total: R$", r1)
			else:
				if(a <= 1000) and(b=="C"):
					print("Valor total: R$", c)
				else:
					if(a>1000) and (b=="C"):
						print("Valor total: R$", c1)
					else:
						if(a<=5000) and (b == "I"):
							print("Valor total: R$", i)
						else:
							if(a>5000) and( b=="C"):
								print("Valor total: R$", i1)
	else:
		print("Dados invalidos")
	
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:33:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (b != "R") and (b != "I") and (b != "C"):
	print("Dados invalidos")
else:
	if (a > 0):
		if(a<500) and (b =="R"):
			print("Valor total: R$", r)
		else:
			if(a >= 500) and (b=="R"):
				print("Valor total: R$", r1)
			else:
				if(a <= 1000) and(b=="C"):
					print("Valor total: R$", c)
				else:
					if(a>1000) and (b=="C"):
						print("Valor total: R$", c1)
					else:
						if(a<=5000) and (b == "I"):
							print("Valor total: R$", i)
						else:
							if(a>5000) and( b=="C"):
								print("Valor total: R$", i1)
	else:
		print("Dados invalidos")
	
-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 14:33:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

a = float(input("consumo de energia: "))
b = input("tipo de instalacao: ").upper()

print("Entradas:", a , "kWh" " e tipo" , b , )

r = (round(a*0.44, 2))
r1	= (round(a*0.65, 2))	
c =(round(a*0.55, 2))
c1 = (round(a*0.60, 2))
i = (round(a*0.55, 2))
i1 = (round(a*0.60, 2))

if (b != "R") and (b != "I") and (b != "C"):
	print("Dados invalidos")
else:
	if (a > 0):
		if(a<500) and (b =="R"):
			print("Valor total: R$", r)
		else:
			if(a >= 500) and (b=="R"):
				print("Valor total: R$", r1)
			else:
				if(a <= 1000) and(b=="C"):
					print("Valor total: R$", c)
				else:
					if(a>1000) and (b=="C"):
						print("Valor total: R$", c1)
					else:
						if(a<=5000) and (b == "I"):
							print("Valor total: R$", i)
						else:
							if(a>5000) and( b=="C"):
								print("Valor total: R$", i1)
	else:
		print("Dados invalidos")
	
-- EXECUTION TIME:
0.229363
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
