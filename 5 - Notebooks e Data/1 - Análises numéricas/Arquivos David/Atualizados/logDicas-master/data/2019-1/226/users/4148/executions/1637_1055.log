== TEST (2019-04-11 11:08:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("v0: "))
a = float(input("angulo: "))
d = float(input("distancia: ")) 
r = (v0) **2 * sin(radians(2*a))/g

if r==abs(d):
	print("sim")
	
else:
	print("nao")
	



-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:08:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("v0: "))
a = float(input("angulo: "))
d = float(input("distancia: ")) 
r = (v0) **2 * sin(radians(2*a))/g

if r==abs(d):
	print("sim")
	
else:
	print("nao")
	



-- EXECUTION TIME:
0.188748
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:09:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("v0: "))
a = float(input("angulo: "))
d = float(input("distancia: ")) 
r = (v0) **2 * sin(radians(2*a))/g

if abs(r)==d:
	print("sim")
	
else:
	print("nao")
	



-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:09:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("v0: "))
a = float(input("angulo: "))
d = float(input("distancia: ")) 
r = (v0) **2 * sin(radians(2*a))/g

if abs(r)==d:
	print("sim")
	
else:
	print("nao")
	



-- EXECUTION TIME:
0.174904
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:13:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("v0: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
r = (v0) **2 * sin(2*(radians(a))/g
c=abs(r-d)
if : c < 0.1
	print("sim")
	
else:
	print("nao")
	



-- ERROR:
File "XXXX", line 10
    c=abs(r-d)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:14:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("v0: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
r = (v0) **2 * sin(2*(radians(a))/g
F= abs(r-d)
if F < 0.1:
	print("sim")
	
else:
	print("nao")
	



-- ERROR:
File "XXXX", line 10
    F= abs(r-d)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:16:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("v0: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
r = (v0) **2 * sin(2*(radians(a))/g
F = abs(r-d)
if F < 0.1:
			print("sim")	
	
else:
	print("nao")
	



-- ERROR:
File "XXXX", line 10
    F = abs(r-d)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:16:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("v0: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
r = (v0) **2 * sin(2*(radians(a)))/g
F = abs(r-d)
if F < 0.1:
			print("sim")	
	
else:
	print("nao")
	



-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:16:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("v0: "))
a = float(input("angulo: "))
d = float(input("distancia: "))
r = (v0) **2 * sin(2*(radians(a)))/g
F = abs(r-d)
if F < 0.1:
			print("sim")	
	
else:
	print("nao")
	



-- EXECUTION TIME:
0.134464
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
