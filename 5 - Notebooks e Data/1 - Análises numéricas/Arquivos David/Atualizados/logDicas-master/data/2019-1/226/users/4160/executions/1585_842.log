== TEST (2019-03-22 18:09:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var = float(input("Digite um numero de quatro casas: ")
print(var)				
-- ERROR:
File "XXXX", line 6
    print(var)				
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 18:09:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var = float(input("Digite um numero de quatro casas: ")
print ( var )				
-- EXECUTION TIME:
0.171801
-- ERROR:
  File "/home/codebench/codes/1585/842/main.py", line 6
    print ( var )				
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:10:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var = float(input("Digite um numero de quatro casas: / / / /")
print (var)			
-- ERROR:
File "XXXX", line 6
    print (var)			
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:10:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

valor = float(input("Digite um numero de quatro casas: / / / /")
print (valor)			
-- ERROR:
File "XXXX", line 6
    print (valor)			
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:10:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

valor = float(input("Digite um numero de quatro casas: / / / /")
			
-- ERROR:
File "XXXX", line 7
    
       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:11:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

valor = float(input("Digite um número inteiro de quatro dígitos: / / / /")
print (soma de valor)			
-- ERROR:
File "XXXX", line 6
    print (soma de valor)			
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:12:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

valor = float(input("Digite um número inteiro de quatro dígitos: / / / /")
print (soma valor)			
-- ERROR:
File "XXXX", line 6
    print (soma valor)			
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:14:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Digite um número inteiro de um dígitos: ")
y = float(input("Digite um número inteiro de um dígitos: ")
x = float(input("Digite um número inteiro de um dígitos: ")
b = float(input("Digite um número inteiro de um dígitos: ")
print(a + b + c + d)
-- ERROR:
File "XXXX", line 6
    y = float(input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:15:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


x = float(input("Digite um número inteiro de um dígitos: / / / /")
print(x * 4)
-- ERROR:
File "XXXX", line 7
    print(x * 4)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:16:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


x = float(input("Digite um número inteiro de um dígito: ")
print(x * 4)
-- ERROR:
File "XXXX", line 7
    print(x * 4)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:17:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


x = float(input("Digite um número inteiro de um dígito: ")
print x * 4
-- ERROR:
File "XXXX", line 7
    print x * 4
        ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(x * 4)?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:18:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


x = int(input("Digite um numero inteiro de quatro digitos: ")
print(x)

-- ERROR:
File "XXXX", line 7
    print(x)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:19:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


x = int(input("Digite um numero inteiro de quatro digitos: ")
print (x)

-- ERROR:
File "XXXX", line 7
    print (x)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:19:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


x = int(input("Digite um numero inteiro de quatro digitos: ")
print ("x")

-- ERROR:
File "XXXX", line 7
    print ("x")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:21:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("Digite um numero inteiro de quatro digitos: ")
print (x)

-- ERROR:
File "XXXX", line 6
    print (x)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:23:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("Digite um numero inteiro de quatro digitos: ")
print("soma dos dígitos do x")

-- ERROR:
File "XXXX", line 6
    print("soma dos dígitos do x")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:23:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("Digite um numero inteiro de quatro digitos: ")
print("soma dos digitos do x")

-- ERROR:
File "XXXX", line 6
    print("soma dos digitos do x")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:23:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("Digite um numero inteiro de quatro digitos: ")
print(soma dos digitos do x)

-- ERROR:
File "XXXX", line 6
    print(soma dos digitos do x)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:40:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: ")
a = milhar de x 
b = centena	de x  
c = dezena de x
d = unidade de x

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 6
    a = milhar de x 
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:40:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: ")
a = int(" primeiro numero de x "
b = centena	de x  
c = dezena de x
d = unidade de x

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 6
    a = int(" primeiro numero de x "
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:40:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: ")
a = int(" primeiro numero de x ")
b = centena	de x  
c = dezena de x
d = unidade de x

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 6
    a = int(" primeiro numero de x ")
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:41:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: ")
a = int(" primeiro digito de x ")
b = centena	de x  
c = dezena de x
d = unidade de x

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 6
    a = int(" primeiro digito de x ")
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:41:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: ")
a = (" primeiro digito de x ")
b = centena	de x  
c = dezena de x
d = unidade de x

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 6
    a = (" primeiro digito de x ")
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:41:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: ")
a = ("primeiro digito de x")
b = centena	de x  
c = dezena de x
d = unidade de x

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 6
    a = ("primeiro digito de x")
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:42:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: ")
a = ("primeiro digito de x")
b = centena	de x  
c = dezena de x
d = unidade de x

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 6
    a = ("primeiro digito de x")
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:43:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: ")

print (x)	  
b = centena	de x  
c = dezena de x
d = unidade de x

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 7
    print (x)	  
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:16:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: // // // // ")

b = centena	de x  
c = dezena de x
d = unidade de x

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 7
    b = centena	de x  
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:16:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: // // // // "))

b = int(centena de x) 
c = dezena de x
d = unidade de x

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 7
    b = int(centena de x) 
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:17:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: // // // // "))

b = int("primeiro digito de x") 
c = dezena de x
d = unidade de x

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 8
    c = dezena de x
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:19:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: // // // // "))

a = int("primeiro digito de x: ")
b = int("segundo digito de x: ")
c = int("terceiro digito de x: ")
d = int("terceiro digito de x: ")

m = a + b + c + d
print(m)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    a = int("primeiro digito de x: ")
ValueError: invalid literal for int() with base 10: 'primeiro digito de x: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:19:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int("primeiro digito de x: ")
b = int("segundo digito de x: ")
c = int("terceiro digito de x: ")
d = int("terceiro digito de x: ")

m = a + b + c + d
print(m)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    a = int("primeiro digito de x: ")
ValueError: invalid literal for int() with base 10: 'primeiro digito de x: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:21:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = float("primeiro digito de x: ")
b = float("segundo digito de x: ")
c = float("terceiro digito de x: ")
d = float("terceiro digito de x: ")

m = a + b + c + d
print(m)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    a = float("primeiro digito de x: ")
ValueError: could not convert string to float: 'primeiro digito de x: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:23:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = float("primeiro digito de x: ")
b = float("segundo digito de x: ")
c = float("terceiro digito de x: ")
d = float("terceiro digito de x: ")

m = a + b + c + d
print(m)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    a = float("primeiro digito de x: ")
ValueError: could not convert string to float: 'primeiro digito de x: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:24:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = float(primeiro digito de x: )
b = float("segundo digito de x: ")
c = float("terceiro digito de x: ")
d = float("terceiro digito de x: ")

m = a + b + c + d
print(m)

-- ERROR:
File "XXXX", line 7
    a = float(primeiro digito de x: )
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:24:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = float('primeiro digito de x: ')
b = float("segundo digito de x: ")
c = float("terceiro digito de x: ")
d = float("terceiro digito de x: ")

m = a + b + c + d
print(m)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    a = float('primeiro digito de x: ')
ValueError: could not convert string to float: 'primeiro digito de x: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:25:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int('primeiro digito de x: ')
b = float("segundo digito de x: ")
c = float("terceiro digito de x: ")
d = float("terceiro digito de x: ")

m = a + b + c + d
print(m)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    a = int('primeiro digito de x: ')
ValueError: invalid literal for int() with base 10: 'primeiro digito de x: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:29:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

print(x)
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:30:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = int(primeiro digito de x)
print(b)
-- ERROR:
File "XXXX", line 6
    b = int(primeiro digito de x)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:30:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = int("primeiro digito de x")
print(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = int("primeiro digito de x")
ValueError: invalid literal for int() with base 10: 'primeiro digito de x'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:32:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = primeiro digito de x
print(b)
-- ERROR:
File "XXXX", line 6
    b = primeiro digito de x
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:32:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = x * 4
print(b)
-- OUTPUT:
36692
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:32:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = x * 4
print(b)
-- OUTPUT:
36692
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 19:32:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = x * 4
print(b)
-- EXECUTION TIME:
0.135576
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
36692
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4040
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 19:32:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = x * 4
print(b)
-- EXECUTION TIME:
0.188542
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
36692
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4040
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:33:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = ("primeiro de x + segundo de x + terceiro de x + quarto de x")
print(b)
-- OUTPUT:
primeiro de x + segundo de x + terceiro de x + quarto de x
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:34:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = ("primeiro de x")
print(b)
-- OUTPUT:
primeiro de x
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:35:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = ("primeiro de x")
c = (segundo de x )
d = (terceiro de x ) 
e = (quarto de x)

print(b + c + d + e)
-- ERROR:
File "XXXX", line 7
    c = (segundo de x )
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:36:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = ("primeiro de x")
c = ("segundo de x" )
d = ("terceiro de x") 
e = ("quarto de x")

print(b + c + d + e)
-- OUTPUT:
primeiro de xsegundo de xterceiro de xquarto de x
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:38:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = ("primeiro digito de x")
c = ("segundo de x" )&
d = ("terceiro de x") 
e = ("quarto de x")

print(b + c + d + e)
-- ERROR:
File "XXXX", line 7
    c = ("segundo de x" )&
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:38:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = ("primeiro digito de x")
c = ("segundo de x" )
d = ("terceiro de x") 
e = ("quarto de x")

print(b + c + d + e)
-- OUTPUT:
primeiro digito de xsegundo de xterceiro de xquarto de x
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:39:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = ("milhar de x")
c = ("segundo de x" )
d = ("terceiro de x") 
e = ("quarto de x")

print(b + c + d + e)
-- OUTPUT:
milhar de xsegundo de xterceiro de xquarto de x
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:39:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = ("milhar de x: ")
c = ("segundo de x" )
d = ("terceiro de x") 
e = ("quarto de x")

print(b + c + d + e)
-- OUTPUT:
milhar de x: segundo de xterceiro de xquarto de x
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:40:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
b = ("digito 1 de x")
c = ("segundo de x" )
d = ("terceiro de x") 
e = ("quarto de x")
m = (b + c + d + e)
print(m)
-- OUTPUT:
digito 1 de xsegundo de xterceiro de xquarto de x
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:42:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
a = 3
b = 4 
c = 8 
d = 7
print(a + b + c + d)
-- OUTPUT:
22
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 19:42:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))
a = 3
b = 4 
c = 8 
d = 7
print(a + b + c + d)
-- EXECUTION TIME:
0.133493
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
22
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
22
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:44:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: //"))
y = int(input(" Digite um numero inteiro de quatro digitos: //"))
w = int(input(" Digite um numero inteiro de quatro digitos: //"))
p = int(input(" Digite um numero inteiro de quatro digitos: //"))

print(x + y + w + p)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    y = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:48:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de um digito: //"))
y = int(input(" Repita o numero anterior e acrescente um novo digito: //"))
w = int(input(" Repita o numero anterior e acrescente um novo digito: //"))
p = int(input(" Repita o numero anterior e acrescente um novo digito: //"))


print(x + y + w + p)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    y = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:13:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: //"))
print(x)


-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:13:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: //"))
print(soma de x)


-- ERROR:
File "XXXX", line 6
    print(soma de x)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:14:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: //"))
print(int(soma dos digitos de x)


-- ERROR:
File "XXXX", line 6
    print(int(soma dos digitos de x)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:14:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: //"))
print(int("soma dos digitos de x")


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:14:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: //"))
print(int("soma dos digitos de x")

-- ERROR:
File "XXXX", line 7
    
                                      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:14:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: //"))
print(int("soma dos digitos de x")
-- ERROR:
File "XXXX", line 7
    
                                      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:14:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: //"))
print(int(soma dos digitos de x)
-- ERROR:
File "XXXX", line 6
    print(int(soma dos digitos de x)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:14:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: //"))
print(float(soma dos digitos de x)
-- ERROR:
File "XXXX", line 6
    print(float(soma dos digitos de x)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:17:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int(input(" Digite o primeiro digito de x: ")
b = int(input(" Digite o segundo digito de x: ")
c = int(input(" Digite o terceiro digito de x: ")		  
d = int(input(" Digite o quarto digito de x: ")		  

print(a + b + c + d)  
-- ERROR:
File "XXXX", line 8
    b = int(input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:18:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int(input(" Digite o primeiro digito de x: ")
b = int(input(" Digite o segundo digito de x: ")
c = int(input(" Digite o terceiro digito de x: ")		  
d = int(input(" Digite o quarto digito de x: ")		  

print(a + b + c + d)  
-- ERROR:
File "XXXX", line 8
    b = int(input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:19:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int( input(" Digite o primeiro digito de x: ")
b = int( input(" Digite o segundo digito de x: ")
c = int(input(" Digite o terceiro digito de x: ")		  
d = int(input(" Digite o quarto digito de x: ")		  

print(a + b + c + d)  
-- ERROR:
File "XXXX", line 8
    b = int( input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:19:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int( input(" Digite o primeiro digito de x: ")
b = int( input(" Digite o segundo digito de x: ")
c = int(input(" Digite o terceiro digito de x: ")		  
d = int(input(" Digite o quarto digito de x: ")		  

print(a + b + c + d)  
-- ERROR:
File "XXXX", line 8
    b = int( input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:20:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int( input(" Digite o primeiro digito de x: ")
b = int( input(" Digite o digito dois de x: ")
c = int(input(" Digite o terceiro digito de x: ")		  
d = int(input(" Digite o quarto digito de x: ")		  

print(a + b + c + d)  
-- ERROR:
File "XXXX", line 8
    b = int( input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:20:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int( input(" Digite o primeiro digito de x: ")
b = int(input("Digite o segundo digito de x: "))
c = int(input(" Digite o terceiro digito de x: ")		  
d = int(input(" Digite o quarto digito de x: ")		  

print(a + b + c + d)  
-- ERROR:
File "XXXX", line 8
    b = int(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:21:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int( input(" Digite o primeiro digito de x: ")
b = int(input("Digite o segundo digito de x: ")
c = int(input(" Digite o terceiro digito de x: ")		  
d = int(input(" Digite o quarto digito de x: ")		  

print(a + b + c + d)  
-- EXECUTION TIME:
0.181899
-- ERROR:
  File "/home/codebench/codes/1585/842/main.py", line 8
    b = int(input()
    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:21:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int( input(" Digite o primeiro digito de x: ")
b = int(input("Digite o segundo digito de x: ")
c = int(input(" Digite o terceiro digito de x: ")		  
d = int(input(" Digite o quarto digito de x: ")		  

print(a + b + c + d)  
-- ERROR:
File "XXXX", line 8
    b = int(input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:21:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int( input(" Digite o primeiro digito de x: "))
b = int(input("Digite o segundo digito de x: "))
c = int(input(" Digite o terceiro digito de x: "))	  
d = int(input(" Digite o quarto digito de x: "))		  

print(a + b + c + d)  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    a = int( input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:21:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: "))

a = int( input(" Digite o primeiro digito de x: "))
b = int(input("Digite o segundo digito de x: "))
c = int(input(" Digite o terceiro digito de x: "))	  
d = int(input(" Digite o quarto digito de x: "))		  

print(a + b + c + d)  
-- EXECUTION TIME:
0.13649
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/842/main.py", line 7, in <module>
    a = int( input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 10:46:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: a= // b =  //"))


print(a + b )  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(a + b )  
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 10:47:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos: a=   b = "))


print(a + b )  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(a + b )  
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 10:48:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
x // 100

print(x )  
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 10:48:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
x / 100

print(x )  
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 10:48:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
x % 100

print(x )  
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 10:49:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
x % 100

print(x %)  
-- ERROR:
File "XXXX", line 8
    print(x %)  
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:28:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
x % 100

print(x %)  
-- ERROR:
File "XXXX", line 8
    print(x %)  
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:29:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x % 100

print(x )  
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:29:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x % 100

print(y)  
-- OUTPUT:
73
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:30:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 100
b = y // 100
a = b // 100

print(y + b + a)  
-- OUTPUT:
91
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:31:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 100
b = y // 100
a = b // 100

print(y + b + a)  
-- OUTPUT:
91
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:31:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
b = y // 100
a = b // 10

print(y + b + a)  
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:32:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
b = y // 100
a = b // 100

print(y + b + a)  
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:32:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = float(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
b = y // 100
a = b // 100


print(y + b + a)  
-- OUTPUT:
9.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:33:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 100
b = y // 100
a = b // 100


print(y + b + a)  
-- OUTPUT:
91
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 12:33:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 100
b = y // 100
a = b // 100


print(y + b + a)  
-- EXECUTION TIME:
0.258947
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
91
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:33:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 100
b = y // 100
a = b // 100


print(y + b + a)  
-- OUTPUT:
91
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 12:59:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - 310
r = x - 3140


print(y + z + w + r )  
-- EXECUTION TIME:
0.133514
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
6650
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
-2338
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:01:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 10)
r = x - ( x // 10 ) *10


print(y + z + w + r )  
-- OUTPUT:
920
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:02:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 10)
r = x - ( x // 10 ) *10


print(y + z + w + r )  
-- OUTPUT:
920
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:02:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 10)
r = x - ( x // 10 ) *10


print(y + z + w + r )  
-- OUTPUT:
920
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:02:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 10)
r = x - ( x // 10 ) *10


print(y + z + w + r )  
-- OUTPUT:
920
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:02:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 1)
r = x - ( x // 10 ) *10


print(y + z + w + r )  
-- EXECUTION TIME:
0.207557
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
929
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
102
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:02:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 1)
r = x - ( x // 10 ) *10


print(y + z + w + r )  
-- OUTPUT:
929
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:02:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 100)
r = x - ( x // 10 ) *10


print(y + z + w + r )  
-- OUTPUT:
830
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:03:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 100)
r = x - ( x // 10 ) *10


print(y + z + w + r )  
-- OUTPUT:
830
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:03:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 100)
r = x - ( x // 10 ) *10


print(y + z + w + r )  
-- EXECUTION TIME:
0.174978
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
830
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
102
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:03:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 100)
r = x - ( x // 10 ) *10


print(y + z + w + r )  
-- OUTPUT:
830
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:07:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 100) * 10
r = x % w


print(y + z + w + r )  
-- OUTPUT:
-113
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:07:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 100) * 10
r = x % w


print(y + z + w + r )  
-- EXECUTION TIME:
0.194907
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
-113
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
102
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:08:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 100) * 10
r = x % w


print(y + z + w + r )  
-- OUTPUT:
-113
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:09:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (z * 10) * 10
r = x % w


print(y + z + w + r )  
-- OUTPUT:
1013
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:09:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (x * 10)
w = x // 10 - (x * 10) * 10
r = x % w


print(y + z + w + r )  
-- OUTPUT:
-1915223
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:09:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (x * 10)
w = x // 10 - (x * 10) * 10
r = x % w


print(y + z + w + r )  
-- OUTPUT:
-1915223
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:09:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (x * 10)
w = x // 10 - (x * 10) * 10
r = x % w


print(y + z + w + r )  
-- OUTPUT:
-1915223
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:10:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (x * 10) * 10
r = x % w


print(y + z + w + r )  
-- OUTPUT:
-1823583
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (x //100) * 10 
r = x % w


print(y + z + w + r )  
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:11:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (x //100) * 10 
r = x % w


print(y + z + w + r )  
-- EXECUTION TIME:
0.197978
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 11:34:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(" Digite um numero inteiro de quatro digitos:  "))
y = x // 1000
z = x // 100 - (y * 10)
w = x // 10 - (x //100) * 10 
r = x % w 


print(y + z + w + r )  
-- EXECUTION TIME:
0.219755
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:59:44) 
-- CODE:
x = int(input(" Digite um numero inteiro de quatro digitos: "))


-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 22:00:19) 
-- CODE:
x = int(input(" Digite um numero inteiro de quatro digitos: "))
a = x // 1000






print(a)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 22:01:14) 
-- CODE:
x = int(input(" Digite um numero inteiro de quatro digitos: "))
a = x // 1000
b = x // 100 - (a * 10)





print(b)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 22:02:14) 
-- CODE:
x = int(input(" Digite um numero inteiro de quatro digitos: "))
a = x // 1000
b = x // 100 - (a * 10)
c = x // 10 - (a * 100 + b * 10)




print(c)
-- OUTPUT:
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 22:03:13) 
-- CODE:
x = int(input(" Digite um numero inteiro de quatro digitos: "))
a = x // 1000
b = x // 100 - (a * 10)
c = x // 10 - (a * 100 + b * 10)
d = x - (a * 1000 + b * 100 + c * 10)



print(c)
-- OUTPUT:
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 22:03:18) 
-- CODE:
x = int(input(" Digite um numero inteiro de quatro digitos: "))
a = x // 1000
b = x // 100 - (a * 10)
c = x // 10 - (a * 100 + b * 10)
d = x - (a * 1000 + b * 100 + c * 10)



print(d)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 22:03:48) 
-- CODE:
x = int(input(" Digite um numero inteiro de quatro digitos: "))
a = x // 1000
b = x // 100 - (a * 10)
c = x // 10 - (a * 100 + b * 10)
d = x - (a * 1000 + b * 100 + c * 10)

print(a + b + c + d)
-- EXECUTION TIME:
0.129051
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
