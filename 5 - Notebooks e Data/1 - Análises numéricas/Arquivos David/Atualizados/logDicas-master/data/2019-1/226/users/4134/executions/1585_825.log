== TEST (2019-03-21 22:46:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
pi = 3

Equacao1 = from<pi>import * (raio**2)
Equacao2 =(4/3) * from<pi>import * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 8
    Equacao1 = from<pi>import * (raio**2)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:47:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
pi = from<pi>import
Equacao1 = pi * (raio**2)
Equacao2 =(4/3) * pi * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 6
    pi = from<pi>import
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:47:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
pi = from<pi>import
Equacao1 = 3.14 * (raio**2)
Equacao2 =(4/3) * 3.14 * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 6
    pi = from<pi>import
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:48:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
math = from<pi>import
Equacao1 = math * (raio**2)
Equacao2 =(4/3) * math * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 6
    math = from<pi>import
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:48:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
math = from<pi>import
Equacao1 = math * (raio**2)
Equacao2 =(4/3) * math * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 6
    math = from<pi>import
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:49:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
pi = from<math>import
Equacao1 = pi * (raio**2)
Equacao2 =(4/3) * pi * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 6
    pi = from<math>import
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:51:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
pi = from<math.pi>import
Equacao1 = pi * (raio**2)
Equacao2 =(4/3) * pi * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 6
    pi = from<math.pi>import
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:51:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
pi = from <math> import
Equacao1 = pi * (raio**2)
Equacao2 =(4/3) * pi * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 6
    pi = from <math> import
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:52:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
pi = from <pi> import
Equacao1 = pi * (raio**2)
Equacao2 =(4/3) * pi * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 6
    pi = from <pi> import
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:53:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))

Equacao1 = from <match> import * (raio**2)
Equacao2 =(4/3) * from <match> import * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 7
    Equacao1 = from <match> import * (raio**2)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:54:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))

Equacao1 = from <math> import * (raio**2)
Equacao2 =(4/3) * from <math> import * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 7
    Equacao1 = from <math> import * (raio**2)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:54:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
pi = from <math> import
Equacao1 = pi * (raio**2)
Equacao2 =(4/3) * pi * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 6
    pi = from <math> import
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:56:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
Pi = from math import pi
Equacao1 = pi * (raio**2)
Equacao2 =(4/3) * pi * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 6
    Pi = from math import pi
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:56:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
Pi = from math import.pi
Equacao1 = pi * (raio**2)
Equacao2 =(4/3) * pi * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
File "XXXX", line 6
    Pi = from math import.pi
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:01:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
import math
Equacao1 = math.pi * (raio**2)
Equacao2 =(4/3) * math.pi * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(float("Insira aqui o raio: "))
ValueError: could not convert string to float: 'Insira aqui o raio: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:04:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(input("Insira aqui o raio: "))
import math
Equacao1 = math.pi * (raio**2)
Equacao2 =(4/3) * math.pi * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:07:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(input("Insira aqui o raio: "))
import math
Equacao1 = math.pi * (raio**2)
import math
Equacao2 =(4/3) * math.pi * (r**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:10:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(input("Insira aqui o raio: "))
import math
Equacao1 = math.pi * (raio**2)
import math
Equacao2 =(4/3) * math.pi * (raio**3)

print(Equacao1)
print(Equacao2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:10:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(input("Insira aqui o raio: "))
import math
Equacao1 = math.pi * (raio**2)
import math
Equacao2 =(4/3) * math.pi * (raio**3)

print(round(Equacao1, 3))
print(round(Equacao2, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 23:15:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(input("Insira aqui o raio: "))
import math
Equacao1 = math.pi * (raio**2)
import math
Equacao2 =(4/3) * math.pi * (raio**3)

print(round(Equacao1, 3))
print(round(Equacao2, 3))
-- EXECUTION TIME:
0.187171
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/825/main.py", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:15:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(input("Insira aqui o raio: "))
import math
Equacao1 = math.pi * (raio**2)
import math
Equacao2 =(4/3) * math.pi * (raio**3)

print(round(Equacao1, 3))
print(round(Equacao2, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:16:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("Insira aqui o raio: "))
import math
Equacao1 = math.pi * (raio**2)
import math
Equacao2 =(4/3) * math.pi * (raio**3)

print(round(Equacao1, 3))
print(round(Equacao2, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(float("Insira aqui o raio: "))
ValueError: could not convert string to float: 'Insira aqui o raio: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:16:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = int(float("radio:"))
import math
Equacao1 = math.pi * (raio**2)
import math
Equacao2 =(4/3) * math.pi * (raio**3)

print(round(Equacao1, 3))
print(round(Equacao2, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(float("radio:"))
ValueError: could not convert string to float: 'radio:'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:16:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = float(input("raio: "))
import math
Equacao1 = math.pi * (raio**2)
import math
Equacao2 =(4/3) * math.pi * (raio**3)

print(round(Equacao1, 3))
print(round(Equacao2, 3))
-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:17:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = float(input("Insira o raio desejado: "))
import math
Equacao1 = math.pi * (raio**2)
import math
Equacao2 =(4/3) * math.pi * (raio**3)

print(round(Equacao1, 3))
print(round(Equacao2, 3))
-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 23:17:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = float(input("Insira o raio desejado: "))
import math
Equacao1 = math.pi * (raio**2)
import math
Equacao2 =(4/3) * math.pi * (raio**3)

print(round(Equacao1, 3))
print(round(Equacao2, 3))
-- EXECUTION TIME:
0.21352
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:53:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = float(input("Insira o raio desejado: "))
from math import
Equacao1 = pi * (raio**2)
import math
Equacao2 =(4/3) * pi * (raio**3)

print(round(Equacao1, 3))
print(round(Equacao2, 3))
-- EXECUTION TIME:
0.182598
-- ERROR:
  File "/home/codebench/codes/1585/825/main.py", line 6
    from math import
                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:53:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = float(input("Insira o raio desejado: "))
from math import
Equacao1 = pi * (raio**2)
import math
Equacao2 =(4/3) * pi * (raio**3)

print(round(Equacao1, 3))
print(round(Equacao2, 3))
-- ERROR:
File "XXXX", line 6
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:53:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

raio = float(input("Insira o raio desejado: "))
from math import*
Equacao1 = pi * (raio**2)
from math import*
Equacao2 =(4/3) * pi * (raio**3)

print(round(Equacao1, 3))
print(round(Equacao2, 3))
-- EXECUTION TIME:
0.15034
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
