== TEST (2019-05-09 10:59:05) 
-- CODE:
ha = int(input("habitantes na cidade a: "))
hb = int(input("habitantes na cidade b: "))
ca = float(input("crescimento da populacao a: "))
cb = float(input("crescimento da populacao b: "))
t = 0
while(ha<hb):
	ha = ha*ca
	hb = hb*cb
	t = t+1
print(t)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:00:33) 
-- CODE:
ha = int(input("habitantes na cidade a: "))
hb = int(input("habitantes na cidade b: "))
ca = float(input("crescimento da populacao a: "))/100
cb = float(input("crescimento da populacao b: "))/100
t = 0
while(ha<hb):
	ha = ha*ca
	hb = hb*cb
	t = t+1
print(t)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:04:21) 
-- CODE:
ha = int(input("habitantes na cidade a: "))
hb = int(input("habitantes na cidade b: "))
ca = float(input("crescimento da populacao a: "))/100
cb = float(input("crescimento da populacao b: "))/100
t = 0
#while(ha<hb):
	#ha = ha*ca
	#hb = hb*cb
	#t = t+1
print(ha)
-- OUTPUT:
250150
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:04:29) 
-- CODE:
ha = int(input("habitantes na cidade a: "))
hb = int(input("habitantes na cidade b: "))
ca = float(input("crescimento da populacao a: "))/100
cb = float(input("crescimento da populacao b: "))/100
t = 0
#while(ha<hb):
	#ha = ha*ca
	#hb = hb*cb
	#t = t+1
print(ha)
-- OUTPUT:
250150
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:04:37) 
-- CODE:
ha = int(input("habitantes na cidade a: "))
hb = int(input("habitantes na cidade b: "))
ca = float(input("crescimento da populacao a: "))/100
cb = float(input("crescimento da populacao b: "))/100
t = 0
#while(ha<hb):
	#ha = ha*ca
	#hb = hb*cb
	#t = t+1
print(ha)
print(hb)
-- OUTPUT:
250150
580000
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:05:24) 
-- CODE:
ha = int(input("habitantes na cidade a: "))
hb = int(input("habitantes na cidade b: "))
ca = float(input("crescimento da populacao a: "))
cb = float(input("crescimento da populacao b: "))
t = 0
#while(ha<hb):
	#ha = ha*ca
	#hb = hb*cb
	#t = t+1
print(ha)
print(hb)
-- OUTPUT:
250150
580000
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:05:54) 
-- CODE:
ha = int(input("habitantes na cidade a: "))
hb = int(input("habitantes na cidade b: "))
ca = float(input("crescimento da populacao a: "))
cb = float(input("crescimento da populacao b: "))
t = 0
#while(ha<hb):
	#ha = ha*ca
	#hb = hb*cb
	#t = t+1
print(ha/100)
print(hb/100)
-- OUTPUT:
2501.5
5800.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:07:20) 
-- CODE:
ha = int(input("habitantes na cidade a: "))
hb = int(input("habitantes na cidade b: "))
ca = float(input("crescimento da populacao a: "))
cb = float(input("crescimento da populacao b: "))
t = 0
while(ha<hb):
	ha = ha*(ca/100)
	hb = hb*(cb/100)
	t = t+1
print(t)
#print(ha/100)
#print(hb/100)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 11:08:59) 
-- CODE:
ha = int(input("habitantes na cidade a: "))
hb = int(input("habitantes na cidade b: "))
ca = float(input("crescimento da populacao a: "))
cb = float(input("crescimento da populacao b: "))
t = 0
while(ha<hb):
	crea = ha*(ca/100)
	creb = hb*(cb/100)
	ha = ha + crea
	hb = hb + creb
	t = t+1
print(t)
#print(ha/100)
#print(hb/100)
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-09 11:09:16) 
-- CODE:
ha = int(input("habitantes na cidade a: "))
hb = int(input("habitantes na cidade b: "))
ca = float(input("crescimento da populacao a: "))
cb = float(input("crescimento da populacao b: "))
t = 0
while(ha<hb):
	crea = ha*(ca/100)
	creb = hb*(cb/100)
	ha = ha + crea
	hb = hb + creb
	t = t+1
print(t)
#print(ha/100)
#print(hb/100)
-- EXECUTION TIME:
0.176257
-- TEST CASE 1:
---- input:
250150
580000
35.5
10.5
---- correct output:
5
---- user output:
5
-- TEST CASE 2:
---- input:
180250
1200000
10.25
5.7
---- correct output:
45
---- user output:
45
-- TEST CASE 3:
---- input:
1000000
1650000
12.75
3.2
---- correct output:
6
---- user output:
6
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
