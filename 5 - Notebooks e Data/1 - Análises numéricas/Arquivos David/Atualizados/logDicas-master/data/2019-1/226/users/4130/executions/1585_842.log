== TEST (2019-03-25 13:24:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
nA = int(input("Digite um numero de quatro digitos: "))

nB = nA // 1000
nC = nA // 100 - (nB * 10)
nD = nA // 10 - (nC * 100) * 10
nE = nA % nD

print(nB + nC + nD + nE)
-- OUTPUT:
-113
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:24:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
nA = int(input("Digite um numero de quatro digitos: "))

nB = nA // 1000
#nC = nA // 100 - (nB * 10)
#nD = nA // 10 - (nC * 100) * 10
#nE = nA % nD

print(nB
-- ERROR:
File "XXXX", line 12
    
            ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:25:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
nA = int(input("Digite um numero de quatro digitos: "))

nB = nA // 1000
#nC = nA // 100 - (nB * 10)
#nD = nA // 10 - (nC * 100) * 10
#nE = nA % nD

print(nB)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:25:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
nA = int(input("Digite um numero de quatro digitos: "))

nB = nA // 1000
nC = nA // 100 - (nB * 10)
#nD = nA // 10 - (nC * 100) * 10
#nE = nA % nD

print(nC)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:25:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
nA = int(input("Digite um numero de quatro digitos: "))

nB = nA // 1000
nC = nA // 100 - (nB * 10)
nD = nA // 10 - (nC * 100) * 10
#nE = nA % nD

print(nD)
-- OUTPUT:
-83
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:26:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
nA = int(input("Digite um numero de quatro digitos: "))

nB = nA // 1000
nC = nA // 100 - (nB * 10)
nD = nA // 10 - (nA * 100) * 10
#nE = nA % nD

print(nD)
-- OUTPUT:
-9172083
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:27:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
nA = int(input("Digite um numero de quatro digitos: "))

nB = nA // 1000
nC = nA // 100 - (nB * 10)
nD = nA // 10 - (nA // 100) * 10
#nE = nA % nD

print(nD)
-- OUTPUT:
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:27:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
nA = int(input("Digite um numero de quatro digitos: "))

nB = nA // 1000
nC = nA // 100 - (nB * 10)
nD = nA // 10 - (nA // 100) * 10
#nE = nA % nD

print(nD)
-- EXECUTION TIME:
0.173245
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
7
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:27:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
nA = int(input("Digite um numero de quatro digitos: "))

nB = nA // 1000
nC = nA // 100 - (nB * 10)
nD = nA // 10 - (nA // 100) * 10
#nE = nA % nD

print(nD)
-- OUTPUT:
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:28:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
nA = int(input("Digite um numero de quatro digitos: "))

nB = nA // 1000
nC = nA // 100 - (nB * 10)
nD = nA // 10 - (nA // 100) * 10
nE = nA % nD

print(nB + nC + nD + nE)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:28:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
nA = int(input("Digite um numero de quatro digitos: "))

nB = nA // 1000
nC = nA // 100 - (nB * 10)
nD = nA // 10 - (nA // 100) * 10
nE = nA % nD

print(nB + nC + nD + nE)
-- EXECUTION TIME:
0.134514
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
