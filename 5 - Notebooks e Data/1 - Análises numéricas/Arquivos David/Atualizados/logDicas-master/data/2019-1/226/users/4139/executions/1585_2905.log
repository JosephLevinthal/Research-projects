== TEST (2019-03-21 22:28:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
l1=input("valor do lado A:")
l2=input("valor do lado B:")
l3=input("valor do lado C:")
s=(a+b+c/2)
a=(s-a)*(s-b)*(s-c)

print(s)
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    s=(a+b+c/2)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:29:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
l1=input("valor do lado A:")
l2=input("valor do lado B:")
l3=input("valor do lado C:")
s=(l1+l2+l3/2)
a=(s-l1)*(s-l2)*(s-l3)

print(s)
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    s=(l1+l2+l3/2)
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:30:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
l1=int(input("valor do lado A:"))
l2=int(input("valor do lado B:"))
l3=int(input("valor do lado C:"))
s=(l1+l2+l3/2)
a=(s-l1)*(s-l2)*(s-l3)

print(s)
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    l1=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:32:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
l1=int(input("valor do lado A:"))
l2=int(input("valor do lado B:"))
l3=int(input("valor do lado C:"))
s=(l1+l2+l3/2)
a=(s-l1)*(s-l2)*(s-l3)

print(s)
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    l1=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:34:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
la=int(input("valor do lado A:"))
lb=int(input("valor do lado B:"))
lc=int(input("valor do lado C:"))
s=((la+lb+lc)/2)
a=(s-l1)*(s-l2)*(s-l3)

print(s)
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    la=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:34:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
la=int(input("valor do lado A:"))
lb=int(input("valor do lado B:"))
lc=int(input("valor do lado C:"))
s=((la+lb+lc)/2)
a=(s-la)*(s-lb)*(s-lc)

print(s)
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    la=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:39:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
la=int(input("valor do lado A:"))
lb=int(input("valor do lado B:"))
lc=int(input("valor do lado C:"))
s=((la+lb+lc)/2)
a=((s-la)*(s-lb)*(s-lc))*s

print(s)
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    la=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:41:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
la=int(input("valor do lado A:"))
lb=int(input("valor do lado B:"))
lc=int(input("valor do lado C:"))
s=((la+lb+lc)/2)
a=((s-la)*(s-lb)*(s-lc))*s
b=(a**2)

print(round(b,5)
-- ERROR:
File "XXXX", line 12
    
                    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:41:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
la=int(input("valor do lado A:"))
lb=int(input("valor do lado B:"))
lc=int(input("valor do lado C:"))
s=((la+lb+lc)/2)
a=((s-la)*(s-lb)*(s-lc))*s
b=(a**2)

print(round(b,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    la=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:42:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
la=int(input("valor do lado A:"))
lb=int(input("valor do lado B:"))
lc=int(input("valor do lado C:"))
s=((la+lb+lc)/2)
a=((s-la)*(s-lb)*(s-lc))*s
b=(a**0.5)

print(round(b,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    la=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 22:42:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
la=int(input("valor do lado A:"))
lb=int(input("valor do lado B:"))
lc=int(input("valor do lado C:"))
s=((la+lb+lc)/2)
a=((s-la)*(s-lb)*(s-lc))*s
b=(a**0.5)

print(round(b,5))
-- EXECUTION TIME:
0.203517
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2905/main.py", line 4, in <module>
    la=int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:44:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
la=int(input("valor do lado A:"))
lb=int(input("valor do lado B:"))
lc=int(input("valor do lado C:"))
s=((la+lb+lc)/2)
a=((s-la)*(s-lb)*(s-lc))*s
from math import*
b=sqrt(a)
print(round(b,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    la=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 22:45:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
la=int(input("valor do lado A:"))
lb=int(input("valor do lado B:"))
lc=int(input("valor do lado C:"))
s=((la+lb+lc)/2)
a=((s-la)*(s-lb)*(s-lc))*s
from math import*
b=sqrt(a)
print(round(b,5))
-- EXECUTION TIME:
0.161155
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2905/main.py", line 4, in <module>
    la=int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:47:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("valor do lado A:"))
b=int(input("valor do lado B:"))
c=int(input("valor do lado C:"))
s=((la+lb+lc)/2)
from math import*
A=sqrt(((s-la)*(s-lb)*(s-lc))*s)

print(round(b,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:47:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("valor do lado A:"))
b=int(input("valor do lado B:"))
c=int(input("valor do lado C:"))
s=((a+b+c)/2)
from math import*
A=sqrt(((s-a)*(s-b)*(s-c))*s)

print(round(b,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:49:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=float(input("valor do lado A:"))
b=float(input("valor do lado B:"))
c=float(input("valor do lado C:"))
s=float((a+b+c)/2)
from math import*
A=float(sqrt(((s-a)*(s-b)*(s-c))*s))

print(round(b,5))
-- OUTPUT:
19.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 22:50:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=float(input("valor do lado A:"))
b=float(input("valor do lado B:"))
c=float(input("valor do lado C:"))
s=float((a+b+c)/2)
from math import*
A=float(sqrt(((s-a)*(s-b)*(s-c))*s))

print(round(A,5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 22:50:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=float(input("valor do lado A:"))
b=float(input("valor do lado B:"))
c=float(input("valor do lado C:"))
s=float((a+b+c)/2)
from math import*
A=float(sqrt(((s-a)*(s-b)*(s-c))*s))

print(round(A,5))
-- EXECUTION TIME:
0.215841
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 12:07:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=float(input("valor do lado A:"))
b=float(input("valor do lado B:"))
c=float(input("valor do lado C:"))
s=float((a+b+c)/2)
from math import*
A=float(sqrt(((s-a)*(s-b)*(s-c))*s))

print(round(A,5))
-- EXECUTION TIME:
0.200891
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
