== TEST (2019-04-02 10:07:12) 
-- CODE:
from math import *
h = float(input("digite a altura: "))
g = 9,81
vel = sqrt(2 * g * h)
print(vel)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vel = sqrt(2 * g * h)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:07:30) 
-- CODE:
from math import *
h = int(input("digite a altura: "))
g = 9,81
vel = sqrt(2 * g * h)
print(vel)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    h = int(input())
ValueError: invalid literal for int() with base 10: '152.8'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:07:50) 
-- CODE:
from math import *
h = float(input("digite a altura: "))
g = 9,81
vel = sqrt(2 * g * h)
print(vel)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vel = sqrt(2 * g * h)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:08:33) 
-- CODE:
from math import *
h = float(input("digite a altura: "))
g = 9,81
vel = (2 * g * h) ** 1/2
print(vel)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vel = (2 * g * h) ** 1/2
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:09:51) 
-- CODE:
from math import *
h = float(input("digite a altura: "))
g = 9,81
vel = abs((2 * g * h) ** 1/2)
print(vel)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    vel = abs((2 * g * h) ** 1/2)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:10:07) 
-- CODE:
from math import *
h = int(input("digite a altura: "))
g = 9,81
vel = abs((2 * g * h) ** 1/2)
print(vel)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    h = int(input())
ValueError: invalid literal for int() with base 10: '152.8'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:10:57) 
-- CODE:
from math import *
h = int(input("digite a altura: "))
g = 9,81
vel = abs(sqrt(2 * g * h))
print(vel)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    h = int(input())
ValueError: invalid literal for int() with base 10: '152.8'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:11:22) 
-- CODE:
from math import *
h = int(input("digite a altura: "))
g = 9,81
vel = float(abs(sqrt(2 * g * h)))
print(vel)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    h = int(input())
ValueError: invalid literal for int() with base 10: '152.8'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:12:13) 
-- CODE:
from math import *
h = int(input("digite a altura: "))
g = 9.81
vel = (abs(sqrt(2 * g * h)))
print(vel)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    h = int(input())
ValueError: invalid literal for int() with base 10: '152.8'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 10:12:31) 
-- CODE:
from math import *
h = int(input("digite a altura: "))
g = 9.81
vel = (abs(sqrt(2 * g * h)))
print(vel)
-- EXECUTION TIME:
0.14415
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1618/2931/main.py", line 2, in <module>
    h = int(input())
ValueError: invalid literal for int() with base 10: '152.8'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:12:54) 
-- CODE:
from math import *
h = float(input("digite a altura: "))
g = 9.81
vel = (abs(sqrt(2 * g * h)))
print(vel)
-- OUTPUT:
54.753410852658305
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 10:12:58) 
-- CODE:
from math import *
h = float(input("digite a altura: "))
g = 9.81
vel = (abs(sqrt(2 * g * h)))
print(vel)
-- EXECUTION TIME:
0.133948
-- TEST CASE 1:
---- input:
152.8
---- correct output:
54.753410852658305
---- user output:
54.753410852658305
-- TEST CASE 2:
---- input:
325.3
---- correct output:
79.8898366502273
---- user output:
79.8898366502273
-- TEST CASE 3:
---- input:
12.7
---- correct output:
15.785246276190943
---- user output:
15.785246276190943
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
