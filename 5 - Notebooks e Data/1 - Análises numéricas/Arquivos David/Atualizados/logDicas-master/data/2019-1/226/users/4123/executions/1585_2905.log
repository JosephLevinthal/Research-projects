== TEST (2019-03-21 12:04:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
area = sqrt((s(s-a)*s(s-b)*s(s-c))**0.5)
print(area)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    area = sqrt((s(s-a)*s(s-b)*s(s-c))**0.5)
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:05:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
area = sqrt((s(s-a)*s(s-b)*s(s-c))**(1/2))
print(area)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    area = sqrt((s(s-a)*s(s-b)*s(s-c))**(1/2))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:41:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
area = sqrt((s(s-a)*s(s-b)*s(s-c))**(1/2))
print(area)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    area = sqrt((s(s-a)*s(s-b)*s(s-c))**(1/2))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:46:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
area = sqrt((s*(s-a)*s*(s-b)*s*(s-c))**(1/2))
print(area)
-- OUTPUT:
38.94637201974815
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:47:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
area = sqrt(((s*(s-a))*(s*(s-b))*(s*(s-c)))**(1/2))
print(area)
-- OUTPUT:
38.94637201974815
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:48:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
area = sqrt(((s*(s-a))*(s*(s-b))*(s*(s-c)))
print(area)
-- ERROR:
File "XXXX", line 10
    print(area)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:48:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
area = sqrt((s*(s-a))*(s*(s-b))*(s*(s-c)))
print(area)
-- OUTPUT:
1516.8198935006217
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:50:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
area = sqrt((s*(s-a))*(s*(s-b))*(s*(s-c)))
print(round(area,5))
-- OUTPUT:
1516.81989
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:52:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
area = math.sqrt((s*(s-a))*(s*(s-b))*(s*(s-c)))
print(round(area,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    area = math.sqrt((s*(s-a))*(s*(s-b))*(s*(s-c)))
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:52:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
x = (s*(s-a))*(s*(s-b))*(s*(s-c))
area = sqrt(x)
print(round(area,5))
-- OUTPUT:
1516.81989
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:54:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
#x = s*(s-a)*(s-b)*(s-c)
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(area,5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:54:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
a = float(input())
b = float(input())
c = float(input())
s = (a+b+c)/2
#x = s*(s-a)*(s-b)*(s-c)
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(area,5))
-- EXECUTION TIME:
0.152702
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
