== TEST (2019-03-21 13:36:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
conta = int(input("n1+ n2+ n3+ n4"))
-- OUTPUT:
PRIMEIRO_CASO_DE_TESTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:07:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
conta = int(input("digite um numero"))
-- OUTPUT:
PRIMEIRO_CASO_DE_TESTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:09:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
conta = int(input("digite um numero"))
print(conta)
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 11:58:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x1 = n//1000
x2 = n//100	
x3 = n//10 - (n//100)*10
x4 = n// -(n//10)*10
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x1 = n//1000
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 11:58:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x1 = n//1000
x2 = n//100	
x3 = n//10 - (n//100)*10
x4 = n// -(n//10)*10
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x1 = n//1000
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 11:59:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = float(input("preco do jogo: "))

x1 = n//1000
x2 = n//100	
x3 = n//10 - (n//100)*10
x4 = n// -(n//10)*10

print(n)
-- OUTPUT:
9173.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 11:59:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = float(input("preco do jogo: "))

x1 = n//1000
x2 = n//100	
x3 = n//10 - (n//100)*10
x4 = n// -(n//10)*10

print(n)
-- EXECUTION TIME:
0.127763
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9173.0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1010.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:00:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("preco do jogo: "))

x1 = n//1000
x2 = n//100	
x3 = n//10 - (n//100)*10
x4 = n// -(n//10)*10

print(n)
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 12:00:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("preco do jogo: "))

x1 = n//1000
x2 = n//100	
x3 = n//10 - (n//100)*10
x4 = n// -(n//10)*10

print(n)
-- EXECUTION TIME:
0.136889
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9173
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1010
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:03:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	
x3 = n//10 - (n//100)*10
x4 = n// -(n//10)*10

print(n)
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:04:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	
x3 = n//10 - (n//100)*10
x4 = n// -(n//10)*10

print(n)
-- EXECUTION TIME:
0.297064
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9173
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1010
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:05:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = x1//100	
x3 = x2//10 - (x2//100)*10
x4 = x3// -(x3//10)*10

print(x4)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    x4 = x3// -(x3//10)*10
ZeroDivisionError: integer division or modulo by zero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:12:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	- (n//1000)*10
x3 = n//10 - (n//100)*10
x4 = n//1 - (n//10)*10

print(n)
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:12:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	- (n//1000)*10
x3 = n//10 - (n//100)*10
x4 = n//1 - (n//10)*10

print(n)
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:12:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	- (n//1000)*10
x3 = n//10 - (n//100)*10
x4 = n//1 - (n//10)*10

print(n)
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:12:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	- (n//1000)*10
x3 = n//10 - (n//100)*10
x4 = n//1 - (n//10)*10

print(n)
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:12:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	- (n//1000)*10
x3 = n//10 - (n//100)*10
x4 = n//1 - (n//10)*10

print(n)
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:12:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	- (n//1000)*10
x3 = n//10 - (n//100)*10
x4 = n//1 - (n//10)*10

print(n)
-- EXECUTION TIME:
0.151145
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9173
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1010
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:13:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	- (n//1000)*10
x3 = n//10 - (n//100)*10
x4 = n//1 - (n//10)*10

print(n)
-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:14:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	- (n//1000)*10
x3 = n//10 - (n//100)*10
x4 = n//1 - (n//10)*10
baiano = x1 + x2 +x3 +x4
print(baiano)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:14:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	- (n//1000)*10
x3 = n//10 - (n//100)*10
x4 = n//1 - (n//10)*10
baiano = x1 + x2 +x3 +x4
print(baiano)
-- EXECUTION TIME:
0.210261
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:12:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("digita caralho: "))

x1 = n//1000
x2 = n//100	- (n//1000)*10
x3 = n//10 - (n//100)*10
x4 = n//1 - (n//10)*10
baiano = x1 + x2 +x3 +x4
print(baiano)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
