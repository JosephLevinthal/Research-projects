== TEST (2019-05-01 14:01:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
H = float(input("altura do tanque: "))
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:26:15) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
vc =

if((H > h)and(H > 2r)and(H > 0)and(h > 0)and(r > 0)):
	if(H==h):
		V = pi*r**(H-2*r) + 2*((pi/3)*r**2(3*r-r))
	elif()	
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 6
    vc =
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:26:23) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)


if((H > h)and(H > 2r)and(H > 0)and(h > 0)and(r > 0)):
	if(H==h):
		V = pi*r**(H-2*r) + 2*((pi/3)*r**2(3*r-r))
	elif()	
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 8
    if((H > h)and(H > 2r)and(H > 0)and(h > 0)and(r > 0)):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:30:19) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)


if(H > h and H > 2r and H > 0 and h > 0 and r > 0):
	if(H==h):
		V = pi*r**(H-2*r) + 2*((pi/3)*r**2(3*r-r))
	elif()	
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 8
    if(H > h and H > 2r and H > 0 and h > 0 and r > 0):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:38:24) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)


if(H > h and H > 2r and H > 0 and h > 0 and r > 0):
	if(H==h):
		V = pi*r**(H-2*r) + 2*((pi/3)*r**2(3*r-r))
	elif()	
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 8
    if(H > h and H > 2r and H > 0 and h > 0 and r > 0):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:42:57) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)


if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(H==h):
		V = pi*r**(H-2*r) + 4/3*pi*r**3
	elif()	
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 11
    elif()	
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 14:43:16) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)


if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(H==h):
		V = pi*r**(H-2*r) + 4/3*pi*r**3
	#elif()	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:04:52) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)*(H-2*r)
vw =(pi*r**)*(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h>H-r):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 8
    vw =(pi*r**)*(H-2*r)-1/2*ve
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:06:26) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h>H-r):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:07:53) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h>H-r):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3))	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:08:37) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h>H-r):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3))	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:10:39) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h>H-r):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 15:12:57) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h>H-r):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.223367
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  ,  8.5  ,  9.5  ,  2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  ,  8.0  ,  4.0  ,  6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:21:41) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h>H-r):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:23:17) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h>H-r):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:28:26) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h<r):
		v =(pi/3*((H-h)**2)*(3*r-(H-h)))
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h>H-r):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:34:48) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h<r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h>H-r):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 15:35:05) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h<r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h>H-r):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.114048
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  ,  8.5  ,  9.5  ,  2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  ,  8.0  ,  4.0  ,  6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:37:12) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h<r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-2*r)
	elif(h+r>H):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  43763.433  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:37:47) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h<r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-2*r)
	elif(h+r>H):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  43763.433  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 15:38:56) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h<r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h+r>H):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.156562
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  ,  8.5  ,  9.5  ,  2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  ,  8.0  ,  4.0  ,  6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:39:04) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)
vw =(pi*r**2)+(H-2*r)-1/2*ve
if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h==r):
		v = 1/2*ve
	elif(h<r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r):
		v = 1/2*ve +(pi*r**2)*(h-r)
	elif(h+r>H):
		v = ve + vc  -(pi/3*((H-h)**2)*(3*r-(H-h)))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 15:58:23) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)

if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h<=r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r and h<= H - r):
		v = 1/2*ve + pi*(r**2)*(h-r)
	
	elif(h >H-r):
		v = ve +  vc -(pi/3)*(H-h)*(3*r-(H-h))
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.147159
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  ,  8.5  ,  9.5  ,  2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  ,  8.0  ,  4.0  ,  6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 15:59:43) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)

if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h<=r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r and h<= H - r):
		v = 1/2*ve + pi*(r**2)*(h-r)
	
	elif(h >H-r):
		v = ve +  vc -((pi/3)*(r**2)*(h-r))*2
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.215604
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  ,  8.5  ,  9.5  ,  2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  ,  8.0  ,  4.0  ,  6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:00:15) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)

if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h<=r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r and h<= H - r):
		v = 1/2*ve + pi*(r**2)*(h-r)
	
	elif(h >H-r):
		v = ve +  vc -((pi/3)*(r**2)*(h-r))*2
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 16:00:50) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)

if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h<=r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r and h<= H - r):
		v = 1/2*ve + pi*(r**2)*(h-r)
	
	elif(h >H-r):
		v = ve +  vc -((pi/3)*(r**2)*(h-r))*2
	print("Volume: ",round(v*1000,3)," Litros")	
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.097892
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  Litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  ,  8.5  ,  9.5  ,  2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  ,  8.0  ,  4.0  ,  6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:01:14) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)

if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h<=r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r and h<= H - r):
		v = 1/2*ve + pi*(r**2)*(h-r)
	
	elif(h >H-r):
		v = ve +  vc -((pi/3)*(r**2)*(h-r))*2
	print("Volume: ",round(v*1000,3)," litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume:  81987.191  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:01:45) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)

if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h<=r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r and h<= H - r):
		v = 1/2*ve + pi*(r**2)*(h-r)
	
	elif(h >H-r):
		v = ve +  vc -((pi/3)*(r**2)*(h-r))*2
	print("Volume:",round(v*1000,3),"litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:03:11) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)

if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h<=r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r and h<= H - r):
		v = 1/2*ve + pi*(r**2)*(h-r)
	
	elif(h >H-r):
		v = ve +  vc -((pi/3)*(r**2)*(h-r))*2
	print("Volume:",round(v*1000,3),"litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:03:14) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas: ",", ",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)

if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h<=r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r and h<= H - r):
		v = 1/2*ve + pi*(r**2)*(h-r)
	
	elif(h >H-r):
		v = ve +  vc -((pi/3)*(r**2)*(h-r))*2
	print("Volume:",round(v*1000,3),"litros")	
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:  ,  11.3  ,  5.7  ,  2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 16:04:14) 
-- CODE:
from math import*
H = float(input("altura do tanque: "))
h = float(input("nivel de combustivel: "))
r = float(input("raio dos bojos: "))
print("Entradas:",H," , ",h," , ",r)
ve =4/3*pi*r**3
vc =(pi*r**2)+(H-2*r)

if((H>h)and(H>2*r)and(h>0)and(H>0)and(r>0)):
	if(h<=r):
		v = ((pi/3)*(h**2)*(3*r-h))
	elif(h>r and h<= H - r):
		v = 1/2*ve + pi*(r**2)*(h-r)
	
	elif(h >H-r):
		v = ve +  vc -((pi/3)*(r**2)*(h-r))*2
	print("Volume:",round(v*1000,3),"litros")	
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.213763
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3  ,  5.7  ,  2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5  ,  9.5  ,  2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0  ,  4.0  ,  6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
