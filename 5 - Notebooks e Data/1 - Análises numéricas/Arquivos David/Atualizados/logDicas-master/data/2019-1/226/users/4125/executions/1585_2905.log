== TEST (2019-03-25 13:35:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita"))
b= float(input("digita"))
c= float(input("digita"))
s= (a+b+c)
a1= sqrt((s-a)*(s-b)(s-c))
print(round(a1, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    a1= sqrt((s-a)*(s-b)(s-c))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:35:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita: "))
b= float(input("digita: "))
c= float(input("digita: "))
s= (a+b+c)
a1= sqrt((s-a)*(s-b)(s-c))
print(round(a1, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    a1= sqrt((s-a)*(s-b)(s-c))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:35:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita: "))
b= float(input("digita: "))
c= float(input("digita: "))
s= (a+b+c)
a1= sqrt((s-a)*(s-b)*(s-c))
print(round(a1, 5))
-- OUTPUT:
155.35723
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:35:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita: "))
b= float(input("digita: "))
c= float(input("digita: "))
s= (a+b+c)
a1= sqrt((s-a)*(s-b)*(s-c))
print(round(a1, 5))
-- EXECUTION TIME:
0.157651
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
155.35723
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
709.92957
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
809.58261
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:35:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita: "))
b= float(input("digita: "))
c= float(input("digita: "))
s= (a+b+c)
a1= sqrt((s-a)*(s-b)*(s-c))
print(round(a1, 5))
-- OUTPUT:
155.35723
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:36:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita: "))
b= float(input("digita: "))
c= float(input("digita: "))
s= (a+b+c)/2
a1= sqrt((s-a)*(s-b)*(s-c))
print(round(a1, 5))
-- OUTPUT:
14.85104
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:36:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita: "))
b= float(input("digita: "))
c= float(input("digita: "))
s= (a+b+c)/2
a1= sqrt(s*(s-a)*(s-b)*(s-c))
print(round(a1, 5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:36:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita: "))
b= float(input("digita: "))
c= float(input("digita: "))
s= (a+b+c)/2
a1= sqrt(s*(s-a)*(s-b)*(s-c))
print(round(a1, 5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:37:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita: "))
b= float(input("digita: "))
c= float(input("digita: "))
s= (a+b+c)/2
a1= sqrt(s*(s-a)*(s-b)*(s-c))
print(round(a1, 5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:37:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita: "))
b= float(input("digita: "))
c= float(input("digita: "))
s= (a+b+c)/2
a1= sqrt(s*(s-a)*(s-b)*(s-c))
print(round(a1, 5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:37:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita: "))
b= float(input("digita: "))
c= float(input("digita: "))
s= (a+b+c)/2
a1= sqrt(s*(s-a)*(s-b)*(s-c))
print(round(a1, 5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:37:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
a= float(input("digita: "))
b= float(input("digita: "))
c= float(input("digita: "))
s= (a+b+c)/2
a1= sqrt(s*(s-a)*(s-b)*(s-c))
print(round(a1, 5))
-- EXECUTION TIME:
0.168418
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
