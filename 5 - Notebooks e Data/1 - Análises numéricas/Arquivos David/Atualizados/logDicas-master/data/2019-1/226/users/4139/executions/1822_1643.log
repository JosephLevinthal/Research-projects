== TEST (2019-06-13 10:12:59) 
-- CODE:
from numpy import*
vet = array(eval(input("notas: ")))

i = 0
for x in vet:
	if(vet[x]>5):
		i += 1
print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 10:15:18) 
-- CODE:
from numpy import*
vet = array(eval(input("notas: ")))

i = 0
for x in range(size(vet)):
	if(vet[x]>5):
		i += 1
print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 10:16:01) 
-- CODE:
from numpy import*
vet = array(eval(input("notas: ")))

i = 0
for x in (vet):
	if(vet[x]>5):
		i += 1
print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 10:25:24) 
-- CODE:
from numpy import*
vet = array(eval(input("notas: ")))

i = 0
for x in range(size(vet)):
	if(vet[x]>5):
		i += 1
print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 10:26:24) 
-- CODE:
from numpy import*
vet = array(eval(input("notas: ")))

i = 0
for x in range(size(vet)):
	if(vet[x]>=5):
		i += 1
print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 10:41:41) 
-- CODE:
from numpy import*
vet = array(eval(input("notas: ")))

i = 0
for x in range(size(vet)):
	if(vet[x]>=5):
		i += 1
print(i)
ap = zeros(i,dtype=int)
i = 0
a = 0
for y in range(size(vet)):
	if(vet[y]>=5):
	ap[i]= i
	i += 1
print(ap)

-- ERROR:
File "XXXX", line 14
    ap[i]= i
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 10:42:38) 
-- CODE:
from numpy import*
vet = array(eval(input("notas: ")))

i = 0
for x in range(size(vet)):
	if(vet[x]>=5):
		i += 1
print(i)
ap = zeros(i,dtype=int)
i = 0
a = 0
for y in range(size(vet)):
	if(vet[y]>=5):
		ap[i]= i
		i += 1
print(ap)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 10:43:46) 
-- CODE:
from numpy import*
vet = array(eval(input("notas: ")))

i = 0
for x in range(size(vet)):
	if(vet[x]>=5):
		i += 1
print(i)
ap = zeros(i,dtype=int)
i = 0
a = 0
for y in range(size(vet)):
	if(vet[y]>=5):
		ap[i]= i
	i += 1
print(ap)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 10:46:31) 
-- CODE:
from numpy import*
vet = array(eval(input("notas: ")))

i = 0
for x in range(size(vet)):
	if(vet[x]>=5):
		i += 1
print(i)
ap = zeros(i,dtype=int)
i = 0
a = 0
for y in range(size(vet)):
	if(vet[y]>=5):
		ap[i]= a
		i += 1
	a += 1
print(ap)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-13 10:47:03) 
-- CODE:
from numpy import*
vet = array(eval(input("notas: ")))

i = 0
for x in range(size(vet)):
	if(vet[x]>=5):
		i += 1
print(i)
ap = zeros(i,dtype=int)
i = 0
a = 0
for y in range(size(vet)):
	if(vet[y]>=5):
		ap[i]= a
		i += 1
	a += 1
print(ap)

-- EXECUTION TIME:
0.980481
-- TEST CASE 1:
---- input:
[9.0,1.5,4.2,7.0,5.5,7.8,9.1,8,2.1,2.3,4.99]
---- correct output:
6
[0 3 4 5 6 7]
---- user output:
6
[0 3 4 5 6 7]
-- TEST CASE 2:
---- input:
[9.0,1.5,4.2,7.0,5.5,7.8,9.1,8,5,2.3,6]
---- correct output:
8
[ 0  3  4  5  6  7  8 10]
---- user output:
8
[ 0  3  4  5  6  7  8 10]
-- TEST CASE 3:
---- input:
[9.0,1.5,4.2,7.0,5.5,7.8,9.1,8,2.1,2.3,4.99,6.1,3.6,2.9,10,8]
---- correct output:
9
[ 0  3  4  5  6  7 11 14 15]
---- user output:
9
[ 0  3  4  5  6  7 11 14 15]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
