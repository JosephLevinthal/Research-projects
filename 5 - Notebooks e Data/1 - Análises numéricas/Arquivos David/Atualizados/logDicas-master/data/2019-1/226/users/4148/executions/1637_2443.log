== TEST (2019-04-11 11:32:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 = 4*pi*r**3/3
v2 = pi*a**2*(3*r-a)/3

if n == 1:
	print(v1)
	
else: 
	print(v2)



-- OUTPUT:
9.025664794069577
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:33:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 = 4*pi*r**3/3
v2 = pi*a**2*(3*r-a)/3

if n == 1:
	print(v1, 4)
	
else: 
	print(v2, 4)



-- OUTPUT:
9.025664794069577 4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:33:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v2 = 4*pi*r**3/3
v1 = pi*a**2*(3*r-a)/3

if n == 1:
	print(v1, 4)
	
else: 
	print(v2, 4)



-- OUTPUT:
179.5943800302165 4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:35:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v2 = 4*pi*r**3/3
v1 = pi*a**2*(3*r-a)/3

if n == 2:
	print(v2, 4)
	
else: 
	print(v1, 4)



-- OUTPUT:
9.025664794069577 4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:38:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1=pi*(a)**2*(3*r-a)/3
v2=4*pi*(r)**3/3

if n == 1 :
	print(v1, 4)
	
else: 
	print(v2, 4)



-- OUTPUT:
179.5943800302165 4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:38:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1=pi*(a)**2*(3*r-a)/3
v2=4*pi*(r)**3/3

if n == 1 :
	print(v1, 4)
	
else: 
	print(v2, 4)



-- OUTPUT:
179.5943800302165 4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:39:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1=pi*(a)**2*(3*r-a)/3
v2=4*pi*(r)**3/3

if n == 1 :
	print(round(v1, 4))
	
else: 
	print(round(v2, 4))



-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:39:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1=pi*(a)**2*(3*r-a)/3
v2=4*pi*(r)**3/3

if n == 1 :
	print(round(v1, 4))
	
else: 
	print(round(v2, 4))
	



-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:41:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1 :
	print(round(v1, 4))
	
else: 
	print(round(v2, 4))
	



-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:41:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = (4*pi*r**3)/3

if n == 1 :
	print(round(v1, 4))
	
else: 
	print(round(v2, 4))
	



-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:42:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = (4*pi)*(r)**3/3

if n == 1 :
	print(round(v1, 4))
	
else: 
	print(round(v2, 4))
	



-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:46:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = (4*pi)*(r)**3/3

if n == 1 :
	print(round(v1-v2, 4))
	
else: 
	print(round(v2, 4))
	



-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:47:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1 :
	print(round(v1-v2, 4))
	
else: 
	print(round(v2, 4))
	



-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:48:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(v2-v1, 4))
	
else: 
	print(round(v2, 4))
	



-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:49:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(v1, 4))
	
else: 
	print(round(v2-v2, 4))
	



-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:49:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(v1, 4))
	
else: 
	print(round(v2-v1, 4))
	



-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:49:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(v1, 4))
	
else: 
	print(round(v2-v1, 4))
	



-- EXECUTION TIME:
0.22271
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:50:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 2:
	print(round(v2-v1, 4))
	
else: 
	print(round(v1, 4))
	



-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:50:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 2:
	print(round(v1-v2, 4))
	
else: 
	print(round(v1, 4))
	



-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:51:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(v1, 4))
	
else: 
	print(round(v2-v1, 4))
	



-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:51:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(v1, 4))
	
else: 
	print(round(v2-v1, 4))
	



-- EXECUTION TIME:
0.285371
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:52:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(v1-v2, 4))
	
else: 
	print(round(v2, 4))
	



-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:52:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(v1, 4))
	
else: 
	print(round(v2 - v1, 4))
	



-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:57:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(v1-v2, 4))
	
else: 
	print(round(v2 - v1, 4))
	



-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:58:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(v1-v2, 4))
	
else: 
	print(round(v2 - v1, 4))
	



-- EXECUTION TIME:
0.116816
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 12:01:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3 - 4*pi*r**3/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(, 4))
	
else: 
	print(round(, 4))
	



-- ERROR:
File "XXXX", line 14
    print(round(, 4))
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 12:01:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3 - 4*pi*r**3/3
v2 = 4*pi*r**3/3

if n == 1:
	print(round(v1, 4))
	
else: 
	print(round(v2, 4))
	



-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 12:03:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3 
v2 = 4*pi*r**3/3 - pi*(a)**2(3*r-a)/3

if n == 1:
	print(round(v1, 4))
	
else: 
	print(round(v2, 4))
	



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    v2 = 4*pi*r**3/3 - pi*(a)**2(3*r-a)/3
TypeError: 'int' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 17:58:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

r = float(input("raio: "))
a = float(input("altura: "))
n = str(input("nmr da opcao: ")) 

v1 =  pi*(a)**2*(3*r-a)/3 
v2 = 4*pi*r**3/3 

if n == 1:
	print(round(v1, 4))
	
else: 
	print(round(v2, 4))
	



-- EXECUTION TIME:
0.14455
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
310.3391
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:09:42) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round((4*pi*r**3/3)-(pi*x**2*(3*r-x/3, 4))))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(round((4*pi*r**3/3)-(pi*x**2*(3*r-x/3, 4))))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:11:51) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round((4*pi*r**3/3)-(pi*x**2*(3*r-x/3)), 4))

-- OUTPUT:
150.7217
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:13:25) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round((4*pi*(r)**3/3)-(pi*(x)**2*(3*r-x/3)), 4))

-- OUTPUT:
150.7217
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 18:14:52) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round((4*pi*(r)**3//3)-(pi*(x)**2*(3*r-x//3)), 4))

-- EXECUTION TIME:
0.18593
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
149.2295
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
243.1029
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:17:45) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round((pi*(x)**2*(3*r-x/3))-(4*pi*r**3/3), 4))

-- OUTPUT:
-150.7217
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 18:19:33) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round((4*pi*(r**3)/3)-(pi*(x)**2*(3*r-x/3)), 4))

-- EXECUTION TIME:
0.17777
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
150.7217
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
245.7427
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 18:19:46) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round((4*pi*(r**3)/3)-(pi*(x**2)*(3*r-x/3)), 4))

-- EXECUTION TIME:
0.135693
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
150.7217
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
245.7427
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 18:19:47) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round((4*pi*(r**3)/3)-(pi*(x**2)*(3*r-x/3)), 4))

-- EXECUTION TIME:
0.132134
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
150.7217
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
245.7427
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 18:19:47) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round((4*pi*(r**3)/3)-(pi*(x**2)*(3*r-x/3)), 4))

-- EXECUTION TIME:
0.0950119
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1637/2443/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:19:57) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round((4*pi*(r**3)/3)-(pi*(x**2)*(3*r-x/3)), 4))

-- OUTPUT:
150.7217
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:20:04) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round((4*pi*(r**3)/3)-(pi*(x**2)*(3*r-x/3)), 4))

-- OUTPUT:
150.7217
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:23:05) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round(((4*pi*(r**3))/3)-(*(x**2)*(3*r-x)/3, 4))

-- ERROR:
File "XXXX", line 11
    
                                                          ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:24:52) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round(4*pi*r**3 / 3 - pi*x**2*(3*r-x) / 3))

-- OUTPUT:
171
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:25:17) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round(4*pi*r**3 / 3 - pi*x**2*(3*r-x) / 3, 4))

-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 18:25:25) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round(4*pi*r**3 / 3 - pi*x**2*(3*r-x) / 3, 4))

-- EXECUTION TIME:
0.136403
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:25:34) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round(4*pi*r**3 / 3 - pi*x**2*(3*r-x) / 3, 4))

-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:27:00) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = str(input("numero da opcao": )

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round(4*pi*r**3 / 3 - pi*x**2*(3*r-x) / 3, 4))

-- ERROR:
File "XXXX", line 4
    n = str(input("numero da opcao": )
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:27:12) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = str(input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round(4*pi*r**3 / 3 - pi*x**2*(3*r-x) / 3, 4))

-- ERROR:
File "XXXX", line 6
    if n==1:
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:27:21) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = str(input("numero da opcao: "))

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round(4*pi*r**3 / 3 - pi*x**2*(3*r-x) / 3, 4))

-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 18:27:29) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = str(input("numero da opcao: "))

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round(4*pi*r**3 / 3 - pi*x**2*(3*r-x) / 3, 4))

-- EXECUTION TIME:
0.148944
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:28:38) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = int(input("numero da opcao: ")

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round(4*pi*r**3 / 3 - pi*x**2*(3*r-x) / 3, 4))

-- ERROR:
File "XXXX", line 6
    if n==1:
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 18:28:44) 
-- CODE:
from math import*
r = float(input("raio: "))
x = float(input("altura: "))
n = int(input("numero da opcao: "))

if n==1:
	print(round(pi*x**2*(3*r-x)/3, 4))
	
else:
	print(round(4*pi*r**3 / 3 - pi*x**2*(3*r-x) / 3, 4))

-- EXECUTION TIME:
0.205666
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
