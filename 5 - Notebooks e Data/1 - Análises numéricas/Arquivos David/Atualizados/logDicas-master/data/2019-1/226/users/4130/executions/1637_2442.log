== TEST (2019-04-08 12:10:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)
-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:11:16) 
-- CODE:
num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:11:39) 
-- CODE:
num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:11:56) 
-- CODE:
num = input("Digite um numero: ")

if: (num % 2 == 0)
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- ERROR:
File "XXXX", line 3
    if: (num % 2 == 0)
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:12:03) 
-- CODE:
num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:12:21) 
-- CODE:
num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:16:55) 
-- CODE:
num = input("Digite um numero: ")

if (num % 2 == 0)
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- ERROR:
File "XXXX", line 3
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:17:10) 
-- CODE:
num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:17:20) 
-- CODE:
num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:02:39) 
-- CODE:
num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:02:45) 
-- CODE:
num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:04:52) 
-- CODE:
num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:04:59) 
-- CODE:
num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- EXECUTION TIME:
0.141083
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
Par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:05:11) 
-- CODE:
num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:05:15) 
-- CODE:
num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- EXECUTION TIME:
0.16538
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
Par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:05:38) 
-- CODE:
num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)
-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:05:41) 
-- CODE:
num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)
-- EXECUTION TIME:
0.209033
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:26:36) 
-- CODE:
num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)
-- EXECUTION TIME:
0.155879
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
