== TEST (2019-04-08 16:05:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from match import sin, radians, abs
vo = float(input("vo: "))  
a = int(input("angulo: "))
D = float(input("distancia horizontal:"))
r = vo ** 2 * sin(2a) / 9.8
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
File "XXXX", line 8
    r = vo ** 2 * sin(2a) / 9.8
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:06:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from match import sin, radians, abs
vo = float(input("vo: "))  
a = int(input("angulo: "))
D = float(input("distancia horizontal:"))
r = (vo) ** 2 * sin(2 * a) / 9.8
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    from match import sin, radians, abs
ModuleNotFoundError: No module named 'match'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:06:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians, abs
vo = float(input("vo: "))  
a = int(input("angulo: "))
D = float(input("distancia horizontal:"))
r = (vo) ** 2 * sin(2 * a) / 9.8
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    from math import sin, radians, abs
ImportError: cannot import name 'abs'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:06:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = int(input("angulo: "))
D = float(input("distancia horizontal:"))
r = (vo) ** 2 * sin(2 * a) / 9.8
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:07:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal:"))
r = (vo) ** 2 * sin(2 * a) / 9.8
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 16:07:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: "))
r = (vo) ** 2 * sin(2 * a) / 9.8
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- EXECUTION TIME:
0.170581
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:08:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: "))
r = (vo) ** 2 * sin(2 * a) / 9.8
if (r == D abs(0.1)):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
File "XXXX", line 9
    if (r == D abs(0.1)):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:09:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input(abs(0.1)("distancia horizontal: ")))
r = (vo) ** 2 * sin(2 * a) / 9.8
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = float(input(abs(0.1)("distancia horizontal: ")))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:10:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = int(input(abs(0.1)("distancia horizontal: ")))
r = (vo) ** 2 * sin(2 * a) / 9.8
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input(abs(0.1)("distancia horizontal: ")))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:12:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: "))
r = (vo) ** 2 * sin(2 * a) / 9.8
abs(D - r)
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 16:12:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: "))
r = (vo) ** 2 * sin(2 * a) / 9.8
abs(D - r)
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- EXECUTION TIME:
0.112001
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:13:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: "))
r = (vo) ** 2 * sin(2 * a) / 9.8
abs(D - r)
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:14:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: "))
r = (vo) ** 2 * sin(2 * a) / 9.8
abs(D, 0,1)
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    abs(D, 0,1)
TypeError: abs() takes exactly one argument (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:15:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: "))
r = (vo) ** 2 * sin(2 * a) / 9.8
abs(D)
if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:15:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: ")) abs(0.1)
r = (vo) ** 2 * sin(2 * a) / 9.8

if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
File "XXXX", line 7
    D = float(input()) abs(0.1)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 16:15:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: ")), abs(0.1)
r = (vo) ** 2 * sin(2 * a) / 9.8

if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 16:16:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import sin, radians
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: ")), abs(0.1)
r = (vo) ** 2 * sin(2 * a) / 9.8

if (r == D):
	v = "sim"
else: 
	v = "nao"
print(v)
-- EXECUTION TIME:
0.161904
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:33:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: ")), 
r = (vo) ** 2 * sin(2 * a) / 9.8

if (abs(D - r <= 0.1)):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (abs(D - r <= 0.1)):
TypeError: unsupported operand type(s) for -: 'tuple' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:34:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: ")), 
r = ((vo) ** 2 * sin(2 * a)) / 9.8

if (abs(D - r <= 0.1)):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (abs(D - r <= 0.1)):
TypeError: unsupported operand type(s) for -: 'tuple' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:36:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: ")), 
r = ((vo) ** 2 * sin(2 * a)) / 9.8

if (abs(D - r <= 0.1)):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (abs(D - r <= 0.1)):
TypeError: unsupported operand type(s) for -: 'tuple' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:37:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: ")), 
g = 9.8
r = ((vo ** 2 ) * sin(2 * a)) / g

if (abs(D - r <= 0.1)):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if (abs(D - r <= 0.1)):
TypeError: unsupported operand type(s) for -: 'tuple' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:38:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: ")), 
g = 9.8
r = ((vo ** 2 ) * sin(2 * a)) / g

if (abs(D - r) <= 0.1):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if (abs(D - r) <= 0.1):
TypeError: unsupported operand type(s) for -: 'tuple' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:12:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
D = float(input("distancia horizontal: ")), 
g = 9.8
r = ((vo ** 2 ) * sin(2 * a)) / g

if (abs(D - r) <= 0.1):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if (abs(D - r) <= 0.1):
TypeError: unsupported operand type(s) for -: 'tuple' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:13:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
r = ((vo ** 2 ) * sin(2 * a)) / g

if (abs(d - r) <= 0.1):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if (abs(d - r) <= 0.1):
TypeError: unsupported operand type(s) for -: 'tuple' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:27:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
r = ((vo ** 2 ) * sin(2 * radians(a)) / g

if (abs(d - r) <= 0.1):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
File "XXXX", line 11
    if (abs(d - r) <= 0.1):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:27:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
r = ((vo ** 2 ) * sin(2 * radians(a)) / g

if (abs(d - r) < 0.1):
	v = "sim"
else: 
	v = "nao"
print(v)
-- ERROR:
File "XXXX", line 11
    if (abs(d - r) < 0.1):
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:29:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
r = ((vo ** 2 ) * sin(2 * radians(a)) / g

if (abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 11
    if (abs(d - r) <= 0.1):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:29:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
r = ((vo ** 2 ) * sin(2 * radians(a)) / g

if (abs(d) - r) <= 0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 11
    if (abs(d) - r) <= 0.1):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:29:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
r = ((vo ** 2 ) * sin(2 * radians(a)) / g

if (abs(d) - r) <= 0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 11
    if (abs(d) - r) <= 0.1):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:29:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
r = ((vo ** 2 ) * sin(2 * radians(a)) / g

if (abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 11
    if (abs(d - r) <= 0.1):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:30:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a1 = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
a = radians(a1)
r = ((vo ** 2 ) * sin(2 * a) / g

if (abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 12
    if (abs(d - r) <= 0.1):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:31:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a1 = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
a = radians(a1)
r = ((vo ** 2 ) * sin(2 * a) / g

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 12
    if(abs(d - r) <= 0.1):
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:32:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a1 = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
a = radians(a1)
r = ((vo ** 2 ) * sin(2 * a) / g

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.191973
-- ERROR:
  File "/home/codebench/codes/1637/1055/main.py", line 12
    if(abs(d - r) <= 0.1):
                         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:36:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a1 = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
a = radians(a1)
r = ((vo ** 2 ) * sin(2 * a)) / g

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.152434
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/1055/main.py", line 12, in <module>
    if(abs(d - r) <= 0.1):
TypeError: unsupported operand type(s) for -: 'tuple' and 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:37:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a1 = float(input("angulo: "))
d = float(input("distancia horizontal: ")), 
g = 9.8
a = radians(a1)
r = ((vo ** 2 ) * sin(2 * a)) / g

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    if(abs(d - r) <= 0.1):
TypeError: unsupported operand type(s) for -: 'tuple' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:38:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("vo: "))  
a1 = float(input("angulo: "))
d = float(input("distancia horizontal: "))
g = 9.8
a = radians(a1)
r = ((vo ** 2 ) * sin(2 * a)) / g

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.191745
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
