== TEST (2019-04-02 11:06:31) 
-- CODE:
from math import*

l = float(input("comprimento; "))
g = 9,8 #m/s**2
t = 2*pi*sqrt(l/g)
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    t = 2*pi*sqrt(l/g)
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:06:47) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9,8 #m/s**2
t = 2*pi*sqrt(l/g)
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:07:35) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9,8 m/s**2
t = 2*pi*sqrt(l/g)
print(t)
-- ERROR:
File "XXXX", line 4
    g = 9,8 m/s**2
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:07:51) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8
t = 2*pi*sqrt(l/g)
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 11:08:22) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8
t = 2*pi*sqrt(l/g)
print(t)
-- EXECUTION TIME:
0.190989
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1618/2929/main.py", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 11:08:46) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8
t = 2*pi*sqrt(l/g)
print(t)
-- EXECUTION TIME:
0.207885
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1618/2929/main.py", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:13:33) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8 mhghygftf
t = 2*pi*sqrt(l/g)
print(t)
-- ERROR:
File "XXXX", line 4
    g = 9.8 mhghygftf
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:13:38) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8 
t = 2*pi*sqrt(l/g)
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 11:14:04) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8 
t = 2*pi*sqrt(l/g)
print(t)
-- EXECUTION TIME:
0.145495
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1618/2929/main.py", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:19:38) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8 
t = 2*pi*sqrt(l/g)
print(t, "s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:19:50) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8 
t = 2*pi*sqrt(l/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:20:33) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8 
t = 2*pi*sqrt(l/g)
print(t"s")
-- ERROR:
File "XXXX", line 6
    print(t"s")
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:20:37) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8 
t = 2*pi*sqrt(l/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:21:56) 
-- CODE:
from math import*

l = int(input("comprimento; ")"m")
g = 9.8 
t = 2*pi*sqrt(l/g)
print(t,"s")
-- ERROR:
File "XXXX", line 3
    l = int(input()"m")
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:22:09) 
-- CODE:
from math import*

l = int(input("comprimento; ")("m"))
g = 9.8 
t = 2*pi*sqrt(l/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input()("m"))
TypeError: 'str' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:23:37) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8 
t = 2*pi*sqrt(l"m"/g"m/s**2")
print(t,"s")
-- ERROR:
File "XXXX", line 5
    t = 2*pi*sqrt(l"m"/g"m/s**2")
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:23:50) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8 
t = 2*pi*sqrt(l,"m"/g,"m/s**2")
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:25:38) 
-- CODE:
from math import*

l = int(input("comprimento; "))
l = f("m")
g = 9.8("m/s**2") 
t = 2*pi*sqrt(l/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:26:02) 
-- CODE:
from math import*

l = int(input("comprimento; "))
l = (f,"m")
g = 9.8("m/s**2") 
t = 2*pi*sqrt(f/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:26:19) 
-- CODE:
from math import*

l = int(input("comprimento; "))
l = (f)"m"
g = 9.8("m/s**2") 
t = 2*pi*sqrt(f/g)
print(t,"s")
-- ERROR:
File "XXXX", line 4
    l = (f)"m"
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:26:31) 
-- CODE:
from math import*

l = int(input("comprimento; "))
l = f,"m"
g = 9.8("m/s**2") 
t = 2*pi*sqrt(f/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:31:05) 
-- CODE:
from math import*

l = int(input("comprimento; "))
l = f,("m")
g = 9.8("m/s**2") 
t = 2*pi*sqrt(f/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:31:12) 
-- CODE:
from math import*

l = int(input("comprimento; "))
l = f("m")
g = 9.8("m/s**2") 
t = 2*pi*sqrt(f/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:32:24) 
-- CODE:
from math import*

l = int(input("comprimento; "))
l = (f, "m")
g = 9.8("m/s**2") 
t = 2*pi*sqrt(f/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:32:40) 
-- CODE:
from math import*

l = int(input("comprimento; "))
l = (f("m"))
g = 9.8("m/s**2") 
t = 2*pi*sqrt(f/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:33:37) 
-- CODE:
from math import*

l = int(input("comprimento; "))
l(f("m"))
g = 9.8("m/s**2") 
t = 2*pi*sqrt(f/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:34:44) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8("m/s**2") 
t = 2*pi*sqrt(l/g)
print(t,"s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:35:19) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g("m/s**2") = 9.8
t = 2*pi*sqrt(l/g)
print(t,"s")
-- ERROR:
File "XXXX", line 4
    g("m/s**2") = 9.8
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:42:43) 
-- CODE:
from math import*

l = int(input("comprimento; "))
g = 9.8
t = 2*pi*sqrt(l/g)
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    l = int(input())
ValueError: invalid literal for int() with base 10: '20.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:44:27) 
-- CODE:
from math import*

l = float(input("comprimento; "))
g = 9.8
t = 2*pi*sqrt(l/g)
print(t)
-- OUTPUT:
8.975979010256552
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 11:44:34) 
-- CODE:
from math import*

l = float(input("comprimento; "))
g = 9.8
t = 2*pi*sqrt(l/g)
print(t)
-- EXECUTION TIME:
0.133
-- TEST CASE 1:
---- input:
20.0
---- correct output:
8.975979010256552
---- user output:
8.975979010256552
-- TEST CASE 2:
---- input:
168.5
---- correct output:
26.05354252683059
---- user output:
26.05354252683059
-- TEST CASE 3:
---- input:
324.2
---- correct output:
36.13876739612874
---- user output:
36.13876739612874
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
