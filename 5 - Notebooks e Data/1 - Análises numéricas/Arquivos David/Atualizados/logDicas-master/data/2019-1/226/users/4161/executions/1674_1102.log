== TEST (2019-04-27 16:15:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior"))
vc= pi*(r**2)*(h - 2*r)
ve = 4*pi*(r**3)/6
print(vc, ve)
-- OUTPUT:
18.28092765123901 25.482505210818005
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:16:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior"))
vc= pi*(r**2)*(a - 2*r)
ve = 4*pi*(r**3)/6
print(vc, ve)
-- OUTPUT:
111.34746842118304 25.482505210818005
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:32:59) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
vc= pi*(r**2)*(a - 2*r)
vse = 4*pi*(r**3)/6
vt = vc + 2*ve

if h<r:
	v = (pi/3)*(h**2)*(3*r - h)
	print(round(v*1000), "litros")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    vt = vc + 2*ve
NameError: name 've' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:33:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

if h<r:
	v = (pi/3)*(h**2)*(3*r - h)
	print(round(v*1000), "litros")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    vt = vc + 2*ve
NameError: name 've' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:34:24) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

if h<r:
	v = (pi/3)*(h**2)*(3*r - h)
	print("Volume: ", round(v*1000), "litros")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    vt = vc + 2*ve
NameError: name 've' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:35:09) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

if h<r:
	v = (pi/3)*(h**2)*(3*r - h)
	print("Volume: ", round(v*1000), "litros")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    vt = vc + 2*ve
NameError: name 've' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:35:53) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

if h<=r:
	v = (pi/3)*(h**2)*(3*r - h)
	print("Volume: ", round(v*1000), "litros")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    vt = vc + 2*ve
NameError: name 've' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:37:28) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

print((4/6)*pi*(r**3))


-- OUTPUT:
25.482505210818
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:38:24) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

if h<=r:
	v = (pi/3)*(h**2)*(3*r - h)
	print("Volume: ", round(v*1000, 3), "litros")


-- OUTPUT:
25.482505210818
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:39:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

if h<=r:
	v = (pi/3)*(h**2)*(3*r - h)
	print("Volume: ", round(v*1000, 3), "litros")
elif (h>r) and (h<=a-r):
	print("oi")


-- OUTPUT:
oi
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:43:19) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

if h<=r:
	v = (pi/3)*(h**2)*(3*r - h)
	print("Volume: ", round(v*1000, 3), "litros")
elif (h>r) and (h<=a-r):
	vse = (pi/3)*(h**2)*(3*r - h)
	vc = pi*(r**2)*(h-r)
	v = vse + vc
	print("Volume: ", round(v*1000, 3), "litros")
elif (h>a-r):
	print("oi")


-- OUTPUT:
Volume:  97332.824 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:43:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

if h<=r:
	v = (pi/3)*(h**2)*(3*r - h)
	print("Volume: ", round(v*1000, 3), "litros")
elif (h>r) and (h<=a-r):
	vse = (pi/3)*(h**2)*(3*r - h)
	vc = pi*(r**2)*(h-r)
	v = vse + vc
	print("Volume: ", round(v*1000, 3), "litros")
elif (h>a-r):
	print("oi")


-- OUTPUT:
Volume:  97332.824 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:44:02) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

if h<=r:
	v = (pi/3)*(h**2)*(3*r - h)
	print("Volume: ", round(v*1000, 3), "litros")
elif (h>r) and (h<=a-r):
	vse = (pi/3)*(h**2)*(3*r - h)
	vc = pi*(r**2)*(h-r)
	v = vse + vc
	print("Volume: ", round(v*1000, 3), "litros")
elif (h>a-r):
	print("oi")


-- OUTPUT:
Volume:  97332.824 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:53:47) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

if h<=r:
	v = (pi/3)*(h**2)*(3*r - h)
	print("Volume: ", round(v*1000, 3), "litros")
elif (h>r) and (h<=a-r):
	vse = (4*pi*(r**3))/6
	vc = pi*(r**2)*(h-r)
	v = vse + vc
	print("Volume: ", round(v*1000, 3), "litros")
elif (h>a-r):
	vse = (4*pi*(r**3))/6
	vc = pi*(r**2)*(a-2*r)
	ve = vse - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
	v = vse + vc + ve
	print("Volume: ", round(v*1000, 3), "litros")

-- OUTPUT:
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 16:59:35) 
-- CODE:
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
print("Entradas: ", a, h, r)
if (h<0) or (a<0) or (r<0):
	print("Entradas invalidas")
elif(h>a) or (2*r>a):
	print("Entradas invalidas")
else:
	if h<=r:
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>r) and (h<=a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(h-r)
		v = vse + vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(a-2*r)
		ve = vse - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = vse + vc + ve
		print("Volume: ", round(v*1000, 3), "litros")

-- OUTPUT:
Entradas:  11.3 5.7 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 17:00:18) 
-- CODE:
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
print("Entradas: ", a,",", h,",", r)
if (h<0) or (a<0) or (r<0):
	print("Entradas invalidas")
elif(h>a) or (2*r>a):
	print("Entradas invalidas")
else:
	if h<=r:
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>r) and (h<=a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(h-r)
		v = vse + vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(a-2*r)
		ve = vse - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = vse + vc + ve
		print("Volume: ", round(v*1000, 3), "litros")

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 17:00:27) 
-- CODE:
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
print("Entradas: ", a,",", h,",", r)
if (h<0) or (a<0) or (r<0):
	print("Entradas invalidas")
elif(h>a) or (2*r>a):
	print("Entradas invalidas")
else:
	if h<=r:
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>r) and (h<=a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(h-r)
		v = vse + vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(a-2*r)
		ve = vse - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = vse + vc + ve
		print("Volume: ", round(v*1000, 3), "litros")

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 17:00:38) 
-- CODE:
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
print("Entradas: ", a,",", h,",", r)
if (h<0) or (a<0) or (r<0):
	print("Entradas invalidas")
elif(h>a) or (2*r>a):
	print("Entradas invalidas")
else:
	if h<=r:
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>r) and (h<=a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(h-r)
		v = vse + vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(a-2*r)
		ve = vse - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = vse + vc + ve
		print("Volume: ", round(v*1000, 3), "litros")

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 17:01:13) 
-- CODE:
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
print("Entradas: ", a,",", h,",", r)
if (h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif(h>a) or (2*r>a):
	print("Entradas invalidas")
else:
	if h<=r:
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>r) and (h<=a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(h-r)
		v = vse + vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(a-2*r)
		ve = vse - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = vse + vc + ve
		print("Volume: ", round(v*1000, 3), "litros")

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 17:01:31) 
-- CODE:
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
print("Entradas: ", a,",", h,",", r)
if (h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif(h>a) or (2*r>a):
	print("Entradas invalidas")
else:
	if h<=r:
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>r) and (h<=a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(h-r)
		v = vse + vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(a-2*r)
		ve = vse - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = vse + vc + ve
		print("Volume: ", round(v*1000, 3), "litros")

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 17:01:51) 
-- CODE:
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
print("Entradas: ", a,",", h,",", r)
if (h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif(h>a) or (2*r>a):
	print("Entradas invalidas")
else:
	if h<=r:
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>r) and (h<=a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(h-r)
		v = vse + vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(a-2*r)
		ve = vse - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = vse + vc + ve
		print("Volume: ", round(v*1000, 3), "litros")

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 17:02:23) 
-- CODE:
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
print("Entradas: ", a,",", h,",", r)
if (h<0) or (a<=0) or (r<=0):
	print("Entradas invalidas")
elif(h>a) or (2*r>a):
	print("Entradas invalidas")
else:
	if h<=r:
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>r) and (h<=a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(h-r)
		v = vse + vc
		print("Volume: ", round(v*1000, 3), "litros")
	elif (h>a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(a-2*r)
		ve = vse - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = vse + vc + ve
		print("Volume: ", round(v*1000, 3), "litros")

-- EXECUTION TIME:
0.161192
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
