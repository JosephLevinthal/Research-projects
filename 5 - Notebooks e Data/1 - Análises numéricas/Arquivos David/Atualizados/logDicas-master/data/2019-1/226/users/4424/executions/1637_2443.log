== TEST (2019-04-11 11:09:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
math from import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

n=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3
print(n)
-- ERROR:
File "XXXX", line 4
    math from import*
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:10:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

n=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3
print(n)
-- OUTPUT:
170.56871523614694
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:11:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

n=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(n)
-- EXECUTION TIME:
0.203113
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.56871523614694
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3407570570127
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:12:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

n=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(n)
-- OUTPUT:
170.56871523614694
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:13:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = int(input("Digite um numero: "))
h = int(input("Digite um numero: "))
n = int(input("Digite um numero: "))

x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- EXECUTION TIME:
0.150435
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2443/main.py", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '3.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:13:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = int(input("Digite um numero: "))
h = int(input("Digite um numero: "))
n = int(input("Digite um numero: "))

x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- EXECUTION TIME:
0.139083
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2443/main.py", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '3.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:13:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = int(input("Digite um numero: "))
h = int(input("Digite um numero: "))
n = int(input("Digite um numero: "))

x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:16:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
else:
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- OUTPUT:
9.025664794069577
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:16:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
else:
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- EXECUTION TIME:
0.154277
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.025664794069577
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3407570570127
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:16:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
else:n(n==2)
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- EXECUTION TIME:
0.214057
-- ERROR:
  File "/home/codebench/codes/1637/2443/main.py", line 13
    x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3
    ^
IndentationError: unexpected indent

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:16:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
else:n(n==2)
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- ERROR:
File "XXXX", line 13
    x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:16:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
else:n(n==2)
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- EXECUTION TIME:
0.177444
-- ERROR:
  File "/home/codebench/codes/1637/2443/main.py", line 13
    x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3
    ^
IndentationError: unexpected indent

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:16:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
elsen(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- EXECUTION TIME:
0.170503
-- ERROR:
  File "/home/codebench/codes/1637/2443/main.py", line 12
    elsen(n==2):
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:16:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
elsen(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- ERROR:
File "XXXX", line 12
    elsen(n==2):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:16:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
elsen(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- EXECUTION TIME:
0.250637
-- ERROR:
  File "/home/codebench/codes/1637/2443/main.py", line 12
    elsen(n==2):
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:17:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
else(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- EXECUTION TIME:
0.145803
-- ERROR:
  File "/home/codebench/codes/1637/2443/main.py", line 12
    else(n==2):
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:17:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
else(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- ERROR:
File "XXXX", line 12
    else(n==2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:17:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
else(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- ERROR:
File "XXXX", line 12
    else(n==2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:17:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
if(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- OUTPUT:
9.025664794069577
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:17:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
if(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x)
-- EXECUTION TIME:
0.159576
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.025664794069577
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3407570570127
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:17:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
if(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x, 4)
-- EXECUTION TIME:
0.235488
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.025664794069577 4
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3407570570127 4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:17:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
if(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x, 4)
-- OUTPUT:
9.025664794069577 4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:17:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
if(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x, 4)
-- EXECUTION TIME:
0.231443
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
Digite um numero: Digite um numero: Digite um numero: 9.025664794069577 4
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
Digite um numero: Digite um numero: Digite um numero: 290.3407570570127 4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:18:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
if(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(x, 4)
-- OUTPUT:
9.025664794069577 4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:18:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite um numero: "))
h = float(input("Digite um numero: "))
n = float(input("Digite um numero: "))

if(n==1):
	x=((pi*h**2)*(3*r-h))/3
	
if(n==2):
	x=((4*pi*r**3)/3)-((pi*h**2)*(3*r-h))/3

print(round(x, 4))
-- EXECUTION TIME:
0.237591
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
