== TEST (2019-04-29 21:10:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ")
q2= input("insira a resposta 2: ")
q3= input("insira a resposta 3: ")
g1= input("insira a resposta g1: ")
g2= input("insira a resposta g2: ")
g3= input("insira a resposta g3: ")
if q1==g1:
	p1=1
elif q2==g2:
	p2=1
elif q3==g3:
	p3=1
elif q1!=g1:
	l1=0
elif q2!=g2:
	l2=0
elif q3!=g3:
	l3=0
print(p1+p2+p3+l1+l2+l3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(p1+p2+p3+l1+l2+l3)
NameError: name 'p1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:11:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if q1==g1:
	p1=1
elif q2==g2:
	p2=1
elif q3==g3:
	p3=1
elif q1!=g1:
	l1=0
elif q2!=g2:
	l2=0
elif q3!=g3:
	l3=0
print(p1+p2+p3+l1+l2+l3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(p1+p2+p3+l1+l2+l3)
NameError: name 'p1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:14:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if q1==g1:
	a=1
elif q2==g2:
	b=1
elif q3==g3:
	c=1
elif q1!=g1:
	d=0
elif q2!=g2:
	e=0
elif q3!=g3:
	f=0
print(a+b+c+d+e+f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a+b+c+d+e+f)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:15:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if q1==g1:
	a=1
if q2==g2:
	b=1
if q3==g3:
	c=1
if q1!=g1:
	d=0
if q2!=g2:
	e=0
if q3!=g3:
	f=0
print(a+b+c+d+e+f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a+b+c+d+e+f)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:15:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if q1==g1:
	a=1
if q2==g2:
	b=1
if q3==g3:
	c=1
if q1!=g1:
	d=0
if q2!=g2:
	e=0
if q3!=g3:
	f=0
print(a+b+c+d+e+f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a+b+c+d+e+f)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:15:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if q1==g1:
	a=1
if q2==g2:
	b=1
if q3==g3:
	c=1
if q1!=g1:
	d=0
if q2!=g2:
	e=0
if q3!=g3:
	f=0
print(a+b+c+d+e+f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a+b+c+d+e+f)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:18:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if q1==g1:
	a=1
if q2==g2:
	b=1
if q3==g3:
	c=1
if q1!=g1:
	d=0
if q2!=g2:
	e=0
if q3!=g3:
	f=0
print(a+b+c+d+e+f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a+b+c+d+e+f)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:18:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if q1==g1:
	a=1
if q2==g2:
	b=1
if q3==g3:
	c=1
if q1!=g1:
	d=0
if q2!=g2:
	e=0
if q3!=g3:
	f=0
print(a+b+c+d+e+f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a+b+c+d+e+f)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:40:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if q1==g1:
	a=1
if q2==g2:
	b=1
if q3==g3:
	c=1
if q1!=g1:
	d=0
if q2!=g2:
	e=0
if q3!=g3:
	f=0
print(a+b+c+d+e+f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a+b+c+d+e+f)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 22:51:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if q1==g1:
	a=1
if q2==g2:
	b=1
if q3==g3:
	c=1
else:
	d=0
print(a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(a+b+c+d)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 22:52:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if q1==g1:
	a=1
if q2==g2:
	b=1
if q3==g3:
	c=1
else:
	d==0
print(a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 16, in <module>
    d==0
NameError: name 'd' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 22:52:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if q1==g1:
	a=1
if q2==g2:
	b=1
if q3==g3:
	c=1
else:
	d=(0)
print(a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(a+b+c+d)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 22:53:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
d=0
if q1==g1:
	a=1
if q2==g2:
	b=1
if q3==g3:
	c=1
else:
	r=d
print(a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print(a+b+c+d)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 22:53:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
d=0
if q1==g1:
	a=1
if q2==g2:
	b=1
if q3==g3:
	c=1
else:
	r=d
print(a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print(a+b+c+d)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 22:54:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
d=0
a1=1
b1=1
c1=1
if q1==g1:
	a=a1
if q2==g2:
	b=b1
if q3==g3:
	c=c1
else:
	r=d
print(a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a+b+c+d)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 22:54:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
d=0
a1=1
b1=1
c1=1
if q1==g1:
	a=a1
if q2==g2:
	b=b1
if q3==g3:
	c=c1
else:
	r=d
print(a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a+b+c+d)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:01:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
d=0
a1=1
b1=1
c1=1
if q1==g1:
	a=a1
if q2==g2:
	b=b1
if q3==g3:
	c=c1
else:
	r=d
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:01:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
d=0
a1=1
b1=1
c1=1
if q1==g1:
	a=a1
if q2==g2:
	b=b1
if q3==g3:
	c=c1
else:
	r=d
print(a)
print(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:01:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
d=0
a1=1
b1=1
c1=1
if q1==g1:
	a=a1
if q2==g2:
	b=b1
if q3==g3:
	c=c1
else:
	r=d
print(a)
print(b)
print(c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:01:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
d=0
a1=1
b1=1
c1=1
if q1==g1:
	a=a1
if q2==g2:
	b=b1
if q3==g3:
	c=c1
else:
	r=d
print(a)
print(b)
print(c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:10:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif ()
-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:11:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:14:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")

	


-- EXECUTION TIME:
0.127141
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:

-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:14:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")

	


-- EXECUTION TIME:
0.133178
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:

-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:14:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")

	


-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:14:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")

	


-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:14:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")

	


-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:14:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")

	


-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:15:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
elif (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("2")

	


-- EXECUTION TIME:
0.187092
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
2
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:15:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
elif (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("2")

	


-- EXECUTION TIME:
0.149385
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
2
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:19:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
elif (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")

	


-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:19:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
elif (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")

	


-- EXECUTION TIME:
0.179445
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
0
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:19:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
elif (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:19:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
elif (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- EXECUTION TIME:
0.14406
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
0
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:19:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
elif (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
elif (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
elif (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
elif (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
elif (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
elif (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:20:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
if (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
if (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
if (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
if (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
if (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- EXECUTION TIME:
0.233038
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
0
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
2
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:20:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
if (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
if (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
if (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
if (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
if (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- EXECUTION TIME:
0.173639
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
0
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
2
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:
insira a resposta 1: insira a resposta 2: insira a resposta 3: insira a resposta g1: insira a resposta g2: insira a resposta g3:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:20:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
if (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
if (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
if (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
if (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
if (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- EXECUTION TIME:
0.235652
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
0
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
2
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:20:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
if (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
if (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
if (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
if (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
if (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:24:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()

if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
if (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
if (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
if (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
if (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
if (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- EXECUTION TIME:
0.132311
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
0
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
2
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:24:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()

if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
if (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
if (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
if (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
if (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
if (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- EXECUTION TIME:
0.177319
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
0
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
0
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:
3
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:24:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()

if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
if (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
if (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
if (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
if (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
if (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:24:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()

if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
if (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
if (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
if (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
if (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
if (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- EXECUTION TIME:
0.147045
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
0
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
2
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:
insira a resposta 1: insira a resposta 2: insira a resposta 3: insira a resposta g1: insira a resposta g2: insira a resposta g3:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:24:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()

if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
if (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
if (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
if (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
if (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
if (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- ERROR:
File "XXXX", line 17
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:24:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()

if (q1==g1)and(q2==g2)and(q3==g3):
	print("3")
if (q1==g1)and(not(q2==g2))and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(q2==g2)and(not(q3==g3)):
	print("1")
if (not(q1==g1))and(not(q2==g2))and(q3==g3):
	print("1")
if (q1==g2)and(q2==g2)and(not(q3==g3)):
	print("2")
if (q1==g2)and(not(q2==g2))and(q3==g3):
	print("2")
if (not(q1==g2))and(q2==g2)and(q3==g3):
	print("2")
if (not(q1==g2))and(not(q2==g2))and(not(q3==g3)):
	print("0")



-- EXECUTION TIME:
0.150746
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
0
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
2
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:34:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=2
c=3
print(a+b+c)


-- OUTPUT:
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:35:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a="1"
b=2
c=3
print(a+b+c)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(a+b+c)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:35:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=2
c=3
if ()


-- ERROR:
File "XXXX", line 12
    if ()
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:39:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=0
if (q1==g1):
	a1=a
if(q2==g2):
	a2=a
if(q3==g3):
	a3=a
print(a1+a2+a3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(a1+a2+a3)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:39:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=0
if (q1==g1):
	a1=a
if(q2==g2):
	a2=a
if(q3==g3):
	a3=a
print(a1+a2+a3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(a1+a2+a3)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:39:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=0
if (q1==g1):
	a1=a
if(q2==g2):
	a2=a
if(q3==g3):
	a3=a
print(a1+a2+a3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(a1+a2+a3)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:39:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=0
if (q1==g1):
	a1=a
if(q2==g2):
	a2=a
if(q3==g3):
	a3=a
else:
	a4=b
print(a1+a2+a3+a4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    print(a1+a2+a3+a4)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:41:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=0
if (q1==g1):
	a1=a
if(q2==g2):
	a2=a
if(q3==g3):
	a3=a
else:
	a4=a
	
print(a1+a2+a3+a4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 20, in <module>
    print(a1+a2+a3+a4)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:41:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=0
if (q1==g1):
	a1=a
if(q2==g2):
	a2=a
if(q3==g3):
	a3=a	
print(a1+a2+a3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(a1+a2+a3)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:41:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=0
if (q1==g1):
	a1=a
if(q2==g2):
	a2=a
if(q3==g3):
	a3=a	
print(a1+a2+a3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(a1+a2+a3)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:41:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=0
if (q1==g1):
	a1=a
if(q2==g2):
	a2=a
if(q3==g3):
	a3=a	
print(a1+a2+a3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print(a1+a2+a3)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:43:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=0
if (q1==g1):
	a1=a
if(q2==g2):
	a2=a
if(q3==g3):
	a3=a
else:
	a4=b
r=(a1+a2+a3+A4)
print(r)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    r=(a1+a2+a3+A4)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:44:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
a=1
b=0
if (q1==g1):
	a1=a
if(q2==g2):
	a2=a
if(q3==g3):
	a3=a
else:
	a4=b
r=(a1+a2+a3+a4)
print(r)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    r=(a1+a2+a3+a4)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:46:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1):
	a1=1
if(q2==g2):
	a2=1
if(q3==g3):
	a3=1
else:
	a4=0
r=(a1+a2+a3+a4)
print(r)





-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    r=(a1+a2+a3+a4)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:46:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1):
	a1=1
if(q2==g2):
	a2=1
if(q3==g3):
	a3=1
r=(a1+a2+a3+a4)
print(r)





-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    r=(a1+a2+a3+a4)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:46:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1):
	a1=1
if(q2==g2):
	a2=1
if(q3==g3):
	a3=1
r=(a1+a2+a3)
print(r)





-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    r=(a1+a2+a3)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:46:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1):
	a1=1
if(q2==g2):
	a2=1
if(q3==g3):
	a3=1
r=(a1+a2+a3)
print(r)





-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    r=(a1+a2+a3)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:47:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1):
	a1=1
if(q2==g2):
	a2=1
if(q3==g3):
	a3=1
r=(a1+a2+a3)
print(r)





-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    r=(a1+a2+a3)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:49:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1):
	a1=1
if (not(q1==g1)):
	a1=0
if(q2==g2):
	a2=1
if(not(q2==g2)):
	a2=0
if(q3==g3):
	a3=1
if(not(q3==g3)):
	a3=0
r=(a1+a2+a3)
print(r)





-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    r=(a1+a2+a3)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:49:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1):
	a1=1
if (not(q1==g1)):
	a1=0
if(q2==g2):
	a2=1
if(not(q2==g2)):
	a2=0
if(q3==g3):
	a3=1
if(not(q3==g3)):
	a3=0
r=(a1+a2+a3)
print(r)





-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    r=(a1+a2+a3)
NameError: name 'a1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:49:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
q1= input("insira a resposta 1: ").lower()
q2= input("insira a resposta 2: ").lower()
q3= input("insira a resposta 3: ").lower()
g1= input("insira a resposta g1: ").lower()
g2= input("insira a resposta g2: ").lower()
g3= input("insira a resposta g3: ").lower()
if (q1==g1):
	a1=1
if (not(q1==g1)):
	a1=0
if(q2==g2):
	a2=1
if(not(q2==g2)):
	a2=0
if(q3==g3):
	a3=1
if(not(q3==g3)):
	a3=0
r=(a1+a2+a3)
print(r)





-- EXECUTION TIME:
0.148537
-- TEST CASE 1:
---- input:
a
b
c
d
e
a
---- correct output:
0
---- user output:
0
-- TEST CASE 2:
---- input:
a
b
c
a
b
c
---- correct output:
3
---- user output:
3
-- TEST CASE 3:
---- input:
c
d
e
c
d
c
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
