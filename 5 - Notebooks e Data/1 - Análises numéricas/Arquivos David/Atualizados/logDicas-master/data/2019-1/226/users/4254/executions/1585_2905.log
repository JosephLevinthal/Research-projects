== TEST (2019-03-22 20:47:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
print(sqrt(36))
-- OUTPUT:
6.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:54:38) 
-- CODE:
# Teste seu codigo o final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float ( input ( "Valor de a: " ) )
b = float ( input ( "Valor de b: " ) )
c = float ( input ( "Valor de c: " ) )

semiper = ( a + b + c ) / 2
Area = sqrt( semiper * (semiper - a) * (semiper - b) * (semiper - c) )
print(Area)
-- OUTPUT:
69.41967475975385
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 20:54:57) 
-- CODE:
# Teste seu codigo o final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float ( input ( "Valor de a: " ) )
b = float ( input ( "Valor de b: " ) )
c = float ( input ( "Valor de c: " ) )

semiper = ( a + b + c ) / 2
Area = sqrt( semiper * (semiper - a) * (semiper - b) * (semiper - c) )
print(Area)
-- EXECUTION TIME:
0.200161
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967475975385
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.1665442616423
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 20:56:22) 
-- CODE:
# Teste seu codigo o final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float ( input ( "Valor de a: " ) )
b = float ( input ( "Valor de b: " ) )
c = float ( input ( "Valor de c: " ) )

semiper = ( a + b + c ) / 2
Area = sqrt( semiper * (semiper - a) * (semiper - b) * (semiper - c) )
print ( round ( Area , 5 )
-- EXECUTION TIME:
0.163473
-- ERROR:
  File "/home/codebench/codes/1585/2905/main.py", line 11
    
                              ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:56:34) 
-- CODE:
# Teste seu codigo o final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float ( input ( "Valor de a: " ) )
b = float ( input ( "Valor de b: " ) )
c = float ( input ( "Valor de c: " ) )

semiper = ( a + b + c ) / 2
Area = sqrt( semiper * (semiper - a) * (semiper - b) * (semiper - c) )
print ( round ( Area , 5 )
-- ERROR:
File "XXXX", line 11
    
                              ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:56:48) 
-- CODE:
# Teste seu codigo o final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float ( input ( "Valor de a: " ) )
b = float ( input ( "Valor de b: " ) )
c = float ( input ( "Valor de c: " ) )

semiper = ( a + b + c ) / 2
Area = sqrt( semiper * (semiper - a) * (semiper - b) * (semiper - c) )
print ( round ( Area , 5 ))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 20:56:57) 
-- CODE:
# Teste seu codigo o final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float ( input ( "Valor de a: " ) )
b = float ( input ( "Valor de b: " ) )
c = float ( input ( "Valor de c: " ) )

semiper = ( a + b + c ) / 2
Area = sqrt( semiper * (semiper - a) * (semiper - b) * (semiper - c) )
print ( round ( Area , 5 ))
-- EXECUTION TIME:
0.166764
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
