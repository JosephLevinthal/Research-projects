== TEST (2019-04-09 00:59:25) 
-- CODE:
x = float(input("coordenada x:"))
y = float(imput("coordenada y:"))
reta = 2*x + y == 3
if(reta == x, y):
	per = "ponto pertence a reta."
else:
	per = "ponto nao pertence a reta."
	
print(per.lower())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    y = float(imput("coordenada y:"))
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:59:52) 
-- CODE:
x = float(input("coordenada x:"))
y = float(input("coordenada y:"))
reta = 2*x + y == 3
if(reta == x, y):
	per = "ponto pertence a reta."
else:
	per = "ponto nao pertence a reta."
	
print(per.lower())
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 01:00:04) 
-- CODE:
x = float(input("coordenada x:"))
y = float(input("coordenada y:"))
reta = 2*x + y == 3
if(reta == x, y):
	per = "ponto pertence a reta."
else:
	per = "ponto nao pertence a reta."
	
print(per.lower())
-- EXECUTION TIME:
0.132264
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta.
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta.
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 01:00:43) 
-- CODE:
x = float(input("coordenada x:"))
y = float(input("coordenada y:"))
reta = (2*x + y == 3)
if(reta == x, y):
	per = "ponto pertence a reta."
else:
	per = "ponto nao pertence a reta."
	
print(per.lower())
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 01:00:59) 
-- CODE:
x = float(input("coordenada x:"))
y = float(input("coordenada y:"))
reta = (2*x + y == 3)
if(reta == x, y):
	per = "ponto pertence a reta."
else:
	per = "ponto nao pertence a reta."
	
print(per.lower())
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:21:05) 
-- CODE:
x = float(input("coordenada x:"))
y = float(input("coordenada y:"))
reta = (2*x + y == 3)
if(reta == 3):
	per = "ponto pertence a reta."
else:
	per = "ponto nao pertence a reta."
	
print(per.lower())
-- OUTPUT:
ponto nao pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:21:32) 
-- CODE:
x = float(input("coordenada x:"))
y = float(input("coordenada y:"))
reta = (2*x + y)
if(reta == 3):
	per = "ponto pertence a reta."
else:
	per = "ponto nao pertence a reta."
	
print(per.lower())
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:21:46) 
-- CODE:
x = float(input("coordenada x:"))
y = float(input("coordenada y:"))
reta = (2*x + y)
if(reta == 3):
	per = "ponto pertence a reta."
else:
	per = "ponto nao pertence a reta."
	
print(per.lower())
-- EXECUTION TIME:
0.159973
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta.
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta.
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:23:01) 
-- CODE:
x = float(input("coordenada x:"))
y = float(input("coordenada y:"))
reta = (2*x + y)
if(reta == 3):
	per = "ponto pertence a reta."
else:
	per = "ponto nao pertence a reta."
	
print(per.lower())
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:23:32) 
-- CODE:
x = float(input("coordenada x:"))
y = float(input("coordenada y:"))
reta = (2*x + y)
if(reta == 3):
	per = "ponto pertence a reta"
else:
	per = "ponto nao pertence a reta"
	
print(per.lower())
-- EXECUTION TIME:
0.146547
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
