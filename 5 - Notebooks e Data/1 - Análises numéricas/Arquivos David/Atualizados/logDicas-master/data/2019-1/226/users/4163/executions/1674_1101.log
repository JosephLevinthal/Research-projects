== TEST (2019-04-28 17:54:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalaçao: ")

print("Entradas",x "e tipo",y)
-- ERROR:
File "XXXX", line 7
    print("Entradas",x "e tipo",y)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:54:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalaçao: ")

print("Entradas",x "e tipo",y)
-- ERROR:
File "XXXX", line 7
    print("Entradas",x "e tipo",y)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:55:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalaçao: ")

print("Entradas:",x "kwh" "e tipo",y)
-- ERROR:
File "XXXX", line 7
    print("Entradas:",x "kwh" "e tipo",y)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:56:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalaçao: ")

print("Entradas:" ,x "kwh""e tipo" ,y)
-- ERROR:
File "XXXX", line 7
    print("Entradas:" ,x "kwh""e tipo" ,y)
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 17:56:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalaçao: ")

print("Entrada:",x)
-- EXECUTION TIME:
0.122285
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entrada: -56.0
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entrada: 955.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:57:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalaçao: ")

print("Entrada:",x)
-- OUTPUT:
Entrada: -56.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:57:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalaçao: ")

print("Entrada:",x"kwh w tipo",y)
-- ERROR:
File "XXXX", line 7
    print("Entrada:",x"kwh w tipo",y)
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:58:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalaçao: ")

print("Entrada:",x,"kwh w tipo",y)
-- OUTPUT:
Entrada: -56.0 kwh w tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:58:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ")

print("Entrada:",x,"kwh w tipo",y)
-- OUTPUT:
Entrada: -56.0 kwh w tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:01:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)
-- OUTPUT:
Entrada: -56.0 kwh w tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:07:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)

if (x<=500):
	p = x*0.44
print("Valor total: R$",p)
else
print("Dados invalidos")
-- ERROR:
File "XXXX", line 12
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:07:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)

if (x<=500):
	p = x*0.44
print("Valor total: R$",p)
else:
print("Dados invalidos")
-- ERROR:
File "XXXX", line 12
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:08:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)

if (x<=500):
	p = x*0.44
print("Valor total: R$",p)

else:

print("Dados invalidos")
-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:08:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)

if (x<=500):
	p = x*0.44
	print("Valor total: R$",p)

else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh w tipo I
Valor total: R$ -24.64
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:09:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)

if (x<=500):
	p = x*0.44
	print("Valor total: R$",p)

else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh w tipo I
Valor total: R$ -24.64
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:16:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)

if (x<=500)and(y==I):
	p = x*0.44
	print("Valor total: R$",p)
elif (x<500)and(y==I):
	p = x*0.65
else:
	print("Dados invalidos")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if (x<=500)and(y==I):
NameError: name 'I' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:18:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)

if (x<=500)and(y==R):
	p = x*0.44
	print("Valor total: R$",p)
elif (x<500)and(y==R):
	p = x*0.65
else:
	print("Dados invalidos")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if (x<=500)and(y==R):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:19:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)

if (x<=500)and(y==R):
	p = x*0.44
	print("Valor total: R$",p)
elif (x<500)and(y==R):
	p = x*0.65
else:
	print("Dados invalidos")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if (x<=500)and(y==R):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:20:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)

if (x<=500)and(y == "R"):
	p = x*0.44
	print("Valor total: R$",p)
elif (x<500)and(y == "R"):
	p = x*0.65
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh w tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:26:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)

if (x<=500)and(y == "R"):
	p = x*0.44
elif (x<500)and(y == "R"):
	p = x*0.65
elif (x<=1000)and(y == "C"):
	p = x*O.55
elif (x>1000)and(y == "C"):
	p = x*0.60
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 14
    p = x*O.55
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:27:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh w tipo",y)

if (x<=500)and(y == "R"):
	p = x * 0.44
elif (x<500)and(y == "R"):
	p = x * 0.65
elif (x<=1000)and(y == "C"):
	p = x * 0.55
elif (x>1000)and(y == "C"):
	p = x * 0.60
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh w tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:31:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = x * 0.44
elif (x<500)and(y == "R"):
	p = x * 0.65
elif (x<=1000)and(y == "C"):
	p = x * 0.55
elif (x>1000)and(y == "C"):
	p = x * 0.60
elif (x<=5000)and(y == "I"):
	p = x * 0.55
elif (x>5000)and(y == "I"):
	p = x * 0.60
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:32:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = x * 0.44
elif (x<500)and(y == "R"):
	p = x * 0.65
elif (x<=1000)and(y == "C"):
	p = x * 0.55
elif (x>1000)and(y == "C"):
	p = x * 0.60
elif (x<=5000)and(y == "I"):
	p = x * 0.55
elif (x>5000)and(y == "I"):
	p = x * 0.60
print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 22
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:36:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = x * 0.44
	print("Valor total: R$",p)
elif (x<500)and(y == "R"):
	p = x * 0.65
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = x * 0.55
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = x * 0.60
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = x * 0.55
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = x * 0.60
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Valor total: R$ -30.800000000000004
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:41:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = x * 0.44
	print(round(("Valor total: R$",p), 2))
elif (x<500)and(y == "R"):
	print(round(("Valor total: R$",p), 2))
elif (x<=1000)and(y == "C"):
	p = x * 0.55
	print(round(("Valor total: R$",p), 2))
elif (x>1000)and(y == "C"):
	p = x * 0.60
	print(round(("Valor total: R$",p), 2))
elif (x<=5000)and(y == "I"):
	p = x * 0.55
	print(round(("Valor total: R$",p), 2))
elif (x>5000)and(y == "I"):
	p = x * 0.60
	print(round(("Valor total: R$",p), 2))
else:
	print("Dados invalidos")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 22, in <module>
    print(round(("Valor total: R$",p), 2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:44:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = x * 0.44
	print("Valor total: R$"round(,p), 2)
#elif (x<500)and(y == "R"):
#	print(round(("Valor total: R$",p), 2))
#elif (x<=1000)and(y == "C"):
#	p = x * 0.55
#	print(round(("Valor total: R$",p), 2))
#elif (x>1000)and(y == "C"):
#	p = x * 0.60
#	print(round(("Valor total: R$",p), 2))
#elif (x<=5000)and(y == "I"):
#	p = x * 0.55
#	print(round(("Valor total: R$",p), 2))
#elif (x>5000)and(y == "I"):
#	p = x * 0.60
#	print(round(("Valor total: R$",p), 2)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 11
    print("Valor total: R$"round(,p), 2)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:45:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = x * 0.44
	print("Valor total: R$"(round(,p), 2))
#elif (x<500)and(y == "R"):
#	print(round(("Valor total: R$",p), 2))
#elif (x<=1000)and(y == "C"):
#	p = x * 0.55
#	print(round(("Valor total: R$",p), 2))
#elif (x>1000)and(y == "C"):
#	p = x * 0.60
#	print(round(("Valor total: R$",p), 2))
#elif (x<=5000)and(y == "I"):
#	p = x * 0.55
#	print(round(("Valor total: R$",p), 2))
#elif (x>5000)and(y == "I"):
#	p = x * 0.60
#	print(round(("Valor total: R$",p), 2)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 11
    print("Valor total: R$"(round(,p), 2))
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:45:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = x * 0.44
	print("Valor total: R$"(round(,p) 2))
#elif (x<500)and(y == "R"):
#	print(round(("Valor total: R$",p), 2))
#elif (x<=1000)and(y == "C"):
#	p = x * 0.55
#	print(round(("Valor total: R$",p), 2))
#elif (x>1000)and(y == "C"):
#	p = x * 0.60
#	print(round(("Valor total: R$",p), 2))
#elif (x<=5000)and(y == "I"):
#	p = x * 0.55
#	print(round(("Valor total: R$",p), 2))
#elif (x>5000)and(y == "I"):
#	p = x * 0.60
#	print(round(("Valor total: R$",p), 2)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 11
    print("Valor total: R$"(round(,p) 2))
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:41:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44)
	print("Valor total: R$",p)
#elif (x<500)and(y == "R"):
#	print(round(("Valor total: R$",p), 2))
#elif (x<=1000)and(y == "C"):
#	p = x * 0.55
#	print(round(("Valor total: R$",p), 2))
#elif (x>1000)and(y == "C"):
#	p = x * 0.60
#	print(round(("Valor total: R$",p), 2))
#elif (x<=5000)and(y == "I"):
#	p = x * 0.55
#	print(round(("Valor total: R$",p), 2))
#elif (x>5000)and(y == "I"):
#	p = x * 0.60
#	print(round(("Valor total: R$",p), 2)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:41:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
#elif (x<500)and(y == "R"):
#	print(round(("Valor total: R$",p), 2))
#elif (x<=1000)and(y == "C"):
#	p = x * 0.55
#	print(round(("Valor total: R$",p), 2))
#elif (x>1000)and(y == "C"):
#	p = x * 0.60
#	print(round(("Valor total: R$",p), 2))
#elif (x<=5000)and(y == "I"):
#	p = x * 0.55
#	print(round(("Valor total: R$",p), 2))
#elif (x>5000)and(y == "I"):
#	p = x * 0.60
#	print(round(("Valor total: R$",p), 2)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:47:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x<500)and(y == "R"):
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 20
    elif (x<=5000)and(y == "I"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:48:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x<500)and(y == "R"):
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 16:48:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x<500)and(y == "R"):
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.187645
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entrada: -56.0 kwh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entrada: 955.5 kwh e tipo R
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:48:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x<500)and(y == "R"):
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:49:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x<500)and(y == "R"):
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:49:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x<500)and(y == "R"):
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:49:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x<500)and(y == "R"):
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:50:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x<500)and(y == "R"):
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 16:51:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x<500)and(y == "R"):
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.135147
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entrada: 955.5 kWh e tipo R
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:08:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:09:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.150507
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entrada: 955.5 kWh e tipo R
Valor total: R$ 621
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:10:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:12:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:12:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:15:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:16:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:17:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:18:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:19:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.120958
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entrada: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:20:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total:" R$,p)
else:
	print("Dados invalidos")
-- ERROR:
File "XXXX", line 26
    print("Valor total:" R$,p)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:21:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:23:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:23:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:24:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:24:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de intalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.139366
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entrada: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entrada: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:25:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de instalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:25:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de instalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.152849
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entrada: -56.0 kwh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entrada: 955.5 kwh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:29:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de instalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x>0) and(x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>0) and(x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x>0) and(x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>0) and(x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x>0) and(x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>0) and(x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:29:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de instalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x>0) and(x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>0) and(x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x>0) and(x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>0) and(x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x>0) and(x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>0) and(x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.189147
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entrada: -56.0 kwh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entrada: 955.5 kwh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:29:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de instalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x>0) and(x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>0) and(x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x>0) and(x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>0) and(x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x>0) and(x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>0) and(x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:31:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de instalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x>=0) and(x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:31:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de instalacao: ").upper()

print("Entrada:",x,"kwh e tipo",y)

if (x>=0) and(x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.123376
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entrada: -56.0 kwh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entrada: 955.5 kwh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:33:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de instalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x>=0) and(x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:33:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de instalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x>=0) and(x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.21536
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entrada: -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entrada: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:34:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de instalacao: ").upper()

print("Entrada:",x,"kWh e tipo",y)

if (x>=0) and(x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- OUTPUT:
Entrada: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:34:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("consumo de energia: "))
y = input("tipo de instalacao: ").upper()

print("Entradas:",x,"kWh e tipo",y)

if (x>=0) and(x<=500)and(y == "R"):
	p = round(x * 0.44, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>500)and(y == "R"):
	p = round(x * 0.65, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=1000)and(y == "C"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>1000)and(y == "C"):
	p = round(x * 0.60, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x<=5000)and(y == "I"):
	p = round(x * 0.55, 2)
	print("Valor total: R$",p)
elif (x>=0) and(x>5000)and(y == "I"):
	p = round(x *0.60, 2)
	print("Valor total: R$",p)
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.130001
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
