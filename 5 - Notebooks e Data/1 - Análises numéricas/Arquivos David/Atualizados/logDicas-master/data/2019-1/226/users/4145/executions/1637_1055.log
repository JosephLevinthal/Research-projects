== TEST (2019-04-09 11:39:01) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(input("angulo do lancamento: "))
d = float(input("distancia horizontal: "))
g = 9.8
r = (v0**2)*sin

if (r == d):
	men = sim
else:
	men = nao
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = radians(input())
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:42:19) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(input("angulo do lancamento: "))
d = float(input("distancia horizontal: "))
g = 9.8
r = ((v0**2)*sin(2*a))/g


if (r == d):
	men = sim
else:
	men = nao
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = radians(input())
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:43:09) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo do lancamento: ")))
d = float(input("distancia horizontal: "))
g = 9.8
r = ((v0**2)*sin(2*a))/g


if (r == d):
	men = sim
else:
	men = nao
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    men = nao
NameError: name 'nao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:43:40) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo do lancamento: ")))
d = float(input("distancia horizontal: "))
g = 9.8
r = ((v0**2)*sin(2*a))/g


if (r == d):
	men = "sim"
else:
	men = "nao"
print(men)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:43:53) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo do lancamento: ")))
d = float(input("distancia horizontal: "))
g = 9.8
r = ((v0**2)*sin(2*a))/g


if (r == d):
	men = "sim"
else:
	men = "nao"
print(men)
-- EXECUTION TIME:
0.134086
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:44:25) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo do lancamento: ")))
d = float(input("distancia horizontal: "))
g = 9.8
r = ((v0**2)*sin(2*a))/g


if (r == d):
	men = "sim"
else:
	men = "nao"
print(men)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:45:48) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo do lancamento: ")))
d = float(input("distancia horizontal: "))
g = 9.8
r = ((v0**2)*sin(2*a))/g


if (r >= d):
	men = "sim"
else:
	men = "nao"
print(men)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:46:12) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo do lancamento: ")))
d = float(input("distancia horizontal: "))
g = 9.8
r = ((v0**2)*sin(2*a))/g


if (r >= d):
	men = "sim"
else:
	men = "nao"
print(men)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:46:43) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo do lancamento: ")))
d = float(input("distancia horizontal: "))
g = 9.8
r = ((v0**2)*sin(2*a))/g


if (r >= d):
	men = "sim"
else:
	men = "nao"
print(men)
-- EXECUTION TIME:
0.212795
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:46:58) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo do lancamento: ")))
d = float(input("distancia horizontal: "))
g = 9.8
r = ((v0**2)*sin(2*a))/g


if (r >= d):
	men = "sim"
else:
	men = "nao"
print(men)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:51:41) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo do lancamento: ")))
d = float(input("distancia horizontal: "))
g = 9.8
r = ((v0**2)*sin(2*a))/g


if (abs(d - r) <= 0.1):
	men = "sim"
else:
	men = "nao"
print(men)
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:52:26) 
-- CODE:
from math import*
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("velocidade inicial: "))
a = radians(float(input("angulo do lancamento: ")))
d = float(input("distancia horizontal: "))
g = 9.8
r = ((v0**2)*sin(2*a))/g


if (abs(d - r) <= 0.1):
	men = "sim"
else:
	men = "nao"
print(men)
-- EXECUTION TIME:
0.129711
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
