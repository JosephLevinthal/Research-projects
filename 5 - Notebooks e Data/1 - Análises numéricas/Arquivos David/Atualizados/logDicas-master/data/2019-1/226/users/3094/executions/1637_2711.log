== TEST (2019-04-08 15:50:22) 
-- CODE:
valor = float(input("valor: "))
qru = int(input("RU: "))
vru = float(input("valor RU: "))
qb = int(input("busao: "))
vb = float(input("valor busao: "))
f = qru * vru + qb * vb
if (valor >= f):
	saldo = "SUFICIENTE"
else: 
	saldo = "INSUFICIENTE"
print(saldo)
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:50:37) 
-- CODE:
valor = float(input("valor: "))
qru = int(input("RU: "))
vru = float(input("valor RU: "))
qb = int(input("busao: "))
vb = float(input("valor busao: "))
f = qru * vru + qb * vb
if (valor >= f):
	saldo = "SUFICIENTE"
else: 
	saldo = "INSUFICIENTE"
print(saldo)
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:51:17) 
-- CODE:
valor = float(input("valor: "))
qru = int(input("RU: "))
vru = float(input("valor RU: "))
qb = int(input("busao: "))
vb = float(input("valor busao: "))
f = qru * vru + qb * vb
if (valor >= f):
	saldo = "SUFICIENTE"
else: 
	saldo = "INSUFICIENTE"
print(saldo)
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:51:40) 
-- CODE:
valor = float(input("valor: "))
qru = int(input("RU: "))
vru = float(input("valor RU: "))
qb = int(input("busao: "))
vb = float(input("valor busao: "))
f = qru * vru + qb * vb
if (valor >= f):
	saldo = "SUFICIENTE"
else: 
	saldo = "INSUFICIENTE"
print(saldo)
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:52:10) 
-- CODE:
valor = float(input("valor: "))
qru = int(input("RU: "))
vru = float(input("valor RU: "))
qb = int(input("busao: "))
vb = float(input("valor busao: "))
f = qru * vru + qb * vb
if (valor >= f):
	saldo = "SUFICIENTE"
else: 
	saldo = "INSUFICIENTE"
print(saldo)
-- EXECUTION TIME:
0.193123
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
INSUFICIENTE
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
