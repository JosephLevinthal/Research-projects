== SUBMITION (2019-05-01 13:38:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)

if (b<a) and(d >c):
	if (c=>a) and (c=<a)
		print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
 
-- EXECUTION TIME:
0.210725
-- ERROR:
  File "/home/codebench/codes/1674/1104/main.py", line 13
    if (c=>a) and (c=<a)
         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:38:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)

if (b<a) and(d >c):
	if (c=>a) and (c=<a)
		print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
 
-- ERROR:
File "XXXX", line 13
    if (c=>a) and (c=<a)
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 13:38:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)

if (b<a) and(d >c):
	if (c=>a) and (c=<a):
		print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
 
-- EXECUTION TIME:
0.197341
-- ERROR:
  File "/home/codebench/codes/1674/1104/main.py", line 13
    if (c=>a) and (c=<a):
         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:38:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)

if (b<a) and(d >c):
	if (c=>a) and (c=<a):
		print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
 
-- ERROR:
File "XXXX", line 13
    if (c=>a) and (c=<a):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:39:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)

if (b<a) and(d >c):
	if (c=>a) and (c=<a)
		print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
 
-- ERROR:
File "XXXX", line 13
    if (c=>a) and (c=<a)
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:39:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)

if (b<a) and(d >c):
	if (c=>a) and (c=<a):
		print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
 
-- ERROR:
File "XXXX", line 13
    if (c=>a) and (c=<a):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:40:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)

if (b<a) and(d >c):
	if (c>=a) and (c<=a):
		print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
 
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:40:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b<a) and(d >c):
	if (c>=a) and (c<=a):
		print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
 
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:42:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b<a) and(d >c):
	if (c>=a) and (c<=a):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
 
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:42:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b<a) and(d >c):
	if (c>=a) and (d<=a):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
 
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:43:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b<a) and(d>c):
	if (c>=a) and (d<=a):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
 
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:43:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b>a) and(d>c):
	if (c>=a) and (d<=a):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
 
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 13:43:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b>a) and(d>c):
	if (c>=a) and (d<=a):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
 
-- EXECUTION TIME:
0.207149
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:43:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b>a) and(d>c):
	if (c>=a) and (d<=a):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
 
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 13:43:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b>a) and(d>c):
	if (c>=a) and (d<=a):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
 
-- EXECUTION TIME:
0.143896
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:43:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b>a) and(d>c):
	if (c>=a) and (d<=a):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
 
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:44:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b>a) and(d>c):
	if (c>=a) and (d<=a):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
 
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 13:45:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b>a) and(d>c):
	if (c>=a) and (d<=b):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
 
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 13:45:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("digite o a: "))
b = float(input("digite o b: "))
c = float(input("digite o c: "))
d = float(input("digite o d: "))

print("Intervalo 1:" , a, "," ,b)
print("Intervalo 2:" , c, "," ,d)

if (b>a) and(d>c):
	if (c>=a) and (d<=b):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
 
-- EXECUTION TIME:
0.156635
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
