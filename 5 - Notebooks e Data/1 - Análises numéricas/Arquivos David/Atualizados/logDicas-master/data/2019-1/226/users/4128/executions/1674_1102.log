== TEST (2019-04-25 13:12:05) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:",a ",",h,",",r)
-- ERROR:
File "XXXX", line 10
    print("Entradas:",a ",",h,",",r)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:15:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", a,",", h,",", r)
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:15:01) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", a,",", h,",", r)
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:15:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", a,",", h,",", r)
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:18:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", a,",", h,",", r)
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:18:28) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", a,",", h,",", r)
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:11:54) 
-- CODE:
from math import*

a = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", a,",", h,",", r)

if((a == 0) or (h == 0) or (r == 0) or (a < h) or (a < 2r)):
	print("Entradas invalidas")
	
	
-- ERROR:
File "XXXX", line 9
    if((a == 0) or (h == 0) or (r == 0) or (a < h) or (a < 2r)):
                                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:12:01) 
-- CODE:
from math import*

a = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", a,",", h,",", r)

if((a == 0) or (h == 0) or (r == 0) or (a < h) or (a < 2*r)):
	print("Entradas invalidas")
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:12:18) 
-- CODE:
from math import*

a = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", a,",", h,",", r)

if((a == 0) or (h == 0) or (r == 0) or (a < h) or (a < 2*r)):
	print("Entradas invalidas")
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:12:19) 
-- CODE:
from math import*

a = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", a,",", h,",", r)

if((a == 0) or (h == 0) or (r == 0) or (a < h) or (a < 2*r)):
	print("Entradas invalidas")
	
	
-- EXECUTION TIME:
0.168223
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:30:52) 
-- CODE:
from math import*

H = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", a,",", h,",", r)

Vc = pi*r**2*H #volume do cilindro	
Ve = (4/3)pi*r**3 #volume da esfera
Va = (pi/3)*H**2(3*r - H) #volume da calota

if((H == 0) or (h == 0) or (r == 0) or (H < h) or (H < 2*r)):
	print("Entradas invalidas")
elif(h == Vc/2):
	V = Vc/2
	print( V ,"litros")
	
	
	
-- ERROR:
File "XXXX", line 10
    Ve = (4/3)pi*r**3 #volume da esfera
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:31:06) 
-- CODE:
from math import*

H = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", a,",", h,",", r)

Vc = pi*r**2*H #volume do cilindro	
Ve = (4/3)*pi*r**3 #volume da esfera
Va = (pi/3)*H**2(3*r - H) #volume da calota

if((H == 0) or (h == 0) or (r == 0) or (H < h) or (H < 2*r)):
	print("Entradas invalidas")
elif(h == Vc/2):
	V = Vc/2
	print( V ,"litros")
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print("Entradas:", a,",", h,",", r)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:31:34) 
-- CODE:
from math import*

H = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", H,",", h,",", r)

Vc = pi*r**2*H #volume do cilindro	
Ve = (4/3)*pi*r**3 #volume da esfera
Va = (pi/3)*H**2(3*r - H) #volume da calota

if((H == 0) or (h == 0) or (r == 0) or (H < h) or (H < 2*r)):
	print("Entradas invalidas")
elif(h == Vc/2):
	V = Vc/2
	print( V ,"litros")
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    Va = (pi/3)*H**2(3*r - H) #volume da calota
TypeError: 'int' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:33:06) 
-- CODE:
from math import*

H = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", H,",", h,",", r)

Vc = pi*r**2*H #volume do cilindro	
Ve = (4/3)*pi*r**3 #volume da esfera
Va = (pi/3)*H**2*(3*r - H) #volume da calota

if((H == 0) or (h == 0) or (r == 0) or (H < h) or (H < 2*r)):
	print("Entradas invalidas")
elif(h == Vc/2):
	V = Vc/2
	print( V ,"litros")
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:37:54) 
-- CODE:
from math import*

H = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", H,",", h,",", r)

Vc = pi*r**2*H #volume do cilindro	
Ve = (4/3)*pi*r**3 #volume da esfera
Va = (pi/3)*H**2*(3*r - H) #volume da calota

if((H == 0) or (h == 0) or (r == 0) or (H < h) or (H < 2*r)):
	print("Entradas invalidas")
elif(h == Vc/2):
	V = Vc/2
	V = round(V,3)
	print( V ,"litros")

print(Vc)
print(Ve)
print(Va)
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
187.79498405363702
50.965010421636
-588.3532833740919
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:39:07) 
-- CODE:
from math import*

H = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", H,",", h,",", r)

Vc = pi*r**2*H #volume do cilindro	
Ve = (4/3)*pi*r**3 #volume da esfera
Va = (pi/3)*H**2*(3*r - H) #volume da calota

if((H == 0) or (h == 0) or (r == 0) or (H < h) or (H < 2*r)):
	print("Entradas invalidas")
elif(h == Vc/2):
	V = Vc/2
	V = round(V,3)
	print( V ,"litros")

print(round(Vc,3))
print(round(Ve,3))
print(round(Va,3))
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
187.795
50.965
-588.353
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:39:14) 
-- CODE:
from math import*

H = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", H,",", h,",", r)

Vc = pi*r**2*H #volume do cilindro	
Ve = (4/3)*pi*r**3 #volume da esfera
Va = (pi/3)*H**2*(3*r - H) #volume da calota

if((H == 0) or (h == 0) or (r == 0) or (H < h) or (H < 2*r)):
	print("Entradas invalidas")
elif(h == Vc/2):
	V = Vc/2
	V = round(V,3)
	print( V ,"litros")

print(round(Vc,3))
print(round(Ve,3))
print(round(Va,3))
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
187.795
50.965
-588.353
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:41:26) 
-- CODE:
from math import*

H = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", H,",", h,",", r)

Vc = pi*r**2*H #volume do cilindro	
Ve = (4/3)*pi*r**3 #volume da esfera
Va = (pi/3)*H**2*(3*r - H) #volume da calota

if((H == 0) or (h == 0) or (r == 0) or (H < h) or (H < 2*r)):
	print("Entradas invalidas")
elif(h >= Vc):
	V = Vc/
	V = round(V,3)
	print( V ,"litros")

print(round(Vc,3))
print(round(Ve,3))
print(round(Va,3))
	
	
-- ERROR:
File "XXXX", line 16
    V = Vc/
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:41:33) 
-- CODE:
from math import*

H = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", H,",", h,",", r)

Vc = pi*r**2*H #volume do cilindro	
Ve = (4/3)*pi*r**3 #volume da esfera
Va = (pi/3)*H**2*(3*r - H) #volume da calota

if((H == 0) or (h == 0) or (r == 0) or (H < h) or (H < 2*r)):
	print("Entradas invalidas")
elif(h >= Vc):
	V = Vc
	V = round(V,3)
	print( V ,"litros")

print(round(Vc,3))
print(round(Ve,3))
print(round(Va,3))
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
187.795
50.965
-588.353
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:42:19) 
-- CODE:
from math import*

H = float(input("altura:"))
h = float(input("nivel de combustivel:"))
r = float(input("raio: "))

print("Entradas:", H,",", h,",", r)

Vc = pi*r**2*H #volume do cilindro	
Ve = (4/3)*pi*r**3 #volume da esfera
Va = (pi/3)*H**2*(3*r - H) #volume da calota

if((H == 0) or (h == 0) or (r == 0) or (H < h) or (H < 2*r)):
	print("Entradas invalidas")
elif(h < Vc):
	V = Vc
	V = round(V,3)
	print( V ,"litros")

print(round(Vc,3))
print(round(Ve,3))
print(round(Va,3))
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
187.795 litros
187.795
50.965
-588.353
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
