== TEST (2019-04-11 10:46:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

g = 9.8
v0 = float(input("vel. inicial: "))



-- OUTPUT:
Falta  26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:53:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = rad(input("Graus: "))
d = float(input(""))

if
-- ERROR:
File "XXXX", line 10
    if
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:53:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = rad(input("Graus: "))
d = float(input(""))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    a = rad(input())
NameError: name 'rad' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:53:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = radians(input("Graus: "))
d = float(input(""))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    a = radians(input())
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:54:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = radiuns(input("Graus: "))
d = float(input(""))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    a = radiuns(input())
NameError: name 'radiuns' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:55:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = float(input("Graus: "))
d = float(input(""))

b = radiuns(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    b = radiuns(a)
NameError: name 'radiuns' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:55:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = float(input("Graus: "))
d = float(input(""))

b = radiuns(a)
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    b = radiuns(a)
NameError: name 'radiuns' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:55:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = float(input("Graus: "))
d = float(input(""))

b = radians(a)
print(a)
-- OUTPUT:
45.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:12:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = float(input("Graus: "))
d = float(input("distancia: "))

if abs(sin(radians(2*a))/g*v0**2 - d) == 0.1:
	print('sim')
	else:
		print('nao')
-- EXECUTION TIME:
0.178963
-- ERROR:
  File "/home/codebench/codes/1637/1055/main.py", line 12
    else:
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:12:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = float(input("Graus: "))
d = float(input("distancia: "))

if abs(sin(radians(2*a))/g*v0**2 - d) == 0.1:
	print('sim')
	else:
		print('nao')
-- ERROR:
File "XXXX", line 12
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:13:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = float(input("Graus: "))
d = float(input("distancia: "))

if abs(sin(radians(2*a))/g*v0**2 - d) == 0.1:
	print('sim')
else:
	print('nao')
-- EXECUTION TIME:
0.183317
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
vel. inicial: Graus: distancia: nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:13:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = float(input("Graus: "))
d = float(input("distancia: "))

if abs(sin(radians(2*a))/g*v0**2 - d) == 0.1:
	print('sim')
else:
	print('nao')
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 11:14:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
g = 9.8
v0 = float(input("vel. inicial: "))
a = float(input("Graus: "))
d = float(input("distancia: "))

if abs(sin(radians(2*a))/g*v0**2 - d) > 0.1:
	print('nao')
else:
	print('sim')
-- EXECUTION TIME:
0.228317
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
