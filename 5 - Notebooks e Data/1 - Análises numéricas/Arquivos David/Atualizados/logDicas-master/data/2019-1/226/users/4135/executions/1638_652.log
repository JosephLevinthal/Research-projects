== TEST (2019-04-16 00:23:07) 
-- CODE:
num = float(input("Digite um numero de 3 digitos:"))
num_rem = (num//100)%10
print (num_rem)
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:23:57) 
-- CODE:
num = float(input("Digite um numero de 3 digitos:"))
num_rem = (num%10)
print (num_rem)
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:24:04) 
-- CODE:
num = float(input("Digite um numero de 3 digitos:"))
num_rem = (num%10)
print (num_rem)
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:24:23) 
-- CODE:
num = float(input("Digite um numero de 3 digitos:"))
num_rem = (num%100)
print (num_rem)
-- OUTPUT:
28.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:26:20) 
-- CODE:
num = float(input("Digite um numero de 3 digitos:"))
num_rem = (num%100)
if (num//num_rem==0):
	print(sim.upper())
else:
	print(nao.upper())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(nao.upper())
NameError: name 'nao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:26:46) 
-- CODE:
num = float(input("Digite um numero de 3 digitos:"))
num_rem = (num%100)
if (num//num_rem==0):
	print("sim".upper())
else:
	print("nao".upper())
-- OUTPUT:
NAO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:27:01) 
-- CODE:
num = float(input("Digite um numero de 3 digitos:"))
num_rem = (num%100)
if (num/num_rem==0):
	print("sim".upper())
else:
	print("nao".upper())
-- OUTPUT:
NAO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:27:35) 
-- CODE:
num = float(input("Digite um numero de 3 digitos:"))
num_rem = (num%100)
if (num%num_rem==0):
	print("sim".upper())
else:
	print("nao".upper())
-- OUTPUT:
SIM
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 00:27:44) 
-- CODE:
num = float(input("Digite um numero de 3 digitos:"))
num_rem = (num%100)
if (num%num_rem==0):
	print("sim".upper())
else:
	print("nao".upper())
-- EXECUTION TIME:
0.137437
-- TEST CASE 1:
---- input:
728
---- correct output:
SIM
---- user output:
SIM
-- TEST CASE 2:
---- input:
789
---- correct output:
NAO
---- user output:
NAO
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
