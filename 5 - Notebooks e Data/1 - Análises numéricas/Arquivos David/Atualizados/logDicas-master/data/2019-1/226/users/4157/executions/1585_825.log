== TEST (2019-03-28 22:13:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio = input("raio:")
pi = float( 3.14.math())
A = float( pi * (raio*2))
V = float(4/3 * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    pi = float( 3.14.math())
AttributeError: 'float' object has no attribute 'math'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 22:17:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio = input("raio:")
pi = float( 3.14)
A = float( pi * (raio*2))
V = float(4/3 * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- EXECUTION TIME:
0.13065
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/825/main.py", line 6, in <module>
    A = float( pi * (raio*2))
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 22:17:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio = input("raio:")
pi = float( 3.14)
A = float( pi * (raio*2))
V = float(4/3 * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = float( pi * (raio*2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:17:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio = input("raio:")
import math
A = float( math.pi * (raio*2))
V = float(4/3 * math.pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = float( math.pi * (raio*2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:25:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
raio = input("raio:")
A = float( math.pi * (raio*2))
V = float(4/3 * math.pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = float( math.pi * (raio*2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:34:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio = input("raio:")
A = float( pi * (raio*2))
V = float(4/3 * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    A = float( pi * (raio*2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:40:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio = input("raio:")
A = ( pi * (raio*2))
V = (4/3 * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    A = ( pi * (raio*2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:48:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio =int(input("raio:"))
A = float( pi * (raio*2))
V = float(4/3 * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    raio =int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 22:49:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio =int(input("raio:"))
A = float( pi * (raio*2))
V = float(4/3 * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- EXECUTION TIME:
0.123091
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/825/main.py", line 6, in <module>
    raio =int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:49:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio =int(input("raio:"))
A = float( pi * (raio*2))
V = float(4/3 * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    raio =int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:50:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio =int(input("raio:"))
A = float( pi * (raio*2))
V = float(4/3 * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    raio =int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:52:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio = float(input("raio:"))
A = float( pi * (raio*2))
V = float(4/3 * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- OUTPUT:
28.274
56.549
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 22:52:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio = float(input("raio:"))
A = float( pi * (raio*2))
V = float(4/3 * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- EXECUTION TIME:
0.172672
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
28.274
56.549
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
77.535
155.069
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 22:54:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio = float(input("raio:"))
A = float( pi * (raio*2))
V = float((4/3) * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- EXECUTION TIME:
0.13608
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
28.274
56.549
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
77.535
155.069
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:54:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio = float(input("raio:"))
A = float( pi * (raio*2))
V = float((4/3) * pi * (raio*3))
print(round(A, 3))
print(round(V, 3))
-- OUTPUT:
28.274
56.549
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 23:02:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio = float(input("raio:"))
a = float( pi * (raio*2))
v = float((4/3) * pi * (raio*3))
print(round(a, 3))
print(round(v, 3))
-- EXECUTION TIME:
0.146885
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
28.274
56.549
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
77.535
155.069
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 23:06:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio = float(input("raio:"))
a = float( pi * (raio**2))
v = float((4/3) * pi * (raio**3))
print(round(a, 3))
print(round(v, 3))
-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 23:06:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
pi = math.pi
raio = float(input("raio:"))
a = float( pi * (raio**2))
v = float((4/3) * pi * (raio**3))
print(round(a, 3))
print(round(v, 3))
-- EXECUTION TIME:
0.13549
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
