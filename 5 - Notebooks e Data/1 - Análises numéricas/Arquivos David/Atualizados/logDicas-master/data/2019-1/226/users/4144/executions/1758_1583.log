== TEST (2019-05-28 13:40:50) 
-- CODE:
a = input("digite os numeros: ")
i = 0
w = a[:3]
n = a[3:6]
r = a[6:]
print(w,".",n,".",r)
-- OUTPUT:
123 .  .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-28 13:41:09) 
-- CODE:
a = input("digite os numeros: ")
i = 0
w = a[:3]
n = a[3:6]
r = a[6:]
print(w,".",n,".",r)
-- EXECUTION TIME:
0.200251
-- TEST CASE 1:
---- input:
123
---- correct output:
123
---- user output:
123 .  .
-- TEST CASE 2:
---- input:
123456789000987654321
---- correct output:
123.456.789.000.987.654.321
---- user output:
123 . 456 . 789000987654321
-- TEST CASE 3:
---- input:
987654321
---- correct output:
987.654.321
---- user output:
987 . 654 . 321
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:41:50) 
-- CODE:
a = input("digite os numeros: ")
i = 0
w = a[:3]
n = a[3:6]
r = a[6:]
print(w,".",n,".",r)
-- OUTPUT:
123 .  .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:59:07) 
-- CODE:
a = input("digite os numeros: ")
i = 0
k = 3
men = ""
while(i<len(a)):
	men = men + a[i:k] + "."
	i = i +3
	k = k +3
print(men)
-- OUTPUT:
123.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:59:16) 
-- CODE:
a = input("digite os numeros: ")
i = 0
k = 3
men = ""
while(i<len(a)):
	men = men + a[i:k] + "."
	i = i +3
	k = k +3
print(men)
-- OUTPUT:
123.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 14:03:37) 
-- CODE:
a = input("digite os numeros: ")
i = 0
k = 3
men = ""
while(i<len(a)):
	if(i==len(a)-3):
		men = men + a[i:k]
		i = i +3
		k = k +3
	else:
		men = men + a[i:k] + "."
		i = i+3
		k = k+3
print(men)
-- OUTPUT:
123
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-28 14:03:41) 
-- CODE:
a = input("digite os numeros: ")
i = 0
k = 3
men = ""
while(i<len(a)):
	if(i==len(a)-3):
		men = men + a[i:k]
		i = i +3
		k = k +3
	else:
		men = men + a[i:k] + "."
		i = i+3
		k = k+3
print(men)
-- EXECUTION TIME:
0.149322
-- TEST CASE 1:
---- input:
123
---- correct output:
123
---- user output:
123
-- TEST CASE 2:
---- input:
123456789000987654321
---- correct output:
123.456.789.000.987.654.321
---- user output:
123.456.789.000.987.654.321
-- TEST CASE 3:
---- input:
987654321
---- correct output:
987.654.321
---- user output:
987.654.321
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
