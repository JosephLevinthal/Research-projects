== TEST (2019-04-24 16:35:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input (" 1: "))
b = float(input (" 2: "))
c = float(input (" 3: "))

if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if ((x < y + z) and (y < x + z) and (z < y + x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:35:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input (" 1: "))
b = float(input (" 2: "))
c = float(input (" 3: "))

if((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if((x < y + z) and (y < x + z) and (z < y + x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:36:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input (" 1: "))
y = float(input (" 2: "))
z = float(input (" 3: "))

if((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:36:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input (" 1: "))
y = float(input (" 2: "))
z = float(input (" 3: "))

if((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.191497
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:38:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input (" 1: "))
y = float(input (" 2: "))
z = float(input (" 3: "))

if((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x == y) and (y == z) and (z == x)):
		print("equilatero")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:38:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input (" 1: "))
y = float(input (" 2: "))
z = float(input (" 3: "))

if((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x == y) and (y == z) and (z == x)):
		print("equilatero")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.143001
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:39:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input (" 1: "))
y = float(input (" 2: "))
z = float(input (" 3: "))

if((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x == y) and (y == z) and (z == x)):
		print("equilatero")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.185829
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
1:  2:  3: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:39:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input (" 1: "))
y = float(input (" 2: "))
z = float(input (" 3: "))

if((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x == y) and (y == z) and (z == x)):
		print("equilatero")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.189673
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:39:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input (" 1: "))
y = float(input (" 2: "))
z = float(input (" 3: "))

if((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x == y) and (y == z) and (z == x)):
		print("equilatero")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:39:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input (" 1: "))
y = float(input (" 2: "))
z = float(input (" 3: "))

if((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x == y) and (y == z) and (z == x)):
		print("equilatero")
	else:
		if ((x == y) or (y == z)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:39:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input (" 1: "))
y = float(input (" 2: "))
z = float(input (" 3: "))

if((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x == y) and (y == z) and (z == x)):
		print("equilatero")
	else:
		if ((x == y) or (y == z)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.163117
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:40:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input (" 1: "))
y = float(input (" 2: "))
z = float(input (" 3: "))

if((x >= y + z) and (y => x + z) and (z >= y + x)):
	if ((x == y) and (y == z) and (z == x)):
		print("equilatero")
	else:
		if ((x == y) or (y == z)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.201541
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 7
    if((x >= y + z) and (y => x + z) and (z >= y + x)):
                           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:43:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b => c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if ((a == b) or (b== c):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 7
    if((a >= b + c) and (b => c + a) and (c >= b + a)):
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:44:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b >= c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if ((a == b) or (b== c):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    if ((a == b) or (b== c):
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:44:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b >= c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if ((a == b) or (b== c):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.14544
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 11
    if ((a == b) or (b== c):
                           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:45:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b >= c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if ((a == b) or (b== c):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.212484
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 11
    if ((a == b) or (b== c):
                           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:45:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b >= c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if ((a == b) or (b== c):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.154476
-- ERROR:
  File "/home/codebench/codes/1674/1099/main.py", line 11
    if ((a == b) or (b== c):
                           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:45:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b >= c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if ((a == b) or (b== c):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    if ((a == b) or (b== c):
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:45:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b >= c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if ((a == b) or (b== c):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    if ((a == b) or (b== c):
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:46:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b >= c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if((a == b) or (b== c):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    if((a == b) or (b== c):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:46:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b >= c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if((a == b) or (b == c)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:46:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b >= c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if((a == b) or (b == c)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:46:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b >= c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if((a == b) or (b == c)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:46:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a >= b + c) and (b >= c + a) and (c >= b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if((a == b) or (b == c)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.186063
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:47:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a < b + c) and (b < c + a) and (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if((a == b) or (b == c)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:47:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a < b + c) and (b < c + a) and (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if((a == b) or (b == c)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.211055
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:48:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a < b + c) or (b < c + a) or (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if((a == b) or (b == c)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:48:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

if((a < b + c) or (b < c + a) or (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("equilatero")
	else:
		if((a == b) or (b == c)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.162103
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:51:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

print("Entradas:", a,"," , b, ",", c)

if((a < b + c) or (b < c + a) or (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:51:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

print("Entradas:", a,"," , b, ",", c)

if((a < b + c) and (b < c + a) and (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.160146
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:15:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

print("Entradas:", a,"," , b, ",", c)

if((a < b + c) and (b < c + a) and (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:15:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

print("Entradas:", a,"," , b, ",", c)

if((a < b + c) and (b < c + a) and (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.0279529
-- ERROR:
Error response from daemon: Container cd81b043916884379530100dfbaca72bd8725eddbf4c9f57c115223f3eb42d49 is not running

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:15:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

print("Entradas:", a,"," , b, ",", c)

if((a < b + c) and (b < c + a) and (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:15:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

print("Entradas:", a,"," , b, ",", c)

if((a < b + c) and (b < c + a) and (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.025954
-- ERROR:
Error response from daemon: Container cd81b043916884379530100dfbaca72bd8725eddbf4c9f57c115223f3eb42d49 is not running

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:16:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

print("Entradas:", a,"," , b, ",", c)

if((a < b + c) and (b < c + a) and (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.0257401
-- ERROR:
Error response from daemon: Container cd81b043916884379530100dfbaca72bd8725eddbf4c9f57c115223f3eb42d49 is not running

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:16:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

print("Entradas:", a,"," , b, ",", c)

if((a < b + c) and (b < c + a) and (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.0285749
-- ERROR:
Error response from daemon: Container cd81b043916884379530100dfbaca72bd8725eddbf4c9f57c115223f3eb42d49 is not running

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:17:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input (" 1: "))
b= float(input (" 2: "))
c= float(input (" 3: "))

print("Entradas:", a,"," , b, ",", c)

if((a < b + c) and (b < c + a) and (c < b + a)):
	if((a ==  b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.17392
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
