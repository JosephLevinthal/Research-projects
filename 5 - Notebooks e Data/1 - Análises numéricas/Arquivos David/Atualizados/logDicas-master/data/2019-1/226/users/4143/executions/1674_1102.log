== SUBMITION (2019-04-30 10:54:23) 
-- CODE:

from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(3*r - h)*(h**2)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume :", round(v*1000,3), "litros")
-- EXECUTION TIME:
0.200874
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entrdas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:56:57) 
-- CODE:

from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r)and(h<=a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume :", round(v*1000,3), "litros")
-- EXECUTION TIME:
0.162932
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entrdas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 10:58:54) 
-- CODE:

from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume :", round(v*1000,3), "litros")
-- EXECUTION TIME:
0.205232
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entrdas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:58:56) 
-- CODE:

from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume :", round(v*1000,3), "litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:00:09) 
-- CODE:

from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v*1000,3), "litros")
-- EXECUTION TIME:
0.14162
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entrdas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:00:11) 
-- CODE:

from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v*1000,3), "litros")
-- EXECUTION TIME:
0.183169
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:00:11) 
-- CODE:

from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v*1000,3), "litros")
-- EXECUTION TIME:
0.349583
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:00:11) 
-- CODE:

from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v*1000,3), "litros")
-- EXECUTION TIME:
0.253585
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:00:11) 
-- CODE:

from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v*1000,3), "litros")
-- EXECUTION TIME:
0.279682
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:00:11) 
-- CODE:

from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v*1000,3), "litros")
-- EXECUTION TIME:
0.500052
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1674/1102/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:01:53) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v*1000,3), "litros")
-- EXECUTION TIME:
0.112085
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entrdas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:01:56) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a)or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v*1000,3), "litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:03:17) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a) or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v5*1000,3), "litros")
-- EXECUTION TIME:
0.142782
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entrdas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:03:21) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a) or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v5*1000,3), "litros")
-- EXECUTION TIME:
0.229221
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:03:21) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a) or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v5*1000,3), "litros")
-- EXECUTION TIME:
0.242627
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:03:21) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a) or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v5*1000,3), "litros")
-- EXECUTION TIME:
0.205772
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:03:21) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a) or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v5*1000,3), "litros")
-- EXECUTION TIME:
0.227301
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1674/1102/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:03:21) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a) or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v5 = v2 + v3 + v4
		print("Volume : ", round(v5*1000,3), "litros")
-- EXECUTION TIME:
0.273738
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1674/1102/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:03:45) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a) or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = v2 + v3 + v4
		print("Volume : ", round(v*1000, 3), "litros")
-- EXECUTION TIME:
0.218916
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entrdas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entrdas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:06:10) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a) or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = v2 + v3 + v4
		print("Volume : ", round(v*1000, 3), "litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:06:57) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a) or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = v2 + v3 + v4
		print("Volume : ", round(v*1000, 3), "litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:07:14) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a) or (2*r>a):
	print("Entrdas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = v2 + v3 + v4
		print("Volume : ", round(v*1000, 3), "litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:07:27) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entrdas invalidas")
elif (h>a) or (2*r>a):
	print("Entradas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = v2 + v3 + v4
		print("Volume : ", round(v*1000, 3), "litros")
-- EXECUTION TIME:
0.152808
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:07:49) 
-- CODE:
from math import*
a = float(input("altura tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r =float(input("raio dos bojos semi esfericos inferior e superior:"))
print("Entradas: ", a,",", h,",", r)
if (h<0)or(a<=0)or(r<=0):
	print("Entradas invalidas")
elif (h>a) or (2*r>a):
	print("Entradas invalidas")
else:
	if (h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>r) and (h<=a-r):
		v2= (4*pi*(r**3))/6
		v3= pi*(r**2)*(h-r)		
		v = v2 + v3
		print("Volume: ", round(v*1000,3), "litros")
	elif (h>a-r):
		v2 = (4*pi*(r**3))/6
		v3 = pi*(r**2)*(a-2*r)		
		v4 = v2 - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = v2 + v3 + v4
		print("Volume : ", round(v*1000, 3), "litros")
-- EXECUTION TIME:
0.175261
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
