== TEST (2019-04-09 19:34:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import
vi = float(input("Valor da vel. inucial: "))
ang = float(input("Valor do angulo: "))
a_g = float(input("Valor da aceleracao da gravidade: "))

k = radians(ang)
print(k)
-- ERROR:
File "XXXX", line 4
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:34:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import
vi = float(input("Valor da vel. inucial: "))
ang = float(input("Valor do angulo: "))
a_g = float(input("Valor da aceleracao da gravidade: "))

k = radians(ang)
print(k)
-- ERROR:
File "XXXX", line 4
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:34:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import
vi = float(input("Valor da vel. inucial: "))
ang = float(input("Valor do angulo: "))
a_g = float(input("Valor da aceleracao da gravidade: "))

k = radians(ang)
print(k)
-- ERROR:
File "XXXX", line 4
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:34:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math from
vi = float(input("Valor da vel. inucial: "))
ang = float(input("Valor do angulo: "))
a_g = float(input("Valor da aceleracao da gravidade: "))

k = radians(ang)
print(k)
-- ERROR:
File "XXXX", line 4
    import math from
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:43:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import
vi = float(input("Valor da vel. inucial: "))
ang = radians(float(input("Valor do angulo: ")))
d = float(input("Valor da distancia horizontal: "))
g = 9.8

r = (( (vi**2) * ( sin(2*ang) ) )/g)

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 4
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:43:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
 from math import
vi = float(input("Valor da vel. inucial: "))
ang = radians(float(input("Valor do angulo: ")))
d = float(input("Valor da distancia horizontal: "))
g = 9.8

r = (( (vi**2) * ( sin(2*ang) ) )/g)

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 4
    from math import
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:43:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import

vi = float(input("Valor da vel. inucial: "))
ang = radians(float(input("Valor do angulo: ")))
d = float(input("Valor da distancia horizontal: "))
g = 9.8

r = (( (vi**2) * ( sin(2*ang) ) )/g)

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 4
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:44:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi = float(input("Valor da vel. inucial: "))
ang = radians(float(input("Valor do angulo: ")))
d = float(input("Valor da distancia horizontal: "))
g = 9.8

r = (( (vi**2) * ( sin(2*ang) ) )/g)

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 19:44:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi = float(input("Valor da vel. inucial: "))
ang = radians(float(input("Valor do angulo: ")))
d = float(input("Valor da distancia horizontal: "))
g = 9.8

r = (( (vi**2) * ( sin(2*ang) ) )/g)

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.123889
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:45:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi = float(input("Valor da vel. inucial: "))
ang = radians(float(input("Valor do angulo: ")))
d = float(input("Valor da distancia horizontal: "))
g = 9.8

r = (( (vi**2) * ( sin(2*ang) ) )/g)

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:45:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi = float(input("Valor da vel. inicial: "))
ang = radians(float(input("Valor do angulo: ")))
d = float(input("Valor da distancia horizontal: "))
g = 9.8

r = (( (vi**2) * ( sin(2*ang) ) )/g)

if(abs(d - r) <= 0.1):
	print("sim")
else:
	print("nao")

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
