== SUBMITION (2019-03-25 12:41:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))

-- EXECUTION TIME:
0.149392
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:

-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:41:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:43:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(numero//1000)
soma1=int(numero//1000)-()

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    soma1=int(numero//1000)-()
TypeError: unsupported operand type(s) for -: 'int' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:44:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(numero//1000)
soma1=int(numero//1000)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    soma1=int(numero//1000)-()
TypeError: unsupported operand type(s) for -: 'int' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:45:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(numero//1000)
soma1=int(numero//1000)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    soma1=int(numero//1000)-()
TypeError: unsupported operand type(s) for -: 'int' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:45:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=float
(numero//1000)
soma1=int(numero//1000)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    soma1=int(numero//1000)-()
TypeError: unsupported operand type(s) for -: 'int' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:46:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=float(numero//1000)
soma1=int(numero//1000)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    soma1=int(numero//1000)-()
TypeError: unsupported operand type(s) for -: 'int' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:46:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=float(numero/1000)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    soma1=int(numero//1000)-()
TypeError: unsupported operand type(s) for -: 'int' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:47:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=float(input(numero/1000))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=float(input(numero/1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:47:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(numero//1000)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=float(input(numero/1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:49:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(numero//1000)-(numero%1000)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=float(input(numero/1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:50:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=float(numero//1000)-float(numero%1000)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=float(input(numero/1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:50:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=float(numero//1000)-float(numero%1000)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=float(input(numero/1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:50:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(numero//1000)-float(numero%1000)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=float(input(numero/1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:51:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=float(numero%1000)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=float(input(numero/1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:51:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=float(numero%1000)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=float(input(numero/1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:52:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=float(input(numero%1000))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=float(input(numero%1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:53:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:57:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))-(10*/numero)


-- ERROR:
File "XXXX", line 6
    soma1=int(input(numero//100))-(10*/numero)
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:57:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:57:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:57:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:57:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 12:57:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))


-- EXECUTION TIME:
0.108673
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/842/main.py", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 12:57:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))


-- EXECUTION TIME:
0.122823
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/842/main.py", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:57:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 12:59:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))-(numero%10)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:00:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))-float(input(numero%10))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:01:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))-float(input(numero%10))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:02:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=int(input(numero//1000))
soma1=int(input(numero//100))-float(input(numero%10))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=int(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:02:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=int(input(numero//100))-float(input(numero%10))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:03:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100))-(input(numero%10))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:03:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100))-(input(numero%10))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:04:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100))-(input(numero*10))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:09:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100))-(input(numero//1000(*10)))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:10:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100))-(input((numero//1000)(*10)))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:10:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100))-(input((numero//1000)(*10)))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-(input((numero//1000)(*10)))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-(input((numero//1000)(*10)))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-(input((numero//1000)(*10)))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-(input((numero//1000)(*10)))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-(input((numero//1000)(*10)))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:11:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:12:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-(input((numero//1000)(*10))))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:13:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-(input((numero//1000)(*10)))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:13:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-(input((numero//1000)(*10)))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:13:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-input((numero//1000)(*10))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:13:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-input((numero//1000)(*10))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:13:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-input((numero//1000)(*10))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:13:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-input((numero//1000)(*10))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:13:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-input((numero//1000)(*10))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:13:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-input((numero//1000)(*10)))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:14:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-input((numero//1000)*(10))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:14:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=((input(numero//100)-input((numero//1000)*(10))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:15:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(((input(numero//100)-input((numero//1000)*(10)))


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:15:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=input(numero//100)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:16:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=input(numero//100)-input((numero//1000)(*10))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:17:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-int((numero//1000)(*10)))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:18:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=(input(numero//100)-input(numero*10)


-- ERROR:
File "XXXX", line 8
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:18:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=input(numero//100)-input(numero*10)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:19:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=input(numero//100)-(soma1*10)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:20:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=input(numero//100)-(soma*10)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:20:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=(input(numero//1000))
soma1=input(numero//100)-input(soma*10)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:20:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=numero//1000
soma1=numero//100-(soma*10)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:21:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=numero//1000
soma1=(numero//100-(soma*10))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=(input(numero//1000))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:22:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=input(numero//1000)
soma1=input(numero//100)-(soma*10))


-- ERROR:
File "XXXX", line 6
    soma1=input(numero//100)-(soma*10))
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:22:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=input(numero//1000)
soma1=input(numero//100)-(soma*10))


-- ERROR:
File "XXXX", line 6
    soma1=input(numero//100)-(soma*10))
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:22:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=input(numero//1000)
soma1=input(numero//100)-(soma*10)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=input(numero//1000)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:22:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=input(numero//1000)
soma1=input(numero//100)-input(soma*10)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=input(numero//1000)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:23:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
soma=numero//1000
soma1=numero//100-(soma*10)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=input(numero//1000)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:24:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
s=numero//1000
s1=numero//100-(s*10)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    soma=input(numero//1000)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:24:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
s=numero//1000
s1=numero//100-(s*10)


-- EXECUTION TIME:
0.152406
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:

-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:26:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
s=numero//1000
s1=numero//100-(s*10)
s2=numero//10-(s2*100)
s3=numero%100


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    s2=numero//10-(s2*100)
NameError: name 's2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:27:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
s=numero//1000
s1=numero//100-(s*10)
s2=numero//10-(s1*100)
s3=numero%100


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    s2=numero//10-(s2*100)
NameError: name 's2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:28:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
s=numero//1000
s1=numero//100-(s*10)
s2=numero//10-(s1*100)
s3=numero%100


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    s2=numero//10-(s2*100)
NameError: name 's2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:30:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
s=numero//1000
s1=numero//100-(s*10)
s2=numero//10-(s1//100)*10
s3=numero%s2
print(s+s1+s2+s3)


-- EXECUTION TIME:
0.189147
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
930
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
102
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:30:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
s=numero//1000
s1=numero//100-(s*10)
s2=numero//10-(s1//100)*10
s3=numero%s2
print(s+s1+s2+s3)


-- OUTPUT:
930
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:32:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
s=numero // 1000
s1=numero // 100-(s * 10)
s2=numero // 10-(s1 // 100) * 10
s3=numero % s2

print(s+s1+s2+s3)

-- EXECUTION TIME:
0.183745
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
930
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
102
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:32:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
s=numero // 1000
s1=numero // 100-(s * 10)
s2=numero // 10-(s1 // 100) * 10
s3=numero % s2

print(s+s1+s2+s3)

-- OUTPUT:
930
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:33:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos:"))
s=numero // 1000
s1=numero // 100-(s * 10)
s2=numero // 10-(s1 // 100) * 10
s3=numero % s2

print(s+s1+s2+s3)

-- OUTPUT:
930
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:33:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos: "))
s=numero // 1000
s1=numero // 100-(s * 10)
s2=numero // 10-(s1 // 100) * 10
s3=numero % s2

print(s+s1+s2+s3)

-- EXECUTION TIME:
0.185628
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
930
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
102
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:34:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos: "))
s= numero // 1000
s1= numero // 100 - (s * 10)
s2= numero // 10-(s1 // 100) * 10
s3= numero % s2

print(s+s1+s2+s3)

-- OUTPUT:
930
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:35:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos: "))
s= numero // 1000
s1= numero // 100 - (s * 10)
s2= numero // 10-(s1 // 100) * 10
s3= numero % numero

print(s+s1+s2+s3)

-- OUTPUT:
927
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:35:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos: "))
s= numero // 1000
s1= numero // 100 - (s * 10)
s2= numero // 10-(s1 // 100) * 10
s3= numero % numero

print(s+s1+s2+s3)

-- OUTPUT:
927
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:35:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos: "))
s= numero // 1000
s1= numero // 100 - (s * 10)
s2= numero // 10-(s1 // 100) * 10
s3= numero % numero

print(s+s1+s2+s3)

-- EXECUTION TIME:
0.195275
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
927
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
102
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:36:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos: "))
s= numero // 1000
s1= numero // 100 - (s * 10)
s2= numero // 10-(s1 // 100) * 10
s3= s2 % numero

print(s+s1+s2+s3)

-- EXECUTION TIME:
0.146067
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
1844
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
203
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:36:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("insira um numero de quatro digitos: "))
s= numero // 1000
s1= numero // 100 - (s * 10)
s2= numero // 10-(s1 // 100) * 10
s3= s2 % numero

print(s+s1+s2+s3)

-- OUTPUT:
1844
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:38:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
na=int(input("insira um numero de quatro digitos: "))
nb= na // 1000
nc= na // 100 - (nb* 10)
nd= na // 10-(na // 100) * 10
ne=  na % nd

print(s+s1+s2+s3)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(s+s1+s2+s3)
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:38:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
na=int(input("insira um numero de quatro digitos: "))
nb= na // 1000
nc= na // 100 - (nb* 10)
nd= na // 10-(na // 100) * 10
ne=  na % nd

print(nb+nc+nd+ne)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:38:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
na=int(input("insira um numero de quatro digitos: "))
nb= na // 1000
nc= na // 100 - (nb* 10)
nd= na // 10-(na // 100) * 10
ne=  na % nd

print(nb+nc+nd+ne)

-- EXECUTION TIME:
0.216785
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 10:11:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(input("escreva o numero:"))

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 10:12:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
print(a)


-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 10:12:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
print(a)


-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 10:14:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
print(a)
print(b)


-- OUTPUT:
9
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 10:17:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
print(a)
print(b)
print(c)


-- OUTPUT:
9
1
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 10:17:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
print(a)
print(b)
print(c)


-- OUTPUT:
9
1
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 10:20:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
d = ((a * 100) + (b * 10))
e = var % d
print(a)
print(b)
print(c)
print(e)


-- OUTPUT:
9
1
7
73
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 10:20:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
d = ((a * 100) + (b * 10)) + c
e = var % d
print(a)
print(b)
print(c)
print(e)


-- OUTPUT:
9
1
7
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 10:21:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
d = ((a * 100) + (b * 10)) + c
e = var % d

print(a + b +c +e)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 10:21:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
d = ((a * 100) + (b * 10)) + c
e = var % d

print(a + b +c +e)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 10:21:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
d = ((a * 100) + (b * 10)) + c
e = var % d

print(a + b +c +e)

-- EXECUTION TIME:
0.183735
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:45:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
d = ((a * 1000) + (b * 100) + (c *10)
print(d)

print(a + b +c +e)

-- ERROR:
File "XXXX", line 10
    print(d)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:45:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
d = ((a * 1000) + (b * 100) + (c *10))
print(d)

print(a + b +c +e)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(a + b +c +e)
NameError: name 'e' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:46:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
d = ((a * 1000) + (b * 100) + (c *10))
print(d)

print(a + b +c +d)

-- OUTPUT:
9170
9187
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 21:46:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
d = ((a * 1000) + (b * 100) + (c *10))
e = var -d
print(a + b +c +e)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 21:46:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("escreva o numero:"))

a = var//1000
b = var//100 - (a * 10)
c = var//10 - ((a * 100) + (b * 10))
d = ((a * 1000) + (b * 100) + (c *10))
e = var -d
print(a + b +c +e)

-- EXECUTION TIME:
0.215186
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
