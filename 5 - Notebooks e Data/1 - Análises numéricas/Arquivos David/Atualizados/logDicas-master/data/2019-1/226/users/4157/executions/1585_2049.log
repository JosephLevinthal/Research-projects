== TEST (2019-03-26 10:42:30) 
-- CODE:
# Teste seu codigo aos poucos.
x = input(int("dividendo:"))
y = input(int("divisor:"))
print(x)
print(y)
print(x // y)
print(x % y)

# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    x = input(int("dividendo:"))
ValueError: invalid literal for int() with base 10: 'dividendo:'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:42:57) 
-- CODE:
# Teste seu codigo aos poucos.
x = input("dividendo:")
y = input("divisor:")
print(x)
print(y)
print(x // y)
print(x % y)

# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x // y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:43:20) 
-- CODE:
# Teste seu codigo aos poucos.
x = input("dividendo:")
y = input("divisor:")
print(x)
print(y)
print(x / y)
print(x % y)

# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x / y)
TypeError: unsupported operand type(s) for /: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:44:13) 
-- CODE:
# Teste seu codigo aos poucos.
x = input("dividendo:")
y = input("divisor:")
print(x)
print(y)
print(int(x // y))
print(x % y)

# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(int(x // y))
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:47:29) 
-- CODE:
# Teste seu codigo aos poucos.
x = input("dividendo:")
y = input("divisor:")
print(x)
print(y)
print(x // y)
print(x % y)

# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.170737
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1585/2049/main.py", line 6, in <module>
    print(x // y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:47:45) 
-- CODE:
# Teste seu codigo aos poucos.
x = input("dividendo:")
y = input("divisor:")
print(x)
print(y)
print(x // y)
print(x % y)

# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x // y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:49:13) 
-- CODE:
# Teste seu codigo aos poucos.
x = int(input("dividendo:"))
y = int(input("divisor:"))
print(x)
print(y)
print(int(x // y))
print(x % y)

# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:49:21) 
-- CODE:
# Teste seu codigo aos poucos.
x = int(input("dividendo:"))
y = int(input("divisor:"))
print(x)
print(y)
print(int(x // y))
print(x % y)

# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.22689
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
