== TEST (2019-04-10 16:26:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
dist = (v0**2) * sin(2a)/ g
if (dist == d ):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- ERROR:
File "XXXX", line 9
    dist = (v0**2) * sin(2a)/ g
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 16:27:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
dist = (v**2) * sin(2a)/ g
if (dist == d ):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- ERROR:
File "XXXX", line 9
    dist = (v**2) * sin(2a)/ g
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 16:27:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 16:27:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 16:27:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.263373
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 16:29:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	resp= "sim"
	print(abs(dist - d))
else:
	resp= "nao"
	print(abs(d -dist))
	
-- OUTPUT:
10.107640492799487
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 16:30:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
abs(dist - d)
from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    abs(dist - d)
NameError: name 'dist' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 16:30:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	abs(dist - d)
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 16:30:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	abs(dist - d)
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.143726
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 16:31:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	abs(dist - d)
	resp= "sim"
	print(resp)
else:
	abs(d - dist)
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 16:31:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	abs(dist - d)
	resp= "sim"
	print(resp)
else:
	abs(d - dist)
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.135482
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 19:16:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	abs(dist - d)
	resp= "sim"
	print(resp)
else:
	abs(d - dist)
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 19:17:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	abs(dist - d)
	resp= "sim"
	print(resp)
else:
	abs(d - dist)
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.132177
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:11:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	abs(dist - d)
	resp= "sim"
	print(resp)
else:
	abs(d - dist)
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:13:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = (v**2) * sin(2*a)/ g
if (dist == d ):
	abs(dist - d)
	resp= "sim"
	print(resp)
else:
	abs(d - dist)
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.134973
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:14:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
if (dist == d ):
	abs(dist - d)
	resp= "sim"
	print(resp)
else:
	abs(d - dist)
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:15:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
if (dist == d ):
	resp= "sim"
	print(resp)
else:
	abs(d - dist)
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:15:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
if (dist == d ):
	resp= "sim"
	print(resp)
else:
	abs(d - dist)
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.192445
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:15:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
if (dist == d ):
	resp= "sim"
	print(resp)
else:
	abs(dist - d)
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.16192
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:15:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
if (dist == d ):
	resp= "sim"
	print(resp)
else:
	abs(dist - d)
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:19:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
if (dist == d ):
	abs(dist- d)< 0.1
	resp= "sim"
	print(resp)
else:
	abs(dist - d)
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:19:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
if (dist == d ):
	abs(dist- d)< 0.1
	resp= "sim"
	print(resp)
else:
	abs(dist - d)
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.152765
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:21:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
x = dist- d 
if (x < 0.1)?
	resp= "sim"
	print(resp)
else:
	abs(dist - d)
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.214606
-- ERROR:
  File "/home/codebench/codes/1637/1055/main.py", line 12
    if (x < 0.1)?
                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:21:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
x = dist- d 
if (x < 0.1)?
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.247047
-- ERROR:
  File "/home/codebench/codes/1637/1055/main.py", line 12
    if (x < 0.1)?
                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:21:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
x = dist- d 
if (x < 0.1)
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.225624
-- ERROR:
  File "/home/codebench/codes/1637/1055/main.py", line 12
    if (x < 0.1)
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:21:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
x = dist- d 
if (x < 0.1)
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- ERROR:
File "XXXX", line 12
    if (x < 0.1)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:22:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8

from math import *
dist = ((v**2) * sin(2*a))/ g
x = dist- d 
if ("x"< 0.1)
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- ERROR:
File "XXXX", line 12
    if ("x"< 0.1)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:25:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = ((v**2) * b/g
x = abs (dist - d)

if (x< 0.1)
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.178326
-- ERROR:
  File "/home/codebench/codes/1637/1055/main.py", line 12
    x = abs (dist - d)
    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:25:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = ((v**2) * b/g
x = abs (dist - d)

if (x< 0.1)
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- ERROR:
File "XXXX", line 12
    x = abs (dist - d)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:25:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = ((v**2) * b/g
x = abs (dist - d)

if (x < 0.1)
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.163613
-- ERROR:
  File "/home/codebench/codes/1637/1055/main.py", line 12
    x = abs (dist - d)
    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:26:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = ((v**2) * b/g
x = abs (dist - d)

if (x < 0.1)
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- ERROR:
File "XXXX", line 12
    x = abs (dist - d)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:26:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = ((v**2) * b/g
x = abs (dist - d)

if (x < 0.1)
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- ERROR:
File "XXXX", line 12
    x = abs (dist - d)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:27:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x < 0.1)
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- ERROR:
File "XXXX", line 14
    if (x < 0.1)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:27:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x < 0.1)?
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- ERROR:
File "XXXX", line 14
    if (x < 0.1)?
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:27:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x < 0.1):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.21362
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:27:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x < 0.1):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:28:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x < 0.1):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.137952
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:29:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x < 0.1):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:29:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x < 0.1):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.229868
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:29:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x < 0.1):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.179802
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:29:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x < 0.1):
	resp= "sim"
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.270086
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.174674
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
Digite a velocidade inicial (m/s): Digite o angulo de lancamento (em graus): Distancia horizontal: nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.16767
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
Digite a velocidade inicial (m/s): Digite o angulo de lancamento (em graus): Distancia horizontal: nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
Digite a velocidade inicial (m/s): Digite o angulo de lancamento (em graus): Distancia horizontal: nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.207893
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
Digite a velocidade inicial (m/s): Digite o angulo de lancamento (em graus): Distancia horizontal: nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:30:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.215592
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
Digite a velocidade inicial (m/s): Digite o angulo de lancamento (em graus): Distancia horizontal: nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.226943
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.217208
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.187944
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.318884
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.455705
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.636789
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.812621
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.966221
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.894659
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.319904
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.467798
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1637/1055/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.679884
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.794639
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.812443
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.895115
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:30:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist = (v**2) * b/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.275966
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:34:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist =((v**2) * b)/g
x = abs (dist - d)

if (x <=0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.190305
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:35:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist =((v**2) * b)/g
x = abs (dist - d)

if (x < 0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 10:36:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist =((v**2) * b)/g
x = abs (dist - d)

if (x < 0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:36:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
b = sin(2*a)
A = radians(a)
dist =((v**2) * b)/g
x = abs (dist - d)

if (x < 0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.124115
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 10:37:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input("Digite a velocidade inicial (m/s): "))
a = float(input("Digite o angulo de lancamento (em graus): "))
d = float(input("Distancia horizontal: "))
g = 9.8
from math import *
A = radians(a)
b = sin(2*A)
dist =((v**2) * b)/g
x = abs (dist - d)

if (x < 0.1):
	resp= "sim" 
	print(resp)
else:
	resp= "nao"
	print(resp)
	
-- EXECUTION TIME:
0.215285
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
