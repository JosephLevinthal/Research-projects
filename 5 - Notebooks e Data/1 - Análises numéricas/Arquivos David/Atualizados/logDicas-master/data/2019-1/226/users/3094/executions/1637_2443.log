== TEST (2019-04-08 16:27:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = int(input("altura: "))
opcao = input("1 ou 2: ")
ve = (4 * math.pi * raio ** 3) / 3
vc = math.pi * altura ** 2 * (3 * raio - altura) / 3
if ("1"):
	sair = round(vc, 4)
else:
	sair = ve - vc
print(sair)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:39:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = int(input("altura: "))
opcao = input("1 ou 2: ")
ve = (4 * math.pi * raio ** 3) / 3
vc = math.pi * altura ** 2 * (3 * raio - altura) / 3
if ("1"):
	sair = round(vc, 4)
else:
	sair = ve - vc
print(sair)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:39:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
ve = (4 * math.pi * raio ** 3) / 3
vc = math.pi * altura ** 2 * (3 * raio - altura) / 3
if ("1"):
	sair = round(vc, 4)
else:
	sair = ve - vc
print(sair)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:40:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
ve = (4 * pi * raio ** 3) / 3
vc = math.pi * altura ** 2 * (3 * raio - altura) / 3
if ("1"):
	sair = round(vc, 4)
else:
	sair = ve - vc
print(sair)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:40:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
ve = (4 * pi * raio ** 3) / 3
vc = pi * altura ** 2 * (3 * raio - altura) / 3
if ("1"):
	sair = round(vc, 4)
else:
	sair = ve - vc
print(sair)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:42:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
ve = (4 * pi * (raio ** 3)) / 3
vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if ("1"):
	sair = round(vc, 4)
else:
	sair = ve - vc
print(sair)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:44:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
ve = (4 * pi * (raio ** 3)) / 3
vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if ("1"):
	sair = vc
	print(round(sair, 4))
else:
	sair = ve - vc
	print(round(sair, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 10:44:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
ve = (4 * pi * (raio ** 3)) / 3
vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if ("1"):
	sair = vc
	print(round(sair, 4))
else:
	sair = ve - vc
	print(round(sair, 4))
-- EXECUTION TIME:
0.175648
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2443/main.py", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 10:48:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
ve = (4 * pi * (raio ** 3)) / 3
vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if ("1"):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:14:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
ve = (4 * pi * (raio ** 3)) / 3
vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if ("1"):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- EXECUTION TIME:
0.187355
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2443/main.py", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:14:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
ve = (4 * pi * (raio ** 3)) / 3
vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if ("1"):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:15:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
ve = (4 * pi * (raio ** 3)) / 3
vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if (opcao == "1"):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:15:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
ve = (4 * pi * (raio ** 3)) / 3
vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if (opcao == "1"):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- EXECUTION TIME:
0.217398
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2443/main.py", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:16:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
#ve = (4 * pi * (raio ** 3)) / 3
#vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if (opcao == "1"):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:17:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
#ve = (4 * pi * (raio ** 3)) / 3
#vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if (opcao == "1"):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:18:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
#ve = (4 * pi * (raio ** 3)) / 3
#vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if (opcao == "1"):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- EXECUTION TIME:
0.173117
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2443/main.py", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:23:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
#ve = (4 * pi * (raio ** 3)) / 3
#vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if (opcao == 1):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- EXECUTION TIME:
0.165477
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2443/main.py", line 4, in <module>
    raio = int(input("raio: "))
ValueError: invalid literal for int() with base 10: '3.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 11:23:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
#ve = (4 * pi * (raio ** 3)) / 3
#vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if (opcao == 1):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:24:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
#ve = (4 * pi * (raio ** 3)) / 3
#vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if (opcao == 1):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- EXECUTION TIME:
0.197246
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2443/main.py", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:24:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = int(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
#ve = (4 * pi * (raio ** 3)) / 3
#vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if (opcao == "1"):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- EXECUTION TIME:
0.145834
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1637/2443/main.py", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '3.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 11:25:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
raio = float(input("raio: "))
altura = float(input("altura: "))
opcao = input("1 ou 2: ")
from math import *
#ve = (4 * pi * (raio ** 3)) / 3
#vc = (pi * (altura ** 2) * (3 * raio - altura)) / 3
if (opcao == "1"):
	sair = (pi * (altura ** 2) * (3 * raio - altura)) / 3
	print(round(sair, 4))
else:
	sair = ((4 * pi * (raio ** 3)) / 3) - ((pi * (altura ** 2) * (3 * raio - altura)) / 3)
	print(round(sair, 4))
-- EXECUTION TIME:
0.150731
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
