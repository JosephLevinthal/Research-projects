== TEST (2019-04-07 13:18:21) 
-- CODE:
nota = float(input("Insira a nota: "))
bon.upper() = input("Recebera a bonificacao? (S/N): ")
print(bon)
-- ERROR:
File "XXXX", line 2
    bon.upper() = input()
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 13:19:52) 
-- CODE:
nota = float(input("Insira a nota: "))
bon = input("Recebera a bonificacao? (S/N): ").upper()
print(bon)
-- OUTPUT:
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 13:20:03) 
-- CODE:
nota = float(input("Insira a nota: "))
bon = input("Recebera a bonificacao? (S/N): ").upper()
print(bon)
-- OUTPUT:
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 13:20:08) 
-- CODE:
nota = float(input("Insira a nota: "))
bon = input("Recebera a bonificacao? (S/N): ").upper()
print(bon)
-- OUTPUT:
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 13:20:17) 
-- CODE:
nota = float(input("Insira a nota: "))
bon = input("Recebera a bonificacao? (S/N): ").upper()
print(bon)
-- OUTPUT:
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 13:23:05) 
-- CODE:
nota = float(input("Insira a nota: "))
bon = input("Recebera a bonificacao? (S/N): ").upper()
if(bon == S):
	total = (nota + ((10/100) * nota))
else: 
	total = nota
print(total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(bon == S):
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 13:23:37) 
-- CODE:
nota = float(input("Insira a nota: "))
bon = input("Recebera a bonificacao? (S/N): ").upper()
if(bon == S):
	total = (nota + ((10/100) * nota))
else: 
	total = nota
print(total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(bon == S):
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 13:23:59) 
-- CODE:
nota = float(input("Insira a nota: "))
bon = input("Recebera a bonificacao? (S/N): ").upper()
if(bon == "S"):
	total = (nota + ((10/100) * nota))
else: 
	total = nota
print(total)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 13:24:09) 
-- CODE:
nota = float(input("Insira a nota: "))
bon = input("Recebera a bonificacao? (S/N): ").upper()
if(bon == "S"):
	total = (nota + ((10/100) * nota))
else: 
	total = nota
print(total)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 13:24:15) 
-- CODE:
nota = float(input("Insira a nota: "))
bon = input("Recebera a bonificacao? (S/N): ").upper()
if(bon == "S"):
	total = (nota + ((10/100) * nota))
else: 
	total = nota
print(total)
-- EXECUTION TIME:
0.130521
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
