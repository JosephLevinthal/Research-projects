== TEST (2019-04-23 18:02:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, b, c)
if (a< c+d) and (b< c+a) and (c< a+b):
	if (a==b==c):
		print("oi")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a< c+d) and (b< c+a) and (c< a+b):
NameError: name 'd' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 18:02:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, b, c)
if (a< c+b) and (b< c+a) and (c< a+b):
	if (a==b==c):
		print("oi")
-- OUTPUT:
Entradas:  2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 18:03:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, b, c)
if (a< c+b) and (b< c+a) and (c< a+b):
	if (a==b==c):
		print("oi")
	elif (a==b) or (b==c) or (a==c):
		print("oid")
-- OUTPUT:
Entradas:  2.0 4.0 4.0
oid
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 18:06:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, b, c)
if (a< c+b) and (b< c+a) and (c< a+b):
	if (a==b==c):
		x = "equilatero"
	elif (a==b) or (b==c) or (a==c):
		x = "isosceles"
	elif (a!=b) and (a!=c) and (c!=b):
		x = "escaleno"
else:
	x = "invalido"
print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas:  2.0 4.0 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 18:06:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, b, c)
if (a< c+b) and (b< c+a) and (c< a+b):
	if (a==b==c):
		x = "equilatero"
	elif (a==b) or (b==c) or (a==c):
		x = "isosceles"
	elif (a!=b) and (a!=c) and (c!=b):
		x = "escaleno"
else:
	x = "invalido"
print("Tipo de triangulo:", x)
-- OUTPUT:
Entradas:  2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 18:07:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, "," , b, ",", c)
if (a< c+b) and (b< c+a) and (c< a+b):
	if (a==b==c):
		x = "equilatero"
	elif (a==b) or (b==c) or (a==c):
		x = "isosceles"
	elif (a!=b) and (a!=c) and (c!=b):
		x = "escaleno"
else:
	x = "invalido"
print("Tipo de triangulo:", x)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 18:07:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, "," , b, ",", c)
if (a< c+b) and (b< c+a) and (c< a+b):
	if (a==b==c):
		x = "equilatero"
	elif (a==b) or (b==c) or (a==c):
		x = "isosceles"
	elif (a!=b) and (a!=c) and (c!=b):
		x = "escaleno"
else:
	x = "invalido"
print("Tipo de triangulo:", x)
-- EXECUTION TIME:
0.206655
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
