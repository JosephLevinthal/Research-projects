== TEST (2019-04-25 10:38:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
	if (a<b+c)and(b<a+c)and(c<a+b):
		elif (a==b)and(b=c)and(c==a):
			print('Tipo de triangulo: equilatero')
		elif (a==b)or(b==c)or(a==c):
			print("Tipo de triangulo: isosceles ")
		elif(a!=b)and(b!=c)and(c!=a):
			print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 10
    elif (a==b)and(b=c)and(c==a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:39:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
	if (a<b+c)and(b<a+c)and(c<a+b):
		elif (a==b)and(b==c)and(c==a):
			print('Tipo de triangulo: equilatero')
		elif (a==b)or(b==c)or(a==c):
			print("Tipo de triangulo: isosceles ")
		elif(a!=b)and(b!=c)and(c!=a):
			print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 10
    elif (a==b)and(b==c)and(c==a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:39:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
	if (a<b+c)and(b<a+c)and(c<a+b):
		elif (a==b)and(b==c)and(c==a):
			print('Tipo de triangulo: equilatero')
		elif (a==b)or(b==c)or(a==c):
			print("Tipo de triangulo: isosceles ")
		elif(a!=b)and(b!=c)and(c!=a):
			print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 10
    elif (a==b)and(b==c)and(c==a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:39:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
	if (a<b+c)and(b<a+c)and(c<a+b):
	elif (a==b)and(b==c)and(c==a):
		print('Tipo de triangulo: equilatero')
	elif (a==b)or(b==c)or(a==c):
		print("Tipo de triangulo: isosceles ")
	elif(a!=b)and(b!=c)and(c!=a):
		print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 10
    elif (a==b)and(b==c)and(c==a):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
	if (a<b+c)and(b<a+c)and(c<a+b):
	elif (a==b)and(b==c)and(c==a):
		print('Tipo de triangulo: equilatero')
	elif (a==b)or(b==c)or(a==c):
		print("Tipo de triangulo: isosceles ")
	elif(a!=b)and(b!=c)and(c!=a):
		print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 10
    elif (a==b)and(b==c)and(c==a):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
elif (a<b+c)and(b<a+c)and(c<a+b):
	elif (a==b)and(b==c)and(c==a):
		print('Tipo de triangulo: equilatero')
	elif (a==b)or(b==c)or(a==c):
		print("Tipo de triangulo: isosceles ")
	elif(a!=b)and(b!=c)and(c!=a):
		print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif (a<b+c)and(b<a+c)and(c<a+b):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
elif (a<b+c)and(b<a+c)and(c<a+b):
	elif (a==b)and(b==c)and(c==a):
		print('Tipo de triangulo: equilatero')
	elif (a==b)or(b==c)or(a==c):
		print("Tipo de triangulo: isosceles ")
	elif(a!=b)and(b!=c)and(c!=a):
		print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif (a<b+c)and(b<a+c)and(c<a+b):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
elif (a<b+c)and(b<a+c)and(c<a+b):
	elif (a==b)and(b==c)and(c==a):
		print('Tipo de triangulo: equilatero')
	elif (a==b)or(b==c)or(a==c):
		print("Tipo de triangulo: isosceles ")
	elif(a!=b)and(b!=c)and(c!=a):
		print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif (a<b+c)and(b<a+c)and(c<a+b):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
elif (a<b+c)and(b<a+c)and(c<a+b):
	elif (a==b)and(b==c)and(c==a):
		print('Tipo de triangulo: equilatero')
	elif (a==b)or(b==c)or(a==c):
		print("Tipo de triangulo: isosceles ")
	elif(a!=b)and(b!=c)and(c!=a):
		print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif (a<b+c)and(b<a+c)and(c<a+b):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
elif (a<b+c)and(b<a+c)and(c<a+b):
	elif (a==b)and(b==c)and(c==a):
		print('Tipo de triangulo: equilatero')
	elif (a==b)or(b==c)or(a==c):
		print("Tipo de triangulo: isosceles ")
	elif(a!=b)and(b!=c)and(c!=a):
		print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif (a<b+c)and(b<a+c)and(c<a+b):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:41:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
	if (a<b+c)and(b<a+c)and(c<a+b):
		elif (a==b)and(b==c)and(c==a):
			print('Tipo de triangulo: equilatero')
		elif (a==b)or(b==c)or(a==c):
			print("Tipo de triangulo: isosceles ")
		elif(a!=b)and(b!=c)and(c!=a):
			print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 10
    elif (a==b)and(b==c)and(c==a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:41:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
	if (a<b+c)and(b<a+c)and(c<a+b):
		if (a==b)and(b==c)and(c==a):
			print('Tipo de triangulo: equilatero')
		if (a==b)or(b==c)or(a==c):
			print("Tipo de triangulo: isosceles ")
		if(a!=b)and(b!=c)and(c!=a):
			print("Tipo de triangulo: escaleno ")
else:
	print("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a>0)and(b>0)and(c>0):
	if (a<b+c)and(b<a+c)and(c<a+b):
		if (a==b)and(b==c)and(c==a):
			print('Tipo de triangulo: equilatero')
		if (a==b)or(b==c)or(a==c):
			print("Tipo de triangulo: isosceles ")
		if(a!=b)and(b!=c)and(c!=a):
			print("Tipo de triangulo: escaleno ")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a<b+c)and(b<a+c)and(c<a+b):
	if (a==b)and(b==c)and(c==a):
		print('Tipo de triangulo: equilatero')
	if (a==b)or(b==c)or(a==c):
		print("Tipo de triangulo: isosceles ")
	if(a!=b)and(b!=c)and(c!=a):
		print("Tipo de triangulo: escaleno ")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:43:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a<b+c)and(b<a+c)and(c<a+b):
	if (a==b)and(b==c)and(c==a):
		print('Tipo de triangulo: equilatero')
	if (a==b)or(b==c)or(a==c):
		print("Tipo de triangulo: isosceles ")
	if(a!=b)and(b!=c)and(c!=a):
		print("Tipo de triangulo: escaleno ")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.120154
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 15:47:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a<b+c)and(b<a+c)and(c<a+b):
	if (a==b)and(b==c)and(c==a):
		print('Tipo de triangulo: equilatero')
	if (a==b)or(b==c)or(a==c):
		print("Tipo de triangulo: isosceles ")
	if(a!=b)and(b!=c)and(c!=a):
		print("Tipo de triangulo: escaleno ")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.161562
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
