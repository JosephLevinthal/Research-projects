== TEST (2019-05-02 00:17:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ")
print('Entradas: ' ce 'e tipo ' y )
if(ti == "R" and ce <= 500):
	
-- ERROR:
File "XXXX", line 6
    print('Entradas: ' ce 'e tipo ' y )
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:18:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ")
print('Entradas: ' ce ' kWh' 'e tipo ' y )
if(ti == "R" and ce <= 500):
	
-- ERROR:
File "XXXX", line 6
    print('Entradas: ' ce ' kWh' 'e tipo ' y )
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:19:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ")
print('Entradas: ' ce ' kWh' 'e tipo ' ti )
if(ti == "R" and ce <= 500):
	
-- ERROR:
File "XXXX", line 6
    print('Entradas: ' ce ' kWh' 'e tipo ' ti )
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:19:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ")
print('Entradas: ', ce, ' kWh' 'e tipo ', ti )
if(ti == "R" and ce <= 500):
	
-- ERROR:
File "XXXX", line 9
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:19:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ")
print('Entradas: ', ce, ' kWh' 'e tipo ', ti )
#if(ti == "R" and ce <= 500):
	
-- OUTPUT:
Entradas:  -56.0  kWhe tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:20:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )
#if(ti == "R" and ce <= 500):
	
-- OUTPUT:
Entradas:  -56.0  kWh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:23:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )
if(ti == "R" and ce <= 500):
	x = 0.44 * ce
	print("Valor total: R$ ", x)
	
-- OUTPUT:
Entradas:  -56.0  kWh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:34:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )
if(ti == "R" and ce <= 500):
	x = 0.44 * ce
	print("Valor total: R$ ", x)
else:
	x = 0.65 * ce
	print("Valor total: R$ ", x)
		if(ti == "C" and ce <= 1000):
			x = 0.55 * ce
			print("Valor total: R$ ", x)
		else:
			x = 0.60 * ce
			print("Valor total: R$ ", x)
				if(ti == I and ce <= 5000):
					x = 0.55 * ce
					print("Valor total: R$ ", x)
				else:
					x = 0.60 * ce
			 	else:
					print("Dados invalidos")
			
			
			
			
			
			
-- ERROR:
File "XXXX", line 13
    if(ti == "C" and ce <= 1000):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:35:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )
if(ti == "R" and ce <= 500):
	x = 0.44 * ce
print("Valor total: R$ ", x)
else:
	x = 0.65 * ce
print("Valor total: R$ ", x)
		if(ti == "C" and ce <= 1000):
			x = 0.55 * ce
		print("Valor total: R$ ", x)
		else:
			x = 0.60 * ce
		print("Valor total: R$ ", x)
				if(ti == I and ce <= 5000):
					x = 0.55 * ce
				print("Valor total: R$ ", x)
				else:
					x = 0.60 * ce
			 	else:
				print("Dados invalidos")
			
			
			
			
			
			
-- ERROR:
File "XXXX", line 10
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:36:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )
if(ti == "R" and ce <= 500):
	x = 0.44 * ce
print("Valor total: R$ ", x)
	else:
	x = 0.65 * ce
	print("Valor total: R$ ", x)
		if(ti == "C" and ce <= 1000):
			x = 0.55 * ce
		print("Valor total: R$ ", x)
		else:
			x = 0.60 * ce
		print("Valor total: R$ ", x)
				if(ti == I and ce <= 5000):
					x = 0.55 * ce
				print("Valor total: R$ ", x)
				else:
					x = 0.60 * ce
			 	else:
				print("Dados invalidos")
			
			
			
			
			
			
-- ERROR:
File "XXXX", line 10
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:36:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )
if(ti == "R" and ce <= 500):
	x = 0.44 * ce
print("Valor total: R$ ", x)
else:
	x = 0.65 * ce
print("Valor total: R$ ", x)
		if(ti == "C" and ce <= 1000):
			x = 0.55 * ce
		print("Valor total: R$ ", x)
		else:
			x = 0.60 * ce
		print("Valor total: R$ ", x)
				if(ti == I and ce <= 5000):
					x = 0.55 * ce
				print("Valor total: R$ ", x)
				else:
					x = 0.60 * ce
			 	else:
				print("Dados invalidos")
			
			
			
			
			
			
-- ERROR:
File "XXXX", line 10
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:50:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo==c) and (ce<=1000)
		print('Valor total: ', 'R$', c)
	elif(tipo==c)and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo==i) and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo==i)and(ce>5000):
		print('Valor total: ', 'R$', c)
	else:
		print('Dados invalidos')
	
	
	
	
-- ERROR:
File "XXXX", line 20
    elif(tipo==c) and (ce<=1000)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:51:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce<=1000)
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', c)
	else:
		print('Dados invalidos')
	
	
	
	
-- ERROR:
File "XXXX", line 20
    elif(tipo=='C') and (ce<=1000)
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:52:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce<=1000)
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', c)
	else:
		print('Dados invalidos')
	
	
	
	
-- ERROR:
File "XXXX", line 20
    elif(tipo=='C') and (ce<=1000)
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:52:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000)
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', c)
	else:
		print('Dados invalidos')
	
	
	
	
-- ERROR:
File "XXXX", line 20
    elif(tipo=='C') and (ce <= 1000)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:53:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
ti = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', c)
	else:
		print('Dados invalidos')
	
	
	
	
-- OUTPUT:
Entradas:  -56.0  kWh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:53:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', c)
	else:
		print('Dados invalidos')
	
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print('Entradas: ', ce, ' kWh ' 'e tipo ', ti )
NameError: name 'ti' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:54:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', tipo )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', c)
	else:
		print('Dados invalidos')
	
	
	
	
-- OUTPUT:
Entradas:  -56.0  kWh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:54:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', tipo )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', c)
	else:
		print('Dados invalidos')
	
	
	
	
-- EXECUTION TIME:
0.237608
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0  kWh e tipo  I
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5  kWh e tipo  R
Valor total:  R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:55:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', tipo )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', i)
	else:
		print('Dados invalidos')
	
	
	
	
-- EXECUTION TIME:
0.177412
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0  kWh e tipo  I
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5  kWh e tipo  R
Valor total:  R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:55:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', tipo )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', i)
	else:
		print('Dados invalidos')
	
	
	
	
-- EXECUTION TIME:
0.195213
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0  kWh e tipo  I
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5  kWh e tipo  R
Valor total:  R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:55:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', tipo )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', i)
	else:
		print('Dados invalidos')
	
	
	
	
-- OUTPUT:
Entradas:  -56.0  kWh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 09:08:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', tipo )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', i)
	else:
		print('Dados invalidos')
	
	
	
	
-- EXECUTION TIME:
0.26427
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0  kWh e tipo  I
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5  kWh e tipo  R
Valor total:  R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 09:08:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', tipo )

r = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', i)
	else:
		print('Dados invalidos')
	
	
	
	
-- OUTPUT:
Entradas:  -56.0  kWh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 09:10:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', tipo )

r1 = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c1 = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i1 = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r1)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c1)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i1)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', i)
	else:
		print('Dados invalidos')
	
	
	
	
-- OUTPUT:
Entradas:  -56.0  kWh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 09:10:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', tipo )

r1 = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c1 = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i1 = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r1)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c1)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i1)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', i)
	else:
		print('Dados invalidos')
	
	
	
	
-- OUTPUT:
Entradas:  -56.0  kWh e tipo  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 09:11:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', tipo )

r1 = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c1 = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i1 = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r1)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c1)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i1)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', i)
	else:
		print('Dados invalidos')
	
	
	
	
-- EXECUTION TIME:
0.144213
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0  kWh e tipo  I
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5  kWh e tipo  R
Valor total:  R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 09:35:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
ce = float(input("consumo de energia: "))
tipo = input("tipo de instalacao: ").upper()
print('Entradas: ', ce, ' kWh ' 'e tipo ', tipo )

r1 = round(ce*(0.44),2)
r = round(ce*(0.65), 2)
c1 = round(ce*(0.55), 2)
c = round(ce*(0.60),2)
i1 = round(ce*(0.55),2)
i= round(ce*(0.60),2)

if(ce>0):
	if(tipo =='R') and (ce<=500):
		print('Valor total: ', 'R$', r1)
	elif (tipo =='R') and (ce > 500):
		print('Valor total: ', 'R$', r)
	elif(tipo=='C') and (ce <= 1000):
		print('Valor total: ', 'R$', c1)
	elif(tipo=='C')and(ce >1000):
		print('Valor total: ', 'R$', c)
	elif(tipo=='I') and(ce<=5000):
		print('Valor total: ', 'R$', i1)
	elif(tipo=='I')and(ce>5000):
		print('Valor total: ', 'R$', i)
	else:
		print('Dados invalidos')
	
	
	
	
-- EXECUTION TIME:
0.17271
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0  kWh e tipo  I
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5  kWh e tipo  R
Valor total:  R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
