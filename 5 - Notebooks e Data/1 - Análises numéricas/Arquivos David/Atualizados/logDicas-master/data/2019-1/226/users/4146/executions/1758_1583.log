== TEST (2019-05-29 20:37:08) 
-- CODE:
num = input("Numero: ")
p = "   ."
i = 0
new = num + p


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:44:14) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = new + num[:i] + p
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:44:18) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = new + num[:i] + p
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:44:18) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = new + num[:i] + p
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:44:18) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = new + num[:i] + p
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:44:33) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = new + num[:i] + p
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:44:45) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[:i] + p
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:44:53) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[:i] + p
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:46:27) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[:i] + p + num[-1]
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:46:43) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[:i] + p + num[:-1]
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:47:04) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[:i] + p + num[-3:-1]
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:47:32) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[:i] + p + num[-3:]
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:47:40) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[:i] + p + num[-3:]
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:47:54) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[:i] + p + num[-2:]
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:48:15) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[:i] + p + num[-3:]
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:49:30) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[-3:]
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:50:21) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + num[-3:]
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:50:30) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-29 20:50:38) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3


print(new)
-- EXECUTION TIME:
0.116389
-- TEST CASE 1:
---- input:
123
---- correct output:
123
---- user output:

-- TEST CASE 2:
---- input:
123456789000987654321
---- correct output:
123.456.789.000.987.654.321
---- user output:
123.456.321
-- TEST CASE 3:
---- input:
987654321
---- correct output:
987.654.321
---- user output:
987.654.321
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:50:54) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3


print(new)
-- OUTPUT:
123   .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:51:05) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3


print(int(new))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(int(new))
ValueError: invalid literal for int() with base 10: ''
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:51:06) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3


print(int(new))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(int(new))
ValueError: invalid literal for int() with base 10: ''
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:51:06) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3


print(int(new))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(int(new))
ValueError: invalid literal for int() with base 10: ''
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:51:06) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3


print(int(new))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(int(new))
ValueError: invalid literal for int() with base 10: ''
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:51:34) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = int(num[0:3] + p + num[3:6] + p + num[-3:])
		
	i = i + 3


print(int(new))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(int(new))
ValueError: invalid literal for int() with base 10: ''
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:51:44) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = int(num[0:3] + p + num[3:6] + p + num[-3:])
		
	i = i + 3


print(new)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(int(new))
ValueError: invalid literal for int() with base 10: ''
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:51:55) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = int(num[0:3] + p + num[3:6] + p + num[-3:])
		
	i = i + 3


print(new)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(int(new))
ValueError: invalid literal for int() with base 10: ''
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:52:10) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = int(num[0:3] + p + num[3:6] + p + num[-3:])
		
	i = i + 3
a = int(new)

print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    a = int(new)
ValueError: invalid literal for int() with base 10: ''
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:52:27) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3
a = int(new)

print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    a = int(new)
ValueError: invalid literal for int() with base 10: ''
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:52:30) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3
a = int(new)

print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    a = int(new)
ValueError: invalid literal for int() with base 10: ''
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:52:39) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3
a = int(new)

print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    a = int(new)
ValueError: invalid literal for int() with base 10: ''
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:52:50) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3

print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:53:04) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3

print(new)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:53:10) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3

print(new)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 20:53:19) 
-- CODE:
num = input("Numero: ")
p = "."
i = 3
new = ""
while(i < len(num)):
	if (num[i] != num[-1]):
		new = num[0:3] + p + num[3:6] + p + num[-3:]
		
	i = i + 3

print(new)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 21:03:21) 
-- CODE:
num = input("Numero: ")
p = "."
i = -1
new = ""
while(i < len(num)):
	if (i%3 == 0):
		new = num[i] + p + new
	i = i - 1

print(new)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    new = num[i] + p + new
IndexError: string index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 21:03:46) 
-- CODE:
num = input("Numero: ")
p = "."
i = -1
new = ""
while(i < len(num)):
	if (i%3 == 0):
		new = num[i] + p + new
	i = i - 1

print(new)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    new = num[i] + p + new
IndexError: string index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 21:04:16) 
-- CODE:
num = input("Numero: ")
p = "."
i = -1
new = ""
while(i < len(num)):
	if (i%3 == 0):
		new = num[:i] + p + new
	i = i - 1

print(new)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    new = num[i] + p + new
IndexError: string index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 21:04:32) 
-- CODE:
num = input("Numero: ")
p = "."
i = -1
new = ""
while(i < len(num)):
	if (i%3 == 0):
		new = num[:i] + p + new
	i = i - 1

print(new)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    new = num[i] + p + new
IndexError: string index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 21:04:38) 
-- CODE:
num = input("Numero: ")
p = "."
i = -1
new = ""
while(i < len(num)):
	if (i%3 == 0):
		new = num[:i] + p
	i = i - 1

print(new)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    new = num[i] + p + new
IndexError: string index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 21:04:45) 
-- CODE:
num = input("Numero: ")
p = "."
i = -1
new = ""
while(i < len(num)):
	if (i%3 == 0):
		new = num[:i] + p
	i = i - 1

print(new)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    new = num[i] + p + new
IndexError: string index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-29 21:09:12) 
-- CODE:
num = input("Numero: ")
i = 0
k = 3
msg = ""
while(i < len(num)):
	if(i == (len(num) - 3)):
		msg = msg + num[i:k]
		i = i + 3
		k = k + 3
	else:
		msg = msg + num[i:k] + "."
		i = i + 3
		k = k + 3
		
print(msg)		
-- EXECUTION TIME:
0.193814
-- TEST CASE 1:
---- input:
123
---- correct output:
123
---- user output:
123
-- TEST CASE 2:
---- input:
123456789000987654321
---- correct output:
123.456.789.000.987.654.321
---- user output:
123.456.789.000.987.654.321
-- TEST CASE 3:
---- input:
987654321
---- correct output:
987.654.321
---- user output:
987.654.321
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
