== TEST (2019-04-04 23:52:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = abs(5.1)
printe(x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    printe(x)
NameError: name 'printe' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:53:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = abs(5.1)
print(x)
-- OUTPUT:
5.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:53:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = abs(5.5)
print(x)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:54:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = round(5.1)
print(x)
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:54:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = round(5.3)
print(x)
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:55:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = round(5.9)
print(x)
-- OUTPUT:
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:55:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = round(5.5)
print(x)
-- OUTPUT:
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:57:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = abs(5-0.1)
print(x)
-- OUTPUT:
4.9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:58:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = abs(5-4.9)
print(x)
-- OUTPUT:
0.09999999999999964
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:59:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = abs(5*2)
print(x)
-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 00:00:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = abs(5-4)
print(x)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 00:01:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
x = abs(4-5)
print(x)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:46:28) 
-- CODE:
from math import *
r = float(input("raio:"))
ax = float(input("altura de x:"))
x = int(input("opcao 1 ou 2:"))


if (x == 1)
	v = (4*pi*(r**3))/3

print(x)
-- ERROR:
File "XXXX", line 7
    if (x == 1)
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:46:52) 
-- CODE:
from math import *
r = float(input("raio:"))
ax = float(input("altura de x:"))
x = int(input("opcao 1 ou 2:"))


if (x == 1):
	v = (4*pi*(r**3))/3

print(x)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:48:12) 
-- CODE:
from math import *
r = float(input("raio:"))
ax = float(input("altura de x:"))
x = int(input("opcao 1 ou 2:"))


if (x == 1):
	v = (4*pi*(r**3))/3

print(x)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:48:44) 
-- CODE:
from math import *
r = float(input("raio:"))
ax = float(input("altura de x:"))
x = int(input("opcao 1 ou 2:"))


if (x == 1):
	v = (4*pi*(r**3))/3

print(v)
-- OUTPUT:
179.5943800302165
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:57:41) 
-- CODE:
from math import *
r = float(input("raio:"))
ax = float(input("altura de x:"))
x = int(input("opcao 1 ou 2:"))

if (x == 1):
	v = ((pi*(ax**2))*((3*r)-ax)/3)
else:
	v = ((4*pi*(r**3))/3)-((pi*(ax**2))*((3*r)-ax)/3)

print(round(v,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 12:58:16) 
-- CODE:
from math import *
r = float(input("raio:"))
ax = float(input("altura de x:"))
x = int(input("opcao 1 ou 2:"))

if (x == 1):
	v = ((pi*(ax**2))*((3*r)-ax)/3)
else:
	v = ((4*pi*(r**3))/3)-((pi*(ax**2))*((3*r)-ax)/3)

print(round(v,4))
-- EXECUTION TIME:
0.149508
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 22:39:35) 
-- CODE:
from math import *
r = float(input("raio:"))
ax = float(input("altura de x:"))
x = int(input("opcao 1 ou 2:"))

if (x == 1):
	v = ((pi*(ax**2))*((3*r)-ax)/3)
else:
	v = ((4*pi*(r**3))/3)-((pi*(ax**2))*((3*r)-ax)/3)

print(round(v,4))
-- EXECUTION TIME:
0.187495
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
