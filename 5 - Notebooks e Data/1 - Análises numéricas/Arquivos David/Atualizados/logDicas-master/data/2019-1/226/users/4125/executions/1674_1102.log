== TEST (2019-04-30 11:04:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
h = float(input("altura do tanque: "))
h1 = float(input("nivel de combustivel do tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
x = "Entradas: "
y = "Volumes: "
if(h>0)and(h1>0)and(h>h1)and(r>0)and(h>2*r):
	print(x,h,h1,r)
-- OUTPUT:
Entradas:  11.3 5.7 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:04:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
h = float(input("altura do tanque: "))
h1 = float(input("nivel de combustivel do tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
x = "Entradas: "
y = "Volumes: "
if(h>0)and(h1>0)and(h>h1)and(r>0)and(h>2*r):
	print(x,h,h1,r)
-- OUTPUT:
Entradas:  11.3 5.7 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:05:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
h = float(input("altura do tanque: "))
h1 = float(input("nivel de combustivel do tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
x = "Entradas: "
y = "Volumes: "
if(h>0)and(h1>0)and(h>h1)and(r>0)and(h>2*r):
	print(x,h,h1,r)
-- OUTPUT:
Entradas:  11.3 5.7 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:11:19) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
h = float(input("altura do tanque: "))
h1 = float(input("nivel de combustivel do tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
x = "Entradas: "
y = "Volumes: "
if(h>0)and(h1>0)and(h>h1)and(r>0)and(h>2*r):
	print(x,h,h1,r)
-- OUTPUT:
Entradas:  11.3 5.7 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:50:01) 
-- CODE:
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel do tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
print("Entradas: ",a,",",h, ",",r)
if(h<0) or(a<=0) or (r<=0):
	print("Entradas invalidas")
elif(h>a)or (2*r>a):
	print("Entradas invalidas")
else:
	if(h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3),"litros")
	elif(h>r) and(h<=a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(h-r)
		v = vse + vc
		print("Volume: ", round(v*1000,3),"litros")
	elif(h>a-r):
		vse = (4*pi*(r**3))/6
		ve = vse - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = vse + vc + ve
		print("Volume: ", round(v*1000,3),"litros")
		
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 11:50:07) 
-- CODE:
from math import*
a = float(input("altura do tanque: "))
h = float(input("nivel de combustivel do tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))
print("Entradas: ",a,",",h, ",",r)
if(h<0) or(a<=0) or (r<=0):
	print("Entradas invalidas")
elif(h>a)or (2*r>a):
	print("Entradas invalidas")
else:
	if(h<=r):
		v = (pi/3)*(h**2)*(3*r - h)
		print("Volume: ", round(v*1000,3),"litros")
	elif(h>r) and(h<=a-r):
		vse = (4*pi*(r**3))/6
		vc = pi*(r**2)*(h-r)
		v = vse + vc
		print("Volume: ", round(v*1000,3),"litros")
	elif(h>a-r):
		vse = (4*pi*(r**3))/6
		ve = vse - ((pi*((a-h)**2)*(3*r-(a-h)))/3)
		v = vse + vc + ve
		print("Volume: ", round(v*1000,3),"litros")
		
-- EXECUTION TIME:
0.151465
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
