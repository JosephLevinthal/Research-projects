== TEST (2019-03-28 10:26:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("digite um valor a"))
var2 = int(input("digite um valor b"))
var3 = int(int("digete um valor c"))
var4 = min(var1, var2, var3)
var5 = max(var1, var2, var3)
print(var1+var2+var3)-(var4+var5)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3 = int(int("digete um valor c"))
ValueError: invalid literal for int() with base 10: 'digete um valor c'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:26:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("digite um valor a"))
var2 = int(input("digite um valor b"))
var3 = int(int("digite um valor c"))
var4 = min(var1, var2, var3)
var5 = max(var1, var2, var3)
print(var1+var2+var3)-(var4+var5)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3 = int(int("digite um valor c"))
ValueError: invalid literal for int() with base 10: 'digite um valor c'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:27:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("digite um valor a"))
var2 = int(input("digite um valor b"))
var3 = int(input("digite um valor c"))
var4 = min(var1, var2, var3)
var5 = max(var1, var2, var3)
print(var1+var2+var3)-(var4+var5)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(var1+var2+var3)-(var4+var5)
TypeError: unsupported operand type(s) for -: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:27:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("digite um valor a"))
var2 = int(input("digite um valor b"))
var3 = int(input("digite um valor c"))
var4 = min(var1, var2, var3)
var5 = max(var1, var2, var3)
print((var1+var2+var3)-(var4+var5))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(var1+var2+var3)-(var4+var5)
TypeError: unsupported operand type(s) for -: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:28:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("digite um valor a"))
var2 = int(input("digite um valor b"))
var3 = int(input("digite um valor c"))
var4 = min(var1, var2, var3)
var5 = max(var1, var2, var3)
print((var1+var2+var3)-(var4+var5))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(var1+var2+var3)-(var4+var5)
TypeError: unsupported operand type(s) for -: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:28:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("digite um valor a"))
var2 = int(input("digite um valor b"))
var3 = int(input("digite um valor c"))
min(var1, var2, var3)
max(var1, var2, var3)
print((var1+var2+var3)-(var4+var5))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print((var1+var2+var3)-(var4+var5))
NameError: name 'var4' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:33:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um valor a: "))
b = int(input("digite um valor b: "))
c = int(input("digite um valor c: "))
print(min(a, b, c), a+b+c,min(a, b, c)-min(a, b, c))

-- OUTPUT:
-2 8 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:34:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um valor a: "))
b = int(input("digite um valor b: "))
c = int(input("digite um valor c: "))
print(min(a, b, c), a+b+c,min(a, b, c)-max(a, b, c), max(a, b, c))

-- OUTPUT:
-2 8 -12 10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:35:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um valor a: "))
b = int(input("digite um valor b: "))
c = int(input("digite um valor c: "))
print(min(a, b, c), a+b+c-min(a, b, c)-max(a, b, c), max(a, b, c))

-- OUTPUT:
-2 0 10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:35:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digite um valor a: "))
b = int(input("digite um valor b: "))
c = int(input("digite um valor c: "))
print(min(a, b, c), a+b+c-min(a, b, c)-max(a, b, c), max(a, b, c))

-- EXECUTION TIME:
0.145298
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2 0 10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
