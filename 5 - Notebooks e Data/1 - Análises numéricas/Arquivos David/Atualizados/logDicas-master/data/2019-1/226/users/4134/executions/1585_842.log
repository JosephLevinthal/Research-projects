== TEST (2019-03-21 23:31:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

print(num1%num1)
-- OUTPUT:
primeiro_caso_de_teste
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:31:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

print(num1//num1)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:31:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

print(num1//num1)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 23:31:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

print(num1//num1)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:22:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = num1/1000

print(x)
-- OUTPUT:
9.173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:22:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = num1/1000

print(round(x, 0)
-- ERROR:
File "XXXX", line 10
    
                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:23:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)

print(round(x)
-- ERROR:
File "XXXX", line 10
    
                  ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:23:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)

print(x)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:23:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
print(x)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:24:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)

print(x)
print(y)
-- OUTPUT:
9
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:24:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
z = int(num1%100)

print(x)
print(y)
-- OUTPUT:
9
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:24:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
z = int(num1%100)

print(x)
print(y)
print(z)
-- OUTPUT:
9
3
73
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:25:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
z = int(y%10)

print(x)
print(y)
print(z)
-- OUTPUT:
9
3
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:25:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
z = int(y%10)

print(x)
print(y)
print(z)
-- OUTPUT:
9
3
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:26:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
k = int(num1/100)
y = int(num1%10)
z = int(k%10)

print(x)
print(y)
print(z)
-- OUTPUT:
9
3
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:27:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
z = int(k%10)
k = int(num1/100)

print(x)
print(y)
print(z)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    z = int(k%10)
NameError: name 'k' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:27:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)



print(x)
print(y)
print(z)
-- OUTPUT:
9
3
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:27:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)



print(x)
print(y)
print(z)
-- OUTPUT:
9
3
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:28:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)
l = int(num1/10)



print(x)
print(y)
print(z)
-- OUTPUT:
9
3
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:28:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)
l = int(num1/10)
j = int(l%10)



print(x)
print(y)
print(z)
-- OUTPUT:
9
3
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:29:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)
l = int(num1/10)
j = int(l%10)



print(x)
print(y)
print(z)
print(j)
-- OUTPUT:
9
3
1
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 13:29:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)
l = int(num1/10)
j = int(l%10)

print(x + y + z +j)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 13:29:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)
l = int(num1/10)
j = int(l%10)

print(x + y + z +j)
-- EXECUTION TIME:
0.125386
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:20:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)
l = int(num1/10)
j = int(l%10)

print(x + y + z +j)
-- EXECUTION TIME:
0.163389
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:20:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)
l = int(num1/10)
j = int(l%10)

print(x + y + z +j)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:27:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1%100)
z = int(k%10)
l = int(num1/10)
j = int(l%10)

print(x + y + z +j)
-- OUTPUT:
22
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:27:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1%100)
z = int(k%10)
l = int(num1/10)
j = int(l%10)

print(x + y + z +j)
-- OUTPUT:
22
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:27:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)
l = int(num1/10)
j = int(l%10)

print(x + y + z +j)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:30:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1%100)
z = int(k/10)
l = int(num1/10)
j = int(l%10)

print(x + y + z +j)
-- OUTPUT:
26
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:32:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1%100)
z = int(k/10)
l = int(num1/10)
j = int(l%10)

print(x + y + z +j)
-- OUTPUT:
26
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:32:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1%100)
z = int(k/10)
l = int(num1/10)
j = int(l%10)

print(x + y + z +j) - 1
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    print(x + y + z +j) - 1
TypeError: unsupported operand type(s) for -: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:33:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1%100)
z = int(k/10)
l = int(num1/10)
j = int(l%10)

print((x + y + z +j)-1)
-- OUTPUT:
25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:33:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1%100)
z = int(k/10)
l = int(num1/10)
j = int(l%10)

print((x + y + z +j)-1)
-- EXECUTION TIME:
0.200325
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
25
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 10:33:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)
l = int(num1/10)
j = int(l%10)

print((x + y + z +j)
-- ERROR:
File "XXXX", line 15
    
                        ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 10:34:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input("Digite os quatro digitos: "))

x = int(num1/1000)
y = int(num1%10)
k = int(num1/100)
z = int(k%10)
l = int(num1/10)
j = int(l%10)

print(x + y + z +j)
-- EXECUTION TIME:
0.182617
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
