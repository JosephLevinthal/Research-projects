== TEST (2019-06-04 11:42:16) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
#while (size(vet) > ):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:42:33) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
#while (size(vet) > ):
   # Zera contador de elementos pares
npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    for elemento in vet:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:43:40) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
#while (size(vet) > ):
   # Zera contador de elementos pares
npar = 0

   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
   	npar = npar + 1

   # No. de elementos pares
print(npar)

   # No. de elementos impares
	#print(???)

   # No. total de elementos
  # print(???)

   # Leitura do proximo vetor
  # vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 14
    npar = npar + 1
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:44:14) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > ???):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == ???):
         npar = npar + 1

   # No. de elementos pares
   print(???)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    while (size(vet) > ???):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:55:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0

# Verifica se o programa vai terminar
while (size(vet) >i ):
   # Zera contador de elementos pares
   npar = 0
	nim=0
	i=i+1
   # Conta quantidade de elementos pares
   for  k in vet:
      if (k % 2 == 0):
         npar = npar + 1
		else:
			nim=nim+1

			
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nim)

   # No. total de elementos
   print(k)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    nim=0
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 11:55:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0
i=0

# Verifica se o programa vai terminar
while (size(vet) >i ):
   # Zera contador de elementos pares
   npar = 0
	nim=0
	i=i+1
   # Conta quantidade de elementos pares
   for  k in vet:
      if (k % 2 == 0):
         npar = npar + 1
		else:
			nim=nim+1

			
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nim)

   # No. total de elementos
   print(k)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    nim=0
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:18:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0


# Verifica se o programa vai terminar
while (size(vet) >1 ):
   # Zera contador de elementos pares
   npar = 0
	nim=0
	
   # Conta quantidade de elementos pares
   for  k in vet:
      if (k % 2 == 0):
         npar = npar + 1
		

			
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    nim=0
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:20:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0


# Verifica se o programa vai terminar
while (size(vet) >1 ):
   # Zera contador de elementos pares
   npar = 0
	nim=0
	
   # Conta quantidade de elementos pares
   for  k in vet:
      if (k % 2 == 0):
         npar = npar + 1
		

			
   # No. de elementos pares
		print(npar)

   # No. de elementos impares
   	print(size(vet)-npar)

   # No. total de elementos
   	print(size(vet))

   # Leitura do proximo vetor
   	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    nim=0
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:21:29) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0


# Verifica se o programa vai terminar
while (size(vet) >1 ):
   # Zera contador de elementos pares
   npar = 0
	
	
   # Conta quantidade de elementos pares
   for  k in vet:
      if (k % 2 == 0):
         npar = npar + 1
		

			
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 22
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:21:56) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar=0


# Verifica se o programa vai terminar
while (size(vet) >1 ):
   # Zera contador de elementos pares
   npar = 0
	
	
   # Conta quantidade de elementos pares
   for  k in vet:
      if (k % 2 == 0):
         npar = npar + 1
		

			
   # No. de elementos pares
		print(npar)

   # No. de elementos impares
   	print(size(vet)-npar)

   # No. total de elementos
   	print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 22
    print(npar)
              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:24:32) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))



# Verifica se o programa vai terminar
while (size(vet) >1 ):
   # Zera contador de elementos pares
   npar = 0
	
	
   # Conta quantidade de elementos pares
   for  k in vet:
      if (k % 2 == 0):
         npar = npar + 1
		

			
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 22
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:26:10) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))




# Verifica se o programa vai terminar
while (size(vet) >1 ):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
	for  k in vet:
   	if (k % 2 == 0):
      	npar = npar + 1
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet)-npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 14
    for  k in vet:
                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:26:48) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))




# Verifica se o programa vai terminar
while (size(vet) >1 ):
   # Zera contador de elementos pares
	npar = 0
   # Conta quantidade de elementos pares
	for  k in vet:
   	if (k % 2 == 0):
      	npar = npar + 1
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet)-npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    if (k % 2 == 0):
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:06) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))




# Verifica se o programa vai terminar
while (size(vet) >1 ):
   # Zera contador de elementos pares
	npar = 0
   # Conta quantidade de elementos pares
	for  k in vet:
   	if(k % 2 == 0):
      	npar = npar + 1
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet)-npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    if(k % 2 == 0):
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:25) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))




# Verifica se o programa vai terminar
while (size(vet) >1 ):
   # Zera contador de elementos pares
	npar = 0
   # Conta quantidade de elementos pares
	for  k in vet:
   	if(k % 2 == 0):
			npar = npar + 1
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet)-npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    if(k % 2 == 0):
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:27:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))




# Verifica se o programa vai terminar
while(size(vet) >1 ):
   # Zera contador de elementos pares
	npar = 0
   # Conta quantidade de elementos pares
	for k in vet:
   	if(k % 2 == 0):
			npar = npar + 1
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet)-npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    if(k % 2 == 0):
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 10:28:34) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))




# Verifica se o programa vai terminar
while(size(vet) >1 ):
   # Zera contador de elementos pares
	npar = 0
   # Conta quantidade de elementos pares
	for k in vet:
		if(k % 2 == 0):
			npar = npar + 1
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet)-npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 10:29:10) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))




# Verifica se o programa vai terminar
while(size(vet) >1 ):
   # Zera contador de elementos pares
	npar = 0
   # Conta quantidade de elementos pares
	for k in vet:
		if(k % 2 == 0):
			npar = npar + 1
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(size(vet)-npar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.0371
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
