== TEST (2019-04-25 10:44:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	# Testa se medidas correspondem aas de um triangulo
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if(a==b and b == c):
		print(x, "equilatero")
			else:
				if(a==b or b==c or a ==c):
					print(x, "isosceles")
					else:
						print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 18
    print(x, "equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:45:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	# Testa se medidas correspondem aas de um triangulo
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if(a==b and b == c):
		print(x, "equilatero")
			else:
				if(a==b or b==c or a ==c):
				print(x, "isosceles")
					else:
					print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 18
    print(x, "equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:45:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	# Testa se medidas correspondem aas de um triangulo
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
		print(x, "equilatero")
			else:
				if(a==b or b==c or a ==c):
				print(x, "isosceles")
					else:
					print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 18
    print(x, "equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:46:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	# Testa se medidas correspondem aas de um triangulo
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
		print(x, "equilatero")
			else:
				if(a==b or b==c or a ==c):
				print(x, "isosceles")
					else:
					print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 18
    print(x, "equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:47:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	# Testa se medidas correspondem aas de um triangulo
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
		print(x, "equilatero")
			else:
				if(a==b or b==c or a ==c):
				print(x, "isosceles")
					else:
					print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 18
    print(x, "equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:48:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	# Testa se medidas correspondem aas de um triangulo
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
			else:
				if(a==b or b==c or a ==c):
					print(x, "isosceles")
					else:
						print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 19
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:48:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	# Testa se medidas correspondem aas de um triangulo
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
				else:
					if(a==b or b==c or a ==c):
					print(x, "isosceles")
						else:
						print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 19
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:48:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	# Testa se medidas correspondem aas de um triangulo
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b or b==c or a ==c):
					print(x, "isosceles")
				else:
						print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:51:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	# Testa se medidas correspondem aas de um triangulo
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
				else:
					if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:52:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	# Testa se medidas correspondem aas de um triangulo
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
				else:
					if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:53:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	# Testa se medidas correspondem aas de um triangulo
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
				else:
					if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:55:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 , b > 0 , c > 0 ):
	else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
				else:
					if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	
-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:57:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 ):
	print(x, "invalido")
	
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
				else:
					if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:58:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 ):
	
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
				else:
					if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:58:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 ):
	
	if (a < b+c and b < a+c and c < a+b):
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
				else:
					if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:59:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a < b+c and b < a+c and c < a+b ):
	
	
		print(x, "invalido")
	else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
				else:
					if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:59:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a < b+c and b < a+c and c < a+b ):
	
	
	print(x, "invalido")
		else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
				else:
					if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 16
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:59:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a < b+c and b < a+c and c < a+b ):
	print(x, "invalido")
		else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
				else:
					if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 14
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:01:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a < b+c and b < a+c and c < a+b ):
	print(x, "invalido")
		else:
		if((a==b) and (b == c)):
			print(x, "equilatero")
		else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
				else:
					if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 14
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:02:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a < b+c and b < a+c and c < a+b ):
	print(x, "invalido")
		else:
			if((a==b) and (b == c)):
				print(x, "equilatero")
			else:
				if(a==b and b!=c or b==c and a!=c):
					print(x, "isosceles")
					
				else:
						if(a != b and b!=c and a!=c):
						print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 14
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:03:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a < b+c and b < a+c and c < a+b ):
	print(x, "invalido")
else:
	if((a==b) and (b == c)):
		print(x, "equilatero")
	else:
		if(a==b and b!=c or b==c and a!=c):
			print(x, "isosceles")
					
			else:
				if(a != b and b!=c and a!=c):
					print(x, "escaleno")
		
-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:03:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a < b+c and b < a+c and c < a+b ):
	print(x, "invalido")
else:
	if((a==b) and (b == c)):
		print(x, "equilatero")
	else:
		if(a==b and b!=c or b==c and a!=c):
			print(x, "isosceles")
					
		else:
			if(a != b and b!=c and a!=c):
				print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:03:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a < b+c and b < a+c and c < a+b ):
	print(x, "invalido")
else:
	if((a==b) and (b == c)):
		print(x, "equilatero")
	else:
		if(a==b and b!=c or b==c and a!=c):
			print(x, "isosceles")
					
		else:
			if(a != b and b!=c and a!=c):
				print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:04:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 , a < b+c or b < a+c or c < a+b ):
	print(x, "invalido")
else:
	if((a==b) and (b == c)):
		print(x, "equilatero")
	else:
		if(a==b and b!=c or b==c and a!=c):
			print(x, "isosceles")
					
		else:
			if(a != b and b!=c and a!=c):
				print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:04:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 and a < b+c or b < a+c or c < a+b ):
	print(x, "invalido")
else:
	if((a==b) and (b == c)):
		print(x, "equilatero")
	else:
		if(a==b and b!=c or b==c and a!=c):
			print(x, "isosceles")
					
		else:
			if(a != b and b!=c and a!=c):
				print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:05:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 and a < b+c or b < a+c or c < a+b ):
	print(x, "invalido")
else:
	if((a==b) and (b == c)):
		print(x, "equilatero")
	else:
		if(a==b and b!=c or b==c and a!=c):
			print(x, "isosceles")
					
		else:
			if(a != b and b!=c and a!=c):
				print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:06:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 and a > b+c or b > a+c or c > a+b ):
	print(x, "invalido")
else:
	if((a==b) and (b == c)):
		print(x, "equilatero")
	else:
		if(a==b and b!=c or b==c and a!=c):
			print(x, "isosceles")
					
		else:
			if(a != b and b!=c and a!=c):
				print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:09:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a >= b+c or b >= a+c or c >= a+b ):
	print(x, "invalido")
else:
	if((a==b) and (b == c)):
		print(x, "equilatero")
	else:
		if(a==b and b!=c or b==c and a!=c):
			print(x, "isosceles")
					
		else:
			if(a != b or b!=c ):
				print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:09:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a >= b+c or b >= a+c or c >= a+b ):
	print(x, "invalido")
else:
	if((a==b) and (b == c)):
		print(x, "equilatero")
	else:
		if(a==b and b!=c or b==c and a!=c):
			print(x, "isosceles")
					
		else:
			if(a != b or b!=c ):
				print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 11:09:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a >= b+c or b >= a+c or c >= a+b ):
	print(x, "invalido")
else:
	if((a==b) and (b == c)):
		print(x, "equilatero")
	else:
		if(a==b and b!=c or b==c and a!=c):
			print(x, "isosceles")
					
		else:
			if(a != b or b!=c ):
				print(x, "escaleno")
		
-- EXECUTION TIME:
0.177178
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:09:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 , b < 0 , c < 0 or a >= b+c or b >= a+c or c >= a+b ):
	print(x, "invalido")
else:
	if((a==b) and (b == c)):
		print(x, "equilatero")
	else:
		if(a==b and b!=c or b==c and a!=c):
			print(x, "isosceles")
					
		else:
			if(a != b or b!=c ):
				print(x, "escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:08:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < b+c and b < a+c and c < a+b ):
	if(a == b and b ==c):
		print("Tipo de triangulo: equilatero")
	elif(a == b and b != c or b == c and b !=a):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	("Tipo de triangulo: invalido")
		
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:08:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < b+c and b < a+c and c < a+b ):
	if(a == b and b ==c):
		print("Tipo de triangulo: equilatero")
	elif(a == b and b != c or b == c and b !=a):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	("Tipo de triangulo: invalido")
		
		
-- EXECUTION TIME:
0.215852
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:08:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < b+c and b < a+c and c < a+b ):
	if(a == b and b ==c):
		print("Tipo de triangulo: equilatero")
	elif(a == b and b != c or b == c and b !=a):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	("Tipo de triangulo: invalido")
		
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:08:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
x = ("Tipo de triangulo: ")
print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a < b+c and b < a+c and c < a+b ):
	if(a == b and b ==c):
		print("Tipo de triangulo: equilatero")
	elif(a == b and b != c or b == c and b !=a):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
		
-- EXECUTION TIME:
0.163858
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
