== TEST (2019-03-21 12:24:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
valores = int(input("Escreva os n√∫meros:"))
min(valores)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    min(valores)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:25:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
valores = int(input("Escreva os numeros:"))
min(valores)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    min(valores)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:25:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
valores = int(input("Escreva os numeros:"))
min(valores)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    min(valores)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:25:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
valores = int(input("Escreva os numeros:"))
min(valores)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    min(valores)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:27:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
valores = int(input("Escreva o primeiro numero:"))
valores1 = int(input("Escreva o segundo numero:"))
valores2 = int(input("Escreva o terceiro numero:"))
min(valores, valores1, valores2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    min(valores)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:27:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("Escreva o primeiro numero:"))
b = int(input("Escreva o segundo numero:"))
c = int(input("Escreva o terceiro numero:"))
min(a, b, c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    min(valores)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:28:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("Escreva o primeiro numero:"))
b = int(input("Escreva o segundo numero:"))
c = int(input("Escreva o terceiro numero:"))
print(min(a, b, c))
-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:29:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("Escreva o primeiro numero:"))
b = int(input("Escreva o segundo numero:"))
c = int(input("Escreva o terceiro numero:"))
mini = print(min(a, b, c))
maxi = print(max(a, b ,c))
print((a+b+c)+(-mini-maxi))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print((a+b+c)+(-mini-maxi))
TypeError: bad operand type for unary -: 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:30:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("Escreva o primeiro numero:"))
b = int(input("Escreva o segundo numero:"))
c = int(input("Escreva o terceiro numero:"))
mini = print(min(a, b, c))
maxi = print(max(a, b ,c))
print(a+b+c)

-- OUTPUT:
-2
10
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:32:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("Escreva o primeiro numero:"))
b = int(input("Escreva o segundo numero:"))
c = int(input("Escreva o terceiro numero:"))
mini = min(a, b, c)
maxi = max(a, b ,c)
inte = (a+b+c - mini - maxi)
print(mini)
print(inte)
print(maxi)
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 12:32:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("Escreva o primeiro numero:"))
b = int(input("Escreva o segundo numero:"))
c = int(input("Escreva o terceiro numero:"))
mini = min(a, b, c)
maxi = max(a, b ,c)
inte = (a+b+c - mini - maxi)
print(mini)
print(inte)
print(maxi)
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 12:32:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("Escreva o primeiro numero:"))
b = int(input("Escreva o segundo numero:"))
c = int(input("Escreva o terceiro numero:"))
mini = min(a, b, c)
maxi = max(a, b ,c)
inte = (a+b+c - mini - maxi)
print(mini)
print(inte)
print(maxi)
-- EXECUTION TIME:
0.170995
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
