== TEST (2019-04-25 10:39:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a + b , c):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b == c and a == b != c):
		
		print("equilatero")
	else:
		print("escaleno")
else:
	print("isosceles")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:39:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a + b , c):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b == c and a == b != c):
		
		print("equilatero")
	else:
		print("escaleno")
else:
	print("isosceles")

-- EXECUTION TIME:
0.150589
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:39:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a + b , c):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b == c and a == b != c):
		
		print("equilatero")
	else:
		print("escaleno")
else:
	print("isosceles")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:39:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a + b , c):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b == c and a == b != c):
		
		print("equilatero")
	else:
		print("escaleno")
else:
	print("isosceles")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a + b , c):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b == c):
		
		print("equilatero")
	else:
		print("escaleno")
else:
	print("isosceles")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a + b , c):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b == c):
		
		print("equilatero")
	else:
		print("escaleno")
else:
	print("isosceles")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:40:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a + b , c):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b == c):
		
		print("equilatero")
	else:
		print("escaleno")
else:
	print("isosceles")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:42:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b) and (b == c):
		
		print("equilatero")
	else:
		print("escaleno")
else:
	print("isosceles")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:42:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b) and (b == c):
		
		print("equilatero")
	else:
		print("escaleno")
else:
	print("isosceles")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 10:42:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b) and (b == c):
		
		print("equilatero")
	else:
		print("escaleno")
else:
	print("isosceles")

-- EXECUTION TIME:
0.160837
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b) and (b == c):
		
		print("equilatero")
	else:
		print("escaleno")
		
	if (a = b) and (b != c):	
	print("isosceles")

-- ERROR:
File "XXXX", line 23
    if (a = b) and (b != c):	
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b) and (b == c):
		
		print("equilatero")
	else:
		print("escaleno")
		
	if ((a = b) and (b != c):)	
	print("isosceles")

-- ERROR:
File "XXXX", line 23
    if ((a = b) and (b != c):)	
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b) and (b == c):
		
		print("equilatero")
	else:
		print("escaleno")
		
	if ((a = b) and (b != c)):
	print("isosceles")

-- ERROR:
File "XXXX", line 23
    if ((a = b) and (b != c)):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:43:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b) and (b == c):
		
		print("equilatero")
	else:
		print("escaleno")
		
	if (a=b and b != c):
		
	print("isosceles")

-- ERROR:
File "XXXX", line 23
    if (a=b and b != c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:58:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a >= b and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b) and (b == c):
		
		print("equilatero")
	else:
		print("escaleno")
		
	if (a==b and b != c):
		
	print("isosceles")

-- ERROR:
File "XXXX", line 25
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 10:58:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a >= b and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (a == b) and (b == c):
		
		print("equilatero")
	else:
		print("escaleno")
		
	if (a==b and b != c):
		
print("isosceles")

-- ERROR:
File "XXXX", line 25
    print("isosceles")
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 11:03:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 b and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ( a == b) and (b != c):
		
		print("equilatero")
	else:
		print("escaleno")
		
	if (a==b and b != c):
		
	print("isosceles")

-- ERROR:
File "XXXX", line 15
    if (a > 0 b and b > 0 and c > 0):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:34:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("equilatero")
	else:
		print("isosceles")
else:
	print("escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:35:03) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("equilatero")
	else:
		print("isosceles")
else:
	print("escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 14:35:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("equilatero")
	else:
		print("isosceles")
else:
	print("escaleno")

-- EXECUTION TIME:
0.171867
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
equilatero
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:35:20) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("equilatero")
	else:
		print("isosceles")
else:
	print("escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:35:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("equilatero")
	else:
		print("isosceles")
	else:
		print("escaleno")

-- ERROR:
File "XXXX", line 19
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:36:00) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("equilatero")
	else:
		print("isosceles")
else:
		print("escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:36:05) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("equilatero")
	else:
		print("isosceles")
else:
		print("escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:36:29) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("isosceles")
	else:
print("isosceles")
else:
print("escaleno")

-- ERROR:
File "XXXX", line 18
    print("isosceles")
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:36:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("isosceles")
	else:
	print("isosceles")
else:
print("escaleno")

-- ERROR:
File "XXXX", line 18
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:36:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("isosceles")
	else:
	print("isosceles")
else:
print("escaleno")

-- ERROR:
File "XXXX", line 18
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:36:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("isosceles")
	else:
		print("isosceles")
else:
print("escaleno")

-- ERROR:
File "XXXX", line 20
    print("escaleno")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:36:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("isosceles")
	else:
		print("isosceles")
else:
	print("escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:36:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		print("equilatero")
	else:
		print("isosceles")
else:
	print("escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:58:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		if (a==b and b==c):
		print("Tipo de triangulo:","equilatero")
		elif(a==b and b!=c):
			print("Tipo de triangulo:","isosceles")
			elif(a!=b and b!=c and c!=a):
				print("Tipo de triangulo:","escaleno")
-- ERROR:
File "XXXX", line 17
    print("Tipo de triangulo:","equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:58:57) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		if (a==b and b==c):
		print("Tipo de triangulo:", "equilatero")
		elif(a==b and b!=c):
			print("Tipo de triangulo:", "isosceles")
			elif(a!=b and b!=c and c!=a):
				print("Tipo de triangulo:", "escaleno")
-- ERROR:
File "XXXX", line 17
    print("Tipo de triangulo:", "equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:59:49) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		if (a==b and b==c):
		print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
			print("Tipo de triangulo:", "isosceles")
			elif(a!=b and b!=c and c!=a):
				print("Tipo de triangulo:", "escaleno")
-- ERROR:
File "XXXX", line 17
    print("Tipo de triangulo:", "equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:00:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
			print("Tipo de triangulo:", "isosceles")
			elif(a!=b and b!=c and c!=a):
				print("Tipo de triangulo:", "escaleno")
-- ERROR:
File "XXXX", line 21
    elif(a!=b and b!=c and c!=a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:00:38) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
			elif(a!=b and b!=c and c!=a):
					print("Tipo de triangulo:", "escaleno")
-- ERROR:
File "XXXX", line 21
    elif(a!=b and b!=c and c!=a):
                                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:00:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
		elif(a!=b and b!=c and c!=a):
					print("Tipo de triangulo:", "escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:00:56) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
		elif(a!=b and b!=c and c!=a):
					print("Tipo de triangulo:", "escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:01:01) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
		elif(a!=b and b!=c and c!=a):
					print("Tipo de triangulo:", "escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:02:45) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
		elif(a!=b and b!=c and c!=a):
					print("Tipo de triangulo:", "escaleno")
		else:
			print("Tipo de triangulo:", "invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 15:02:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a==b)and(b==c) or (a==b)and(b!=c) or (a!=b!=c)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
		elif(a!=b and b!=c and c!=a):
					print("Tipo de triangulo:", "escaleno")
		else:
			print("Tipo de triangulo:", "invalido")
-- EXECUTION TIME:
0.28916
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:03:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a<(b+c) and b<(a+c) and c<(a+b)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
		elif(a!=b and b!=c and c!=a):
					print("Tipo de triangulo:", "escaleno")
		else:
			print("Tipo de triangulo:", "invalido")
-- ERROR:
File "XXXX", line 15
    if ((a<(b+c) and b<(a+c) and c<(a+b)):
                                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:05:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a < b+c) and (b < a+c) and (c < a+b)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
		elif(a!=b and b!=c and c!=a):
					print("Tipo de triangulo:", "escaleno")
		else:
			print("Tipo de triangulo:", "invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:05:14) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a < b+c) and (b < a+c) and (c < a+b)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
		elif(a!=b and b!=c and c!=a):
					print("Tipo de triangulo:", "escaleno")
		else:
			print("Tipo de triangulo:", "invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:06:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a < b+c) and (b < a+c) and (c < a+b)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
		elif(a!=b and b!=c and c!=a):
					print("Tipo de triangulo:", "escaleno")
		elif (a<=0 or b<=0 or c<=0):
			print("Tipo de triangulo:", "invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 15:07:01) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a < b+c) and (b < a+c) and (c < a+b)):
		if (a==b and b==c):
			
			print("Tipo de triangulo:", "equilatero")
		elif(a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
		elif(a!=b and b!=c and c!=a):
					print("Tipo de triangulo:", "escaleno")
		elif (a<=0 or b<=0 or c<=0):
			print("Tipo de triangulo:", "invalido")
-- EXECUTION TIME:
0.158173
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:11:22) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a< b+c) and (b< c+a) and (c<a+b)):
		if((a==b) and (b==c)):
			print("Tipo de triangulo:", "equilatero")
		elif (a==b or b==c or c==a):
			print("Tipo de triangulo:", "isosceles")
		else:
			print("Tipo de triangulo:", "escaleno")
			
	else: print("Tipo de triangulo:", "invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:24:13) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
		if ((a< b+c) and (b< c+a) and (c<a+b)):
			if((a==b) and (b==c)):
				print("Tipo de triangulo:", "equilatero")
			elif (a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
			else:
				print("Tipo de triangulo:", "escaleno")
				
		else: 
			print("Tipo de triangulo:", "invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:24:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
		if ((a< b+c) and (b< c+a) and (c<a+b)):
			if((a==b) and (b==c)):
				print("Tipo de triangulo:", "equilatero")
			elif (a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
			else:
				print("Tipo de triangulo:", "escaleno")
				
		else: 
			print("Tipo de triangulo:", "invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:24:20) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
		if ((a< b+c) and (b< c+a) and (c<a+b)):
			if((a==b) and (b==c)):
				print("Tipo de triangulo:", "equilatero")
			elif (a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
			else:
				print("Tipo de triangulo:", "escaleno")
				
		else: 
			print("Tipo de triangulo:", "invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 15:24:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
		if ((a< b+c) and (b< c+a) and (c<a+b)):
			if((a==b) and (b==c)):
				print("Tipo de triangulo:", "equilatero")
			elif (a==b or b==c or c==a):
				print("Tipo de triangulo:", "isosceles")
			else:
				print("Tipo de triangulo:", "escaleno")
				
		else: 
			print("Tipo de triangulo:", "invalido")

-- EXECUTION TIME:
0.142759
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
