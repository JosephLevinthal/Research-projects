== TEST (2019-05-02 11:10:43) 
-- CODE:
d1 = int(input("dado 1: "))
d2 = int(input("dado 2: "))
r = int(input("numero de rodadas: "))	

c = d1 + d2 +1
p = (d1+d2+1)*r
f = (d1*d2)

if (d1+d2==12):
	print("CONSTRICAO")
	print(c)
-- OUTPUT:
23.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:15:19) 
-- CODE:
d1 = int(input("dado 1: "))
d2 = int(input("dado 2: "))
r = int(input("numero de rodadas: "))	

c = d1 + d2 +1
p = (d1+d2+1)*r
f = (d1*d2)

if(d1<=6 and d2<=6):
	if(d1+d2==12):
		print("CONSTRICAO")
		print(c)
	elif((d2+d1)<5):
		print("POLEN")
		print(p)
-- OUTPUT:
23.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:17:40) 
-- CODE:
d1 = int(input("dado 1: "))
d2 = int(input("dado 2: "))
r = int(input("numero de rodadas: "))	

c = d1 + d2 +1
p = (d1+d2+1)*r
f = (d1*d2)

if(d1<=6 and d2<=6):
	if(d1+d2==12):
		print("CONSTRICAO")
		print(c)
	elif((d2+d1)<5):
		print("POLEN")
		print(p)
	else:
		print("FRAQUEZA")
		print(f)
else:
	print("Entrada invalida")
-- OUTPUT:
FRAQUEZA
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:17:53) 
-- CODE:
d1 = int(input("dado 1: "))
d2 = int(input("dado 2: "))
r = int(input("numero de rodadas: "))	

c = d1 + d2 +1
p = (d1+d2+1)*r
f = (d1*d2)

if(d1<=6 and d2<=6):
	if(d1+d2==12):
		print("CONSTRICAO")
		print(c)
	elif((d2+d1)<5):
		print("POLEN")
		print(p)
	else:
		print("FRAQUEZA")
		print(f)
else:
	print("Entrada invalida")
-- OUTPUT:
FRAQUEZA
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 11:18:00) 
-- CODE:
d1 = int(input("dado 1: "))
d2 = int(input("dado 2: "))
r = int(input("numero de rodadas: "))	

c = d1 + d2 +1
p = (d1+d2+1)*r
f = (d1*d2)

if(d1<=6 and d2<=6):
	if(d1+d2==12):
		print("CONSTRICAO")
		print(c)
	elif((d2+d1)<5):
		print("POLEN")
		print(p)
	else:
		print("FRAQUEZA")
		print(f)
else:
	print("Entrada invalida")
-- EXECUTION TIME:
0.12719
-- TEST CASE 1:
---- input:
5
3
8
---- correct output:
FRAQUEZA
15
---- user output:
FRAQUEZA
15
-- TEST CASE 2:
---- input:
7
8
5
---- correct output:
Entrada invalida
---- user output:
Entrada invalida
-- TEST CASE 3:
---- input:
1
1
9
---- correct output:
POLEN
27
---- user output:
POLEN
27
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
