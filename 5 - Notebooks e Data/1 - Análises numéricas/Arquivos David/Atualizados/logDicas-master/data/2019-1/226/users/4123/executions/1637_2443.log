== SUBMITION (2019-04-05 19:41:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input())
x = float(input())
n = input()
if n == "1":
	V = pi*x**2*(3*r-x)/3
else:
	V = 4*pi*r**3/3 - pi*x**2*(3*r-x)/3
print(round(x, 4))

-- EXECUTION TIME:
0.21625
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
0.95
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
1.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:42:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input())
x = float(input())
n = input()
if n == "1":
	V = pi*x**2*(3*r-x)/3
else:
	V = 4*pi*r**3/3 - pi*x**2*(3*r-x)/3
print(round(x, 4))

-- OUTPUT:
0.95
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 19:43:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input())
x = float(input())
n = input()
if n == "1":
	V = pi*(x**2)*(3*r-x)/3
else:
	V = 4*pi*(r**3)/3 - pi*(x**2)*(3*r-x)/3
print(round(V, 4))

-- EXECUTION TIME:
0.180514
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
