== SUBMITION (2019-04-04 13:32:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vl = float(input("velocidade inicial: "))
an = radians(float(input("angulo alpha: ")))
dis = float(input("distancia percorrida: "))
r = (vl**2) * sin(2*an)/ 9.8
if(abs(r - dis) <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.134791
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:32:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vl = float(input("velocidade inicial: "))
an = radians(float(input("angulo alpha: ")))
dis = float(input("distancia percorrida: "))
r = (vl**2) * sin(2*an)/ 9.8
if(abs(r - dis) <= 0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 13:32:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vl = float(input("velocidade inicial: "))
an = radians(float(input("angulo alpha: ")))
dis = float(input("distancia percorrida: "))
r = (vl**2) * sin(2*an)/ 9.8
if(abs(r - dis) <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.0880811
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:32:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vl = float(input("velocidade inicial: "))
an = radians(float(input("angulo alpha: ")))
dis = float(input("distancia percorrida: "))
r = (vl**2) * sin(2*an)/ 9.8
if(abs(r - dis) <= 0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 12:51:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vl = float(input("velocidade inicial: "))
an = radians(float(input("angulo alpha: ")))
dis = float(input("distancia percorrida: "))
r = (vl**2) * sin(2*an)/ 9.8
if(abs(r - dis) <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.195126
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 12:54:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vl = float(input("velocidade inicial: "))
an = radians(float(input("angulo alpha: ")))
dis = float(input("distancia percorrida: "))
r = (vl**2) * sin(2*an)/ 9.8
if(abs(r - dis) <= 0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 11:11:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vl = float(input("velocidade inicial: "))
an = radians(float(input("angulo alpha: ")))
dis = float(input("distancia percorrida: "))
r = (vl**2) * sin(2*an)/ 9.8
if(abs(r - dis) <= 0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
